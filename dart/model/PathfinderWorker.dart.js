// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.7.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
{
}
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
      return new H.MappedIterable(iterable, $function, [$S, $T]);
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
      _.$ti = t3;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getType: function(index) {
      return init.types[H.intTypeCheck(index)];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var match, decimalMatch;
      if (typeof source !== "string")
        H.throwExpression(H.argumentErrorValue(source));
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = H.stringTypeCheck(match[3]);
      if (decimalMatch != null)
        return parseInt(source, 10);
      if (match[2] != null)
        return parseInt(source, 16);
      return;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectClassName(object) + H._joinArguments(H.getRuntimeTypeInfo(object), 0, null);
    },
    Primitives__objectClassName: function(object) {
      var interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName,
        interceptor = J.getInterceptor$(object),
        interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = C.C_JS_CONST(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, _s5_ = "index";
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, _s5_, null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (index < 0 || index >= $length)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = H.quoteStringForRegExp(message.replace(String({}), '$receiver$'));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], [P.String]);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    NullError$: function(_message, match) {
      return new H.NullError(_message, match == null ? null : match.method);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2, _null = null,
        t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, _null, _null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, signatureFunction, applyTrampoline, i, stub, stubCallName, _null = null,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(_null, _null, _null, _null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      signatureFunction = H.Closure__computeSignatureFunctionLegacy(reflectionInfo, isStatic, isIntercepted);
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure__computeSignatureFunctionLegacy: function(functionType, isStatic, isIntercepted) {
      var getReceiver;
      if (typeof functionType == "number")
        return function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, functionType);
      if (typeof functionType == "function")
        if (isStatic)
          return functionType;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          return function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(functionType, getReceiver);
        }
      throw H.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t2, stubName, arity, lookedUpFunction, t3, t4, $arguments,
        t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null)
        t1 = $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self");
      t2 = $.BoundClosure_receiverFieldNameCache;
      if (t2 == null)
        t2 = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t3 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t4 = !t3 || arity >= 28;
      if (t4)
        return H.Closure_cspForwardInterceptedCall(arity, !t3, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, applyTrampolineIndex, reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure._receiver;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    stringTypeCast: function(value) {
      if (typeof value === "string" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    boolTypeCast: function(value) {
      if (typeof value === "boolean" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    intTypeCast: function(value) {
      if (typeof value === "number" && Math.floor(value) === value || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    propertyTypeCastError: function(value, property) {
      throw H.wrapException(H.CastErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listSuperNativeTypeCast: function(value, property) {
      var t1 = J.getInterceptor$(value);
      if (!!t1.$isList || value == null)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeCastError(value, property);
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return init.types[H.intTypeCheck(signature)];
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(value));
      if (functionTypeObject == null)
        return false;
      return H._isFunctionSubtype(functionTypeObject, null, functionTypeRti, null);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if ($._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.functionTypeTest(value, functionTypeRti))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      if (o != null && !H.checkSubtypeOfRuntimeType(o, futureOrRti))
        H.throwExpression(H.TypeErrorImplementation$(o, H.runtimeTypeToString(futureOrRti)));
      return o;
    },
    TypeErrorImplementation$: function(value, type) {
      return new H.TypeErrorImplementation("TypeError: " + P.Error_safeToString(value) + ": type '" + H.S(H._typeDescription(value)) + "' is not a subtype of type '" + type + "'");
    },
    CastErrorImplementation$: function(value, type) {
      return new H.CastErrorImplementation("CastError: " + P.Error_safeToString(value) + ": type '" + H.S(H._typeDescription(value)) + "' is not a subtype of type '" + type + "'");
    },
    _typeDescription: function(value) {
      var functionTypeObject,
        t1 = J.getInterceptor$(value);
      if (!!t1.$isClosure) {
        functionTypeObject = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    assertThrow: function(message) {
      throw H.wrapException(new H._AssertionError(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(staticName));
    },
    RuntimeError$: function(message) {
      return new H.RuntimeError(message);
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments = H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments = H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti) {
      return H._runtimeTypeToString(rti, null);
    },
    _runtimeTypeToString: function(rti, genericContext) {
      var t1, t2;
      if (rti == null)
        return "dynamic";
      if (rti === -1)
        return "void";
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return H.unminifyOrTag(rti[0].name) + H._joinArguments(rti, 1, genericContext);
      if (typeof rti == "function")
        return H.unminifyOrTag(rti.name);
      if (rti === -2)
        return "dynamic";
      if (typeof rti === "number") {
        H.intTypeCheck(rti);
        if (genericContext == null || rti < 0 || rti >= genericContext.length)
          return "unexpected-generic-index:" + rti;
        t1 = genericContext.length;
        t2 = t1 - rti - 1;
        if (t2 < 0 || t2 >= t1)
          return H.ioore(genericContext, t2);
        return H.S(genericContext[t2]);
      }
      if ('func' in rti)
        return H._functionRtiToString(rti, genericContext);
      if ('futureOr' in rti)
        return "FutureOr<" + H._runtimeTypeToString("type" in rti ? rti.type : null, genericContext) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, genericContext) {
      var boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, t1, t2, boundRti, returnTypeText, $arguments, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t3, _s2_ = ", ";
      if ("bounds" in rti) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], [P.String]);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i0));
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = _s2_) {
          typeParameters += typeSep;
          t1 = genericContext.length;
          t2 = t1 - i0 - 1;
          if (t2 < 0)
            return H.ioore(genericContext, t2);
          typeParameters = C.JSString_methods.$add(typeParameters, genericContext[t2]);
          boundRti = boundsRti[i0];
          if (boundRti != null && boundRti !== P.Object)
            typeParameters += " extends " + H._runtimeTypeToString(boundRti, genericContext);
        }
        typeParameters += ">";
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
      if ("args" in rti) {
        $arguments = rti.args;
        for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = _s2_) {
          argument = $arguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
      } else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText += sep + "[";
        for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = _s2_) {
          argument = optionalArguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
        argumentsText += "]";
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText += sep + "{";
        for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = _s2_) {
          t3 = H.stringTypeCheck(t1[_i]);
          argumentsText = argumentsText + sep + H._runtimeTypeToString(namedArguments[t3], genericContext) + (" " + H.S(t3));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return typeParameters + "(" + argumentsText + ") => " + returnTypeText;
    },
    _joinArguments: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, separator = "", allDynamic = true, t1 = ""; index < types.length; ++index, separator = ", ") {
        buffer._contents = t1 + separator;
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H._runtimeTypeToString(argument, genericContext);
      }
      return "<" + buffer.toString$0(0) + ">";
    },
    getRti: function(o) {
      var functionRti, type, rti,
        t1 = J.getInterceptor$(o);
      if (!!t1.$isClosure) {
        functionRti = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionRti != null)
          return functionRti;
      }
      type = t1.constructor;
      if (typeof o != "object")
        return type;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return type;
    },
    getRuntimeType: function(object) {
      return new H.TypeImpl(H.getRti(object));
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), null, checks, null);
    },
    assertSubtype: function(object, isField, checks, asField) {
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    areSubtypes: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = t.length;
        for (i = 0; i < len; ++i)
          if (!H._isSubtype(null, null, t[i], tEnv))
            return false;
        return true;
      }
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H._isSubtype(s[i], sEnv, t[i], tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.substitute(J.getInterceptor$(context)["$as" + H.S(contextName)], H.getRuntimeTypeInfo(context)));
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (typeof type === "number")
        return false;
      if ('futureOr' in type) {
        typeArgument = "type" in type ? type.type : null;
        return type == null || type.name === "Object" || type.name === "Null" || type === -1 || type === -2 || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var type, rti;
      if (o == null)
        return t == null || t.name === "Object" || t.name === "Null" || t === -1 || t === -2 || H.isSupertypeOfNullRecursive(t);
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (typeof t == "object") {
        if ('futureOr' in t)
          if (H.checkSubtypeOfRuntimeType(o, "type" in t ? t.type : null))
            return true;
        if ('func' in t)
          return H.functionTypeTest(o, t);
      }
      type = J.getInterceptor$(o).constructor;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return H._isSubtype(type, null, t, null);
    },
    subtypeOfRuntimeTypeCast: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.CastErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    _isSubtype: function(s, sEnv, t, tEnv) {
      var t1, typeOfS, tTypeArgument, futureSubstitution, futureArguments, t2, typeOfT, typeOfTString, substitution, _null = null;
      if (s === t)
        return true;
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (s === -2)
        return true;
      if (s == null || s === -1 || s.name === "Object" || s === -2) {
        if (typeof t === "number")
          return false;
        if ('futureOr' in t)
          return H._isSubtype(s, sEnv, "type" in t ? t.type : _null, tEnv);
        return false;
      }
      if (typeof s === "number")
        return H._isSubtype(sEnv[H.intTypeCheck(s)], sEnv, t, tEnv);
      if (typeof t === "number")
        return false;
      if (s.name === "Null")
        return true;
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      if ('futureOr' in t) {
        tTypeArgument = "type" in t ? t.type : _null;
        if ('futureOr' in s)
          return H._isSubtype("type" in s ? s.type : _null, sEnv, tTypeArgument, tEnv);
        else if (H._isSubtype(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!('$is' + "Future" in typeOfS.prototype))
            return false;
          futureSubstitution = typeOfS.prototype["$as" + "Future"];
          futureArguments = H.substitute(futureSubstitution, t1 ? s.slice(1) : _null);
          return H._isSubtype(typeof futureArguments === "object" && futureArguments !== null && futureArguments.constructor === Array ? futureArguments[0] : _null, sEnv, tTypeArgument, tEnv);
        }
      }
      if ('func' in t)
        return H._isFunctionSubtype(s, sEnv, t, tEnv);
      if ('func' in s)
        return t.name === "Function";
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        typeOfTString = typeOfT.name;
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + typeOfTString];
      } else
        substitution = _null;
      if (!t2)
        return true;
      t1 = t1 ? s.slice(1) : _null;
      t2 = t.slice(1);
      return H.areSubtypes(H.substitute(substitution, t1), sEnv, t2, tEnv);
    },
    _isFunctionSubtype: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!('func' in s))
        return false;
      if ("bounds" in s) {
        if (!("bounds" in t))
          return false;
        sBounds = s.bounds;
        tBounds = t.bounds;
        if (sBounds.length !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
      } else if ("bounds" in t)
        return false;
      if (!H._isSubtype(s.ret, sEnv, t.ret, tEnv))
        return false;
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H._isSubtype(tParameterTypes[pos], tEnv, sParameterTypes[pos], sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tOptionalParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      sNamedParameters = s.named;
      tNamedParameters = t.named;
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
      var t1, i, $name,
        names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H._isSubtype(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, mark, t1,
        tag = H.stringTypeCheck($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _._receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this._message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this._message = t0;
      this._method = t1;
      this._receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this._message = t0;
    },
    unwrapException_saveStackTrace: function unwrapException_saveStackTrace(t0) {
      this.ex = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _._target = t1;
      _._receiver = t2;
      _._name = t3;
    },
    TypeErrorImplementation: function TypeErrorImplementation(t0) {
      this.message = t0;
    },
    CastErrorImplementation: function CastErrorImplementation(t0) {
      this.message = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    TypeImpl: function TypeImpl(t0) {
      this._rti = t0;
      this._hashCode = this.__typeName = null;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _.__js_helper$_last = _.__js_helper$_first = _.__js_helper$_rest = _.__js_helper$_nums = _.__js_helper$_strings = null;
      _.__js_helper$_modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      this.hashMapCellKey = t0;
      this.hashMapCellValue = t1;
      this.__js_helper$_next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this._map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _._map = t0;
      _.__js_helper$_modifications = t1;
      _.__js_helper$_current = _.__js_helper$_cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    StringMatch: function StringMatch(t0) {
      this.pattern = t0;
    },
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return init.mangledGlobalNames[$name];
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, [$E]));
    },
    JSArray_markFixedList: function(list) {
      list.fixed$length = Array;
      return list;
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$isEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    add$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    any$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).any$1(receiver, a0);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    expand$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).expand$1$1(receiver, a0, $T1);
    },
    forEach$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    map$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    matchAsPrefix$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    startsWith$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    where$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).where$1(receiver, a0);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _._length = t1;
      _._index = 0;
      _._current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSDouble: function JSDouble() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      P.Timer__createTimer(C.Duration_0, H.functionTypeCheck(callback, {func: 1, ret: -1}));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return P._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl();
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _Future__chainForeignFuture: function(source, target) {
      var e, s, exception;
      target._state = 1;
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), P.Null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
      }
    },
    _Future__chainCoreFuture: function(source, target) {
      var t1, listeners;
      for (; t1 = source._state, t1 === 2;)
        source = H.interceptedTypeCheck(source._resultOrListeners, "$is_Future");
      if (t1 >= 4) {
        listeners = target._removeListeners$0();
        target._state = source._state;
        target._resultOrListeners = source._resultOrListeners;
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
        target._state = 2;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var _box_0, hasError, asyncError, listeners0, sourceResult, t2, t3, zone, t4, oldZone, current, result, _null = null, _box_1 = {},
        t1 = _box_1.source = source;
      for (; true;) {
        _box_0 = {};
        hasError = t1._state === 8;
        if (listeners == null) {
          if (hasError) {
            asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
            P._rootHandleUncaughtError(_null, _null, t1._zone, asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
          listeners._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, listeners);
        }
        t1 = _box_1.source;
        sourceResult = t1._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t2 = !hasError;
        if (t2) {
          t3 = listeners.state;
          t3 = (t3 & 1) !== 0 || (t3 & 15) === 8;
        } else
          t3 = true;
        if (t3) {
          t3 = listeners.result;
          zone = t3._zone;
          if (hasError) {
            t4 = t1._zone === zone;
            t4 = !(t4 || t4);
          } else
            t4 = false;
          if (t4) {
            H.interceptedTypeCheck(sourceResult, "$isAsyncError");
            P._rootHandleUncaughtError(_null, _null, t1._zone, sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = _null;
          t1 = listeners.state;
          if ((t1 & 15) === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
          else if (t2) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (!!J.getInterceptor$(t1).$isFuture) {
            if (t1._state >= 4) {
              current = H.interceptedTypeCheck(t3._resultOrListeners, "$is_FutureListener");
              t3._resultOrListeners = null;
              listeners = t3._reverseListeners$1(current);
              t3._state = t1._state;
              t3._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, t3);
            return;
          }
        }
        result = listeners.result;
        current = H.interceptedTypeCheck(result._resultOrListeners, "$is_FutureListener");
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t2 = _box_0.listenerValueOrError;
        if (!t1) {
          H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(result, 0));
          result._state = 4;
          result._resultOrListeners = t2;
        } else {
          H.interceptedTypeCheck(t2, "$isAsyncError");
          result._state = 8;
          result._resultOrListeners = t2;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object, P.StackTrace]});
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]}))
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object]});
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback);
      if ($._nextCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = $._lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, t2,
        t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        entry.next = t2.next;
        $._lastPriorityCallback = t2.next = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var _null = null,
        currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      P._rootScheduleMicrotask(_null, _null, currentZone, H.functionTypeCheck(currentZone.bindCallbackGuarded$1(callback), {func: 1, ret: -1}));
    },
    Timer_Timer: function(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return P.Timer__createTimer(duration, H.functionTypeCheck(callback, {func: 1, ret: -1}));
      return P.Timer__createTimer(duration, H.functionTypeCheck(t1.bindCallbackGuarded$1(callback), {func: 1, ret: -1}));
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      t1 = C.C__RootZone !== zone;
      if (t1)
        f = !(!t1 || false) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl() {
      this._handle = null;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.target = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncComplete_closure: function _Future__asyncComplete_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _._box_0 = t1;
      _.listener = t2;
      _.hasError = t3;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1, t2) {
      this._box_0 = t0;
      this.listener = t1;
      this.sourceResult = t2;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1, t2) {
      this._box_1 = t0;
      this._box_0 = t1;
      this.listener = t2;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamSubscription: function StreamSubscription() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Zone: function _Zone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this._box_0 = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      return H.assertSubtype(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap([$K, $V])), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    LinkedHashMap__makeEmpty: function() {
      return new H.JsLinkedHashMap([null, null]);
    },
    LinkedHashSet_LinkedHashSet: function($E) {
      return new P._LinkedHashSet([$E]);
    },
    _LinkedHashSet__newHashTable: function() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$: function(_set, _modifications, $E) {
      var t1 = new P._LinkedHashSetIterator(_set, _modifications, [$E]);
      t1._cell = _set._first;
      return t1;
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], [P.String]);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, H.listSuperNativeTypeCheck(parts, "$isIterable"), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = iterable.get$iterator(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current());
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current();
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current();
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current();
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$fromIterable: function(iterable, value, $K, $V) {
      var map = P.LinkedHashMap_LinkedHashMap($K, $V);
      P.MapBase__fillMapWithMappedIterable(map, iterable, null, value);
      return map;
    },
    LinkedHashMap_LinkedHashMap$fromIterables: function(keys, values, $K, $V) {
      var map = P.LinkedHashMap_LinkedHashMap($K, $V);
      P.MapBase__fillMapWithIterables(map, keys, values);
      return map;
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var t1,
        result = P.LinkedHashSet_LinkedHashSet($E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, H.assertSubtypeOfRuntimeType(t1.get$current(), $E));
      return result;
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        m.forEach$1(0, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__id: function(x) {
      return x;
    },
    MapBase__fillMapWithMappedIterable: function(map, iterable, key, value) {
      var t1, element;
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
        element = t1.get$current();
        map.$indexSet(0, P.MapBase__id(element), value.call$1(element));
      }
    },
    MapBase__fillMapWithIterables: function(map, keys, values) {
      var keyIterator = J.get$iterator$ax(keys),
        valueIterator = J.get$iterator$ax(values),
        hasNextKey = keyIterator.moveNext$0(),
        hasNextValue = valueIterator.moveNext$0();
      while (true) {
        if (!(hasNextKey && hasNextValue))
          break;
        map.$indexSet(0, keyIterator.get$current(), valueIterator.get$current());
        hasNextKey = keyIterator.moveNext$0();
        hasNextValue = valueIterator.moveNext$0();
      }
      if (hasNextKey || hasNextValue)
        throw H.wrapException(P.ArgumentError$("Iterables do not have same length."));
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._previous = this._next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._modifications = t1;
      _._collection$_current = _._cell = null;
      _.$ti = t2;
    },
    IterableBase: function IterableBase() {
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._keys = t0;
      _._collection$_map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _SetBase: function _SetBase() {
    },
    _parseJson: function(source, reviver) {
      var parsed, e, exception, t1;
      if (typeof source !== "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.FormatException$(String(e));
        throw H.wrapException(t1);
      }
      t1 = P._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
      return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable: function(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
      var t1,
        output = new P.StringBuffer(""),
        stringifier = new P._JsonStringStringifier(output, [], P.convert___defaultToEncodable$closure());
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._convert$_data = null;
    },
    _JsonMap_values_closure: function _JsonMap_values_closure(t0) {
      this.$this = t0;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._parent = t0;
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0) {
      this._toEncodable = t0;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    int_parse: function(source) {
      var value = H.Primitives_parseInt(source, null);
      if (value != null)
        return value;
      throw H.wrapException(P.FormatException$(source));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.S(H.Primitives_objectTypeName(object)) + "'";
    },
    List_List$from: function(elements, growable, $E) {
      var t1,
        list = H.setRuntimeTypeInfo([], [$E]);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t1.get$current(), $E));
      return list;
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current());
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current());
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current());
      }
      return string;
    },
    DateTime__fourDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__sixDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "+";
      if (absN >= 100000)
        return sign + absN;
      return sign + "0" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$: function(days, milliseconds) {
      return new P.Duration(864e8 * days + 1000 * milliseconds);
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkNotNegative: function(value, $name) {
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      return new P.IndexError($length, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    FormatException$: function(message) {
      return new P.FormatException(message);
    },
    Iterable_Iterable$generate: function(count, generator, $E) {
      if (typeof count !== "number")
        return count.$le();
      if (count <= 0)
        return new H.EmptyIterable([$E]);
      return new P._GeneratorIterable(count, generator, [$E]);
    },
    List_List$generate: function($length, generator, $E) {
      var i,
        result = H.setRuntimeTypeInfo([], [$E]);
      C.JSArray_methods.set$length(result, $length);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    print: function(object) {
      H.printString(object);
    },
    bool: function bool() {
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    double: function double() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    Duration_toString_sixDigits: function Duration_toString_sixDigits() {
    },
    Duration_toString_twoDigits: function Duration_toString_twoDigits() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0) {
      this.message = t0;
    },
    int: function int() {
    },
    Iterable: function Iterable() {
    },
    _GeneratorIterable: function _GeneratorIterable(t0, t1, t2) {
      this.length = t0;
      this._generator = t1;
      this.$ti = t2;
    },
    Iterator: function Iterator() {
    },
    List: function List() {
    },
    Map: function Map() {
    },
    Null: function Null() {
    },
    num: function num() {
    },
    Object: function Object() {
    },
    StackTrace: function StackTrace() {
    },
    String: function String() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    _StructuredClone: function _StructuredClone() {
    },
    _StructuredClone_walk_closure: function _StructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _StructuredClone_walk_closure0: function _StructuredClone_walk_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    _AcceptStructuredClone_walk_closure: function _AcceptStructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _StructuredCloneDart2Js: function _StructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
      this.mustCopy = false;
    },
    promiseToFuture: function(jsPromise, $T) {
      var t1 = new P._Future($.Zone__current, [$T]),
        completer = new P._AsyncCompleter(t1, [$T]);
      jsPromise.then(H.convertDartClosureToJS(new P.promiseToFuture_closure(completer, $T), 1), H.convertDartClosureToJS(new P.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    pow: function(x, exponent) {
      return Math.pow(x, exponent);
    }
  },
  W = {
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event);
      if (t1 != null && true)
        C.DedicatedWorkerGlobalScope_methods.addEventListener$3(_target, _eventType, t1, false);
      return new W._EventStreamSubscription(_target, _eventType, t1, false, [$T]);
    },
    _wrapZone: function(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    Blob: function Blob() {
    },
    DedicatedWorkerGlobalScope: function DedicatedWorkerGlobalScope() {
    },
    DomException: function DomException() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    File: function File() {
    },
    MessageEvent: function MessageEvent() {
    },
    MessagePort: function MessagePort() {
    },
    WorkerGlobalScope: function WorkerGlobalScope() {
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    }
  },
  X = {
    _combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    Optional$of: function(value, $T) {
      if (value == null)
        H.throwExpression(P.ArgumentError$("Must not be null."));
      return new X.Optional(value, [$T]);
    },
    Optional: function Optional(t0, t1) {
      this._core$_value = t0;
      this.$ti = t1;
    },
    Distance$: function(_cardinal, _diagonal) {
      return new X.Distance(_cardinal, _diagonal);
    },
    Distance$calc: function(p1, p2) {
      var dx, dy,
        t1 = new X.Distance(null, null),
        t2 = p1.x,
        t3 = p2.x;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      dx = Math.abs(t2 - t3);
      t3 = p1.y;
      t2 = p2.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      dy = Math.abs(t3 - t2);
      t2 = H.intTypeCheck(Math.min(dx, dy));
      t1._diagonal = t2;
      t1._cardinal = H.intTypeCheck(Math.max(dx, dy) - t2);
      return t1;
    },
    Distance: function Distance(t0, t1) {
      this._cardinal = t0;
      this._diagonal = t1;
    },
    DirectedJumpPointSearchJumpPoints_jumpDirections: function(grid, position, direction, hasNextCardinalPointOfInterest, isForPreCalculation) {
      if (C.JSArray_methods.contains$1(C.List_O1c, direction))
        return X.DirectedJumpPointSearchJumpPoints__diagonalJumpDirections(grid, position, direction, hasNextCardinalPointOfInterest, isForPreCalculation);
      else
        return X.DirectedJumpPointSearchJumpPoints__cardinalJumpDirections(grid, position, direction);
    },
    DirectedJumpPointSearchJumpPoints__cardinalJumpDirections: function(grid, position, direction) {
      var jumpDirections, t4, t5, _i, side, t6, t7, direction45, direction90, direction135, t8, canNotGoDiagonalBefore, canNotGoDiagonalBefore1, canNotGoDiagonalBefore2,
        direction180 = O.Directions_turn(direction, 180),
        wpBefore = position.goMulti$2(direction180, 1),
        t1 = grid._grid._array,
        t2 = wpBefore.x,
        t3 = wpBefore.y;
      if (!H.boolConversionCheck(J.$index$asx(J.$index$asx((t1 && C.JSArray_methods).$index(t1, t2), t3), direction)))
        return P.LinkedHashSet_LinkedHashSet(O.Direction);
      jumpDirections = P.LinkedHashSet_LinkedHashSet(O.Direction);
      for (t1 = [1, -1], t4 = position.x, t5 = position.y, _i = 0; _i < 2; ++_i) {
        side = t1[_i];
        t6 = direction.index * 45;
        t7 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(t6 + 45 * side + 360, 360), 45);
        if (t7 < 0 || t7 >= 8)
          return H.ioore(C.List_4j7, t7);
        direction45 = C.List_4j7[t7];
        t7 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(t6 + 90 * side + 360, 360), 45);
        if (t7 < 0 || t7 >= 8)
          return H.ioore(C.List_4j7, t7);
        direction90 = C.List_4j7[t7];
        t6 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(t6 + 135 * side + 360, 360), 45);
        if (t6 < 0 || t6 >= 8)
          return H.ioore(C.List_4j7, t6);
        direction135 = C.List_4j7[t6];
        t6 = grid._grid._array;
        if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t4), t5), direction45))) {
          t6 = grid._grid._array;
          if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t2), t3), direction45))) {
            t6 = O.Directions_getDx(direction45);
            if (typeof t2 !== "number")
              return t2.$add();
            t6 = t2 + t6;
            t7 = O.Directions_getDy(direction45);
            if (typeof t3 !== "number")
              return t3.$add();
            t8 = grid._grid._array;
            if (t6 < 0 || t6 >= t8.length)
              return H.ioore(t8, t6);
            canNotGoDiagonalBefore = !H.boolConversionCheck(J.$index$asx(J.$index$asx(t8[t6], t3 + t7), direction));
          } else
            canNotGoDiagonalBefore = true;
          if (canNotGoDiagonalBefore)
            jumpDirections.add$1(0, direction45);
        }
        t6 = grid._grid._array;
        if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t4), t5), direction90))) {
          t6 = grid._grid._array;
          if (!H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t2), t3), direction45)))
            jumpDirections.add$1(0, direction90);
        }
        t6 = grid._grid._array;
        if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t4), t5), direction135))) {
          t6 = grid._grid._array;
          if (!H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t2), t3), direction90))) {
            t6 = grid._grid._array;
            if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t2), t3), direction45))) {
              t6 = O.Directions_getDx(direction45);
              if (typeof t2 !== "number")
                return t2.$add();
              t6 = t2 + t6;
              t7 = O.Directions_getDy(direction45);
              if (typeof t3 !== "number")
                return t3.$add();
              t8 = grid._grid._array;
              if (t6 < 0 || t6 >= t8.length)
                return H.ioore(t8, t6);
              canNotGoDiagonalBefore1 = !H.boolConversionCheck(J.$index$asx(J.$index$asx(t8[t6], t3 + t7), direction180));
            } else
              canNotGoDiagonalBefore1 = true;
            t6 = grid._grid._array;
            if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t2), t3), direction135))) {
              t6 = O.Directions_getDx(direction135);
              if (typeof t2 !== "number")
                return t2.$add();
              t6 = t2 + t6;
              t7 = O.Directions_getDy(direction135);
              if (typeof t3 !== "number")
                return t3.$add();
              t8 = grid._grid._array;
              if (t6 < 0 || t6 >= t8.length)
                return H.ioore(t8, t6);
              canNotGoDiagonalBefore2 = !H.boolConversionCheck(J.$index$asx(J.$index$asx(t8[t6], t3 + t7), direction));
            } else
              canNotGoDiagonalBefore2 = true;
            if (canNotGoDiagonalBefore1 && canNotGoDiagonalBefore2)
              jumpDirections.add$1(0, direction135);
          }
        }
      }
      return jumpDirections;
    },
    DirectedJumpPointSearchJumpPoints__diagonalJumpDirections: function(grid, position, direction, hasNextCardinalPointOfInterest, isForPreCalculation) {
      var jumpDirections, t4, t5, t6, _i, side, t7, t8, direction45, direction90, direction135, t9, canNotGoCardinalBefore,
        wpBefore = position.goMulti$2(O.Directions_turn(direction, 180), 1),
        t1 = grid._grid._array,
        t2 = wpBefore.x,
        t3 = wpBefore.y;
      if (!H.boolConversionCheck(J.$index$asx(J.$index$asx((t1 && C.JSArray_methods).$index(t1, t2), t3), direction)))
        return P.LinkedHashSet_LinkedHashSet(O.Direction);
      jumpDirections = P.LinkedHashSet_LinkedHashSet(O.Direction);
      for (t1 = [1, -1], t4 = position.x, t5 = position.y, t6 = !isForPreCalculation, _i = 0; _i < 2; ++_i) {
        side = t1[_i];
        t7 = direction.index * 45;
        t8 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(t7 + 45 * side + 360, 360), 45);
        if (t8 < 0 || t8 >= 8)
          return H.ioore(C.List_4j7, t8);
        direction45 = C.List_4j7[t8];
        t8 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(t7 + 90 * side + 360, 360), 45);
        if (t8 < 0 || t8 >= 8)
          return H.ioore(C.List_4j7, t8);
        direction90 = C.List_4j7[t8];
        t7 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(t7 + 135 * side + 360, 360), 45);
        if (t7 < 0 || t7 >= 8)
          return H.ioore(C.List_4j7, t7);
        direction135 = C.List_4j7[t7];
        t7 = grid._grid._array;
        if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t7 && C.JSArray_methods).$index(t7, t4), t5), direction45)))
          if (H.boolConversionCheck(hasNextCardinalPointOfInterest.call$2(position, direction45)))
            jumpDirections.add$1(0, direction45);
        t7 = grid._grid._array;
        if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t7 && C.JSArray_methods).$index(t7, t4), t5), direction90))) {
          t7 = grid._grid._array;
          if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t7 && C.JSArray_methods).$index(t7, t2), t3), direction45))) {
            t7 = O.Directions_getDx(direction45);
            if (typeof t2 !== "number")
              return t2.$add();
            t7 = t2 + t7;
            t8 = O.Directions_getDy(direction45);
            if (typeof t3 !== "number")
              return t3.$add();
            t9 = grid._grid._array;
            if (t7 < 0 || t7 >= t9.length)
              return H.ioore(t9, t7);
            canNotGoCardinalBefore = !H.boolConversionCheck(J.$index$asx(J.$index$asx(t9[t7], t3 + t8), direction45));
          } else
            canNotGoCardinalBefore = true;
          if (canNotGoCardinalBefore)
            jumpDirections.add$1(0, direction90);
        }
        t7 = grid._grid._array;
        if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t7 && C.JSArray_methods).$index(t7, t4), t5), direction135))) {
          t7 = grid._grid._array;
          if (!H.boolConversionCheck(J.$index$asx(J.$index$asx((t7 && C.JSArray_methods).$index(t7, t2), t3), direction45)))
            if (!t6 || H.boolConversionCheck(hasNextCardinalPointOfInterest.call$2(position, direction135)))
              jumpDirections.add$1(0, direction135);
        }
      }
      return jumpDirections;
    }
  },
  S = {Tuple2: function Tuple2(t0, t1, t2) {
      this.item1 = t0;
      this.item2 = t1;
      this.$ti = t2;
    }, Algorithm: function Algorithm() {
    },
    GridCache$: function(_store) {
      var t1 = new S.GridCache(_store);
      t1.GridCache$1(_store);
      return t1;
    },
    GridCache: function GridCache(t0) {
      this._GridCache$_store = t0;
      this._grid = null;
    },
    GridCache_closure: function GridCache_closure(t0) {
      this.$this = t0;
    },
    GridCache_rebuild_closure: function GridCache_rebuild_closure() {
    },
    GridCache_rebuild__closure: function GridCache_rebuild__closure() {
    },
    GridCache_accessibleNeighbours_closure: function GridCache_accessibleNeighbours_closure(t0, t1) {
      this.$this = t0;
      this.origin = t1;
    },
    GridCache_accessibleNeighbours_closure0: function GridCache_accessibleNeighbours_closure0(t0) {
      this.origin = t0;
    },
    GridCache_accessibleNeighbours_closure1: function GridCache_accessibleNeighbours_closure1(t0) {
      this.$this = t0;
    },
    main: function() {
      var t1 = Q.Store$(),
        t2 = P.Timer_Timer(P.Duration$(1, 0), new S.PathfinderWorker_closure());
      P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": Web Worker created");
      M.TransferSlave$(t1);
      new S.PathfinderWorker(t1, t2)._setup$0();
    },
    PathfinderWorker: function PathfinderWorker(t0, t1) {
      this._PathfinderWorker$_store = t0;
      this._timerToRun = t1;
    },
    PathfinderWorker_closure: function PathfinderWorker_closure() {
    },
    PathfinderWorker__setup_closure: function PathfinderWorker__setup_closure(t0) {
      this.$this = t0;
    },
    PathfinderWorker__runInner_closure: function PathfinderWorker__runInner_closure() {
    },
    PathfinderWorker__runInner_closure0: function PathfinderWorker__runInner_closure0() {
    },
    PathfinderWorker__runInner_closure1: function PathfinderWorker__runInner_closure1() {
    },
    PathfinderWorker__runInner_closure2: function PathfinderWorker__runInner_closure2() {
    }
  },
  M = {AStar: function AStar(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.name = t0;
      _.closed = _.open = _.parent = _.distance = null;
      _.grid = t1;
      _.start = t2;
      _.target = t3;
      _.heuristic = t4;
      _._turnOfHistory = t5;
      _.searched = null;
      _.searchHistory = t6;
      _.nextTurn = 0;
    }, AStar_closure: function AStar_closure() {
    }, AStar_findNextActiveNode_closure: function AStar_findNextActiveNode_closure(t0) {
      this.$this = t0;
    }, AStar_findNextActiveNode_closure0: function AStar_findNextActiveNode_closure0(t0) {
      this.$this = t0;
    }, AStar_findNextActiveNode_closure1: function AStar_findNextActiveNode_closure1(t0) {
      this.$this = t0;
    }, AStar_findNextActiveNode_closure2: function AStar_findNextActiveNode_closure2(t0) {
      this.$this = t0;
    }, AStar_findNextActiveNode_closure3: function AStar_findNextActiveNode_closure3(t0) {
      this.$this = t0;
    }, AStar_findNextActiveNode_closure4: function AStar_findNextActiveNode_closure4(t0) {
      this.$this = t0;
    }, Explanation: function Explanation(t0, t1) {
      this.style = t0;
      this._explanation = t1;
    }, Explanation_toMap_closure: function Explanation_toMap_closure() {
    }, ExplanationPart: function ExplanationPart(t0, t1, t2) {
      this.id = t0;
      this.text = t1;
      this.style = t2;
    }, Manhattan: function Manhattan(t0) {
      this._Heuristic$_name = t0;
    },
    TransferSlave$: function(store) {
      var t1 = new M.TransferSlave(H.interceptedTypeCast(self, "$isDedicatedWorkerGlobalScope"), "Slave", store);
      t1.TransferSlave$1(store);
      return t1;
    },
    TransferSlave: function TransferSlave(t0, t1, t2) {
      var _ = this;
      _._slaveReceiver = t0;
      _._masterSender = null;
      _.name = t1;
      _.store = t2;
    },
    TransferSlave_closure: function TransferSlave_closure(t0) {
      this.$this = t0;
    },
    TransferSlave_closure0: function TransferSlave_closure0(t0, t1) {
      this.$this = t0;
      this.store = t1;
    },
    TransferSlave__closure: function TransferSlave__closure(t0, t1) {
      this.store = t0;
      this.ids = t1;
    },
    TransferSlave__closure0: function TransferSlave__closure0(t0) {
      this.$this = t0;
    }
  },
  K = {
    Array2D$: function(size, _producer, $T) {
      var t1 = new K.Array2D(_producer, size.width, size.height, [$T]);
      t1.Array2D$2(size, _producer, $T);
      return t1;
    },
    Array2D: function Array2D(t0, t1, t2, t3) {
      var _ = this;
      _._array = null;
      _._producer = t0;
      _.width = t1;
      _.height = t2;
      _.$ti = t3;
    },
    Array2D_closure: function Array2D_closure(t0, t1, t2) {
      this.$this = t0;
      this.size = t1;
      this.T = t2;
    },
    Array2D__closure: function Array2D__closure(t0, t1, t2) {
      this.$this = t0;
      this.x = t1;
      this.T = t2;
    },
    Highlights_toListMap: function(highlights) {
      var t1 = [P.Map,,,],
        t2 = H.getTypeArgumentByIndex(highlights, 0);
      return new H.MappedListIterable(highlights, H.functionTypeCheck(new K.Highlights_toListMap_closure(), {func: 1, ret: t1, args: [t2]}), [t2, t1]).toList$0(0);
    },
    PathHighlight$: function(path, showEnd) {
      return new K.PathHighlight(path, true, false, 1, 1);
    },
    PathHighlight$styled: function(style, path, endIntermediate, showEnd, startIntermediate) {
      var t1 = startIntermediate != null ? startIntermediate : 1;
      t1 = new K.PathHighlight(path, true, false, t1, endIntermediate != null ? endIntermediate : 1);
      t1.style = style;
      return t1;
    },
    Highlights_toListMap_closure: function Highlights_toListMap_closure() {
    },
    Highlight: function Highlight() {
    },
    BoxHighlight: function BoxHighlight() {
      this.style = "pleaseSetStyle";
    },
    CircleHighlight: function CircleHighlight() {
      this.style = "pleaseSetStyle";
    },
    DotHighlight: function DotHighlight() {
      this.style = "pleaseSetStyle";
    },
    PathHighlight: function PathHighlight(t0, t1, t2, t3, t4) {
      var _ = this;
      _.path = t0;
      _.showEnd = t1;
      _.showStart = t2;
      _.startIntermediate = t3;
      _.endIntermediate = t4;
      _.style = "pleaseSetStyle";
    },
    PathHighlight_toMap_closure: function PathHighlight_toMap_closure() {
    },
    TextHighlight: function TextHighlight(t0) {
      this.text = t0;
      this.style = "pleaseSetStyle";
    },
    DirectionTextHighlight: function DirectionTextHighlight(t0, t1) {
      this.direction = t0;
      this.text = t1;
      this.style = "pleaseSetStyle";
    },
    Transfer: function Transfer() {
    },
    Transfer_receive_closure: function Transfer_receive_closure() {
    },
    Transfer_receive_closure0: function Transfer_receive_closure0() {
    },
    Transfer_send_closure: function Transfer_send_closure(t0) {
      this.$this = t0;
    }
  },
  D = {
    Barrier_totalBlocked: function() {
      return new D.Barrier(P.LinkedHashMap_LinkedHashMap$_literal([C.Direction_0, true, C.Direction_1, true, C.Direction_2, true, C.Direction_3, true, C.Direction_4, true, C.Direction_5, true, C.Direction_6, true, C.Direction_7, true], O.Direction, P.bool));
    },
    Barrier$fromMap: function(map) {
      var t1 = O.Direction,
        t2 = map.get$keys().map$1$1(0, new D.Barrier$fromMap_closure(), t1),
        t3 = map.get$values(),
        t4 = P.bool,
        t5 = H.getRuntimeTypeArgument(t3, "Iterable", 0);
      t5 = H.MappedIterable_MappedIterable(t3, H.functionTypeCheck(new D.Barrier$fromMap_closure0(), {func: 1, ret: t4, args: [t5]}), t5, t4);
      return new D.Barrier(P.LinkedHashMap_LinkedHashMap$fromIterables(t2, P.List_List$from(t5, true, H.getRuntimeTypeArgument(t5, "Iterable", 0)), t1, t4));
    },
    Barrier: function Barrier(t0) {
      this._blocked = t0;
    },
    Barrier$fromMap_closure: function Barrier$fromMap_closure() {
    },
    Barrier$fromMap_closure0: function Barrier$fromMap_closure0() {
    },
    Barrier_isAnyBlocked_closure: function Barrier_isAnyBlocked_closure() {
    },
    Barrier_toMap_closure: function Barrier_toMap_closure() {
    },
    BasicSearchAlgorithm: function BasicSearchAlgorithm() {
    },
    BasicSearchAlgorithm_runInner_closure: function BasicSearchAlgorithm_runInner_closure(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure0: function BasicSearchAlgorithm_runInner_closure0(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure1: function BasicSearchAlgorithm_runInner_closure1(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure2: function BasicSearchAlgorithm_runInner_closure2(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure3: function BasicSearchAlgorithm_runInner_closure3(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure4: function BasicSearchAlgorithm_runInner_closure4(t0, t1) {
      this.$this = t0;
      this.nStar = t1;
    },
    BasicSearchAlgorithm_runInner_closure5: function BasicSearchAlgorithm_runInner_closure5(t0, t1) {
      this.$this = t0;
      this.nStar = t1;
    },
    BasicSearchAlgorithm_runInner_closure6: function BasicSearchAlgorithm_runInner_closure6(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure7: function BasicSearchAlgorithm_runInner_closure7(t0, t1) {
      this.$this = t0;
      this.nStar = t1;
    },
    BasicSearchAlgorithm_runInner_closure8: function BasicSearchAlgorithm_runInner_closure8(t0, t1, t2) {
      this.$this = t0;
      this.nStar = t1;
      this.updatedNodes = t2;
    },
    BasicSearchAlgorithm_runInner_closure9: function BasicSearchAlgorithm_runInner_closure9(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure10: function BasicSearchAlgorithm_runInner_closure10(t0, t1, t2) {
      this.$this = t0;
      this.nStar = t1;
      this.updatedNodes = t2;
    },
    BasicSearchAlgorithm_runInner_closure11: function BasicSearchAlgorithm_runInner_closure11(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure12: function BasicSearchAlgorithm_runInner_closure12(t0) {
      this.nStar = t0;
    }
  },
  E = {BarrierManager: function BarrierManager(t0) {
      this._BarrierManager$_store = t0;
    }, DirectedJumpPointSearch: function DirectedJumpPointSearch(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.nextJumpPointHighlights = t0;
      _.name = t1;
      _.closed = _.open = _.parent = _.distance = null;
      _.grid = t2;
      _.start = t3;
      _.target = t4;
      _.heuristic = t5;
      _._turnOfHistory = t6;
      _.searched = null;
      _.searchHistory = t7;
      _.nextTurn = 0;
    }, DirectedJumpPointSearch_closure: function DirectedJumpPointSearch_closure() {
    }, DirectedJumpPointSearch_findNeighbourNodes_closure: function DirectedJumpPointSearch_findNeighbourNodes_closure(t0) {
      this.$this = t0;
    }, DirectedJumpPointSearch_findNeighbourNodes_closure0: function DirectedJumpPointSearch_findNeighbourNodes_closure0(t0) {
      this.neighbours = t0;
    }, DirectedJumpPointSearch_getNextJumpPoint_closure: function DirectedJumpPointSearch_getNextJumpPoint_closure(t0) {
      this.$this = t0;
    },
    DirectedJumpPointSearchData$: function(size) {
      var t1 = new E.DirectedJumpPointSearchData_closure(),
        t2 = new E.DirectedJumpPointSearchData(t1, size.width, size.height);
      t2.Array2D$2(size, t1, E.DirectedJumpPointSearchDataPoint);
      return t2;
    },
    DirectedJumpPointSearchDataPoint$: function() {
      var t1 = E.DirectedJumpPointSearchDataSignpost,
        t2 = H.getTypeArgumentByIndex(C.List_4j7, 0),
        t3 = O.Direction,
        t4 = E.DirectedJumpPointSearchDataDirectionAdviser;
      return new E.DirectedJumpPointSearchDataPoint(P.LinkedHashMap_LinkedHashMap$fromIterables(C.List_4j7, new H.MappedListIterable(C.List_4j7, H.functionTypeCheck(new E.DirectedJumpPointSearchDataPoint_closure(), {func: 1, ret: t1, args: [t2]}), [t2, t1]), t3, t1), P.LinkedHashMap_LinkedHashMap$fromIterables(C.List_4j7, new H.MappedListIterable(C.List_4j7, H.functionTypeCheck(new E.DirectedJumpPointSearchDataPoint_closure0(), {func: 1, ret: t4, args: [t2]}), [t2, t4]), t3, t4));
    },
    DirectedJumpPointSearchPreCalculator: function DirectedJumpPointSearchPreCalculator(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.data = t0;
      _.grid = t1;
      _.start = t2;
      _.target = t3;
      _.heuristic = t4;
      _._turnOfHistory = t5;
      _.searched = null;
      _.searchHistory = t6;
      _.nextTurn = 0;
    },
    DirectedJumpPointSearchPreCalculator_closure: function DirectedJumpPointSearchPreCalculator_closure() {
    },
    DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator: function DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator(t0) {
      this.$this = t0;
    },
    DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator_closure: function DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator_closure(t0, t1) {
      this.position = t0;
      this.direction = t1;
    },
    DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator: function DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator(t0, t1) {
      this.$this = t0;
      this.pathHighlightGenerator = t1;
    },
    DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure: function DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure(t0, t1, t2) {
      this.pathHighlightGenerator = t0;
      this.origin = t1;
      this.position = t2;
    },
    DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure0: function DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure0(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.position = t1;
      _.pathHighlightsGenerator = t2;
      _.origin = t3;
      _.depth = t4;
    },
    DirectedJumpPointSearchPreCalculator_runInner_closure: function DirectedJumpPointSearchPreCalculator_runInner_closure(t0) {
      this.pathHighlightsGenerator = t0;
    },
    DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights: function DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights(t0) {
      this.$this = t0;
    },
    DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights_closure: function DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights_closure(t0, t1) {
      this.$this = t0;
      this.where = t1;
    },
    DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure: function DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure(t0, t1, t2) {
      this.$this = t0;
      this.where = t1;
      this.position = t2;
    },
    DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure0: function DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure0(t0, t1) {
      this.$this = t0;
      this.position = t1;
    },
    DirectedJumpPointSearchPreCalculator_runInner_closure0: function DirectedJumpPointSearchPreCalculator_runInner_closure0() {
    },
    DirectedJumpPointSearchPreCalculator_runInner_closure1: function DirectedJumpPointSearchPreCalculator_runInner_closure1() {
    },
    DirectedJumpPointSearchPreCalculator_runInner_closure2: function DirectedJumpPointSearchPreCalculator_runInner_closure2() {
    },
    DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights: function DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights(t0) {
      this.$this = t0;
    },
    DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights_closure: function DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights_closure(t0, t1) {
      this.$this = t0;
      this.sourceDirections = t1;
    },
    DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights__closure: function DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights__closure(t0, t1) {
      this.$this = t0;
      this.position = t1;
    },
    DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights___closure: function DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights___closure(t0) {
      this.position = t0;
    },
    DirectedJumpPointSearchPreCalculator_recomputeBox_closure: function DirectedJumpPointSearchPreCalculator_recomputeBox_closure(t0) {
      this.$this = t0;
    },
    DirectedJumpPointSearchData: function DirectedJumpPointSearchData(t0, t1, t2) {
      var _ = this;
      _._array = null;
      _._producer = t0;
      _.width = t1;
      _.height = t2;
    },
    DirectedJumpPointSearchData_closure: function DirectedJumpPointSearchData_closure() {
    },
    DirectedJumpPointSearchDataPoint: function DirectedJumpPointSearchDataPoint(t0, t1) {
      this.signposts = t0;
      this.directionAdvisers = t1;
    },
    DirectedJumpPointSearchDataPoint_closure: function DirectedJumpPointSearchDataPoint_closure() {
    },
    DirectedJumpPointSearchDataPoint_closure0: function DirectedJumpPointSearchDataPoint_closure0() {
    },
    DirectedJumpPointSearchDataSignpost: function DirectedJumpPointSearchDataSignpost(t0) {
      this.type = t0;
      this.distance = 0;
    },
    DirectedJumpPointSearchDataDirectionAdviser: function DirectedJumpPointSearchDataDirectionAdviser(t0) {
      this.jumpDirections = t0;
    },
    DirectedJumpPointSearchDataPointDirectionType: function DirectedJumpPointSearchDataPointDirectionType(t0) {
      this._DirectedJumpPointSearchPreCalculator$_name = t0;
    },
    CountDirection: function CountDirection(t0) {
      this._DirectedJumpPointSearchPreCalculator$_name = t0;
    },
    DirectedJumpPointSearchHighlights_forcedDirections: function(jumpPoint, directions) {
      return J.expand$1$1$ax(directions, new E.DirectedJumpPointSearchHighlights_forcedDirections_closure(jumpPoint), K.Highlight);
    },
    DirectedJumpPointSearchHighlights_forcedDirections_closure: function DirectedJumpPointSearchHighlights_forcedDirections_closure(t0) {
      this.jumpPoint = t0;
    },
    Position$fromMap: function(map) {
      return new E.Position(H.intTypeCast(map.$index(0, "x")), H.intTypeCast(map.$index(0, "y")));
    },
    Position: function Position(t0, t1) {
      this.x = t0;
      this.y = t1;
    },
    Position__directionTo_closure: function Position__directionTo_closure(t0) {
      this._box_0 = t0;
    },
    Position_neighbours_closure: function Position_neighbours_closure(t0) {
      this.$this = t0;
    },
    Position_neighbours_closure0: function Position_neighbours_closure0(t0) {
      this.size = t0;
    }
  },
  F = {Chebyshev: function Chebyshev(t0) {
      this._Heuristic$_name = t0;
    },
    Size$fromMap: function(map) {
      return new F.Size(H.intTypeCast(map.$index(0, "width")), H.intTypeCast(map.$index(0, "height")));
    },
    Size: function Size(t0, t1) {
      this.width = t0;
      this.height = t1;
    },
    Size_positions_closure: function Size_positions_closure() {
    },
    Size_positions_closure0: function Size_positions_closure0(t0) {
      this.$this = t0;
    },
    Size_positions__closure: function Size_positions__closure(t0) {
      this.x = t0;
    }
  },
  Z = {Dijkstra: function Dijkstra(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.name = t0;
      _.closed = _.open = _.parent = _.distance = null;
      _.grid = t1;
      _.start = t2;
      _.target = t3;
      _.heuristic = t4;
      _._turnOfHistory = t5;
      _.searched = null;
      _.searchHistory = t6;
      _.nextTurn = 0;
    }, Dijkstra_closure: function Dijkstra_closure() {
    }, Dijkstra_findNextActiveNode_closure: function Dijkstra_findNextActiveNode_closure(t0) {
      this.$this = t0;
    }, Dijkstra_findNextActiveNode_closure0: function Dijkstra_findNextActiveNode_closure0(t0) {
      this.$this = t0;
    }, Dijkstra_findNextActiveNode_closure1: function Dijkstra_findNextActiveNode_closure1(t0) {
      this.$this = t0;
    }, Euclidean: function Euclidean(t0) {
      this._Heuristic$_name = t0;
    }},
  N = {DirectedJumpPointSearchLookUp: function DirectedJumpPointSearchLookUp(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._data = null;
      _.name = t0;
      _.closed = _.open = _.parent = _.distance = null;
      _.grid = t1;
      _.start = t2;
      _.target = t3;
      _.heuristic = t4;
      _._turnOfHistory = t5;
      _.searched = null;
      _.searchHistory = t6;
      _.nextTurn = 0;
    }, DirectedJumpPointSearchLookUp_closure: function DirectedJumpPointSearchLookUp_closure() {
    }, DirectedJumpPointSearchLookUp_findNeighbourNodes_closure: function DirectedJumpPointSearchLookUp_findNeighbourNodes_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    }, DirectedJumpPointSearchLookUp_findNeighbourNodes_closure0: function DirectedJumpPointSearchLookUp_findNeighbourNodes_closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    }, DirectedJumpPointSearchLookUp_findNeighbourNodes_closure1: function DirectedJumpPointSearchLookUp_findNeighbourNodes_closure1(t0, t1) {
      this.$this = t0;
      this.node = t1;
    }, DirectedJumpPointSearchLookUp_findNeighbourNodes_closure2: function DirectedJumpPointSearchLookUp_findNeighbourNodes_closure2(t0, t1) {
      this.$this = t0;
      this.node = t1;
    }, DirectedJumpPointSearchLookUp_findNeighbourNodes_closure3: function DirectedJumpPointSearchLookUp_findNeighbourNodes_closure3(t0) {
      this.node = t0;
    }, DirectedJumpPointSearchLookUp_visualiseDirectionAdviserDirect_closure: function DirectedJumpPointSearchLookUp_visualiseDirectionAdviserDirect_closure(t0) {
      this.newNeighbourNode = t0;
    }},
  O = {
    Directions_turn: function(direction, plusDeg) {
      var t1 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(direction.index * 45 + plusDeg + 360, 360), 45);
      if (t1 < 0 || t1 >= 8)
        return H.ioore(C.List_4j7, t1);
      return C.List_4j7[t1];
    },
    Directions_getDx: function(direction) {
      switch (direction) {
        case C.Direction_0:
          return 0;
        case C.Direction_1:
          return 1;
        case C.Direction_2:
          return 1;
        case C.Direction_3:
          return 1;
        case C.Direction_4:
          return 0;
        case C.Direction_5:
          return -1;
        case C.Direction_6:
          return -1;
        case C.Direction_7:
          return -1;
      }
      throw H.wrapException(P.Exception_Exception("Invalid"));
    },
    Directions_getDy: function(direction) {
      switch (direction) {
        case C.Direction_0:
          return -1;
        case C.Direction_1:
          return -1;
        case C.Direction_2:
          return 0;
        case C.Direction_3:
          return 1;
        case C.Direction_4:
          return 1;
        case C.Direction_5:
          return 1;
        case C.Direction_6:
          return 0;
        case C.Direction_7:
          return -1;
      }
      throw H.wrapException(P.Exception_Exception("Invalid"));
    },
    Directions_getName: function(direction) {
      switch (direction) {
        case C.Direction_0:
          return "north";
        case C.Direction_1:
          return "northeast";
        case C.Direction_2:
          return "east";
        case C.Direction_3:
          return "southeast";
        case C.Direction_4:
          return "south";
        case C.Direction_5:
          return "southwest";
        case C.Direction_6:
          return "west";
        case C.Direction_7:
          return "northwest";
      }
      return "Not Found";
    },
    Direction: function Direction(t0, t1) {
      this.index = t0;
      this._Direction$_name = t1;
    },
    NoAlgorithm: function NoAlgorithm(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.grid = t0;
      _.start = t1;
      _.target = t2;
      _.heuristic = t3;
      _._turnOfHistory = t4;
      _.searched = null;
      _.searchHistory = t5;
      _.nextTurn = 0;
    },
    NoAlgorithm_closure: function NoAlgorithm_closure() {
    },
    ConstantZeroHeuristic: function ConstantZeroHeuristic(t0) {
      this._Heuristic$_name = t0;
    },
    Util_notNull: function(value, orElse, $T) {
      return value != null ? value : orElse.call$0();
    },
    Util_equal: function(itemOne, itemTwo) {
      var t1 = J.getInterceptor$(itemOne);
      if (t1.$eq(itemOne, itemTwo))
        return true;
      if (itemOne == null || itemTwo == null)
        return false;
      if (!!t1.$isMap && !!J.getInterceptor$(itemTwo).$isMap)
        return O.Util__equalMap(itemOne, itemTwo);
      if (!!t1.$isList && !!J.getInterceptor$(itemTwo).$isList)
        return O.Util__equalList(itemOne, itemTwo);
      return false;
    },
    Util__equalList: function(listOne, listTwo) {
      var i,
        t1 = J.getInterceptor$asx(listOne),
        t2 = J.getInterceptor$asx(listTwo);
      if (t1.get$length(listOne) !== t2.get$length(listTwo))
        return false;
      for (i = 0; i < t1.get$length(listOne); ++i)
        if (!O.Util_equal(t1.$index(listOne, i), t2.$index(listTwo, i)))
          return false;
      return true;
    },
    Util__equalMap: function(mapOne, mapTwo) {
      var t1, key;
      if (mapOne.get$length(mapOne) !== mapTwo.get$length(mapTwo))
        return false;
      for (t1 = mapOne.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        if (!O.Util_equal(mapOne.$index(0, key), mapTwo.$index(0, key)))
          return false;
      }
      return true;
    }
  },
  G = {AlgorithmType: function AlgorithmType(t0, t1) {
      this.index = t0;
      this._Enums$_name = t1;
    }, HeuristicType: function HeuristicType(t0, t1) {
      this.index = t0;
      this._Enums$_name = t1;
    }, GridMode: function GridMode(t0, t1) {
      this.index = t0;
      this._Enums$_name = t1;
    }, DirectionMode: function DirectionMode(t0, t1) {
      this.index = t0;
      this._Enums$_name = t1;
    }, DirectionalMode: function DirectionalMode(t0, t1) {
      this.index = t0;
      this._Enums$_name = t1;
    }, CornerMode: function CornerMode(t0, t1) {
      this.index = t0;
      this._Enums$_name = t1;
    }},
  R = {Heuristic: function Heuristic() {
    }},
  T = {Octile: function Octile(t0) {
      this._Heuristic$_name = t0;
    }, StoreTransferAble: function StoreTransferAble() {
    }, StoreTransferAble_closure: function StoreTransferAble_closure() {
    }, StoreTransferAble_triggerListeners_closure: function StoreTransferAble_triggerListeners_closure(t0) {
      this.equalListenerCalled = t0;
    }, StoreTransferAble_triggerListeners_closure0: function StoreTransferAble_triggerListeners_closure0(t0) {
      this.equalListenerCalled = t0;
    }, StoreTransferAble_triggerListeners_closure1: function StoreTransferAble_triggerListeners_closure1(t0) {
      this.$this = t0;
    }, StoreTransferAble_triggerListeners__closure: function StoreTransferAble_triggerListeners__closure(t0) {
      this.startsOfIds = t0;
    }, StoreTransferAble_triggerListeners___closure: function StoreTransferAble_triggerListeners___closure(t0) {
      this.changedId = t0;
    }, StoreTransferAble_addEqualListener_closure: function StoreTransferAble_addEqualListener_closure() {
    }},
  Y = {
    SearchHistory$: function(size) {
      var t1 = H.setRuntimeTypeInfo([], [M.Explanation]),
        t2 = P.LinkedHashMap_LinkedHashMap$fromIterable(size.positions$0(), new Y.SearchHistory_closure(), E.Position, [P.Map, P.String, [P.List, K.Highlight]]),
        t3 = new H.JsLinkedHashMap([P.String, [P.List, K.Highlight]]),
        t4 = [K.Highlight];
      t3.$indexSet(0, "background", H.setRuntimeTypeInfo([], t4));
      t3.$indexSet(0, "foreground", H.setRuntimeTypeInfo([], t4));
      t2.$indexSet(0, null, t3);
      return new Y.SearchHistory(t1, t2);
    },
    SearchHistory: function SearchHistory(t0, t1) {
      var _ = this;
      _._id = 0;
      _.foundPath = false;
      _.title = "";
      _.stepCount = 0;
      _.stepTitle = "";
      _._stepDescription = t0;
      _._stepHighlights = t1;
    },
    SearchHistory_closure: function SearchHistory_closure() {
    },
    SearchHistory_appendHM_closure: function SearchHistory_appendHM_closure(t0) {
      this.explanationPart = t0;
    },
    SearchHistory_appendHM__closure: function SearchHistory_appendHM__closure(t0) {
      this.explanationPart = t0;
    },
    SearchHistory_addHM_closure: function SearchHistory_addHM_closure(t0, t1) {
      this.$this = t0;
      this.id = t1;
    },
    SearchHistory_addHM__closure: function SearchHistory_addHM__closure(t0, t1, t2) {
      this.$this = t0;
      this.id = t1;
      this.tuple = t2;
    },
    SearchHistory_addHM___closure: function SearchHistory_addHM___closure() {
    }
  },
  Q = {
    Store$: function() {
      var t1 = P.String;
      t1 = new Q.Store(new H.JsLinkedHashMap([t1, null]), new H.JsLinkedHashMap([t1, [P.List, {func: 1, ret: -1}]]), new H.JsLinkedHashMap([{func: 1, ret: -1, args: [[P.Iterable, P.String]]}, [P.List, P.String]]), new T.StoreTransferAble_closure(), P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1));
      t1.Store$0();
      return t1;
    },
    Store: function Store(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._gridCache = _._gridBarrierManager = null;
      _._store = t0;
      _._equalListeners = t1;
      _._startsWithListener = t2;
      _.transferListener = t3;
      _.autoTriggerListeners = true;
      _.changes = t4;
      _.changesToTransfer = t5;
    },
    Store_closure: function Store_closure(t0) {
      this.$this = t0;
    },
    Store_getBarrier_closure: function Store_getBarrier_closure() {
    },
    Store_currentStepDescription_closure: function Store_currentStepDescription_closure() {
    }
  };
  var holders = [C, H, J, P, W, X, S, M, K, D, E, F, Z, N, O, G, R, T, Y, Q];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(receiver)) + "'";
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isJSObject: 1
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $signature: function() {
      return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    where$1: function(receiver, f) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.WhereIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    expand$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.ExpandIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: [P.Iterable, $T], args: [t1]}), [t1, $T]);
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current());
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    any$1: function(receiver, test) {
      var end, i;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (H.boolConversionCheck(test.call$1(receiver[i])))
          return true;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      var _s9_ = "newLength";
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$value(newLength, _s9_, null));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, _s9_, null));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function() {
      return this._current;
    },
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this._length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$_current(null);
        return false;
      }
      _this.set$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    toStringAsPrecision$1: function(receiver, precision) {
      var result, t1;
      if (precision < 1 || precision > 21)
        throw H.wrapException(P.RangeError$range(precision, 1, 21, "precision", null));
      result = receiver.toPrecision(precision);
      if (receiver === 0)
        t1 = 1 / receiver < 0;
      else
        t1 = false;
      if (t1)
        return "-" + result;
      return result;
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$sign: function(receiver) {
      var t1;
      if (receiver > 0)
        t1 = 1;
      else
        t1 = receiver < 0 ? -1 : receiver;
      return t1;
    },
    $isint: 1
  };
  J.JSDouble.prototype = {};
  J.JSString.prototype = {
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t2, i,
        t1 = string.length;
      if (start > t1)
        throw H.wrapException(P.RangeError$range(start, 0, t1, null, null));
      t2 = receiver.length;
      if (start + t2 > t1)
        return;
      for (i = 0; i < t2; ++i)
        if (this._codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
          return;
      return new H.StringMatch(receiver);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    startsWith$1: function(receiver, pattern) {
      var otherLength;
      if (typeof pattern === "string") {
        otherLength = pattern.length;
        if (otherLength > receiver.length)
          return false;
        return pattern === receiver.substring(0, otherLength);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, 0) != null;
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    indexOf$1: function(receiver, pattern) {
      var t1 = receiver.indexOf(pattern, 0);
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $isPattern: 1,
    $isString: 1
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new H.ListIterator(_this, _this.get$length(_this), [H.getRuntimeTypeArgument(_this, "ListIterable", 0)]);
    },
    forEach$1: function(_, action) {
      var $length, i, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(_this, "ListIterable", 0)]});
      $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        action.call$1(_this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    where$1: function(_, test) {
      return this.super$Iterable$where(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "ListIterable", 0);
      return new H.MappedListIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    toList$0: function(_) {
      var i, _this = this,
        result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgument(_this, "ListIterable", 0)]);
      C.JSArray_methods.set$length(result, _this.get$length(_this));
      for (i = 0; i < _this.get$length(_this); ++i)
        C.JSArray_methods.$indexSet(result, i, _this.elementAt$1(0, i));
      return result;
    }
  };
  H.ListIterator.prototype = {
    get$current: function() {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      return new H.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current()));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function() {
      return this.__internal$_current;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    },
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return new H.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return new H.MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (H.boolConversionCheck(t2.call$1(t1.get$current())))
          return true;
      return false;
    },
    get$current: function() {
      return this._iterator.get$current();
    }
  };
  H.ExpandIterable.prototype = {
    get$iterator: function(_) {
      return new H.ExpandIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, C.C_EmptyIterator, this.$ti);
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.ExpandIterator.prototype = {
    get$current: function() {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t1, t2, _this = this;
      if (_this._currentExpansion == null)
        return false;
      for (t1 = _this._iterator, t2 = _this._f; !_this._currentExpansion.moveNext$0();) {
        _this.set$__internal$_current(null);
        if (t1.moveNext$0()) {
          _this.set$_currentExpansion(null);
          _this.set$_currentExpansion(J.get$iterator$ax(t2.call$1(t1.get$current())));
        } else
          return false;
      }
      _this.set$__internal$_current(_this._currentExpansion.get$current());
      return true;
    },
    set$_currentExpansion: function(_currentExpansion) {
      this._currentExpansion = H.assertSubtype(_currentExpansion, "$isIterator", [H.getTypeArgumentByIndex(this, 1)], "$asIterator");
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.EmptyIterable.prototype = {
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    forEach$1: function(_, action) {
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
    },
    get$isEmpty: function(_) {
      return true;
    },
    get$length: function(_) {
      return 0;
    },
    map$1$1: function(_, f, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $T, args: [H.getTypeArgumentByIndex(this, 0)]});
      return new H.EmptyIterable([$T]);
    },
    toList$0: function(_) {
      var t1 = H.setRuntimeTypeInfo([], this.$ti);
      return t1;
    }
  };
  H.EmptyIterator.prototype = {
    moveNext$0: function() {
      return false;
    },
    get$current: function() {
      return;
    },
    $isIterator: 1
  };
  H.FixedLengthListMixin.prototype = {
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    addAll$1: function(receiver, iterable) {
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    }
  };
  H.ReversedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this._receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    }
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this._message);
      t2 = _this._receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + H.S(_this._message) + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + H.S(_this._message) + ")";
    }
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this._message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.unwrapException_saveStackTrace.prototype = {
    call$1: function(error) {
      if (!!J.getInterceptor$(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex;
      return error;
    },
    $signature: 8
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + H.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this._target === other._target && _this._receiver === other._receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this._receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this._receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this._name) + "' of " + ("Instance of '" + H.S(H.Primitives_objectTypeName(receiver)) + "'");
    }
  };
  H.TypeErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.CastErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    }
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed: " + P.Error_safeToString(this.message);
    }
  };
  H.TypeImpl.prototype = {
    get$_typeName: function() {
      var t1 = this.__typeName;
      return t1 == null ? this.__typeName = H.runtimeTypeToString(this._rti) : t1;
    },
    toString$0: function(_) {
      return this.get$_typeName();
    },
    get$hashCode: function(_) {
      var t1 = this._hashCode;
      return t1 == null ? this._hashCode = C.JSString_methods.get$hashCode(this.get$_typeName()) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.TypeImpl && this.get$_typeName() === other.get$_typeName();
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_helper$_length === 0;
    },
    get$keys: function() {
      return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function() {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this.get$keys(), new H.JsLinkedHashMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    containsKey$1: function(key) {
      var strings, t1;
      if (typeof key === "string") {
        strings = this.__js_helper$_strings;
        if (strings == null)
          return false;
        return this._containsTableEntry$2(strings, key);
      } else {
        t1 = this.internalContainsKey$1(key);
        return t1;
      }
    },
    internalContainsKey$1: function(key) {
      var _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return false;
      return _this.internalFindBucketIndex$2(_this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key)), key) >= 0;
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this;
      if (typeof key === "string") {
        strings = _this.__js_helper$_strings;
        if (strings == null)
          return;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this.__js_helper$_nums;
        if (nums == null)
          return;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index, _this = this,
        rest = _this.__js_helper$_rest;
      if (rest == null)
        return;
      bucket = _this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key));
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (typeof key === "string") {
        strings = _this.__js_helper$_strings;
        _this.__js_helper$_addHashTableEntry$3(strings == null ? _this.__js_helper$_strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this.__js_helper$_nums;
        _this.__js_helper$_addHashTableEntry$3(nums == null ? _this.__js_helper$_nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      rest = _this.__js_helper$_rest;
      if (rest == null)
        rest = _this.__js_helper$_rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this.__js_helper$_newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this.__js_helper$_newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(_this, 1)});
      if (_this.containsKey$1(key))
        return _this.$index(0, key);
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)]});
      cell = _this.__js_helper$_first;
      modifications = _this.__js_helper$_modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this.__js_helper$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell.__js_helper$_next;
      }
    },
    __js_helper$_addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this.__js_helper$_newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    __js_helper$_newLinkedCell$2: function(key, value) {
      var _this = this,
        cell = new H.LinkedHashMapCell(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1)));
      if (_this.__js_helper$_first == null)
        _this.__js_helper$_first = _this.__js_helper$_last = cell;
      else
        _this.__js_helper$_last = _this.__js_helper$_last.__js_helper$_next = cell;
      ++_this.__js_helper$_length;
      _this.__js_helper$_modifications = _this.__js_helper$_modifications + 1 & 67108863;
      return cell;
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return t1.$index(0, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this._map.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this._map.__js_helper$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this._map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1.__js_helper$_modifications, this.$ti);
      t2.__js_helper$_cell = t1.__js_helper$_first;
      return t2;
    },
    contains$1: function(_, element) {
      return this._map.containsKey$1(element);
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
      t1 = this._map;
      cell = t1.__js_helper$_first;
      modifications = t1.__js_helper$_modifications;
      for (; cell != null;) {
        f.call$1(cell.hashMapCellKey);
        if (modifications !== t1.__js_helper$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell.__js_helper$_next;
      }
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function() {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._map;
      if (_this.__js_helper$_modifications !== t1.__js_helper$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this.__js_helper$_cell;
        if (t1 == null) {
          _this.set$__js_helper$_current(null);
          return false;
        } else {
          _this.set$__js_helper$_current(t1.hashMapCellKey);
          _this.__js_helper$_cell = _this.__js_helper$_cell.__js_helper$_next;
          return true;
        }
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 8
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 50
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H.stringTypeCheck(tag));
    },
    $signature: 57
  };
  H.StringMatch.prototype = {};
  H.NativeByteBuffer.prototype = {$isNativeByteBuffer: 1};
  H.NativeTypedData.prototype = {$isNativeTypedData: 1};
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
    }
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.doubleTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asFixedLengthListMixin: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.intTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asFixedLengthListMixin: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H.NativeInt16List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt32List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeInt8List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint16List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint32List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8ClampedList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H.NativeUint8List.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    }
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 16
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 17
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 0
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    $signature: 0
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    },
    cancel$0: function() {
      if (self.setTimeout != null) {
        var t1 = this._handle;
        if (t1 == null)
          return;
        self.clearTimeout(t1);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    $isTimer: 1
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      this.$this._handle = null;
      this.callback.call$0();
    },
    $signature: 1
  };
  P._Completer.prototype = {};
  P._AsyncCompleter.prototype = {};
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]}), asyncError.error, P.bool, P.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback = this.errorCallback,
        t1 = P.Object,
        t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)},
        t3 = this.result._zone;
      if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.futureOrCheck(t3.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
      else
        return H.futureOrCheck(t3.runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
    }
  };
  P._Future.prototype = {
    then$1$2$onError: function(f, onError, $R) {
      var currentZone, result, t2,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      result = new P._Future($.Zone__current, [$R]);
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, [t1, $R]));
      return result;
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _addListener$1: function(listener) {
      var source, _this = this,
        t1 = _this._state;
      if (t1 <= 1) {
        listener._nextListener = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        _this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(_this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        P._rootScheduleMicrotask(null, null, _this._zone, H.functionTypeCheck(new P._Future__addListener_closure(_this, listener), {func: 1, ret: -1}));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, cursor, cursor0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._state;
      if (t1 <= 1) {
        existingListeners = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        cursor = _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          for (; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
            ;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(_this._resultOrListeners, "$is_Future");
          t1 = source._state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        P._rootScheduleMicrotask(null, null, _this._zone, H.functionTypeCheck(new P._Future__prependListeners_closure(_box_0, _this), {func: 1, ret: -1}));
      }
    },
    _removeListeners$0: function() {
      var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t2, listeners, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.futureOrCheck(value, {futureOr: 1, type: t1});
      t2 = _this.$ti;
      if (H.checkSubtype(value, "$isFuture", t2, "$asFuture"))
        if (H.checkSubtype(value, "$is_Future", t2, null))
          P._Future__chainCoreFuture(value, _this);
        else
          P._Future__chainForeignFuture(value, _this);
      else {
        listeners = _this._removeListeners$0();
        H.assertSubtypeOfRuntimeType(value, t1);
        _this._state = 4;
        _this._resultOrListeners = value;
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeError$2: function(error, stackTrace) {
      var listeners, _this = this;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      listeners = _this._removeListeners$0();
      _this._state = 8;
      _this._resultOrListeners = new P.AsyncError(error, stackTrace);
      P._Future__propagateToListeners(_this, listeners);
    },
    _asyncComplete$1: function(value) {
      var _this = this;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 0)});
      if (H.checkSubtype(value, "$isFuture", _this.$ti, "$asFuture")) {
        _this._chainFuture$1(value);
        return;
      }
      _this._state = 1;
      P._rootScheduleMicrotask(null, null, _this._zone, H.functionTypeCheck(new P._Future__asyncComplete_closure(_this, value), {func: 1, ret: -1}));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      H.assertSubtype(value, "$isFuture", t1, "$asFuture");
      if (H.checkSubtype(value, "$is_Future", t1, null)) {
        if (value._state === 8) {
          _this._state = 1;
          P._rootScheduleMicrotask(null, null, _this._zone, H.functionTypeCheck(new P._Future__chainFuture_closure(_this, value), {func: 1, ret: -1}));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      P._Future__chainForeignFuture(value, _this);
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      this._state = 1;
      P._rootScheduleMicrotask(null, null, this._zone, H.functionTypeCheck(new P._Future__asyncCompleteError_closure(this, error, stackTrace), {func: 1, ret: -1}));
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._state = 0;
      t1._complete$1(value);
    },
    $signature: 16
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this.target._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    $signature: 30
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  P._Future__asyncComplete_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = H.assertSubtypeOfRuntimeType(this.value, H.getTypeArgumentByIndex(t1, 0)),
        listeners = t1._removeListeners$0();
      t1._state = 4;
      t1._resultOrListeners = t2;
      P._Future__propagateToListeners(t1, listeners);
    },
    $signature: 0
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 0
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this.listener;
        completeResult = t1.result._zone.run$1$1(H.functionTypeCheck(t1.callback, {func: 1}), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (_this.hasError) {
          t1 = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError").error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        else
          t2.listenerValueOrError = new P.AsyncError(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (!!J.getInterceptor$(completeResult).$isFuture) {
        if (completeResult instanceof P._Future && completeResult._state >= 4) {
          if (completeResult._state === 8) {
            t1 = _this._box_0;
            t1.listenerValueOrError = H.interceptedTypeCheck(completeResult._resultOrListeners, "$isAsyncError");
            t1.listenerHasError = true;
          }
          return;
        }
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
        t1.listenerHasError = false;
      }
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 40
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, exception, _this = this;
      try {
        t1 = _this.listener;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        t3 = H.assertSubtypeOfRuntimeType(_this.sourceResult, t2);
        t4 = H.getTypeArgumentByIndex(t1, 1);
        _this._box_0.listenerValueOrError = t1.result._zone.runUnary$2$2(H.functionTypeCheck(t1.callback, {func: 1, ret: {futureOr: 1, type: t4}, args: [t2]}), t3, {futureOr: 1, type: t4}, t2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_0;
        t1.listenerValueOrError = new P.AsyncError(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, t2, exception, t3, t4, _this = this;
      try {
        asyncError = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        t1 = _this.listener;
        if (H.boolConversionCheck(t1.matchesErrorTest$1(asyncError)) && t1.errorCallback != null) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1.handleError$1(asyncError);
          t2.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        t2 = t1.error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1;
        else
          t4.listenerValueOrError = new P.AsyncError(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 1
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    get$length: function(_) {
      var t2, t3, _this = this, t1 = {},
        future = new P._Future($.Zone__current, [P.int]);
      t1.count = 0;
      t2 = H.getTypeArgumentByIndex(_this, 0);
      t3 = H.functionTypeCheck(new P.Stream_length_closure(t1, _this), {func: 1, ret: -1, args: [t2]});
      H.functionTypeCheck(new P.Stream_length_closure0(t1, future), {func: 1, ret: -1});
      W._EventStreamSubscription$(_this._html$_target, _this._eventType, t3, false, t2);
      return future;
    }
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      H.assertSubtypeOfRuntimeType(_, H.getTypeArgumentByIndex(this.$this, 0));
      ++this._box_0.count;
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  P.StreamSubscription.prototype = {};
  P.StreamTransformerBase.prototype = {};
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1
  };
  P._Zone.prototype = {$isZone: 1};
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var error,
        t1 = this._box_0,
        t2 = t1.error;
      t1 = t2 == null ? t1.error = new P.NullThrownError() : t2;
      t2 = this.stackTrace;
      if (t2 == null)
        throw H.wrapException(t1);
      error = H.wrapException(t1);
      error.stack = t2.toString$0(0);
      throw error;
    },
    $signature: 0
  };
  P._RootZone.prototype = {
    runGuarded$1: function(f) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(_null, _null, this, f, -1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(_null, _null, this, f, arg, -1, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
    },
    run$1$1: function(f, $R) {
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 1
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  P._LinkedHashSet.prototype = {
    get$iterator: function(_) {
      var _this = this,
        t1 = new P._LinkedHashSetIterator(_this, _this._modifications, _this.$ti);
      t1._cell = _this._first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    contains$1: function(_, object) {
      var t1 = this._contains$1(object);
      return t1;
    },
    _contains$1: function(object) {
      var rest = this._rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [t1]});
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$1(H.assertSubtypeOfRuntimeType(cell._element, t1));
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      if (typeof element === "string" && element !== "__proto__") {
        strings = _this._strings;
        return _this._addHashTableEntry$2(strings == null ? _this._strings = P._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element === "number" && (element & 1073741823) === element) {
        nums = _this._nums;
        return _this._addHashTableEntry$2(nums == null ? _this._nums = P._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(element);
    },
    _add$1: function(element) {
      var rest, hash, bucket, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      rest = _this._rest;
      if (rest == null)
        rest = _this._rest = P._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      var _this = this;
      if (typeof object === "string" && object !== "__proto__")
        return _this._removeHashTableEntry$2(_this._strings, object);
      else if (typeof object === "number" && (object & 1073741823) === object)
        return _this._removeHashTableEntry$2(_this._nums, object);
      else
        return _this._remove$1(object);
    },
    _remove$1: function(object) {
      var bucket, index, _this = this,
        rest = _this._rest;
      if (rest == null)
        return false;
      bucket = _this._getBucket$2(rest, object);
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      _this._unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      var _this = this;
      if (_this._collection$_length > 0) {
        _this._strings = _this._nums = _this._rest = _this._first = _this._last = null;
        _this._collection$_length = 0;
        _this._modified$0();
      }
    },
    _addHashTableEntry$2: function(table, element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell") != null)
        return false;
      table[element] = this._newLinkedCell$1(element);
      return true;
    },
    _removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell");
      if (cell == null)
        return false;
      this._unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _modified$0: function() {
      this._modifications = 1073741823 & this._modifications + 1;
    },
    _newLinkedCell$1: function(element) {
      var last, _this = this,
        cell = new P._LinkedHashSetCell(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0)));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        last = _this._last;
        cell._previous = last;
        _this._last = last._next = cell;
      }
      ++_this._collection$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this._collection$_length;
      _this._modified$0();
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    get$current: function() {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._set;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._cell;
        if (t1 == null) {
          _this.set$_collection$_current(null);
          return false;
        } else {
          _this.set$_collection$_current(H.assertSubtypeOfRuntimeType(t1._element, H.getTypeArgumentByIndex(_this, 0)));
          _this._cell = _this._cell._next;
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P.IterableBase.prototype = {};
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(_this.$index(receiver, i));
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return this.get$length(receiver) !== 0;
    },
    any$1: function(receiver, test) {
      var $length, i, _this = this;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (H.boolConversionCheck(test.call$1(_this.$index(receiver, i))))
          return true;
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    where$1: function(receiver, test) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return new H.WhereIterable(receiver, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    add$1: function(receiver, element) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0));
      t1 = _this.get$length(receiver);
      _this.set$length(receiver, t1 + 1);
      _this.$indexSet(receiver, t1, element);
    },
    addAll$1: function(receiver, iterable) {
      var i, t1, t2;
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)], "$asIterable");
      i = this.get$length(receiver);
      for (t1 = J.get$iterator$ax(iterable), t2 = i + 1; t1.moveNext$0();) {
        t1.get$current();
        this.set$length(receiver, t2);
      }
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 7
  };
  P.MapMixin.prototype = {
    forEach$1: function(_, action) {
      var t1, key, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(_this, "MapMixin", 0), H.getRuntimeTypeArgument(_this, "MapMixin", 1)]});
      for (t1 = _this.get$keys(), t1 = t1.get$iterator(t1); t1.moveNext$0();) {
        key = t1.get$current();
        action.call$2(key, _this.$index(0, key));
      }
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(_this, "MapMixin", 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getRuntimeTypeArgument(_this, "MapMixin", 1)});
      if (_this.containsKey$1(key))
        return _this.$index(0, key);
      t1 = ifAbsent.call$0();
      _this.$indexSet(0, key, t1);
      return t1;
    },
    containsKey$1: function(key) {
      return this.get$keys().contains$1(0, key);
    },
    get$length: function(_) {
      var t1 = this.get$keys();
      return t1.get$length(t1);
    },
    get$isEmpty: function(_) {
      var t1 = this.get$keys();
      return t1.get$isEmpty(t1);
    },
    get$values: function() {
      return new P._MapBaseValueIterable(this, [H.getRuntimeTypeArgument(this, "MapMixin", 0), H.getRuntimeTypeArgument(this, "MapMixin", 1)]);
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $isMap: 1
  };
  P._MapBaseValueIterable.prototype = {
    get$length: function(_) {
      var t1 = this._collection$_map;
      return t1.get$length(t1);
    },
    get$isEmpty: function(_) {
      var t1 = this._collection$_map;
      return t1.get$isEmpty(t1);
    },
    get$iterator: function(_) {
      var t1 = this._collection$_map,
        t2 = t1.get$keys();
      return new P._MapBaseValueIterator(t2.get$iterator(t2), t1, this.$ti);
    },
    $asEfficientLengthIterable: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    }
  };
  P._MapBaseValueIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._keys;
      if (t1.moveNext$0()) {
        _this.set$_collection$_current(_this._collection$_map.$index(0, t1.get$current()));
        return true;
      }
      _this.set$_collection$_current(null);
      return false;
    },
    get$current: function() {
      return this._collection$_current;
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($K, $V) {
      return [$V];
    }
  };
  P._SetBase.prototype = {
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return new H.EfficientLengthMappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    expand$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return new H.ExpandIterable(this, H.functionTypeCheck(f, {func: 1, ret: [P.Iterable, $T], args: [t1]}), [t1, $T]);
    },
    forEach$1: function(_, f) {
      var t1, _this = this;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0)]});
      for (t1 = P._LinkedHashSetIterator$(_this, _this._modifications, H.getTypeArgumentByIndex(_this, 0)); t1.moveNext$0();)
        f.call$1(t1._collection$_current);
    },
    reduce$1: function(_, combine) {
      var iterator, value, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(combine, {func: 1, ret: t1, args: [t1, t1]});
      iterator = P._LinkedHashSetIterator$(_this, _this._modifications, H.getTypeArgumentByIndex(_this, 0));
      if (!iterator.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      value = iterator._collection$_current;
      for (; iterator.moveNext$0();)
        value = combine.call$2(value, iterator._collection$_current);
      return value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  P._JsonMap.prototype = {
    $index: function(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._convert$_data.$index(0, key);
      else if (typeof key !== "string")
        return;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._convert$_data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._computeKeys$0().length;
      return t1;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$keys: function() {
      if (this._processed == null)
        return this._convert$_data.get$keys();
      return new P._JsonMapKeyIterable(this);
    },
    get$values: function() {
      var _this = this;
      if (_this._processed == null)
        return _this._convert$_data.get$values();
      return H.MappedIterable_MappedIterable(_this._computeKeys$0(), new P._JsonMap_values_closure(_this), P.String, null);
    },
    $indexSet: function(_, key, value) {
      var processed, original, _this = this;
      H.stringTypeCheck(key);
      if (_this._processed == null)
        _this._convert$_data.$indexSet(0, key, value);
      else if (_this.containsKey$1(key)) {
        processed = _this._processed;
        processed[key] = value;
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        _this._upgrade$0().$indexSet(0, key, value);
    },
    containsKey$1: function(key) {
      if (this._processed == null)
        return this._convert$_data.containsKey$1(key);
      if (typeof key !== "string")
        return false;
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    putIfAbsent$2: function(key, ifAbsent) {
      var value;
      H.functionTypeCheck(ifAbsent, {func: 1});
      if (this.containsKey$1(key))
        return this.$index(0, key);
      value = ifAbsent.call$0();
      this.$indexSet(0, key, value);
      return value;
    },
    forEach$1: function(_, f) {
      var keys, i, key, value, _this = this;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      if (_this._processed == null)
        return _this._convert$_data.forEach$1(0, f);
      keys = _this._computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = P._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._convert$_data)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0: function() {
      var keys = H.listTypeCheck(this._convert$_data);
      if (keys == null)
        keys = this._convert$_data = H.setRuntimeTypeInfo(Object.keys(this._original), [P.String]);
      return keys;
    },
    _upgrade$0: function() {
      var result, keys, i, t1, key, _this = this;
      if (_this._processed == null)
        return _this._convert$_data;
      result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      keys = _this._computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, _this.$index(0, key));
      }
      if (t1 === 0)
        C.JSArray_methods.add$1(keys, null);
      else
        C.JSArray_methods.set$length(keys, 0);
      _this._original = _this._processed = null;
      return _this._convert$_data = result;
    },
    _process$1: function(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return;
      result = P._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $asMap: function() {
      return [P.String, null];
    }
  };
  P._JsonMap_values_closure.prototype = {
    call$1: function(each) {
      return this.$this.$index(0, each);
    },
    $signature: 8
  };
  P._JsonMapKeyIterable.prototype = {
    get$length: function(_) {
      var t1 = this._parent;
      return t1.get$length(t1);
    },
    elementAt$1: function(_, index) {
      var t1 = this._parent;
      if (t1._processed == null)
        t1 = t1.get$keys().elementAt$1(0, index);
      else {
        t1 = t1._computeKeys$0();
        if (index >= t1.length)
          return H.ioore(t1, index);
        t1 = t1[index];
      }
      return t1;
    },
    get$iterator: function(_) {
      var t1 = this._parent;
      if (t1._processed == null) {
        t1 = t1.get$keys();
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
      }
      return t1;
    },
    contains$1: function(_, key) {
      return this._parent.containsKey$1(key);
    },
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asListIterable: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    }
  };
  P.Codec.prototype = {};
  P.Converter.prototype = {};
  P.JsonUnsupportedObjectError.prototype = {
    toString$0: function(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  P.JsonCyclicError.prototype = {
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  P.JsonCodec.prototype = {
    decode$2$reviver: function(source, reviver) {
      var t1 = P._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    encode$2$toEncodable: function(value, toEncodable) {
      var t1 = P._JsonStringStringifier_stringify(value, this.get$encoder()._toEncodable, null);
      return t1;
    },
    get$encoder: function() {
      return C.JsonEncoder_null;
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    }
  };
  P.JsonEncoder.prototype = {
    $asConverter: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonDecoder.prototype = {
    $asConverter: function() {
      return [P.String, P.Object];
    }
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1: function(s) {
      var t1, t2, offset, i, charCode, t3, t4,
        $length = s.length;
      for (t1 = J.getInterceptor$s(s), t2 = this._sink, offset = 0, i = 0; i < $length; ++i) {
        charCode = t1._codeUnitAt$1(s, i);
        if (charCode > 92)
          continue;
        if (charCode < 32) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t3 = t2._contents += H.Primitives_stringFromCharCode(92);
          switch (charCode) {
            case 8:
              t2._contents = t3 + H.Primitives_stringFromCharCode(98);
              break;
            case 9:
              t2._contents = t3 + H.Primitives_stringFromCharCode(116);
              break;
            case 10:
              t2._contents = t3 + H.Primitives_stringFromCharCode(110);
              break;
            case 12:
              t2._contents = t3 + H.Primitives_stringFromCharCode(102);
              break;
            case 13:
              t2._contents = t3 + H.Primitives_stringFromCharCode(114);
              break;
            default:
              t3 += H.Primitives_stringFromCharCode(117);
              t2._contents = t3;
              t3 += H.Primitives_stringFromCharCode(48);
              t2._contents = t3;
              t3 += H.Primitives_stringFromCharCode(48);
              t2._contents = t3;
              t4 = charCode >>> 4 & 15;
              t3 += H.Primitives_stringFromCharCode(t4 < 10 ? 48 + t4 : 87 + t4);
              t2._contents = t3;
              t4 = charCode & 15;
              t2._contents = t3 + H.Primitives_stringFromCharCode(t4 < 10 ? 48 + t4 : 87 + t4);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t3 = t2._contents += H.Primitives_stringFromCharCode(92);
          t2._contents = t3 + H.Primitives_stringFromCharCode(charCode);
        }
      }
      if (offset === 0)
        t2._contents += H.S(s);
      else if (offset < $length)
        t2._contents += t1.substring$2(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(new P.JsonCyclicError(object, null));
      }
      C.JSArray_methods.add$1(t1, object);
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw H.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1: function(object) {
      var t1, success, _this = this;
      if (typeof object === "number") {
        if (!isFinite(object))
          return false;
        _this._sink._contents += C.JSNumber_methods.toString$0(object);
        return true;
      } else if (object === true) {
        _this._sink._contents += "true";
        return true;
      } else if (object === false) {
        _this._sink._contents += "false";
        return true;
      } else if (object == null) {
        _this._sink._contents += "null";
        return true;
      } else if (typeof object === "string") {
        t1 = _this._sink;
        t1._contents += '"';
        _this.writeStringContent$1(object);
        t1._contents += '"';
        return true;
      } else {
        t1 = J.getInterceptor$(object);
        if (!!t1.$isList) {
          _this._checkCycle$1(object);
          _this.writeList$1(object);
          t1 = _this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          return true;
        } else if (!!t1.$isMap) {
          _this._checkCycle$1(object);
          success = _this.writeMap$1(object);
          t1 = _this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          return success;
        } else
          return false;
      }
    },
    writeList$1: function(list) {
      var t2, i,
        t1 = this._sink;
      t1._contents += "[";
      t2 = J.getInterceptor$ax(list);
      if (t2.get$isNotEmpty(list)) {
        this.writeObject$1(t2.$index(list, 0));
        for (i = 1; i < t2.get$length(list); ++i) {
          t1._contents += ",";
          this.writeObject$1(t2.$index(list, i));
        }
      }
      t1._contents += "]";
    },
    writeMap$1: function(map) {
      var t1, keyValueList, i, t2, separator, t3, _this = this, _box_0 = {};
      if (map.get$isEmpty(map)) {
        _this._sink._contents += "{}";
        return true;
      }
      t1 = map.get$length(map) * 2;
      keyValueList = new Array(t1);
      keyValueList.fixed$length = Array;
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      map.forEach$1(0, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      t2 = _this._sink;
      t2._contents += "{";
      for (separator = '"'; i < t1; i += 2, separator = ',"') {
        t2._contents += separator;
        _this.writeStringContent$1(H.stringTypeCheck(keyValueList[i]));
        t2._contents += '":';
        t3 = i + 1;
        if (t3 >= t1)
          return H.ioore(keyValueList, t3);
        _this.writeObject$1(keyValueList[t3]);
      }
      t2._contents += "}";
      return true;
    }
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      if (typeof key !== "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      C.JSArray_methods.$indexSet(t1, t2.i++, key);
      C.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 7
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult: function() {
      var t1 = this._sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  P.bool.prototype = {};
  P.DateTime.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && this._value === other._value && this.isUtc === other.isUtc;
    },
    get$hashCode: function(_) {
      var t1 = this._value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this));
      if (_this.isUtc)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    toIso8601String$0: function() {
      var _this = this,
        y = H.Primitives_getYear(_this) >= -9999 && H.Primitives_getYear(_this) <= 9999 ? P.DateTime__fourDigits(H.Primitives_getYear(_this)) : P.DateTime__sixDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this));
      if (_this.isUtc)
        return y + "-" + m + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms;
    }
  };
  P.double.prototype = {};
  P.Duration.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.Duration && this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this._duration);
    },
    toString$0: function(_) {
      var twoDigitMinutes, twoDigitSeconds, sixDigitUs,
        t1 = new P.Duration_toString_twoDigits(),
        t2 = this._duration;
      if (t2 < 0)
        return "-" + new P.Duration(0 - t2).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 60000000) % 60);
      twoDigitSeconds = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 1000000) % 60);
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(t2 % 1000000);
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    }
  };
  P.Duration_toString_sixDigits.prototype = {
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    },
    $signature: 18
  };
  P.Duration_toString_twoDigits.prototype = {
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    $signature: 18
  };
  P.Error.prototype = {};
  P.AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed";
    }
  };
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var message, prefix, explanation, errorValue, _this = this,
        t1 = _this.name,
        nameString = t1 != null ? " (" + t1 + ")" : "";
      t1 = _this.message;
      message = t1 == null ? "" : ": " + t1;
      prefix = _this.get$_errorName() + nameString + message;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation, t2,
        t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else if (t2 > t1)
          explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
        else
          explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
      }
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1,
        invalidValue = H.intTypeCheck(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + t1;
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = this.variableName;
      return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    }
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var t1 = this.message,
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException";
      return report;
    }
  };
  P.int.prototype = {};
  P.Iterable.prototype = {
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.MappedIterable_MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    where$1: function(_, test) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return new H.WhereIterable(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    forEach$1: function(_, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current());
    },
    any$1: function(_, test) {
      var t1;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (H.boolConversionCheck(test.call$1(t1.get$current())))
          return true;
      return false;
    },
    toList$0: function(_) {
      return P.List_List$from(this, true, H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current();
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current();
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P._GeneratorIterable.prototype = {
    elementAt$1: function(_, index) {
      var $length = this.length;
      if (index >= $length)
        H.throwExpression(P.IndexError$(index, this, "index", null, $length));
      return this._generator.call$1(index);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.Iterator.prototype = {};
  P.List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P.Map.prototype = {};
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.num.prototype = {};
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(this)) + "'";
    },
    toString: function() {
      return this.toString$0(this);
    }
  };
  P.StackTrace.prototype = {};
  P.String.prototype = {$isPattern: 1};
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  W.Blob.prototype = {$isBlob: 1};
  W.DedicatedWorkerGlobalScope.prototype = {$isDedicatedWorkerGlobalScope: 1};
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.Event.prototype = {$isEvent: 1};
  W.EventTarget.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, false);
    },
    _addEventListener$3: function(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
    },
    $isEventTarget: 1
  };
  W.File.prototype = {$isFile: 1};
  W.MessageEvent.prototype = {$isMessageEvent: 1};
  W.MessagePort.prototype = {
    postMessage$1: function(receiver, message) {
      receiver.postMessage(new P._StructuredCloneDart2Js([], []).walk$1(message));
      return;
    },
    $isMessagePort: 1
  };
  W.WorkerGlobalScope.prototype = {};
  W._EventStream.prototype = {};
  W._EventStreamSubscription.prototype = {};
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
    },
    $signature: 65
  };
  P._StructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var t2, slot, copy, _this = this, t1 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      t2 = J.getInterceptor$(e);
      if (!!t2.$isDateTime)
        return new Date(e._value);
      if (!!t2.$isFile)
        return e;
      if (!!t2.$isBlob)
        return e;
      if (!!t2.$isNativeByteBuffer || !!t2.$isNativeTypedData || !!t2.$isMessagePort)
        return e;
      if (!!t2.$isMap) {
        slot = _this.findSlot$1(e);
        t2 = _this.copies;
        if (slot >= t2.length)
          return H.ioore(t2, slot);
        copy = t1.copy = t2[slot];
        if (copy != null)
          return copy;
        copy = {};
        t1.copy = copy;
        C.JSArray_methods.$indexSet(t2, slot, copy);
        e.forEach$1(0, new P._StructuredClone_walk_closure(t1, _this));
        return t1.copy;
      }
      if (!!t2.$isList) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        return _this.copyList$2(e, slot);
      }
      if (!!t2.$isJSObject) {
        slot = _this.findSlot$1(e);
        t2 = _this.copies;
        if (slot >= t2.length)
          return H.ioore(t2, slot);
        copy = t1.copy = t2[slot];
        if (copy != null)
          return copy;
        copy = {};
        t1.copy = copy;
        C.JSArray_methods.$indexSet(t2, slot, copy);
        _this.forEachObjectKey$2(e, new P._StructuredClone_walk_closure0(t1, _this));
        return t1.copy;
      }
      throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
    },
    copyList$2: function(e, slot) {
      var i,
        t1 = J.getInterceptor$asx(e),
        $length = t1.get$length(e),
        copy = new Array($length);
      C.JSArray_methods.$indexSet(this.copies, slot, copy);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(copy, i, this.walk$1(t1.$index(e, i)));
      return copy;
    }
  };
  P._StructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 7
  };
  P._StructuredClone_walk_closure0.prototype = {
    call$2: function(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 7
  };
  P._AcceptStructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var millisSinceEpoch, t1, proto, slot, copy, l, t2, $length, i, _this = this, _box_0 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date) {
        millisSinceEpoch = e.getTime();
        if (Math.abs(millisSinceEpoch) <= 864e13)
          t1 = false;
        else
          t1 = true;
        if (t1)
          H.throwExpression(P.ArgumentError$("DateTime is outside valid range: " + millisSinceEpoch));
        return new P.DateTime(millisSinceEpoch, true);
      }
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (typeof Promise != "undefined" && e instanceof Promise)
        return P.promiseToFuture(e, null);
      proto = Object.getPrototypeOf(e);
      if (proto === Object.prototype || proto === null) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = _box_0.copy = t1[slot];
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap__makeEmpty();
        _box_0.copy = copy;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        _this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(_box_0, _this));
        return _box_0.copy;
      }
      if (e instanceof Array) {
        l = e;
        slot = _this.findSlot$1(l);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = J.getInterceptor$asx(l);
        $length = t2.get$length(l);
        copy = _this.mustCopy ? new Array($length) : l;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        for (t1 = J.getInterceptor$ax(copy), i = 0; i < $length; ++i)
          t1.$indexSet(copy, i, _this.walk$1(t2.$index(l, i)));
        return copy;
      }
      return e;
    },
    convertNativeToDart_AcceptStructuredClone$2$mustCopy: function(object, mustCopy) {
      this.mustCopy = true;
      return this.walk$1(object);
    }
  };
  P._AcceptStructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this._box_0.copy,
        t2 = this.$this.walk$1(value);
      J.$indexSet$ax(t1, key, t2);
      return t2;
    },
    $signature: 73
  };
  P._StructuredCloneDart2Js.prototype = {
    forEachObjectKey$2: function(object, action) {
      var t1, t2, _i, key;
      H.functionTypeCheck(action, {func: 1, args: [,,]});
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t2; ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  P._AcceptStructuredCloneDart2Js.prototype = {
    forEachJsField$2: function(object, action) {
      var t1, t2, _i, key;
      H.functionTypeCheck(action, {func: 1, args: [,,]});
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  P.promiseToFuture_closure.prototype = {
    call$1: function(r) {
      var t1 = this.completer;
      r = H.futureOrCheck(H.futureOrCheck(r, {futureOr: 1, type: this.T}), {futureOr: 1, type: H.getTypeArgumentByIndex(t1, 0)});
      t1 = t1.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(r);
      return;
    },
    $signature: 19
  };
  P.promiseToFuture_closure0.prototype = {
    call$1: function(e) {
      var error = e == null ? new P.NullThrownError() : e,
        t1 = this.completer.future;
      if (t1._state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncCompleteError$2(error, null);
      return;
    },
    $signature: 19
  };
  X.Optional.prototype = {
    get$value: function() {
      var t1 = this._core$_value;
      if (t1 == null)
        throw H.wrapException(P.StateError$("value called on absent Optional."));
      return t1;
    },
    get$iterator: function(_) {
      var t1 = this._core$_value;
      if (t1 != null) {
        t1 = H.setRuntimeTypeInfo([t1], this.$ti);
        t1 = new J.ArrayIterator(t1, 1, [H.getTypeArgumentByIndex(t1, 0)]);
      } else
        t1 = C.C_EmptyIterator;
      return t1;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._core$_value);
    },
    $eq: function(_, o) {
      if (o == null)
        return false;
      return H.checkSubtype(o, "$isOptional", this.$ti, null) && J.$eq$(o._core$_value, this._core$_value);
    },
    toString$0: function(_) {
      var t1 = this._core$_value;
      return t1 == null ? "Optional { absent }" : "Optional { value: " + t1.toString$0(0) + " }";
    }
  };
  S.Tuple2.prototype = {
    toString$0: function(_) {
      return "[" + H.S(this.item1) + ", " + H.S(this.item2) + "]";
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof S.Tuple2 && J.$eq$(other.item1, this.item1) && J.$eq$(other.item2, this.item2);
    },
    get$hashCode: function(_) {
      var hash,
        t1 = J.get$hashCode$(this.item1),
        t2 = J.get$hashCode$(this.item2);
      t2 = X._combine(X._combine(0, C.JSInt_methods.get$hashCode(t1)), C.JSInt_methods.get$hashCode(t2));
      hash = 536870911 & t2 + ((67108863 & t2) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    }
  };
  M.AStar.prototype = {
    findNextActiveNode$0: function() {
      var t1, t2, t3, pathsOfOpen, pathsOfOpenHeuristic, t4, t5, t6, t7, t8, t9, t10, t11, _this = this, _s5_ = "green", _s6_ = "yellow",
        nStar = _this.open.reduce$1(0, new M.AStar_findNextActiveNode_closure(_this));
      if (_this.nextTurn - 1 === _this._turnOfHistory) {
        t1 = _this.open;
        t2 = K.PathHighlight;
        t3 = H.getTypeArgumentByIndex(t1, 0);
        pathsOfOpen = P.List_List$from(new H.EfficientLengthMappedIterable(t1, H.functionTypeCheck(new M.AStar_findNextActiveNode_closure0(_this), {func: 1, ret: t2, args: [t3]}), [t3, t2]), true, t2);
        t3 = _this.open;
        t1 = H.getTypeArgumentByIndex(t3, 0);
        pathsOfOpenHeuristic = P.List_List$from(new H.EfficientLengthMappedIterable(t3, H.functionTypeCheck(new M.AStar_findNextActiveNode_closure1(_this), {func: 1, ret: t2, args: [t1]}), [t1, t2]), true, t2);
        t2 = _this.searchHistory;
        C.JSArray_methods.add$1(t2._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
        t1 = K.Highlight;
        t3 = [t1];
        t4 = E.Position;
        t5 = [t4];
        t2.addEMM$4("First we look at all nodes which are ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t4 = H.assertSubtype(_this.open, "$isIterable", [t4], "$asIterable");
        t2.addEMM$4("marked open", _s5_, H.setRuntimeTypeInfo([new K.CircleHighlight()], t3), t4);
        t2.addEMM$4(". From all these nodes we know a ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("path", _s5_, H.assertSubtype(pathsOfOpen, "$isIterable", [t1], "$asIterable"), H.setRuntimeTypeInfo([null], t5));
        t2.addEMM$4(" from the source node to them. ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("Therefore we also know the ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t1 = [[P.Iterable, K.Highlight], [P.Iterable, E.Position]];
        t4 = [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]];
        t6 = [t4];
        t7 = H.setRuntimeTypeInfo([new S.Tuple2(pathsOfOpen, H.setRuntimeTypeInfo([null], t5), t1)], t6);
        t8 = _this.open;
        t9 = H.getTypeArgumentByIndex(t8, 0);
        C.JSArray_methods.addAll$1(t7, new H.EfficientLengthMappedIterable(t8, H.functionTypeCheck(new M.AStar_findNextActiveNode_closure2(_this), {func: 1, ret: t4, args: [t9]}), [t9, t4]));
        t2.addEM_$3("distance", _s5_, t7);
        t2.addEMM$4(" between them. ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("And when we also use the ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t7 = _this.heuristic;
        t9 = H.S(t7);
        t8 = H.setRuntimeTypeInfo([new S.Tuple2(pathsOfOpenHeuristic, H.setRuntimeTypeInfo([null], t5), t1)], t6);
        t10 = _this.open;
        t11 = H.getTypeArgumentByIndex(t10, 0);
        C.JSArray_methods.addAll$1(t8, new H.EfficientLengthMappedIterable(t10, H.functionTypeCheck(new M.AStar_findNextActiveNode_closure3(_this), {func: 1, ret: t4, args: [t11]}), [t11, t4]));
        t2.addEM_$3(t9, _s6_, t8);
        t2.addEMM$4(" as our heuristic, we can approximate the distance of the nodes to the target node. ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("When we now add both distances, we can ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t8 = H.setRuntimeTypeInfo([new S.Tuple2(pathsOfOpen, H.setRuntimeTypeInfo([null], t5), t1)], t6);
        C.JSArray_methods.add$1(t8, new S.Tuple2(pathsOfOpenHeuristic, H.setRuntimeTypeInfo([null], t5), t1));
        t9 = _this.open;
        t11 = H.getTypeArgumentByIndex(t9, 0);
        C.JSArray_methods.addAll$1(t8, new H.EfficientLengthMappedIterable(t9, H.functionTypeCheck(new M.AStar_findNextActiveNode_closure4(_this), {func: 1, ret: t4, args: [t11]}), [t11, t4]));
        t2.addEM_$3("approximate the total distance", _s6_, t8);
        t2.addEMM$4(" from the source node to our target node over the open marked nodes. ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("We will now take the node of them, which has the ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t8 = _this.getPath$1(nStar);
        t4 = H.setRuntimeTypeInfo(t8.slice(0), [H.getTypeArgumentByIndex(t8, 0)]);
        t8 = _this.target;
        t2.addEM_$3("shortest approximated total distance", _s5_, H.setRuntimeTypeInfo([new S.Tuple2(H.setRuntimeTypeInfo([K.PathHighlight$(t4, true), K.PathHighlight$styled("yellow dotted", t7.getPath$2(nStar, t8), null, true, null)], t3), H.setRuntimeTypeInfo([null], t5), t1), new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(t7.calc$2(nStar, t8) + _this.getDistance$1(nStar).length$0(0), 3))], t3), H.setRuntimeTypeInfo([nStar], t5), t1)], t6));
        t2.addEMM$4(" to the target node and make him to the ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("current selected node", _s6_, H.setRuntimeTypeInfo([new K.CircleHighlight()], t3), H.setRuntimeTypeInfo([nStar], t5));
        t2.addEMM$4(" of this iteration. We will also mark him closed, so we can say for sure, that we have found the shortest way from the source node to him. ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
      }
      return nStar;
    }
  };
  M.AStar_closure.prototype = {
    call$5: function(grid, startPosition, targetPosition, heuristic, turnOfHistory) {
      var t1 = new M.AStar("A*", grid, startPosition, targetPosition, heuristic, turnOfHistory, Y.SearchHistory$(F.Size$fromMap(H.interceptedTypeCast(grid._GridCache$_store._store.$index(0, "size"), "$isMap"))));
      t1.searched = false;
      t1.BasicSearchAlgorithm$6("A*", grid, startPosition, targetPosition, heuristic, turnOfHistory);
      return t1;
    },
    $signature: 48
  };
  M.AStar_findNextActiveNode_closure.prototype = {
    call$2: function(n1, n2) {
      var t1, t2, t3;
      H.interceptedTypeCheck(n1, "$isPosition");
      H.interceptedTypeCheck(n2, "$isPosition");
      t1 = this.$this;
      t2 = t1.heuristic;
      t3 = t1.target;
      return t1.getDistance$1(n1).length$0(0) + t2.calc$2(n1, t3) < t1.getDistance$1(n2).length$0(0) + t2.calc$2(n2, t3) ? n1 : n2;
    },
    $signature: 20
  };
  M.AStar_findNextActiveNode_closure0.prototype = {
    call$1: function(on) {
      var t1 = this.$this.getPath$1(H.interceptedTypeCheck(on, "$isPosition"));
      t1 = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      return K.PathHighlight$styled("green", t1, null, true, null);
    },
    $signature: 2
  };
  M.AStar_findNextActiveNode_closure1.prototype = {
    call$1: function(on) {
      var t1 = this.$this;
      return K.PathHighlight$styled("yellow dotted", t1.heuristic.getPath$2(H.interceptedTypeCheck(on, "$isPosition"), t1.target), null, true, null);
    },
    $signature: 2
  };
  M.AStar_findNextActiveNode_closure2.prototype = {
    call$1: function(on) {
      H.interceptedTypeCheck(on, "$isPosition");
      return new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(this.$this.getDistance$1(on).length$0(0), 3))], [K.Highlight]), H.setRuntimeTypeInfo([on], [E.Position]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    },
    $signature: 3
  };
  M.AStar_findNextActiveNode_closure3.prototype = {
    call$1: function(on) {
      var t1;
      H.interceptedTypeCheck(on, "$isPosition");
      t1 = this.$this;
      return new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(t1.heuristic.calc$2(on, t1.target), 3))], [K.Highlight]), H.setRuntimeTypeInfo([on], [E.Position]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    },
    $signature: 3
  };
  M.AStar_findNextActiveNode_closure4.prototype = {
    call$1: function(on) {
      var t1;
      H.interceptedTypeCheck(on, "$isPosition");
      t1 = this.$this;
      return new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(t1.heuristic.calc$2(on, t1.target) + t1.getDistance$1(on).length$0(0), 3))], [K.Highlight]), H.setRuntimeTypeInfo([on], [E.Position]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    },
    $signature: 3
  };
  S.Algorithm.prototype = {
    run$0: function() {
      if (!this.searched) {
        this.searched = true;
        this.runInner$0();
      } else
        throw H.wrapException(P.Exception_Exception("Already run"));
    }
  };
  K.Array2D.prototype = {
    Array2D$2: function(size, _producer, $T) {
      this.set$_array(P.List_List$generate(size.width, new K.Array2D_closure(this, size, $T), [P.List, $T]));
    },
    set$_array: function(_array) {
      this._array = H.assertSubtype(_array, "$isList", [[P.List, H.getRuntimeTypeArgument(this, "Array2D", 0)]], "$asList");
    }
  };
  K.Array2D_closure.prototype = {
    call$1: function(x) {
      var t1 = this.T;
      return P.List_List$generate(this.size.height, new K.Array2D__closure(this.$this, x, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: [P.List, this.T], args: [P.int]};
    }
  };
  K.Array2D__closure.prototype = {
    call$1: function(y) {
      return this.$this._producer.call$1(new E.Position(this.x, y));
    },
    $signature: function() {
      return {func: 1, ret: this.T, args: [P.int]};
    }
  };
  D.Barrier.prototype = {
    isAnyBlocked$0: function() {
      return this._blocked.get$values().any$1(0, new D.Barrier_isAnyBlocked_closure());
    },
    toMap$0: function() {
      var t1 = this._blocked,
        t2 = t1.get$keys(),
        t3 = P.String,
        t4 = H.getRuntimeTypeArgument(t2, "Iterable", 0);
      return P.LinkedHashMap_LinkedHashMap$fromIterables(H.MappedIterable_MappedIterable(t2, H.functionTypeCheck(new D.Barrier_toMap_closure(), {func: 1, ret: t3, args: [t4]}), t4, t3), t1.get$values(), t3, P.bool);
    }
  };
  D.Barrier$fromMap_closure.prototype = {
    call$1: function(d) {
      return C.JSArray_methods.$index(C.List_4j7, P.int_parse(H.stringTypeCast(d)));
    },
    $signature: 28
  };
  D.Barrier$fromMap_closure0.prototype = {
    call$1: function(d) {
      return H.boolTypeCast(d);
    },
    $signature: 21
  };
  D.Barrier_isAnyBlocked_closure.prototype = {
    call$1: function(blocked) {
      return H.boolTypeCheck(blocked);
    },
    $signature: 31
  };
  D.Barrier_toMap_closure.prototype = {
    call$1: function(d) {
      return "" + H.interceptedTypeCheck(d, "$isDirection").index;
    },
    $signature: 33
  };
  E.BarrierManager.prototype = {
    leaveAble$2: function(position, direction) {
      var isDirectlyBlocked, _this = this,
        t1 = _this._BarrierManager$_store._store,
        gridMode = C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(t1.$index(0, "gridMode"))),
        directionMode = C.JSArray_methods.$index(C.List_Ql0, H.intTypeCast(t1.$index(0, "directionMode"))),
        cornerMode = C.JSArray_methods.$index(C.List_CornerMode_0_CornerMode_1, H.intTypeCast(t1.$index(0, "cornerMode"))),
        directionalMode = C.JSArray_methods.$index(C.List_WPn, H.intTypeCast(t1.$index(0, "directionalMode")));
      if (!position.legal$1(F.Size$fromMap(H.interceptedTypeCast(t1.$index(0, "size"), "$isMap"))))
        return false;
      if (gridMode === C.GridMode_0)
        isDirectlyBlocked = _this._leaveBlockedDirectly$2(position, direction) || _this._enterBlockedDirectly$2(position, direction);
      else
        isDirectlyBlocked = _this._leaveBlockedDirectly$2(position, direction);
      if (isDirectlyBlocked)
        return false;
      if (directionMode === C.DirectionMode_1) {
        if (C.JSArray_methods.contains$1(C.List_O1c, direction))
          return false;
      } else if (directionMode === C.DirectionMode_2)
        if (C.JSArray_methods.contains$1(C.List_9Ef, direction))
          return false;
      if (directionalMode === C.DirectionalMode_1)
        if (_this._enterBlockedDirectly$2(position, direction))
          return false;
      if (C.JSArray_methods.contains$1(C.List_O1c, direction) && cornerMode === C.CornerMode_1)
        if (_this._enterBlockedDirectly$2(position, direction) || _this._leaveBlockedDirectly$2(position.goMulti$2(O.Directions_turn(direction, 45), 1), O.Directions_turn(direction, -90)) || _this._enterBlockedDirectly$2(position.goMulti$2(O.Directions_turn(direction, 45), 1), O.Directions_turn(direction, -90)))
          return false;
      return true;
    },
    _leaveBlockedDirectly$2: function(position, direction) {
      var t1 = this._BarrierManager$_store,
        t2 = t1._store,
        gridMode = C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(t2.$index(0, "gridMode"))),
        targetPosition = position.goMulti$2(direction, 1);
      if (targetPosition.legal$1(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, "size"), "$isMap"))))
        if (position.legal$1(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, "size"), "$isMap"))))
          t1 = H.boolConversionCheck(gridMode === C.GridMode_0 ? t1.getBarrier$1(targetPosition).isAnyBlocked$0() : t1.getBarrier$1(targetPosition)._blocked.$index(0, O.Directions_turn(direction, 180)));
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _enterBlockedDirectly$2: function(position, direction) {
      var t1 = this._BarrierManager$_store,
        t2 = t1._store,
        gridMode = C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(t2.$index(0, "gridMode")));
      if (position.goMulti$2(direction, 1).legal$1(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, "size"), "$isMap"))))
        if (position.legal$1(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, "size"), "$isMap"))))
          t1 = H.boolConversionCheck(gridMode === C.GridMode_0 ? t1.getBarrier$1(position).isAnyBlocked$0() : t1.getBarrier$1(position)._blocked.$index(0, direction));
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    }
  };
  D.BasicSearchAlgorithm.prototype = {
    BasicSearchAlgorithm$6: function($name, grid, startPosition, targetPosition, heuristic, turnOfHistory) {
      var _this = this,
        t1 = E.Position;
      _this.set$distance(new H.JsLinkedHashMap([t1, X.Distance]));
      _this.set$parent(new H.JsLinkedHashMap([t1, t1]));
      _this.set$open(P.LinkedHashSet_LinkedHashSet(t1));
      _this.set$closed(P.LinkedHashSet_LinkedHashSet(t1));
    },
    getDistance$1: function(n) {
      return this.distance.containsKey$1(n) ? this.distance.$index(0, n) : $.$get$Distance_INFINITY();
    },
    getPath$1: function(n) {
      var path, t1, intermediateNode;
      if (this.parent.$index(0, n) == null)
        return H.setRuntimeTypeInfo([], [E.Position]);
      path = H.setRuntimeTypeInfo([], [E.Position]);
      C.JSArray_methods.add$1(path, n);
      for (t1 = this.start, intermediateNode = n; !J.$eq$(intermediateNode, t1);) {
        intermediateNode = this.parent.$index(0, intermediateNode);
        C.JSArray_methods.add$1(path, intermediateNode);
      }
      return new H.ReversedListIterable(path, [H.getTypeArgumentByIndex(path, 0)]).toList$0(0);
    },
    runInner$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, turn, nStar, t16, t17, updatedNodes, optimalPath, neighbours, neighboursMarkedClosed, neighboursMarkedOpen, neighboursUnmarked, pathsOfClosed, __s, is_are, a__, it_them, t18, pathsOfOpen, maybeNewPathsOfOpen, t19, t20, neighboursMarkedOpenBetterPath, has_have, newPathsOfOpen, pathsOfUnmarked, _this = this, _null = null,
        _s11_ = "enumeration",
        _s10_ = "start node",
        _s5_ = "green",
        _s10_0 = "background",
        _s4_ = "grey",
        _s11_0 = "target node",
        _s4_0 = "blue",
        _s10_1 = "foreground",
        _s6_ = "yellow", _s4_1 = "them",
        _s25_ = " from the source node to ",
        _s16_ = " Algorithm took ";
      ++_this.nextTurn;
      t1 = _this.start;
      _this.distance.$indexSet(0, t1, new X.Distance(0, 0));
      _this.open.add$1(0, t1);
      t2 = _this._turnOfHistory;
      if (_this.nextTurn - 1 === t2) {
        t3 = _this.searchHistory;
        t3.stepTitle = "Setup";
        t4 = [M.ExplanationPart];
        t5 = t3._stepDescription;
        C.JSArray_methods.add$1(t5, new M.Explanation("", H.setRuntimeTypeInfo([], t4)));
        t6 = [K.Highlight];
        t7 = [E.Position];
        t3.addEMM$4("For the setup we: ", "", H.setRuntimeTypeInfo([], t6), H.setRuntimeTypeInfo([], t7));
        C.JSArray_methods.add$1(t5, new M.Explanation(_s11_, H.setRuntimeTypeInfo([], t4)));
        t3.addEMM$4("Set all nodes unmarked.", "", H.setRuntimeTypeInfo([], t6), H.setRuntimeTypeInfo([], t7));
        C.JSArray_methods.add$1(t5, new M.Explanation(_s11_, H.setRuntimeTypeInfo([], t4)));
        t3.addEMM$4("Set the distance from our ", "", H.setRuntimeTypeInfo([], t6), H.setRuntimeTypeInfo([], t7));
        t3.addEMM$4(_s10_, _s5_, H.setRuntimeTypeInfo([new K.CircleHighlight()], t6), H.setRuntimeTypeInfo([t1], t7));
        t3.addEMM$4(" to our ", "", H.setRuntimeTypeInfo([], t6), H.setRuntimeTypeInfo([], t7));
        t3.addEMM$4(_s10_, _s5_, H.setRuntimeTypeInfo([new K.CircleHighlight()], t6), H.setRuntimeTypeInfo([t1], t7));
        t3.addEMM$4(" to 0.0.", "", H.setRuntimeTypeInfo([], t6), H.setRuntimeTypeInfo([], t7));
        C.JSArray_methods.add$1(t5, new M.Explanation(_s11_, H.setRuntimeTypeInfo([], t4)));
        t3.addEMM$4("Mark our ", "", H.setRuntimeTypeInfo([], t6), H.setRuntimeTypeInfo([], t7));
        t3.addEMM$4("start node open", _s5_, H.setRuntimeTypeInfo([new K.BoxHighlight()], t6), H.setRuntimeTypeInfo([t1], t7));
        t3.addEMM$4(".", "", H.setRuntimeTypeInfo([], t6), H.setRuntimeTypeInfo([], t7));
      }
      for (t3 = _this.target, t4 = E.Position, t5 = _this.searchHistory, t6 = K.Highlight, t7 = [t6], t6 = [t6], t8 = [t4], t9 = [[P.Iterable, K.Highlight], [P.Iterable, E.Position]], t10 = [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]], t11 = [t10], t12 = [t4], t13 = [M.ExplanationPart], t14 = t5._stepDescription, t15 = K.PathHighlight, turn = 1; _this.open._collection$_length !== 0; ++turn) {
        if (++_this.nextTurn - 1 === t2)
          t5.stepTitle = "Iteration " + turn;
        nStar = _this.findNextActiveNode$0();
        if (_this.nextTurn - 1 === t2) {
          t16 = new K.BoxHighlight();
          t16.style = _s5_;
          t16 = H.setRuntimeTypeInfo([t16], t7);
          t17 = _this.open;
          t5.addHM$2(_s10_0, H.setRuntimeTypeInfo([new S.Tuple2(H.assertSubtype(t16, "$isIterable", t6, "$asIterable"), H.assertSubtype(t17, "$isIterable", t8, "$asIterable"), t9)], t11));
          t17 = new K.BoxHighlight();
          t17.style = _s4_;
          t17 = H.setRuntimeTypeInfo([t17], t7);
          t16 = _this.closed;
          t5.addHM$2(_s10_0, H.setRuntimeTypeInfo([new S.Tuple2(H.assertSubtype(t17, "$isIterable", t6, "$asIterable"), H.assertSubtype(t16, "$isIterable", t8, "$asIterable"), t9)], t11));
        }
        updatedNodes = P.LinkedHashSet_LinkedHashSet(t4);
        if (J.$eq$(nStar, t3)) {
          if (_this.nextTurn - 1 === t2) {
            t2 = _this.getPath$1(t3);
            t2 = H.setRuntimeTypeInfo(t2.slice(0), [H.getTypeArgumentByIndex(t2, 0)]);
            optimalPath = K.PathHighlight$styled("blue blinking", t2, _null, true, _null);
            C.JSArray_methods.add$1(t14, new M.Explanation("", H.setRuntimeTypeInfo([], t13)));
            t2 = H.setRuntimeTypeInfo([], t7);
            t4 = H.setRuntimeTypeInfo([], t12);
            H.assertSubtype(t2, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t4, "$isIterable", t8, "$asIterable");
            t5.addEM_$3("As our current selected node is our ", "", C.JSArray_methods.get$isNotEmpty(t2) ? H.setRuntimeTypeInfo([new S.Tuple2(t2, t4, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t2 = H.setRuntimeTypeInfo([new K.CircleHighlight()], t7);
            t4 = H.setRuntimeTypeInfo([t3], t12);
            H.assertSubtype(t2, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t4, "$isIterable", t8, "$asIterable");
            t5.addEM_$3(_s11_0, "red", C.JSArray_methods.get$isNotEmpty(t2) ? H.setRuntimeTypeInfo([new S.Tuple2(t2, t4, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t2 = H.setRuntimeTypeInfo([], t7);
            t4 = H.setRuntimeTypeInfo([], t12);
            H.assertSubtype(t2, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t4, "$isIterable", t8, "$asIterable");
            t5.addEM_$3(", the algorithm can finish and we have found an ", "", C.JSArray_methods.get$isNotEmpty(t2) ? H.setRuntimeTypeInfo([new S.Tuple2(t2, t4, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t2 = H.setRuntimeTypeInfo([optimalPath], t7);
            t4 = H.setRuntimeTypeInfo([null], t12);
            H.assertSubtype(t2, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t4, "$isIterable", t8, "$asIterable");
            t5.addEM_$3("optimal path", _s4_0, C.JSArray_methods.get$isNotEmpty(t2) ? H.setRuntimeTypeInfo([new S.Tuple2(t2, t4, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t2 = H.setRuntimeTypeInfo([], t7);
            t4 = H.setRuntimeTypeInfo([], t12);
            H.assertSubtype(t2, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t4, "$isIterable", t8, "$asIterable");
            t5.addEM_$3(" from the ", "", C.JSArray_methods.get$isNotEmpty(t2) ? H.setRuntimeTypeInfo([new S.Tuple2(t2, t4, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t2 = H.setRuntimeTypeInfo([new K.CircleHighlight()], t7);
            t4 = H.setRuntimeTypeInfo([t1], t12);
            H.assertSubtype(t2, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t4, "$isIterable", t8, "$asIterable");
            t5.addEM_$3("source node", _s5_, C.JSArray_methods.get$isNotEmpty(t2) ? H.setRuntimeTypeInfo([new S.Tuple2(t2, t4, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t1 = H.setRuntimeTypeInfo([], t7);
            t2 = H.setRuntimeTypeInfo([], t12);
            H.assertSubtype(t1, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t2, "$isIterable", t8, "$asIterable");
            t5.addEM_$3(" to the ", "", C.JSArray_methods.get$isNotEmpty(t1) ? H.setRuntimeTypeInfo([new S.Tuple2(t1, t2, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t1 = H.setRuntimeTypeInfo([new K.CircleHighlight()], t7);
            t2 = H.setRuntimeTypeInfo([t3], t12);
            H.assertSubtype(t1, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t2, "$isIterable", t8, "$asIterable");
            t5.addEM_$3(_s11_0, "red", C.JSArray_methods.get$isNotEmpty(t1) ? H.setRuntimeTypeInfo([new S.Tuple2(t1, t2, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t1 = H.setRuntimeTypeInfo([], t7);
            t2 = H.setRuntimeTypeInfo([], t12);
            H.assertSubtype(t1, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t2, "$isIterable", t8, "$asIterable");
            t5.addEM_$3(".", "", C.JSArray_methods.get$isNotEmpty(t1) ? H.setRuntimeTypeInfo([new S.Tuple2(t1, t2, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t1 = H.setRuntimeTypeInfo([optimalPath], t7);
            t2 = H.setRuntimeTypeInfo([null], t12);
            t5.addHM$2(_s10_1, H.setRuntimeTypeInfo([new S.Tuple2(H.assertSubtype(t1, "$isIterable", t6, "$asIterable"), H.assertSubtype(t2, "$isIterable", t8, "$asIterable"), t9)], t11));
            t2 = new K.DotHighlight();
            t2.style = _s6_;
            t2 = H.setRuntimeTypeInfo([t2], t7);
            t1 = H.setRuntimeTypeInfo([nStar], t12);
            t5.addHM$2(_s10_1, H.setRuntimeTypeInfo([new S.Tuple2(H.assertSubtype(t2, "$isIterable", t6, "$asIterable"), H.assertSubtype(t1, "$isIterable", t8, "$asIterable"), t9)], t11));
          }
          t5.foundPath = true;
          break;
        } else {
          neighbours = _this.findNeighbourNodes$1(nStar);
          t16 = J.getInterceptor$ax(neighbours);
          t17 = t16.where$1(neighbours, new D.BasicSearchAlgorithm_runInner_closure(_this));
          neighboursMarkedClosed = P.List_List$from(t17, true, H.getTypeArgumentByIndex(t17, 0));
          t17 = t16.where$1(neighbours, new D.BasicSearchAlgorithm_runInner_closure0(_this));
          neighboursMarkedOpen = P.List_List$from(t17, true, H.getTypeArgumentByIndex(t17, 0));
          t16 = t16.where$1(neighbours, new D.BasicSearchAlgorithm_runInner_closure1(_this));
          neighboursUnmarked = P.List_List$from(t16, true, H.getTypeArgumentByIndex(t16, 0));
          if (neighboursMarkedClosed.length !== 0)
            if (_this.nextTurn - 1 === t2) {
              t16 = H.getTypeArgumentByIndex(neighboursMarkedClosed, 0);
              pathsOfClosed = new H.MappedListIterable(neighboursMarkedClosed, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure2(_this), {func: 1, ret: t15, args: [t16]}), [t16, t15]).toList$0(0);
              t16 = neighboursMarkedClosed.length === 1;
              __s = t16 ? "" : "s";
              is_are = t16 ? "is" : "are";
              a__ = t16 ? "a " : "";
              it_them = t16 ? "it" : _s4_1;
              C.JSArray_methods.add$1(t14, new M.Explanation(_s11_, H.setRuntimeTypeInfo([], t13)));
              t16 = "" + neighboursMarkedClosed.length + " neighbour node" + __s + " which " + is_are + " ";
              t17 = H.setRuntimeTypeInfo([], t7);
              t18 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t17, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t18, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t16, "", C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, t18, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              H.assertSubtype(neighboursMarkedClosed, "$isIterable", t8, "$asIterable");
              t16 = H.assertSubtype(H.setRuntimeTypeInfo([new K.CircleHighlight()], t7), "$isIterable", t6, "$asIterable");
              t5.addEM_$3("marked closed", _s4_, C.JSArray_methods.get$isNotEmpty(t16) ? H.setRuntimeTypeInfo([new S.Tuple2(t16, neighboursMarkedClosed, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t16 = " " + is_are + " ignored as we have already found " + a__;
              t17 = H.setRuntimeTypeInfo([], t7);
              t18 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t17, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t18, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t16, "", C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, t18, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t16 = "optimal path" + __s;
              H.assertSubtype(pathsOfClosed, "$isIterable", t6, "$asIterable");
              t17 = H.assertSubtype(H.setRuntimeTypeInfo([null], t12), "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t16, _s4_, C.JSArray_methods.get$isNotEmpty(pathsOfClosed) ? H.setRuntimeTypeInfo([new S.Tuple2(pathsOfClosed, t17, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t16 = _s25_ + it_them + ". ";
              t17 = H.setRuntimeTypeInfo([], t7);
              t18 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t17, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t18, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t16, "", C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, t18, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            }
          if (neighboursMarkedOpen.length !== 0) {
            if (_this.nextTurn - 1 === t2) {
              t16 = H.getTypeArgumentByIndex(neighboursMarkedOpen, 0);
              t17 = {func: 1, ret: t15, args: [t16]};
              t18 = [t16, t15];
              pathsOfOpen = new H.MappedListIterable(neighboursMarkedOpen, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure3(_this), t17), t18).toList$0(0);
              maybeNewPathsOfOpen = new H.MappedListIterable(neighboursMarkedOpen, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure4(_this, nStar), t17), t18).toList$0(0);
              t17 = neighboursMarkedOpen.length === 1;
              __s = t17 ? "" : "s";
              is_are = t17 ? "is" : "are";
              it_them = t17 ? "it" : _s4_1;
              C.JSArray_methods.add$1(t14, new M.Explanation(_s11_, H.setRuntimeTypeInfo([], t13)));
              t17 = "" + neighboursMarkedOpen.length + " neighbour node" + __s + " which " + is_are + " ";
              t18 = H.setRuntimeTypeInfo([], t7);
              t19 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t18, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t19, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t17, "", C.JSArray_methods.get$isNotEmpty(t18) ? H.setRuntimeTypeInfo([new S.Tuple2(t18, t19, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              H.assertSubtype(neighboursMarkedOpen, "$isIterable", t8, "$asIterable");
              t17 = H.assertSubtype(H.setRuntimeTypeInfo([new K.CircleHighlight()], t7), "$isIterable", t6, "$asIterable");
              t5.addEM_$3("marked open", _s5_, C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, neighboursMarkedOpen, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t17 = " " + is_are + " checked, if we can have an maybe more optimal ";
              t18 = H.setRuntimeTypeInfo([], t7);
              t19 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t18, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t19, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t17, "", C.JSArray_methods.get$isNotEmpty(t18) ? H.setRuntimeTypeInfo([new S.Tuple2(t18, t19, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t17 = H.setRuntimeTypeInfo([new S.Tuple2(maybeNewPathsOfOpen, H.setRuntimeTypeInfo([null], t12), t9)], t11);
              t18 = {func: 1, ret: t10, args: [t16]};
              t16 = [t16, t10];
              C.JSArray_methods.addAll$1(t17, new H.MappedListIterable(neighboursMarkedOpen, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure5(_this, nStar), t18), t16));
              t5.addEM_$3("new path", _s4_0, t17);
              t17 = " from our source node to " + it_them + " over the current selected node than the ";
              t19 = H.setRuntimeTypeInfo([], t7);
              t20 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t19, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t20, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t17, "", C.JSArray_methods.get$isNotEmpty(t19) ? H.setRuntimeTypeInfo([new S.Tuple2(t19, t20, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t17 = H.setRuntimeTypeInfo([new S.Tuple2(pathsOfOpen, H.setRuntimeTypeInfo([null], t12), t9)], t11);
              C.JSArray_methods.addAll$1(t17, new H.MappedListIterable(neighboursMarkedOpen, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure6(_this), t18), t16));
              t5.addEM_$3("current path", _s5_, t17);
              t17 = " which we have already found for " + it_them + ". ";
              t16 = H.setRuntimeTypeInfo([], t7);
              t18 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t16, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t18, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t17, "", C.JSArray_methods.get$isNotEmpty(t16) ? H.setRuntimeTypeInfo([new S.Tuple2(t16, t18, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            }
            t16 = H.getTypeArgumentByIndex(neighboursMarkedOpen, 0);
            neighboursMarkedOpenBetterPath = P.List_List$from(new H.WhereIterable(neighboursMarkedOpen, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure7(_this, nStar), {func: 1, ret: P.bool, args: [t16]}), [t16]), true, t16);
            if (neighboursMarkedOpenBetterPath.length === 0) {
              if (_this.nextTurn - 1 === t2) {
                t16 = neighboursMarkedOpen.length;
                t17 = t16 === 1;
                __s = t17 ? "" : "s";
                has_have = t17 ? "has" : "have";
                t16 = "But " + (t17 ? "this" : "all " + t16) + " node" + __s + " already " + has_have + " a good path. ";
                t18 = H.setRuntimeTypeInfo([], t7);
                t19 = H.setRuntimeTypeInfo([], t12);
                H.assertSubtype(t18, "$isIterable", t6, "$asIterable");
                H.assertSubtype(t19, "$isIterable", t8, "$asIterable");
                t5.addEM_$3(t16, "", C.JSArray_methods.get$isNotEmpty(t18) ? H.setRuntimeTypeInfo([new S.Tuple2(t18, t19, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              }
            } else {
              C.JSArray_methods.forEach$1(neighboursMarkedOpenBetterPath, new D.BasicSearchAlgorithm_runInner_closure8(_this, nStar, updatedNodes));
              if (_this.nextTurn - 1 === t2) {
                t16 = H.getTypeArgumentByIndex(neighboursMarkedOpenBetterPath, 0);
                newPathsOfOpen = new H.MappedListIterable(neighboursMarkedOpenBetterPath, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure9(_this), {func: 1, ret: t15, args: [t16]}), [t16, t15]).toList$0(0);
                t16 = neighboursMarkedOpenBetterPath.length === 1;
                __s = t16 ? "" : "s";
                t17 = "And we also found " + (t16 ? "a " : "");
                t18 = H.setRuntimeTypeInfo([], t7);
                t19 = H.setRuntimeTypeInfo([], t12);
                H.assertSubtype(t18, "$isIterable", t6, "$asIterable");
                H.assertSubtype(t19, "$isIterable", t8, "$asIterable");
                t5.addEM_$3(t17, "", C.JSArray_methods.get$isNotEmpty(t18) ? H.setRuntimeTypeInfo([new S.Tuple2(t18, t19, t9)], t11) : H.setRuntimeTypeInfo([], t11));
                t16 = "better path" + __s;
                H.assertSubtype(newPathsOfOpen, "$isIterable", t6, "$asIterable");
                t17 = H.assertSubtype(H.setRuntimeTypeInfo([null], t12), "$isIterable", t8, "$asIterable");
                t5.addEM_$3(t16, _s4_0, C.JSArray_methods.get$isNotEmpty(newPathsOfOpen) ? H.setRuntimeTypeInfo([new S.Tuple2(newPathsOfOpen, t17, t9)], t11) : H.setRuntimeTypeInfo([], t11));
                t16 = H.setRuntimeTypeInfo([], t7);
                t17 = H.setRuntimeTypeInfo([], t12);
                H.assertSubtype(t16, "$isIterable", t6, "$asIterable");
                H.assertSubtype(t17, "$isIterable", t8, "$asIterable");
                t5.addEM_$3(" for ", "", C.JSArray_methods.get$isNotEmpty(t16) ? H.setRuntimeTypeInfo([new S.Tuple2(t16, t17, t9)], t11) : H.setRuntimeTypeInfo([], t11));
                t16 = "" + neighboursMarkedOpenBetterPath.length + " node" + __s;
                H.assertSubtype(neighboursMarkedOpenBetterPath, "$isIterable", t8, "$asIterable");
                t17 = H.assertSubtype(H.setRuntimeTypeInfo([new K.CircleHighlight()], t7), "$isIterable", t6, "$asIterable");
                t5.addEM_$3(t16, _s5_, C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, neighboursMarkedOpenBetterPath, t9)], t11) : H.setRuntimeTypeInfo([], t11));
                t16 = H.setRuntimeTypeInfo([], t7);
                t17 = H.setRuntimeTypeInfo([], t12);
                H.assertSubtype(t16, "$isIterable", t6, "$asIterable");
                H.assertSubtype(t17, "$isIterable", t8, "$asIterable");
                t5.addEM_$3(". ", "", C.JSArray_methods.get$isNotEmpty(t16) ? H.setRuntimeTypeInfo([new S.Tuple2(t16, t17, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              }
            }
          }
          t16 = neighboursUnmarked.length;
          if (t16 !== 0) {
            if (_this.nextTurn - 1 === t2) {
              t16 = t16 === 1;
              __s = t16 ? "" : "s";
              is_are = t16 ? "is" : "are";
              C.JSArray_methods.add$1(t14, new M.Explanation(_s11_, H.setRuntimeTypeInfo([], t13)));
              t16 = "" + neighboursUnmarked.length + " neighbour node" + __s + " which " + is_are + " ";
              t17 = H.setRuntimeTypeInfo([], t7);
              t18 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t17, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t18, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t16, "", C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, t18, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              H.assertSubtype(neighboursUnmarked, "$isIterable", t8, "$asIterable");
              t16 = H.assertSubtype(H.setRuntimeTypeInfo([new K.CircleHighlight()], t7), "$isIterable", t6, "$asIterable");
              t5.addEM_$3("unmarked", _s4_0, C.JSArray_methods.get$isNotEmpty(t16) ? H.setRuntimeTypeInfo([new S.Tuple2(t16, neighboursUnmarked, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t16 = " " + is_are + " marked as open ";
              t17 = H.setRuntimeTypeInfo([], t7);
              t18 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t17, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t18, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t16, "", C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, t18, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            }
            C.JSArray_methods.forEach$1(neighboursUnmarked, new D.BasicSearchAlgorithm_runInner_closure10(_this, nStar, updatedNodes));
            if (_this.nextTurn - 1 === t2) {
              t16 = H.getTypeArgumentByIndex(neighboursUnmarked, 0);
              pathsOfUnmarked = new H.MappedListIterable(neighboursUnmarked, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure11(_this), {func: 1, ret: t15, args: [t16]}), [t16, t15]).toList$0(0);
              it_them = neighboursUnmarked.length === 1 ? "it" : _s4_1;
              t16 = H.setRuntimeTypeInfo([], t7);
              t17 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t16, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t17, "$isIterable", t8, "$asIterable");
              t5.addEM_$3("and we set the new ", "", C.JSArray_methods.get$isNotEmpty(t16) ? H.setRuntimeTypeInfo([new S.Tuple2(t16, t17, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              H.assertSubtype(pathsOfUnmarked, "$isIterable", t6, "$asIterable");
              t16 = H.assertSubtype(H.setRuntimeTypeInfo([null], t12), "$isIterable", t8, "$asIterable");
              t5.addEM_$3("best path", _s4_0, C.JSArray_methods.get$isNotEmpty(pathsOfUnmarked) ? H.setRuntimeTypeInfo([new S.Tuple2(pathsOfUnmarked, t16, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t16 = _s25_ + it_them + " over our current selected node. ";
              t17 = H.setRuntimeTypeInfo([], t7);
              t18 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t17, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t18, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t16, "", C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, t18, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            }
          }
        }
        _this.open.remove$1(0, nStar);
        _this.closed.add$1(0, nStar);
        if (_this.nextTurn - 1 === t2) {
          t16 = H.getTypeArgumentByIndex(updatedNodes, 0);
          t5.addHM$2(_s10_1, new H.EfficientLengthMappedIterable(updatedNodes, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure12(nStar), {func: 1, ret: t10, args: [t16]}), [t16, t10]));
          t16 = new K.DotHighlight();
          t16.style = _s6_;
          t16 = H.setRuntimeTypeInfo([t16], t7);
          t17 = H.setRuntimeTypeInfo([nStar], t12);
          t5.addHM$2(_s10_1, H.setRuntimeTypeInfo([new S.Tuple2(H.assertSubtype(t16, "$isIterable", t6, "$asIterable"), H.assertSubtype(t17, "$isIterable", t8, "$asIterable"), t9)], t11));
          t17 = H.setRuntimeTypeInfo([K.PathHighlight$styled(_s6_, _this.getPath$1(nStar), _null, true, _null)], t7);
          t16 = H.setRuntimeTypeInfo([null], t12);
          t5.addHM$2(_s10_1, H.setRuntimeTypeInfo([new S.Tuple2(H.assertSubtype(t17, "$isIterable", t6, "$asIterable"), H.assertSubtype(t16, "$isIterable", t8, "$asIterable"), t9)], t11));
        }
      }
      t5.stepCount = _this.nextTurn;
      t1 = _this.name;
      if (t5.foundPath)
        t5.title = "The " + t1 + _s16_ + turn + " iterations to find a " + C.JSNumber_methods.toStringAsPrecision$1(_this.getDistance$1(t3).length$0(0), 3) + " long path";
      else
        t5.title = "The " + t1 + _s16_ + turn + " iterations to find no path";
    },
    set$distance: function(distance) {
      this.distance = H.assertSubtype(distance, "$isMap", [E.Position, X.Distance], "$asMap");
    },
    set$parent: function($parent) {
      var t1 = E.Position;
      this.parent = H.assertSubtype($parent, "$isMap", [t1, t1], "$asMap");
    },
    set$open: function($open) {
      this.open = H.assertSubtype($open, "$isSet", [E.Position], "$asSet");
    },
    set$closed: function($closed) {
      this.closed = H.assertSubtype($closed, "$isSet", [E.Position], "$asSet");
    }
  };
  D.BasicSearchAlgorithm_runInner_closure.prototype = {
    call$1: function(n) {
      H.interceptedTypeCheck(n, "$isPosition");
      return this.$this.closed.contains$1(0, n);
    },
    $signature: 4
  };
  D.BasicSearchAlgorithm_runInner_closure0.prototype = {
    call$1: function(n) {
      H.interceptedTypeCheck(n, "$isPosition");
      return this.$this.open.contains$1(0, n);
    },
    $signature: 4
  };
  D.BasicSearchAlgorithm_runInner_closure1.prototype = {
    call$1: function(n) {
      var t1;
      H.interceptedTypeCheck(n, "$isPosition");
      t1 = this.$this;
      return !t1.closed.contains$1(0, n) && !t1.open.contains$1(0, n);
    },
    $signature: 4
  };
  D.BasicSearchAlgorithm_runInner_closure2.prototype = {
    call$1: function(on) {
      var t1 = this.$this.getPath$1(H.interceptedTypeCheck(on, "$isPosition"));
      t1 = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      return K.PathHighlight$(t1, true);
    },
    $signature: 2
  };
  D.BasicSearchAlgorithm_runInner_closure3.prototype = {
    call$1: function(on) {
      var t1 = this.$this.getPath$1(H.interceptedTypeCheck(on, "$isPosition"));
      t1 = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      return K.PathHighlight$(t1, true);
    },
    $signature: 2
  };
  D.BasicSearchAlgorithm_runInner_closure4.prototype = {
    call$1: function(on) {
      var t1;
      H.interceptedTypeCheck(on, "$isPosition");
      t1 = H.setRuntimeTypeInfo([], [E.Position]);
      C.JSArray_methods.addAll$1(t1, this.$this.getPath$1(this.nStar));
      C.JSArray_methods.add$1(t1, on);
      return K.PathHighlight$(t1, true);
    },
    $signature: 2
  };
  D.BasicSearchAlgorithm_runInner_closure5.prototype = {
    call$1: function(on) {
      var t1;
      H.interceptedTypeCheck(on, "$isPosition");
      t1 = this.nStar;
      return new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(this.$this.getDistance$1(t1).$add(0, X.Distance$calc(t1, on)).length$0(0), 3))], [K.Highlight]), H.setRuntimeTypeInfo([on], [E.Position]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    },
    $signature: 3
  };
  D.BasicSearchAlgorithm_runInner_closure6.prototype = {
    call$1: function(on) {
      H.interceptedTypeCheck(on, "$isPosition");
      return new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(this.$this.getDistance$1(on).length$0(0), 3))], [K.Highlight]), H.setRuntimeTypeInfo([on], [E.Position]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    },
    $signature: 3
  };
  D.BasicSearchAlgorithm_runInner_closure7.prototype = {
    call$1: function(n) {
      var t1, t2;
      H.interceptedTypeCheck(n, "$isPosition");
      t1 = this.$this;
      t2 = this.nStar;
      return t1.getDistance$1(t2).$add(0, X.Distance$calc(t2, n)).$lt(0, t1.getDistance$1(n));
    },
    $signature: 4
  };
  D.BasicSearchAlgorithm_runInner_closure8.prototype = {
    call$1: function(n) {
      var t1, t2;
      H.interceptedTypeCheck(n, "$isPosition");
      t1 = this.$this;
      t2 = this.nStar;
      t1.parent.$indexSet(0, n, t2);
      t1.distance.$indexSet(0, n, t1.getDistance$1(t2).$add(0, X.Distance$calc(t2, n)));
      this.updatedNodes.add$1(0, n);
    },
    $signature: 22
  };
  D.BasicSearchAlgorithm_runInner_closure9.prototype = {
    call$1: function(on) {
      var t1 = this.$this.getPath$1(H.interceptedTypeCheck(on, "$isPosition"));
      t1 = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      return K.PathHighlight$(t1, true);
    },
    $signature: 2
  };
  D.BasicSearchAlgorithm_runInner_closure10.prototype = {
    call$1: function(n) {
      var t1, t2;
      H.interceptedTypeCheck(n, "$isPosition");
      t1 = this.$this;
      t1.open.add$1(0, n);
      t2 = this.nStar;
      t1.distance.$indexSet(0, n, t1.getDistance$1(t2).$add(0, X.Distance$calc(t2, n)));
      t1.parent.$indexSet(0, n, t2);
      this.updatedNodes.add$1(0, n);
    },
    $signature: 22
  };
  D.BasicSearchAlgorithm_runInner_closure11.prototype = {
    call$1: function(on) {
      var t1 = this.$this.getPath$1(H.interceptedTypeCheck(on, "$isPosition"));
      t1 = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      return K.PathHighlight$(t1, true);
    },
    $signature: 2
  };
  D.BasicSearchAlgorithm_runInner_closure12.prototype = {
    call$1: function(un) {
      var t1 = [E.Position];
      return new S.Tuple2(H.setRuntimeTypeInfo([K.PathHighlight$styled("green", H.setRuntimeTypeInfo([this.nStar, H.interceptedTypeCheck(un, "$isPosition")], t1), null, true, null)], [K.Highlight]), H.setRuntimeTypeInfo([null], t1), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    },
    $signature: 3
  };
  F.Chebyshev.prototype = {
    calc$2: function(p1, p2) {
      var t3, t4,
        t1 = p1.x,
        t2 = p2.x;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = p1.y;
      t4 = p2.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return Math.max(Math.abs(t1 - t2), Math.abs(t3 - t4));
    },
    getPath$2: function(source, target) {
      var t3, t4, t5,
        t1 = source.x,
        t2 = target.x;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = source.y;
      t4 = target.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = [E.Position];
      if (Math.abs(t1 - t2) >= Math.abs(t3 - t4))
        return H.setRuntimeTypeInfo([source, new E.Position(t2, t3)], t5);
      else
        return H.setRuntimeTypeInfo([source, new E.Position(t1, t4)], t5);
    }
  };
  Z.Dijkstra.prototype = {
    findNextActiveNode$0: function() {
      var t1, t2, t3, pathsOfOpen, t4, t5, t6, t7, t8, t9, _this = this, _s5_ = "green",
        nStar = _this.open.reduce$1(0, new Z.Dijkstra_findNextActiveNode_closure(_this));
      if (_this.nextTurn - 1 === _this._turnOfHistory) {
        t1 = _this.open;
        t2 = K.PathHighlight;
        t3 = H.getTypeArgumentByIndex(t1, 0);
        pathsOfOpen = P.List_List$from(new H.EfficientLengthMappedIterable(t1, H.functionTypeCheck(new Z.Dijkstra_findNextActiveNode_closure0(_this), {func: 1, ret: t2, args: [t3]}), [t3, t2]), true, t2);
        t2 = _this.searchHistory;
        C.JSArray_methods.add$1(t2._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
        t3 = K.Highlight;
        t1 = [t3];
        t4 = E.Position;
        t5 = [t4];
        t2.addEMM$4("First we look at all nodes which are ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
        t4 = H.assertSubtype(_this.open, "$isIterable", [t4], "$asIterable");
        t2.addEMM$4("marked open", _s5_, H.setRuntimeTypeInfo([new K.CircleHighlight()], t1), t4);
        t2.addEMM$4(". From all these nodes we know a ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("path", _s5_, H.assertSubtype(pathsOfOpen, "$isIterable", [t3], "$asIterable"), H.setRuntimeTypeInfo([null], t5));
        t2.addEMM$4(" from the source node to them. ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("Therefore we also know the ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
        t3 = [[P.Iterable, K.Highlight], [P.Iterable, E.Position]];
        t4 = [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]];
        t6 = [t4];
        t7 = H.setRuntimeTypeInfo([new S.Tuple2(pathsOfOpen, H.setRuntimeTypeInfo([null], t5), t3)], t6);
        t8 = _this.open;
        t9 = H.getTypeArgumentByIndex(t8, 0);
        C.JSArray_methods.addAll$1(t7, new H.EfficientLengthMappedIterable(t8, H.functionTypeCheck(new Z.Dijkstra_findNextActiveNode_closure1(_this), {func: 1, ret: t4, args: [t9]}), [t9, t4]));
        t2.addEM_$3("distance", _s5_, t7);
        t2.addEMM$4(" between them. ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("We will now take the node of them, which has the ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
        t7 = _this.getPath$1(nStar);
        t4 = H.setRuntimeTypeInfo(t7.slice(0), [H.getTypeArgumentByIndex(t7, 0)]);
        t2.addEM_$3("shortest path", _s5_, H.setRuntimeTypeInfo([new S.Tuple2(H.setRuntimeTypeInfo([K.PathHighlight$(t4, true)], t1), H.setRuntimeTypeInfo([null], t5), t3), new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(_this.getDistance$1(nStar).length$0(0), 3))], t1), H.setRuntimeTypeInfo([nStar], t5), t3)], t6));
        t2.addEMM$4(" to the source node and make him to the ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("current selected node", "yellow", H.setRuntimeTypeInfo([new K.CircleHighlight()], t1), H.setRuntimeTypeInfo([nStar], t5));
        t2.addEMM$4(" of this iteration. We will also mark him closed, so we can say for sure, that we have found the shortest way from the source node to him. ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
      }
      return nStar;
    },
    findNeighbourNodes$1: function(node) {
      var __s, t1, t2, t3, t4, t5, _this = this,
        neighbours = _this.grid.accessibleNeighbours$1(node);
      if (_this.nextTurn - 1 === _this._turnOfHistory) {
        __s = neighbours.get$length(neighbours) === 1 ? "" : "s";
        t1 = _this.searchHistory;
        C.JSArray_methods.add$1(t1._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
        t2 = [K.Highlight];
        t3 = E.Position;
        t4 = [t3];
        t1.addEMM$4("After we have choosen our current selected node, we will take a look at his ", "", H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([], t4));
        t5 = "" + neighbours.get$length(neighbours) + " neighbour node" + __s;
        H.assertSubtype(neighbours, "$isIterable", [t3], "$asIterable");
        t1.addEMM$4(t5, "blue", H.setRuntimeTypeInfo([new K.CircleHighlight()], t2), neighbours);
        t1.addEMM$4(": ", "", H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([], t4));
      }
      return neighbours;
    }
  };
  Z.Dijkstra_closure.prototype = {
    call$5: function(grid, startPosition, targetPosition, heuristic, turnOfHistory) {
      var _s8_ = "Dijkstra",
        t1 = new Z.Dijkstra(_s8_, grid, startPosition, targetPosition, heuristic, turnOfHistory, Y.SearchHistory$(F.Size$fromMap(H.interceptedTypeCast(grid._GridCache$_store._store.$index(0, "size"), "$isMap"))));
      t1.searched = false;
      t1.BasicSearchAlgorithm$6(_s8_, grid, startPosition, targetPosition, heuristic, turnOfHistory);
      return t1;
    },
    $signature: 27
  };
  Z.Dijkstra_findNextActiveNode_closure.prototype = {
    call$2: function(n1, n2) {
      var t1;
      H.interceptedTypeCheck(n1, "$isPosition");
      H.interceptedTypeCheck(n2, "$isPosition");
      t1 = this.$this;
      return t1.getDistance$1(n1).length$0(0) <= t1.getDistance$1(n2).length$0(0) ? n1 : n2;
    },
    $signature: 20
  };
  Z.Dijkstra_findNextActiveNode_closure0.prototype = {
    call$1: function(on) {
      var t1 = this.$this.getPath$1(H.interceptedTypeCheck(on, "$isPosition"));
      t1 = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      return K.PathHighlight$(t1, true);
    },
    $signature: 2
  };
  Z.Dijkstra_findNextActiveNode_closure1.prototype = {
    call$1: function(on) {
      H.interceptedTypeCheck(on, "$isPosition");
      return new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(this.$this.getDistance$1(on).length$0(0), 3))], [K.Highlight]), H.setRuntimeTypeInfo([on], [E.Position]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    },
    $signature: 3
  };
  E.DirectedJumpPointSearch.prototype = {
    runInner$0: function() {
      this.super$BasicSearchAlgorithm$runInner();
    },
    findNeighbourNodes$1: function(node) {
      var relevantDirections, t2, t3, t4, t5, lastDirection, jumpDirections, parentPath, t6, t7, t8, neighbours, allNextJumpPointHighlights, t9, t10, t11, t12, t13, t14, jumpPoint, t15, t16, t17, t18, t19, _this = this, _s5_ = "green", _s4_ = "blue",
        t1 = O.Direction;
      if (J.$eq$(node, _this.start)) {
        relevantDirections = P.LinkedHashSet_LinkedHashSet$from(C.List_4j7, t1);
        t1 = _this._turnOfHistory;
        if (_this.nextTurn - 1 === t1) {
          t2 = _this.searchHistory;
          C.JSArray_methods.add$1(t2._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
          t3 = K.Highlight;
          t4 = [t3];
          t5 = [E.Position];
          t2.addEMM$4("In the first iteration, the DJPS Algorithm will search in ", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
          t2.addEMM$4("every direction", _s5_, H.assertSubtype(E.DirectedJumpPointSearchHighlights_forcedDirections(node, relevantDirections), "$isIterable", [t3], "$asIterable"), H.setRuntimeTypeInfo([null], t5));
          t2.addEMM$4(":", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
        }
      } else {
        lastDirection = _this.parent.$index(0, node)._directionTo$2(node, true);
        jumpDirections = X.DirectedJumpPointSearchJumpPoints_jumpDirections(_this.grid, node, lastDirection, new E.DirectedJumpPointSearch_findNeighbourNodes_closure(_this), false);
        relevantDirections = P.LinkedHashSet_LinkedHashSet$from(jumpDirections, t1);
        relevantDirections.add$1(0, lastDirection);
        t2 = _this._turnOfHistory;
        if (_this.nextTurn - 1 === t2) {
          t3 = [E.Position];
          t4 = K.Highlight;
          t5 = [t4];
          parentPath = H.setRuntimeTypeInfo([K.PathHighlight$styled("yellow", H.setRuntimeTypeInfo([_this.parent.$index(0, node), node], t3), null, true, null)], t5);
          t6 = _this.searchHistory;
          C.JSArray_methods.add$1(t6._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
          t6.addEMM$4("The DJPS Algorithm will search in every ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          t4 = [t4];
          t6.addEMM$4("relevant direction", _s5_, H.assertSubtype(E.DirectedJumpPointSearchHighlights_forcedDirections(node, relevantDirections), "$isIterable", t4, "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(", which includes ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          t7 = [H.getTypeArgumentByIndex(parentPath, 0)];
          t8 = H.setRuntimeTypeInfo(parentPath.slice(0), t7);
          C.JSArray_methods.addAll$1(t8, E.DirectedJumpPointSearchHighlights_forcedDirections(node, jumpDirections));
          t6.addEMM$4("all forced directions", _s5_, H.assertSubtype(t8, "$isIterable", t4, "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(" of the current selected node in the direction from its parent to it and the ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          t7 = H.setRuntimeTypeInfo(parentPath.slice(0), t7);
          C.JSArray_methods.addAll$1(t7, E.DirectedJumpPointSearchHighlights_forcedDirections(node, H.setRuntimeTypeInfo([lastDirection], [t1])));
          t6.addEMM$4("direction from its parent", _s5_, H.assertSubtype(t7, "$isIterable", t4, "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(":", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
        }
        t1 = t2;
      }
      t2 = E.Position;
      t3 = [t2];
      neighbours = H.setRuntimeTypeInfo([], t3);
      t4 = _this.nextJumpPointHighlights;
      C.JSArray_methods.set$length(t4, 0);
      t5 = [H.getTypeArgumentByIndex(t4, 0)];
      allNextJumpPointHighlights = H.setRuntimeTypeInfo(t4.slice(0), t5);
      for (t6 = P._LinkedHashSetIterator$(relevantDirections, relevantDirections._modifications, H.getTypeArgumentByIndex(relevantDirections, 0)), t7 = [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], t8 = _this.searchHistory, t9 = K.Highlight, t10 = [t9], t9 = [t9], t2 = [t2], t11 = [[P.Iterable, K.Highlight], [P.Iterable, E.Position]], t12 = [M.ExplanationPart], t13 = t8._stepDescription; t6.moveNext$0();) {
        t14 = t6._collection$_current;
        jumpPoint = _this.getNextJumpPoint$2(node, t14);
        t15 = H.functionTypeCheck(new E.DirectedJumpPointSearch_findNeighbourNodes_closure0(neighbours), {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(jumpPoint, 0)]});
        t16 = jumpPoint._core$_value;
        t17 = t16 == null;
        t18 = !t17;
        if (t18)
          t15.call$1(t16);
        if (_this.nextTurn - 1 === t1) {
          t15 = new K.DotHighlight();
          t15.style = _s4_;
          C.JSArray_methods.add$1(t4, new S.Tuple2(H.setRuntimeTypeInfo([t15], t10), jumpPoint, t11));
          C.JSArray_methods.add$1(t13, new M.Explanation("", H.setRuntimeTypeInfo([], t12)));
          t15 = H.setRuntimeTypeInfo([], t10);
          t19 = H.setRuntimeTypeInfo([], t3);
          H.assertSubtype(t15, "$isIterable", t9, "$asIterable");
          H.assertSubtype(t19, "$isIterable", t2, "$asIterable");
          t8.addEM_$3(" - We ", "", C.JSArray_methods.get$isNotEmpty(t15) ? H.setRuntimeTypeInfo([new S.Tuple2(t15, t19, t11)], t7) : H.setRuntimeTypeInfo([], t7));
          t15 = t18 ? _s5_ : "red";
          t18 = H.setRuntimeTypeInfo(t4.slice(0), t5);
          t8.addEM_$3("search", t15, t18);
          t14 = " in to the " + O.Directions_getName(t14) + " direction and find ";
          t15 = H.setRuntimeTypeInfo([], t10);
          t18 = H.setRuntimeTypeInfo([], t3);
          H.assertSubtype(t15, "$isIterable", t9, "$asIterable");
          H.assertSubtype(t18, "$isIterable", t2, "$asIterable");
          t8.addEM_$3(t14, "", C.JSArray_methods.get$isNotEmpty(t15) ? H.setRuntimeTypeInfo([new S.Tuple2(t15, t18, t11)], t7) : H.setRuntimeTypeInfo([], t7));
          if (!jumpPoint.get$iterator(jumpPoint).moveNext$0()) {
            t14 = H.setRuntimeTypeInfo([], t10);
            t15 = H.setRuntimeTypeInfo([], t3);
            H.assertSubtype(t14, "$isIterable", t9, "$asIterable");
            H.assertSubtype(t15, "$isIterable", t2, "$asIterable");
            t8.addEM_$3("no jump point", "", C.JSArray_methods.get$isNotEmpty(t14) ? H.setRuntimeTypeInfo([new S.Tuple2(t14, t15, t11)], t7) : H.setRuntimeTypeInfo([], t7));
          } else {
            if (t17)
              H.throwExpression(P.StateError$("value called on absent Optional."));
            H.interceptedTypeCheck(t16, "$isPosition");
            t14 = H.setRuntimeTypeInfo([new K.CircleHighlight()], t10);
            t16 = H.setRuntimeTypeInfo([t16], t3);
            H.assertSubtype(t14, "$isIterable", t9, "$asIterable");
            H.assertSubtype(t16, "$isIterable", t2, "$asIterable");
            t8.addEM_$3("a jump point", _s4_, C.JSArray_methods.get$isNotEmpty(t14) ? H.setRuntimeTypeInfo([new S.Tuple2(t14, t16, t11)], t7) : H.setRuntimeTypeInfo([], t7));
          }
          t14 = H.setRuntimeTypeInfo([], t10);
          t15 = H.setRuntimeTypeInfo([], t3);
          H.assertSubtype(t14, "$isIterable", t9, "$asIterable");
          H.assertSubtype(t15, "$isIterable", t2, "$asIterable");
          t8.addEM_$3(".", "", C.JSArray_methods.get$isNotEmpty(t14) ? H.setRuntimeTypeInfo([new S.Tuple2(t14, t15, t11)], t7) : H.setRuntimeTypeInfo([], t7));
        }
        C.JSArray_methods.addAll$1(allNextJumpPointHighlights, t4);
        C.JSArray_methods.set$length(t4, 0);
      }
      if (_this.nextTurn - 1 === t1) {
        C.JSArray_methods.add$1(t13, new M.Explanation("", H.setRuntimeTypeInfo([], t12)));
        t8.addEMM$4("So ", "", H.setRuntimeTypeInfo([], t10), H.setRuntimeTypeInfo([], t3));
        t8.addEM_$3("totally", _s5_, allNextJumpPointHighlights);
        t8.addEMM$4(" we found ", "", H.setRuntimeTypeInfo([], t10), H.setRuntimeTypeInfo([], t3));
        t1 = "" + neighbours.length + " neighbour";
        t1 += neighbours.length === 1 ? "" : "s";
        H.assertSubtype(neighbours, "$isIterable", t2, "$asIterable");
        t8.addEMM$4(t1, _s4_, H.setRuntimeTypeInfo([new K.CircleHighlight()], t10), neighbours);
        t8.addEMM$4(":", "", H.setRuntimeTypeInfo([], t10), H.setRuntimeTypeInfo([], t3));
      }
      return neighbours;
    },
    getNextJumpPoint$2: function(node, direction) {
      var positionAfter, result, jumpDirections, _this = this,
        t1 = _this.grid,
        t2 = t1._grid._array;
      if (!H.boolConversionCheck(J.$index$asx(J.$index$asx((t2 && C.JSArray_methods).$index(t2, node.x), node.y), direction)))
        return C.Optional_null0;
      else {
        positionAfter = node.goMulti$2(direction, 1);
        if (positionAfter.$eq(0, _this.target))
          result = X.Optional$of(positionAfter, E.Position);
        else {
          jumpDirections = X.DirectedJumpPointSearchJumpPoints_jumpDirections(t1, positionAfter, direction, new E.DirectedJumpPointSearch_getNextJumpPoint_closure(_this), false);
          if (jumpDirections._collection$_length > 0) {
            t1 = E.Position;
            result = X.Optional$of(positionAfter, t1);
            if (_this.nextTurn - 1 === _this._turnOfHistory)
              C.JSArray_methods.add$1(_this.nextJumpPointHighlights, new S.Tuple2(E.DirectedJumpPointSearchHighlights_forcedDirections(positionAfter, jumpDirections), H.setRuntimeTypeInfo([null], [t1]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]));
          } else
            result = _this.getNextJumpPoint$2(positionAfter, direction);
        }
        if (_this.nextTurn - 1 === _this._turnOfHistory) {
          t1 = result._core$_value != null ? "green" : "red";
          t2 = [E.Position];
          C.JSArray_methods.add$1(_this.nextJumpPointHighlights, new S.Tuple2(H.setRuntimeTypeInfo([K.PathHighlight$styled(t1, H.setRuntimeTypeInfo([node, node.goMulti$2(direction, 1)], t2), null, true, null)], [K.Highlight]), H.setRuntimeTypeInfo([null], t2), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]));
        }
        return result;
      }
    }
  };
  E.DirectedJumpPointSearch_closure.prototype = {
    call$5: function(grid, startPosition, targetPosition, heuristic, turnOfHistory) {
      var t1 = new E.DirectedJumpPointSearch(H.setRuntimeTypeInfo([], [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]]), "DJPS", grid, startPosition, targetPosition, heuristic, turnOfHistory, Y.SearchHistory$(F.Size$fromMap(H.interceptedTypeCast(grid._GridCache$_store._store.$index(0, "size"), "$isMap"))));
      t1.searched = false;
      t1.BasicSearchAlgorithm$6("DJPS", grid, startPosition, targetPosition, heuristic, turnOfHistory);
      return t1;
    },
    $signature: 55
  };
  E.DirectedJumpPointSearch_findNeighbourNodes_closure.prototype = {
    call$2: function(position, direction) {
      var t1 = this.$this.getNextJumpPoint$2(position, direction);
      return !t1.get$isEmpty(t1);
    },
    $signature: 12
  };
  E.DirectedJumpPointSearch_findNeighbourNodes_closure0.prototype = {
    call$1: function(p) {
      return C.JSArray_methods.add$1(this.neighbours, H.interceptedTypeCheck(p, "$isPosition"));
    },
    $signature: 9
  };
  E.DirectedJumpPointSearch_getNextJumpPoint_closure.prototype = {
    call$2: function(position, direction) {
      var t1 = this.$this.getNextJumpPoint$2(position, direction);
      return !t1.get$isEmpty(t1);
    },
    $signature: 12
  };
  N.DirectedJumpPointSearchLookUp.prototype = {
    runInner$0: function() {
      var _this = this,
        t1 = _this.grid,
        t2 = t1._GridCache$_store._store,
        t3 = E.DirectedJumpPointSearchData$(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, "size"), "$isMap"))),
        dataGenerator = new E.DirectedJumpPointSearchPreCalculator(t3, t1, _this.start, _this.target, _this.heuristic, -1, Y.SearchHistory$(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, "size"), "$isMap"))));
      dataGenerator.searched = false;
      dataGenerator.run$0();
      _this._data = t3;
      _this.super$BasicSearchAlgorithm$runInner();
    },
    findNeighbourNodes$1: function(node) {
      var lastDirection, relevantDirections, t2, t3, t4, t5, directionAdviser, parentPath, t6, t7, t8, neighbours, reachAble, position, directionData, t9, t10, pathsOfRelevantDirectionsSuccess, pathsOfRelevantDirectionsFail, openDirectionAdviser, __s, was_were, a__, _this = this, _s5_ = "green",
        _s10_ = "foreground",
        t1 = O.Direction;
      if (J.$eq$(node, _this.start)) {
        lastDirection = new X.Optional(null, [t1]);
        relevantDirections = P.LinkedHashSet_LinkedHashSet$from(C.List_4j7, t1);
        t1 = _this._turnOfHistory;
        if (_this.nextTurn - 1 === t1) {
          t2 = _this.searchHistory;
          C.JSArray_methods.add$1(t2._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
          t3 = K.Highlight;
          t4 = [t3];
          t5 = [E.Position];
          t2.addEMM$4("In the first iteration, the DJPS Algorithm will search in ", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
          t2.addEMM$4("every direction", _s5_, H.assertSubtype(E.DirectedJumpPointSearchHighlights_forcedDirections(node, relevantDirections), "$isIterable", [t3], "$asIterable"), H.setRuntimeTypeInfo([null], t5));
          t2.addEMM$4(". ", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
        }
      } else {
        lastDirection = X.Optional$of(_this.parent.$index(0, node)._directionTo$2(node, true), t1);
        t2 = _this._data._array;
        directionAdviser = J.$index$asx((t2 && C.JSArray_methods).$index(t2, node.x), node.y).directionAdvisers.$index(0, lastDirection.get$value());
        relevantDirections = P.LinkedHashSet_LinkedHashSet$from(directionAdviser.jumpDirections, t1);
        relevantDirections.add$1(0, lastDirection.get$value());
        t2 = _this._turnOfHistory;
        if (_this.nextTurn - 1 === t2) {
          t3 = [E.Position];
          t4 = K.Highlight;
          t5 = [t4];
          parentPath = H.setRuntimeTypeInfo([K.PathHighlight$styled("yellow", H.setRuntimeTypeInfo([_this.parent.$index(0, node), node], t3), null, true, null)], t5);
          t6 = _this.searchHistory;
          C.JSArray_methods.add$1(t6._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
          t6.addEMM$4("The DJPS Algorithm will search in every ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          t4 = [t4];
          t6.addEMM$4("relevant direction", _s5_, H.assertSubtype(E.DirectedJumpPointSearchHighlights_forcedDirections(node, relevantDirections), "$isIterable", t4, "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(", which includes ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          t7 = [H.getTypeArgumentByIndex(parentPath, 0)];
          t8 = H.setRuntimeTypeInfo(parentPath.slice(0), t7);
          C.JSArray_methods.addAll$1(t8, E.DirectedJumpPointSearchHighlights_forcedDirections(node, directionAdviser.jumpDirections));
          t6.addEMM$4("all forced directions", _s5_, H.assertSubtype(t8, "$isIterable", t4, "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(" of the current selected node in the direction from its parent to it and the ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          t7 = H.setRuntimeTypeInfo(parentPath.slice(0), t7);
          C.JSArray_methods.addAll$1(t7, E.DirectedJumpPointSearchHighlights_forcedDirections(node, H.setRuntimeTypeInfo([lastDirection.get$value()], [t1])));
          t6.addEMM$4("direction from its parent", _s5_, H.assertSubtype(t7, "$isIterable", t4, "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(". Note: The forced directions do not have to be calculated but are looked up. ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
        }
        t1 = t2;
      }
      t2 = E.Position;
      t3 = [t2];
      neighbours = H.setRuntimeTypeInfo([], t3);
      if (_this.nextTurn - 1 === t1) {
        t4 = _this.searchHistory;
        C.JSArray_methods.add$1(t4._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
        t5 = [K.Highlight];
        t4.addEMM$4("Before we start exploring every relevant direction, we try to reach the target node via the ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
        t4.addEMM$4("octile path", _s5_, H.setRuntimeTypeInfo([K.PathHighlight$(new T.Octile("Octile distance").getPath$2(node, _this.target), true)], t5), H.setRuntimeTypeInfo([null], t3));
        t4.addEMM$4(" from the current selected node to it. ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
      }
      reachAble = _this.canReachTarget$2(node, lastDirection);
      if (reachAble._core$_value != null) {
        if (_this.nextTurn - 1 === t1) {
          t4 = _this.searchHistory;
          t5 = [K.Highlight];
          t4.addEMM$4("Because the octile path is valid, we have found our ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          t6 = H.interceptedTypeCheck(reachAble.get$value().item1, "$isPosition");
          t4.addEMM$4("first neighbour", "blue", H.setRuntimeTypeInfo([new K.CircleHighlight()], t5), H.setRuntimeTypeInfo([t6], t3));
          t4.addEMM$4(". ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          if (relevantDirections.contains$1(0, reachAble.get$value().item2))
            t4.addEMM$4("Note: We will not jump into the " + O.Directions_getName(reachAble.get$value().item2) + " direction, because we already did so and reached to the target node.", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
        }
        C.JSArray_methods.add$1(neighbours, reachAble.get$value().item1);
        relevantDirections.remove$1(0, reachAble.get$value().item2);
      } else if (_this.nextTurn - 1 === t1)
        _this.searchHistory.addEMM$4("But the octile path is blocked.", "", H.setRuntimeTypeInfo([], [K.Highlight]), H.setRuntimeTypeInfo([], t3));
      for (t4 = P._LinkedHashSetIterator$(relevantDirections, relevantDirections._modifications, H.getTypeArgumentByIndex(relevantDirections, 0)); t4.moveNext$0();) {
        t5 = t4._collection$_current;
        position = node;
        do {
          t6 = _this._data._array;
          t7 = position.x;
          t6 = (t6 && C.JSArray_methods).$index(t6, t7);
          t8 = position.y;
          directionData = J.$index$asx(t6, t8).signposts.$index(0, t5);
          t6 = directionData.distance;
          t9 = O.Directions_getDx(t5);
          if (typeof t7 !== "number")
            return t7.$add();
          t10 = O.Directions_getDy(t5);
          if (typeof t8 !== "number")
            return t8.$add();
          position = new E.Position(t7 + t9 * t6, t8 + t10 * t6);
        } while (t6 = directionData.type, t7 = t6 === C.DirectedJumpPointSearchDataPointDirectionType_2, t7);
        if (t6 === C.DirectedJumpPointSearchDataPointDirectionType_1 || t7)
          C.JSArray_methods.add$1(neighbours, position);
      }
      if (_this.nextTurn - 1 === t1) {
        t1 = H.getTypeArgumentByIndex(relevantDirections, 0);
        t4 = {func: 1, ret: P.bool, args: [t1]};
        t5 = [t1];
        t6 = K.PathHighlight;
        t7 = {func: 1, ret: t6, args: [t1]};
        t1 = [t1, t6];
        pathsOfRelevantDirectionsSuccess = P.List_List$from(new H.MappedIterable(new H.WhereIterable(relevantDirections, H.functionTypeCheck(new N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure(_this, node), t4), t5), H.functionTypeCheck(new N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure0(_this, node), t7), t1), true, t6);
        pathsOfRelevantDirectionsFail = P.List_List$from(new H.MappedIterable(new H.WhereIterable(relevantDirections, H.functionTypeCheck(new N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure1(_this, node), t4), t5), H.functionTypeCheck(new N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure2(_this, node), t7), t1), true, t6);
        t1 = _this.open;
        t7 = H.getTypeArgumentByIndex(t1, 0);
        openDirectionAdviser = P.List_List$from(new H.ExpandIterable(new H.WhereIterable(t1, H.functionTypeCheck(new N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure3(node), {func: 1, ret: P.bool, args: [t7]}), [t7]), H.functionTypeCheck(_this.get$visualiseDirectionAdviser(), {func: 1, ret: [P.Iterable, t6], args: [t7]}), [t7, t6]), true, t6);
        t6 = _this.searchHistory;
        t1 = H.setRuntimeTypeInfo(pathsOfRelevantDirectionsSuccess.slice(0), [H.getTypeArgumentByIndex(pathsOfRelevantDirectionsSuccess, 0)]);
        C.JSArray_methods.addAll$1(t1, pathsOfRelevantDirectionsFail);
        t6.addH_$3(_s10_, t1, H.setRuntimeTypeInfo([null], t3));
        t6.addH_$3(_s10_, openDirectionAdviser, H.setRuntimeTypeInfo([null], t3));
        t1 = [M.ExplanationPart];
        t4 = t6._stepDescription;
        C.JSArray_methods.add$1(t4, new M.Explanation("", H.setRuntimeTypeInfo([], t1)));
        t5 = K.Highlight;
        t7 = [t5];
        t6.addEMM$4("Using the lookup data, we check each relevant direction. ", "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
        t8 = pathsOfRelevantDirectionsFail.length;
        if (t8 !== 0) {
          t8 = t8 === 1;
          __s = t8 ? "" : "s";
          t6.addEMM$4("There " + (t8 ? "was" : "were") + " no next jump point" + __s + " pre-calculated for ", "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
          t6.addEMM$4("" + pathsOfRelevantDirectionsFail.length + " direction" + __s, "red", H.assertSubtype(pathsOfRelevantDirectionsFail, "$isIterable", [t5], "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(". Hence we found no neighbour for this direction" + __s + ". ", "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
        }
        t8 = pathsOfRelevantDirectionsSuccess.length;
        if (t8 !== 0) {
          t8 = t8 === 1;
          __s = t8 ? "" : "s";
          was_were = t8 ? "was" : "were";
          a__ = t8 ? "a " : "";
          t6.addEMM$4("For ", "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
          t6.addEMM$4("" + pathsOfRelevantDirectionsSuccess.length + " direction" + __s, _s5_, H.assertSubtype(pathsOfRelevantDirectionsSuccess, "$isIterable", [t5], "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(" there " + was_were + " pre-calculated " + a__ + "next jump point" + __s + ". We therefore found here " + pathsOfRelevantDirectionsSuccess.length + " neighbour" + __s, "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
          t6.addEMM$4(". ", "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
        }
        __s = neighbours.length === 1 ? "" : "s";
        C.JSArray_methods.add$1(t4, new M.Explanation("", H.setRuntimeTypeInfo([], t1)));
        t6.addEMM$4("In total, we found ", "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
        t1 = "" + neighbours.length + " neighbour" + __s;
        H.assertSubtype(neighbours, "$isIterable", [t2], "$asIterable");
        t6.addEMM$4(t1, "blue", H.setRuntimeTypeInfo([new K.CircleHighlight()], t7), neighbours);
        t6.addEMM$4(". We now check each one of them: ", "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
      }
      return new H.ReversedListIterable(neighbours, [H.getTypeArgumentByIndex(neighbours, 0)]);
    },
    canReachTarget$2: function(node, lastDirection) {
      var t2, directionToTarget, t3, directionToTargetData, distanceToTarget, t4, intermediate,
        t1 = O.Direction;
      H.assertSubtype(lastDirection, "$isOptional", [t1], "$asOptional");
      t2 = this.target;
      if (J.$eq$(node, t2))
        return X.Optional$of(new S.Tuple2(t2, lastDirection.get$value(), [E.Position, t1]), [S.Tuple2, E.Position, O.Direction]);
      directionToTarget = node._directionTo$2(t2, false);
      if (!lastDirection.get$iterator(lastDirection).moveNext$0() || directionToTarget !== O.Directions_turn(lastDirection.get$value(), 180)) {
        t3 = this._data._array;
        directionToTargetData = J.$index$asx((t3 && C.JSArray_methods).$index(t3, node.x), node.y).signposts.$index(0, directionToTarget);
        distanceToTarget = X.Distance$calc(node, t2);
        if (C.JSArray_methods.contains$1(C.List_9Ef, directionToTarget)) {
          t3 = distanceToTarget._cardinal;
          t4 = directionToTargetData.distance;
          if (typeof t3 !== "number")
            return t3.$le();
          if (t3 <= t4)
            return X.Optional$of(new S.Tuple2(t2, directionToTarget, [E.Position, t1]), [S.Tuple2, E.Position, O.Direction]);
        } else {
          t2 = distanceToTarget._diagonal;
          t3 = directionToTargetData.distance;
          if (typeof t2 !== "number")
            return t2.$le();
          if (t2 <= t3) {
            intermediate = node.goMulti$2(directionToTarget, t2);
            t2 = this.canReachTarget$2(intermediate, X.Optional$of(directionToTarget, t1));
            if (!t2.get$isEmpty(t2))
              return X.Optional$of(new S.Tuple2(intermediate, directionToTarget, [E.Position, t1]), [S.Tuple2, E.Position, O.Direction]);
          }
        }
      }
      return C.Optional_null;
    },
    visualiseDirectionAdviser$1: function(node) {
      H.interceptedTypeCheck(node, "$isPosition");
      return this.parent.$index(0, node) == null ? H.setRuntimeTypeInfo([], [K.PathHighlight]) : this.visualiseDirectionAdviserDirect$2(node, this.parent.$index(0, node)._directionTo$2(node, true));
    },
    visualiseDirectionAdviserDirect$2: function(newNeighbourNode, relevantDirection) {
      var t2, t3,
        t1 = this._data._array;
      t1 = J.$index$asx((t1 && C.JSArray_methods).$index(t1, newNeighbourNode.x), newNeighbourNode.y).directionAdvisers.$index(0, relevantDirection).jumpDirections;
      t2 = K.PathHighlight;
      t3 = H.getTypeArgumentByIndex(t1, 0);
      return new H.EfficientLengthMappedIterable(t1, H.functionTypeCheck(new N.DirectedJumpPointSearchLookUp_visualiseDirectionAdviserDirect_closure(newNeighbourNode), {func: 1, ret: t2, args: [t3]}), [t3, t2]);
    }
  };
  N.DirectedJumpPointSearchLookUp_closure.prototype = {
    call$5: function(grid, startPosition, targetPosition, heuristic, turnOfHistory) {
      var _s11_ = "DJPS Lookup",
        t1 = new N.DirectedJumpPointSearchLookUp(_s11_, grid, startPosition, targetPosition, heuristic, turnOfHistory, Y.SearchHistory$(F.Size$fromMap(H.interceptedTypeCast(grid._GridCache$_store._store.$index(0, "size"), "$isMap"))));
      t1.searched = false;
      t1.BasicSearchAlgorithm$6(_s11_, grid, startPosition, targetPosition, heuristic, turnOfHistory);
      return t1;
    },
    $signature: 29
  };
  N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure.prototype = {
    call$1: function(relevantDirection) {
      var t1, t2;
      H.interceptedTypeCheck(relevantDirection, "$isDirection");
      t1 = this.node;
      t2 = this.$this._data._array;
      return J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y).signposts.$index(0, relevantDirection).get$isJumpPointAhead();
    },
    $signature: 5
  };
  N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure0.prototype = {
    call$1: function(relevantDirection) {
      var t1, t2;
      H.interceptedTypeCheck(relevantDirection, "$isDirection");
      t1 = this.node;
      t2 = this.$this._data._array;
      return K.PathHighlight$styled("green", H.setRuntimeTypeInfo([t1, t1.goMulti$2(relevantDirection, J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y).signposts.$index(0, relevantDirection).distance)], [E.Position]), null, true, null);
    },
    $signature: 10
  };
  N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure1.prototype = {
    call$1: function(relevantDirection) {
      var t1, t2;
      H.interceptedTypeCheck(relevantDirection, "$isDirection");
      t1 = this.node;
      t2 = this.$this._data._array;
      return !J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y).signposts.$index(0, relevantDirection).get$isJumpPointAhead();
    },
    $signature: 5
  };
  N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure2.prototype = {
    call$1: function(relevantDirection) {
      var t1, t2;
      H.interceptedTypeCheck(relevantDirection, "$isDirection");
      t1 = this.node;
      t2 = this.$this._data._array;
      return K.PathHighlight$styled("red", H.setRuntimeTypeInfo([t1, t1.goMulti$2(relevantDirection, J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y).signposts.$index(0, relevantDirection).distance)], [E.Position]), null, true, null);
    },
    $signature: 10
  };
  N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure3.prototype = {
    call$1: function(o) {
      return !J.$eq$(H.interceptedTypeCheck(o, "$isPosition"), this.node);
    },
    $signature: 4
  };
  N.DirectedJumpPointSearchLookUp_visualiseDirectionAdviserDirect_closure.prototype = {
    call$1: function(newNeighbourRelevantDirection) {
      var t1 = this.newNeighbourNode;
      return K.PathHighlight$styled("green dotted", H.setRuntimeTypeInfo([t1, t1.goMulti$2(H.interceptedTypeCheck(newNeighbourRelevantDirection, "$isDirection"), 1)], [E.Position]), null, true, null);
    },
    $signature: 10
  };
  E.DirectedJumpPointSearchPreCalculator.prototype = {
    runInner$0: function() {
      var t1, t2, t3, t4, t5, getForcedDirectionsHighlights, t6, t7, t8, t9, t10, _i, direction, t11, t12, t13, _this = this,
        _s68_ = "Here one can view the pre-calculated next jump points of each node. ",
        _s10_ = "foreground";
      _this.computeBoxes$3(C.CountDirection_0, C.CountDirection_2, C.Direction_6);
      _this.computeBoxes$3(C.CountDirection_1, C.CountDirection_2, C.Direction_2);
      _this.computeBoxes$3(C.CountDirection_2, C.CountDirection_0, C.Direction_0);
      _this.computeBoxes$3(C.CountDirection_2, C.CountDirection_1, C.Direction_4);
      _this.computeBoxes$3(C.CountDirection_0, C.CountDirection_0, C.Direction_7);
      _this.computeBoxes$3(C.CountDirection_1, C.CountDirection_0, C.Direction_1);
      _this.computeBoxes$3(C.CountDirection_1, C.CountDirection_1, C.Direction_3);
      _this.computeBoxes$3(C.CountDirection_0, C.CountDirection_1, C.Direction_5);
      t1 = _this._turnOfHistory;
      if (++_this.nextTurn - 1 === t1) {
        t2 = _this.searchHistory;
        t2.stepTitle = "Lookup Data - Next Points of Interest - Interaktive Arrow Visualisation";
        C.JSArray_methods.add$1(t2._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
        t3 = [K.Highlight];
        t4 = [E.Position];
        t2.addEMM$4(_s68_, "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t4));
        t2.addEMM$4("By hovering with the mouse over a node, green arrows will point to the next jump point of each direction. ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t4));
        t2.addEMM$4("Red arrows are shown, when there is no next jump point but only a obstacle. ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t4));
        t4 = F.Size$fromMap(H.interceptedTypeCast(_this.grid._GridCache$_store._store.$index(0, "size"), "$isMap")).positions$0();
        t3 = [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]];
        t5 = H.getRuntimeTypeArgument(t4, "Iterable", 0);
        t2.addHM$2("background", P.List_List$from(new H.ExpandIterable(t4, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_closure(new E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator(_this, new E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator(_this))), {func: 1, ret: [P.Iterable, t3], args: [t5]}), [t5, t3]), true, t3));
      }
      if (++_this.nextTurn - 1 === t1) {
        t2 = _this.searchHistory;
        t2.stepTitle = "Lookup Data - Next Points of Interest - Number Visualisation";
        t3 = new E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights(_this);
        C.JSArray_methods.add$1(t2._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
        t4 = [K.Highlight];
        t5 = [E.Position];
        t2.addEMM$4(_s68_, "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
        t2.addEM_$3("Green numbers", "green", t3.call$1(new E.DirectedJumpPointSearchPreCalculator_runInner_closure0()));
        t2.addEMM$4(" show the distance of the next jump point in a direction. ", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
        t2.addEM_$3("Red numbers", "red", t3.call$1(new E.DirectedJumpPointSearchPreCalculator_runInner_closure1()));
        t2.addEMM$4(" are shown, when there is no next jump point in that direction but only a obstacle. ", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("The direction of a number is relative to its position such that for instance a number in the bottom center of a node points south. ", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("In my thesis and in the implementation, the green and red numbers were not distingished by colors but by making the red numbers negative. ", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
        t2.addHM$2(_s10_, t3.call$1(new E.DirectedJumpPointSearchPreCalculator_runInner_closure2()));
      }
      if (++_this.nextTurn - 1 === t1) {
        t1 = _this.searchHistory;
        t1.stepTitle = "Lookup Data - Forced Directions - Arrow Visualisation";
        getForcedDirectionsHighlights = new E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights(_this);
        t2 = [M.ExplanationPart];
        t3 = t1._stepDescription;
        C.JSArray_methods.add$1(t3, new M.Explanation("", H.setRuntimeTypeInfo([], t2)));
        t4 = K.Highlight;
        t5 = [t4];
        t6 = E.Position;
        t7 = [t6];
        t1.addEMM$4("At this view you can view the pre-calculated forced directions of each node. ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t7));
        t1.addEMM$4("Forced directions are shown as green dotted arrows with black arrows as their source direction. ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t7));
        t1.addEMM$4("Because the arrows tend to overlap each other, one can also only display the forced direction of one source direction: ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t7));
        for (t8 = [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], t4 = [t4], t6 = [t6], t9 = [O.Direction], t10 = [[P.Iterable, K.Highlight], [P.Iterable, E.Position]], _i = 0; _i < 8; ++_i) {
          direction = C.List_4j7[_i];
          C.JSArray_methods.add$1(t3, new M.Explanation("", H.setRuntimeTypeInfo([], t2)));
          t11 = H.setRuntimeTypeInfo([], t5);
          t12 = H.setRuntimeTypeInfo([], t7);
          H.assertSubtype(t11, "$isIterable", t4, "$asIterable");
          H.assertSubtype(t12, "$isIterable", t6, "$asIterable");
          t1.addEM_$3("For the ", "", C.JSArray_methods.get$isNotEmpty(t11) ? H.setRuntimeTypeInfo([new S.Tuple2(t11, t12, t10)], t8) : H.setRuntimeTypeInfo([], t8));
          t11 = O.Directions_getName(direction) + " direction";
          t12 = H.assertSubtype(getForcedDirectionsHighlights.call$1(H.setRuntimeTypeInfo([direction], t9)), "$isIterable", t4, "$asIterable");
          t13 = H.assertSubtype(H.setRuntimeTypeInfo([null], t7), "$isIterable", t6, "$asIterable");
          t1.addEM_$3(t11, "green", J.get$isNotEmpty$ax(t12) ? H.setRuntimeTypeInfo([new S.Tuple2(t12, t13, t10)], t8) : H.setRuntimeTypeInfo([], t8));
          t11 = H.setRuntimeTypeInfo([], t5);
          t12 = H.setRuntimeTypeInfo([], t7);
          H.assertSubtype(t11, "$isIterable", t4, "$asIterable");
          H.assertSubtype(t12, "$isIterable", t6, "$asIterable");
          t1.addEM_$3(".", "", C.JSArray_methods.get$isNotEmpty(t11) ? H.setRuntimeTypeInfo([new S.Tuple2(t11, t12, t10)], t8) : H.setRuntimeTypeInfo([], t8));
        }
        t1.addH_$3(_s10_, getForcedDirectionsHighlights.call$1(C.List_4j7), H.setRuntimeTypeInfo([null], t7));
      }
      t1 = _this.searchHistory;
      t1.stepCount = _this.nextTurn;
      t1.title = "Pre-Calculated DJPS Lookup Data";
    },
    computeBoxes$3: function(countDirectionX, countDirectionY, direction) {
      var startX, t3, startY, y, t4, x, t5, _this = this, _s4_ = "size",
        t1 = countDirectionX === C.CountDirection_0,
        deltaX = t1 ? 1 : -1,
        t2 = countDirectionY === C.CountDirection_0,
        deltaY = t2 ? 1 : -1;
      if (t1)
        startX = 0;
      else {
        t3 = F.Size$fromMap(H.interceptedTypeCast(_this.grid._GridCache$_store._store.$index(0, _s4_), "$isMap")).width;
        if (typeof t3 !== "number")
          return t3.$sub();
        startX = t3 - 1;
      }
      if (t2)
        startY = 0;
      else {
        t3 = F.Size$fromMap(H.interceptedTypeCast(_this.grid._GridCache$_store._store.$index(0, _s4_), "$isMap")).height;
        if (typeof t3 !== "number")
          return t3.$sub();
        startY = t3 - 1;
      }
      t3 = _this.grid;
      y = startY;
      while (true) {
        if (t2) {
          t4 = H.interceptedTypeCast(t3._GridCache$_store._store.$index(0, _s4_), "$isMap");
          H.intTypeCast(t4.$index(0, "width"));
          t4 = H.intTypeCast(t4.$index(0, "height"));
          if (typeof t4 !== "number")
            return H.iae(t4);
          t4 = y < t4;
        } else
          t4 = y >= 0;
        if (!t4)
          break;
        x = startX;
        while (true) {
          if (t1) {
            t4 = H.interceptedTypeCast(t3._GridCache$_store._store.$index(0, _s4_), "$isMap");
            t5 = H.intTypeCast(t4.$index(0, "width"));
            H.intTypeCast(t4.$index(0, "height"));
            if (typeof t5 !== "number")
              return H.iae(t5);
            t5 = x < t5;
            t4 = t5;
          } else
            t4 = x >= 0;
          if (!t4)
            break;
          _this.recomputeBox$2(new E.Position(x, y), direction);
          x += deltaX;
        }
        y += deltaY;
      }
    },
    recomputeBox$2: function(position, direction) {
      var jumpDirectionsAhead, t5, t6, t7, preJump, _this = this,
        prePosition = position.goMulti$2(direction, 1),
        t1 = _this.grid,
        t2 = t1._grid._array,
        t3 = position.x,
        t4 = position.y;
      if (!H.boolConversionCheck(J.$index$asx(J.$index$asx((t2 && C.JSArray_methods).$index(t2, t3), t4), direction))) {
        t1 = _this.data;
        t2 = t1._array;
        J.$index$asx((t2 && C.JSArray_methods).$index(t2, t3), t4).signposts.$index(0, direction).type = C.DirectedJumpPointSearchDataPointDirectionType_0;
        t2 = t1._array;
        J.$index$asx((t2 && C.JSArray_methods).$index(t2, t3), t4).signposts.$index(0, direction).distance = 0;
      } else {
        jumpDirectionsAhead = X.DirectedJumpPointSearchJumpPoints_jumpDirections(t1, prePosition, direction, new E.DirectedJumpPointSearchPreCalculator_recomputeBox_closure(_this), true);
        t1 = jumpDirectionsAhead._collection$_length;
        t2 = _this.data;
        t5 = prePosition.x;
        t6 = prePosition.y;
        t7 = t2._array;
        if (t1 > 0) {
          J.$index$asx((t7 && C.JSArray_methods).$index(t7, t3), t4).signposts.$index(0, direction).type = C.DirectedJumpPointSearchDataPointDirectionType_1;
          t1 = t2._array;
          J.$index$asx((t1 && C.JSArray_methods).$index(t1, t5), t6).directionAdvisers.$index(0, direction).set$jumpDirections(jumpDirectionsAhead);
          t6 = t2._array;
          J.$index$asx((t6 && C.JSArray_methods).$index(t6, t3), t4).signposts.$index(0, direction).distance = 1;
        } else {
          preJump = J.$index$asx((t7 && C.JSArray_methods).$index(t7, t5), t6).signposts.$index(0, direction);
          t1 = t2._array;
          J.$index$asx((t1 && C.JSArray_methods).$index(t1, t3), t4).signposts.$index(0, direction).type = preJump.type;
          t1 = t2._array;
          J.$index$asx((t1 && C.JSArray_methods).$index(t1, t3), t4).signposts.$index(0, direction).distance = preJump.distance + 1;
        }
        t1 = t2;
      }
      t1 = t1._array;
      J.$index$asx((t1 && C.JSArray_methods).$index(t1, t3), t4).signposts.$index(0, direction);
    }
  };
  E.DirectedJumpPointSearchPreCalculator_closure.prototype = {
    call$5: function(grid, startPosition, targetPosition, heuristic, turnOfHistory) {
      var t1 = grid._GridCache$_store._store;
      t1 = new E.DirectedJumpPointSearchPreCalculator(E.DirectedJumpPointSearchData$(F.Size$fromMap(H.interceptedTypeCast(t1.$index(0, "size"), "$isMap"))), grid, startPosition, targetPosition, heuristic, turnOfHistory, Y.SearchHistory$(F.Size$fromMap(H.interceptedTypeCast(t1.$index(0, "size"), "$isMap"))));
      t1.searched = false;
      return t1;
    },
    $signature: 32
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator.prototype = {
    call$3: function(origin, position, direction) {
      var path,
        t1 = this.$this.data._array,
        signpost = J.$index$asx((t1 && C.JSArray_methods).$index(t1, position.x), position.y).signposts.$index(0, direction);
      t1 = E.Position;
      path = P.List_List$generate(signpost.distance + 1, new E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator_closure(position, direction), t1);
      return new S.Tuple2(H.setRuntimeTypeInfo([K.PathHighlight$styled(signpost.type === C.DirectedJumpPointSearchDataPointDirectionType_0 ? "red" : "green", path, null, true, null)], [K.Highlight]), H.setRuntimeTypeInfo([origin], [t1]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    }
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator_closure.prototype = {
    call$1: function(d) {
      return this.position.goMulti$2(this.direction, d);
    },
    $signature: 24
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator.prototype = {
    call$4: function(origin, position, jumpDirections, depth) {
      var t1, t2, highlights;
      H.assertSubtype(jumpDirections, "$isIterable", [O.Direction], "$asIterable");
      t1 = [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]];
      t2 = H.getTypeArgumentByIndex(jumpDirections, 0);
      highlights = new H.MappedListIterable(jumpDirections, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure(this.pathHighlightGenerator, origin, position), {func: 1, ret: t1, args: [t2]}), [t2, t1]).toList$0(0);
      if (depth > 1)
        C.JSArray_methods.addAll$1(highlights, new H.ExpandIterable(jumpDirections, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure0(this.$this, position, this, origin, depth), {func: 1, ret: [P.Iterable, t1], args: [t2]}), [t2, t1]));
      return highlights;
    }
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure.prototype = {
    call$1: function(directionInJumpTarget) {
      return this.pathHighlightGenerator.call$3(this.origin, this.position, H.interceptedTypeCheck(directionInJumpTarget, "$isDirection"));
    },
    $signature: 34
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure0.prototype = {
    call$1: function(direction) {
      var t1, t2, t3, jumpTarget, directionsInJumpTarget, _this = this;
      H.interceptedTypeCheck(direction, "$isDirection");
      t1 = _this.position;
      t2 = _this.$this.data;
      t3 = t2._array;
      jumpTarget = t1.goMulti$2(direction, J.$index$asx((t3 && C.JSArray_methods).$index(t3, t1.x), t1.y).signposts.$index(0, direction).distance);
      directionsInJumpTarget = H.setRuntimeTypeInfo([direction], [O.Direction]);
      t2 = t2._array;
      C.JSArray_methods.addAll$1(directionsInJumpTarget, J.$index$asx((t2 && C.JSArray_methods).$index(t2, jumpTarget.x), jumpTarget.y).directionAdvisers.$index(0, direction).jumpDirections);
      return _this.pathHighlightsGenerator.call$4(_this.origin, jumpTarget, directionsInJumpTarget, _this.depth - 1);
    },
    $signature: 35
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_closure.prototype = {
    call$1: function(position) {
      H.interceptedTypeCheck(position, "$isPosition");
      return this.pathHighlightsGenerator.call$4(position, position, C.List_4j7, 1);
    },
    $signature: 36
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights.prototype = {
    call$1: function(where) {
      var t1, t2, t3, t4;
      H.functionTypeCheck(where, {func: 1, ret: P.bool, args: [E.DirectedJumpPointSearchDataSignpost]});
      t1 = this.$this;
      t2 = F.Size$fromMap(H.interceptedTypeCast(t1.grid._GridCache$_store._store.$index(0, "size"), "$isMap")).positions$0();
      t3 = [S.Tuple2, [P.List, K.DirectionTextHighlight], [P.List, E.Position]];
      t4 = H.getRuntimeTypeArgument(t2, "Iterable", 0);
      return P.List_List$from(new H.ExpandIterable(t2, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights_closure(t1, where), {func: 1, ret: [P.Iterable, t3], args: [t4]}), [t4, t3]), true, t3);
    },
    $signature: 37
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights_closure.prototype = {
    call$1: function(position) {
      var t1, t2, t3;
      H.interceptedTypeCheck(position, "$isPosition");
      t1 = this.$this;
      t2 = H.getTypeArgumentByIndex(C.List_4j7, 0);
      t3 = [S.Tuple2, [P.List, K.DirectionTextHighlight], [P.List, E.Position]];
      return new H.MappedIterable(new H.WhereIterable(C.List_4j7, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure(t1, this.where, position), {func: 1, ret: P.bool, args: [t2]}), [t2]), H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure0(t1, position), {func: 1, ret: t3, args: [t2]}), [t2, t3]);
    },
    $signature: 38
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure.prototype = {
    call$1: function(direction) {
      var t1, t2;
      H.interceptedTypeCheck(direction, "$isDirection");
      t1 = this.position;
      t2 = this.$this.data._array;
      return this.where.call$1(J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y).signposts.$index(0, direction));
    },
    $signature: 5
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure0.prototype = {
    call$1: function(direction) {
      var t1, t2, dataPointDirection, t3;
      H.interceptedTypeCheck(direction, "$isDirection");
      t1 = this.position;
      t2 = this.$this.data._array;
      dataPointDirection = J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y).signposts.$index(0, direction);
      t2 = dataPointDirection.type;
      if (t2 === C.DirectedJumpPointSearchDataPointDirectionType_0)
        t2 = "red";
      else
        t2 = t2 === C.DirectedJumpPointSearchDataPointDirectionType_2 ? "yellow" : "green";
      t3 = new K.DirectionTextHighlight(direction, "" + dataPointDirection.distance);
      t3.style = t2;
      return new S.Tuple2(H.setRuntimeTypeInfo([t3], [K.DirectionTextHighlight]), H.setRuntimeTypeInfo([t1], [E.Position]), [[P.List, K.DirectionTextHighlight], [P.List, E.Position]]);
    },
    $signature: 39
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_closure0.prototype = {
    call$1: function(dataPointDirection) {
      return dataPointDirection.type !== C.DirectedJumpPointSearchDataPointDirectionType_0;
    },
    $signature: 13
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_closure1.prototype = {
    call$1: function(dataPointDirection) {
      return dataPointDirection.type === C.DirectedJumpPointSearchDataPointDirectionType_0;
    },
    $signature: 13
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_closure2.prototype = {
    call$1: function(d) {
      return true;
    },
    $signature: 13
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights.prototype = {
    call$1: function(sourceDirections) {
      var t1, t2, t3, t4;
      H.assertSubtype(sourceDirections, "$isList", [O.Direction], "$asList");
      t1 = this.$this;
      t2 = F.Size$fromMap(H.interceptedTypeCast(t1.grid._GridCache$_store._store.$index(0, "size"), "$isMap")).positions$0();
      t3 = K.PathHighlight;
      t4 = H.getRuntimeTypeArgument(t2, "Iterable", 0);
      return P.List_List$from(new H.ExpandIterable(t2, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights_closure(t1, sourceDirections), {func: 1, ret: [P.Iterable, t3], args: [t4]}), [t4, t3]), true, t3);
    },
    $signature: 41
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights_closure.prototype = {
    call$1: function(position) {
      var t1 = this.sourceDirections,
        t2 = K.PathHighlight,
        t3 = H.getTypeArgumentByIndex(t1, 0);
      return new H.ExpandIterable(t1, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights__closure(this.$this, H.interceptedTypeCheck(position, "$isPosition")), {func: 1, ret: [P.Iterable, t2], args: [t3]}), [t3, t2]);
    },
    $signature: 23
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights__closure.prototype = {
    call$1: function(direction) {
      var t1, t2, t3, t4, forcedDirections;
      H.interceptedTypeCheck(direction, "$isDirection");
      t1 = this.position;
      t2 = this.$this.data._array;
      t2 = J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y).directionAdvisers.$index(0, direction).jumpDirections;
      if (t2._collection$_length === 0)
        return C.List_empty;
      t3 = K.PathHighlight;
      t4 = H.getTypeArgumentByIndex(t2, 0);
      forcedDirections = P.List_List$from(new H.EfficientLengthMappedIterable(t2, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights___closure(t1), {func: 1, ret: t3, args: [t4]}), [t4, t3]), true, t3);
      t1 = H.setRuntimeTypeInfo([t1.goMulti$2(O.Directions_turn(direction, 180), 1), t1], [E.Position]);
      t1 = H.setRuntimeTypeInfo([K.PathHighlight$styled("black", t1, 0, true, C.JSArray_methods.contains$1(C.List_O1c, direction) ? 3 : 2)], [t3]);
      C.JSArray_methods.addAll$1(t1, forcedDirections);
      return t1;
    },
    $signature: 42
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights___closure.prototype = {
    call$1: function(d) {
      var t1;
      H.interceptedTypeCheck(d, "$isDirection");
      t1 = this.position;
      t1 = H.setRuntimeTypeInfo([t1, t1.goMulti$2(d, 1)], [E.Position]);
      return K.PathHighlight$styled("green dotted", t1, C.JSArray_methods.contains$1(C.List_O1c, d) ? 3 : 2, true, 0);
    },
    $signature: 10
  };
  E.DirectedJumpPointSearchPreCalculator_recomputeBox_closure.prototype = {
    call$2: function(position, direction) {
      var t1 = this.$this.data._array;
      return J.$index$asx((t1 && C.JSArray_methods).$index(t1, position.x), position.y).signposts.$index(0, direction).get$isJumpPointAhead();
    },
    $signature: 12
  };
  E.DirectedJumpPointSearchData.prototype = {
    $asArray2D: function() {
      return [E.DirectedJumpPointSearchDataPoint];
    }
  };
  E.DirectedJumpPointSearchData_closure.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isPosition");
      return E.DirectedJumpPointSearchDataPoint$();
    },
    $signature: 43
  };
  E.DirectedJumpPointSearchDataPoint.prototype = {};
  E.DirectedJumpPointSearchDataPoint_closure.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isDirection");
      return new E.DirectedJumpPointSearchDataSignpost(C.DirectedJumpPointSearchDataPointDirectionType_0);
    },
    $signature: 44
  };
  E.DirectedJumpPointSearchDataPoint_closure0.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isDirection");
      return new E.DirectedJumpPointSearchDataDirectionAdviser(P.LinkedHashSet_LinkedHashSet(O.Direction));
    },
    $signature: 45
  };
  E.DirectedJumpPointSearchDataSignpost.prototype = {
    get$isJumpPointAhead: function() {
      var t1 = this.type;
      return t1 === C.DirectedJumpPointSearchDataPointDirectionType_1 || t1 === C.DirectedJumpPointSearchDataPointDirectionType_2;
    }
  };
  E.DirectedJumpPointSearchDataDirectionAdviser.prototype = {
    set$jumpDirections: function(jumpDirections) {
      this.jumpDirections = H.assertSubtype(jumpDirections, "$isSet", [O.Direction], "$asSet");
    }
  };
  E.DirectedJumpPointSearchDataPointDirectionType.prototype = {
    toString$0: function(_) {
      return this._DirectedJumpPointSearchPreCalculator$_name;
    }
  };
  E.CountDirection.prototype = {
    toString$0: function(_) {
      return this._DirectedJumpPointSearchPreCalculator$_name;
    }
  };
  O.Direction.prototype = {
    toString$0: function(_) {
      return this._Direction$_name;
    }
  };
  X.Distance.prototype = {
    $add: function(_, other) {
      var t3, t4,
        t1 = this._cardinal,
        t2 = other._cardinal;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this._diagonal;
      t4 = other._diagonal;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new X.Distance(t1 + t2, t3 + t4);
    },
    $lt: function(_, other) {
      if (other._cardinal != this._cardinal || other._diagonal != this._diagonal)
        return this.length$0(0) < other.length$0(0);
      else
        return false;
    },
    length$0: function(_) {
      var t1 = this._cardinal,
        t2 = this._diagonal,
        t3 = Math.sqrt(2);
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + t2 * t3;
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this !== other)
        t1 = other instanceof X.Distance && this._cardinal == other._cardinal && this._diagonal == other._diagonal;
      else
        t1 = true;
      return t1;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._cardinal) ^ J.get$hashCode$(this._diagonal);
    }
  };
  G.AlgorithmType.prototype = {
    toString$0: function(_) {
      return this._Enums$_name;
    }
  };
  G.HeuristicType.prototype = {
    toString$0: function(_) {
      return this._Enums$_name;
    }
  };
  G.GridMode.prototype = {
    toString$0: function(_) {
      return this._Enums$_name;
    }
  };
  G.DirectionMode.prototype = {
    toString$0: function(_) {
      return this._Enums$_name;
    }
  };
  G.DirectionalMode.prototype = {
    toString$0: function(_) {
      return this._Enums$_name;
    }
  };
  G.CornerMode.prototype = {
    toString$0: function(_) {
      return this._Enums$_name;
    }
  };
  Z.Euclidean.prototype = {
    calc$2: function(p1, p2) {
      var t3,
        t1 = p1.x,
        t2 = p2.x;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = Math.pow(t1 - t2, 2);
      t1 = p1.y;
      t3 = p2.y;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      return Math.sqrt(t2 + Math.pow(t1 - t3, 2));
    },
    getPath$2: function(source, target) {
      return H.setRuntimeTypeInfo([source, target], [E.Position]);
    }
  };
  M.Explanation.prototype = {
    toMap$0: function() {
      var t2, t3, t4,
        t1 = new H.JsLinkedHashMap([null, null]);
      t1.$indexSet(0, "style", this.style);
      t2 = this._explanation;
      t3 = [P.Map,,,];
      t4 = H.getTypeArgumentByIndex(t2, 0);
      t1.$indexSet(0, "explanation", new H.MappedListIterable(t2, H.functionTypeCheck(new M.Explanation_toMap_closure(), {func: 1, ret: t3, args: [t4]}), [t4, t3]).toList$0(0));
      return t1;
    }
  };
  M.Explanation_toMap_closure.prototype = {
    call$1: function(e) {
      var t1;
      H.interceptedTypeCheck(e, "$isExplanationPart");
      t1 = new H.JsLinkedHashMap([null, null]);
      t1.$indexSet(0, "id", e.id);
      t1.$indexSet(0, "text", e.text);
      t1.$indexSet(0, "style", e.style);
      return t1;
    },
    $signature: 47
  };
  M.ExplanationPart.prototype = {};
  S.GridCache.prototype = {
    GridCache$1: function(_store) {
      var t1, t2, _this = this;
      _this.rebuild$0();
      t1 = _this._GridCache$_store;
      t2 = [P.String];
      t1.addEqualListener$2(H.setRuntimeTypeInfo(["size", "gridMode", "directionMode", "cornerMode", "directionalMode"], t2), _this.get$rebuild());
      t2 = H.assertSubtype(H.setRuntimeTypeInfo(["barrier_"], t2), "$isList", t2, "$asList");
      t1._startsWithListener.$indexSet(0, H.functionTypeCheck(new S.GridCache_closure(_this), {func: 1, ret: -1, args: [[P.Iterable, P.String]]}), t2);
    },
    rebuild$0: function() {
      var t1 = this._GridCache$_store._store;
      this.set$_grid(K.Array2D$(F.Size$fromMap(H.interceptedTypeCast(t1.$index(0, "size"), "$isMap")), new S.GridCache_rebuild_closure(), [P.Map, O.Direction, P.bool]));
      for (t1 = F.Size$fromMap(H.interceptedTypeCast(t1.$index(0, "size"), "$isMap")).positions$0(), t1 = new H.ExpandIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, C.C_EmptyIterator, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();)
        this._updateOne$1(t1.__internal$_current);
    },
    _updateOne$1: function(position) {
      var t1, _i, direction, t2;
      H.interceptedTypeCheck(position, "$isPosition");
      for (t1 = this._GridCache$_store, _i = 0; _i < 8; ++_i) {
        direction = C.List_4j7[_i];
        t2 = this._grid._array;
        J.$indexSet$ax(J.$index$asx((t2 && C.JSArray_methods).$index(t2, position.x), position.y), direction, t1._gridBarrierManager.leaveAble$2(position, direction));
      }
    },
    accessibleNeighbours$1: function(origin) {
      var t1 = H.getTypeArgumentByIndex(C.List_4j7, 0),
        t2 = E.Position;
      return new H.WhereIterable(new H.MappedIterable(new H.WhereIterable(C.List_4j7, H.functionTypeCheck(new S.GridCache_accessibleNeighbours_closure(this, origin), {func: 1, ret: P.bool, args: [t1]}), [t1]), H.functionTypeCheck(new S.GridCache_accessibleNeighbours_closure0(origin), {func: 1, ret: t2, args: [t1]}), [t1, t2]), H.functionTypeCheck(new S.GridCache_accessibleNeighbours_closure1(this), {func: 1, ret: P.bool, args: [t2]}), [t2]);
    },
    set$_grid: function(_grid) {
      this._grid = H.assertSubtype(_grid, "$isArray2D", [[P.Map, O.Direction, P.bool]], "$asArray2D");
    }
  };
  S.GridCache_closure.prototype = {
    call$1: function(ids) {
      var t1, t2, t3, t4, t5, t6, t7, position;
      for (t1 = J.get$iterator$ax(H.assertSubtype(ids, "$isIterable", [P.String], "$asIterable")), t2 = this.$this, t3 = t2._GridCache$_store._store, t4 = t2.get$_updateOne(); t1.moveNext$0();) {
        t5 = t1.get$current();
        t5 = C.JSString_methods.substring$1(t5, J.getInterceptor$s(t5).indexOf$1(t5, "("));
        t6 = C.JSString_methods.indexOf$1(t5, "(");
        t7 = C.JSString_methods.indexOf$1(t5, ",");
        position = new E.Position(P.int_parse(C.JSString_methods.substring$2(t5, t6 + 1, t7)), P.int_parse(C.JSString_methods.substring$2(t5, t7 + 1, C.JSString_methods.indexOf$1(t5, ")"))));
        t5 = H.interceptedTypeCast(t3.$index(0, "size"), "$isMap");
        if (position.legal$1(new F.Size(H.intTypeCast(t5.$index(0, "width")), H.intTypeCast(t5.$index(0, "height"))))) {
          t2._updateOne$1(position);
          t5 = H.interceptedTypeCast(t3.$index(0, "size"), "$isMap");
          position.neighbours$1(new F.Size(H.intTypeCast(t5.$index(0, "width")), H.intTypeCast(t5.$index(0, "height")))).forEach$1(0, t4);
        }
      }
    },
    $signature: 11
  };
  S.GridCache_rebuild_closure.prototype = {
    call$1: function(p) {
      H.interceptedTypeCheck(p, "$isPosition");
      return P.LinkedHashMap_LinkedHashMap$fromIterable(C.List_4j7, new S.GridCache_rebuild__closure(), O.Direction, P.bool);
    },
    $signature: 49
  };
  S.GridCache_rebuild__closure.prototype = {
    call$1: function(d) {
      return false;
    },
    $signature: 21
  };
  S.GridCache_accessibleNeighbours_closure.prototype = {
    call$1: function(direction) {
      var t1, t2;
      H.interceptedTypeCheck(direction, "$isDirection");
      t1 = this.origin;
      t2 = this.$this._grid._array;
      return J.$index$asx(J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y), direction);
    },
    $signature: 5
  };
  S.GridCache_accessibleNeighbours_closure0.prototype = {
    call$1: function(direction) {
      return this.origin.goMulti$2(H.interceptedTypeCheck(direction, "$isDirection"), 1);
    },
    $signature: 25
  };
  S.GridCache_accessibleNeighbours_closure1.prototype = {
    call$1: function(position) {
      return H.interceptedTypeCheck(position, "$isPosition").legal$1(F.Size$fromMap(H.interceptedTypeCast(this.$this._GridCache$_store._store.$index(0, "size"), "$isMap")));
    },
    $signature: 4
  };
  R.Heuristic.prototype = {
    toString$0: function(_) {
      return this._Heuristic$_name;
    }
  };
  K.Highlights_toListMap_closure.prototype = {
    call$1: function(h) {
      return H.interceptedTypeCheck(h, "$isHighlight").toMap$0();
    },
    $signature: 51
  };
  K.Highlight.prototype = {
    toMap$0: function() {
      var t1 = new H.JsLinkedHashMap([null, null]);
      t1.$indexSet(0, "style", this.style);
      return t1;
    }
  };
  K.BoxHighlight.prototype = {
    toMap$0: function() {
      var t1 = new H.JsLinkedHashMap([null, null]);
      t1.$indexSet(0, "highlight", "BoxHighlight");
      t1.$indexSet(0, "style", this.style);
      return t1;
    }
  };
  K.CircleHighlight.prototype = {
    toMap$0: function() {
      var t1 = this.super$Highlight$toMap();
      t1.$indexSet(0, "highlight", "CircleHighlight");
      return t1;
    }
  };
  K.DotHighlight.prototype = {
    toMap$0: function() {
      var t1 = this.super$Highlight$toMap();
      t1.$indexSet(0, "highlight", "DotHighlight");
      return t1;
    }
  };
  K.PathHighlight.prototype = {
    toMap$0: function() {
      var t2, t3, t4, _this = this,
        t1 = _this.super$Highlight$toMap();
      t1.$indexSet(0, "highlight", "PathHighlight");
      t2 = _this.path;
      t3 = [P.Map,,,];
      t4 = H.getTypeArgumentByIndex(t2, 0);
      t1.$indexSet(0, "path", new H.MappedListIterable(t2, H.functionTypeCheck(new K.PathHighlight_toMap_closure(), {func: 1, ret: t3, args: [t4]}), [t4, t3]).toList$0(0));
      t1.$indexSet(0, "showEnd", _this.showEnd);
      t1.$indexSet(0, "showStart", false);
      t1.$indexSet(0, "startIntermediate", _this.startIntermediate);
      t1.$indexSet(0, "endIntermediate", _this.endIntermediate);
      return t1;
    }
  };
  K.PathHighlight_toMap_closure.prototype = {
    call$1: function(p) {
      return H.interceptedTypeCheck(p, "$isPosition").toMap$0();
    },
    $signature: 52
  };
  K.TextHighlight.prototype = {
    toMap$0: function() {
      var t1 = this.super$Highlight$toMap();
      t1.$indexSet(0, "highlight", "TextHighlight");
      t1.$indexSet(0, "text", this.text);
      return t1;
    }
  };
  K.DirectionTextHighlight.prototype = {
    toMap$0: function() {
      var t1 = this.super$Highlight$toMap();
      t1.$indexSet(0, "highlight", "DirectionTextHighlight");
      t1.$indexSet(0, "direction", this.direction.index);
      t1.$indexSet(0, "text", this.text);
      return t1;
    }
  };
  E.DirectedJumpPointSearchHighlights_forcedDirections_closure.prototype = {
    call$1: function(direction) {
      var t1 = this.jumpPoint;
      return H.setRuntimeTypeInfo([K.PathHighlight$styled("green dotted", H.setRuntimeTypeInfo([t1, t1.goMulti$2(H.interceptedTypeCheck(direction, "$isDirection"), 1)], [E.Position]), null, true, null)], [K.Highlight]);
    },
    $signature: 53
  };
  M.Manhattan.prototype = {
    calc$2: function(p1, p2) {
      var t3, t4,
        t1 = p1.x,
        t2 = p2.x;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = p1.y;
      t4 = p2.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return Math.abs(t1 - t2) + Math.abs(t3 - t4);
    },
    getPath$2: function(source, target) {
      var t1, t2, t3, t4,
        path = H.setRuntimeTypeInfo([source], [E.Position]);
      for (t1 = target.x; C.JSArray_methods.get$last(path).x != t1;) {
        t2 = C.JSArray_methods.get$last(path).x;
        t3 = C.JSArray_methods.get$last(path).x;
        if (typeof t3 !== "number")
          return t3.$gt();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t3 = t3 > t1 ? -1 : 1;
        if (typeof t2 !== "number")
          return t2.$add();
        C.JSArray_methods.add$1(path, new E.Position(t2 + t3, C.JSArray_methods.get$last(path).y));
      }
      for (t1 = target.y; C.JSArray_methods.get$last(path).y != t1;) {
        t2 = C.JSArray_methods.get$last(path).x;
        t3 = C.JSArray_methods.get$last(path).y;
        t4 = C.JSArray_methods.get$last(path).y;
        if (typeof t4 !== "number")
          return t4.$gt();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t4 = t4 > t1 ? -1 : 1;
        if (typeof t3 !== "number")
          return t3.$add();
        C.JSArray_methods.add$1(path, new E.Position(t2, t3 + t4));
      }
      return path;
    }
  };
  O.NoAlgorithm.prototype = {
    runInner$0: function() {
    }
  };
  O.NoAlgorithm_closure.prototype = {
    call$5: function(grid, startPosition, targetPosition, heuristic, turnOfHistory) {
      var t1 = new O.NoAlgorithm(grid, startPosition, targetPosition, heuristic, turnOfHistory, Y.SearchHistory$(F.Size$fromMap(H.interceptedTypeCast(grid._GridCache$_store._store.$index(0, "size"), "$isMap"))));
      t1.searched = false;
      return t1;
    },
    $signature: 54
  };
  O.ConstantZeroHeuristic.prototype = {
    calc$2: function(p1, p2) {
      return 0;
    },
    getPath$2: function(source, target) {
      return H.setRuntimeTypeInfo([], [E.Position]);
    }
  };
  T.Octile.prototype = {
    calc$2: function(p1, p2) {
      var dx, dy,
        t1 = p1.x,
        t2 = p2.x;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      dx = Math.abs(t1 - t2);
      t2 = p1.y;
      t1 = p2.y;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t1 !== "number")
        return H.iae(t1);
      dy = Math.abs(t2 - t1);
      t1 = Math.max(dx, dy);
      t2 = Math.min(dx, dy);
      return t1 - t2 + Math.sqrt(2) * t2;
    },
    getPath$2: function(source, target) {
      var t3, t4, t5, t6,
        path = H.setRuntimeTypeInfo([source], [E.Position]),
        t1 = target.y,
        t2 = target.x;
      while (true) {
        if (!(C.JSArray_methods.get$last(path).x != t2 || C.JSArray_methods.get$last(path).y != t1))
          break;
        t3 = C.JSArray_methods.get$last(path).x;
        if (C.JSArray_methods.get$last(path).x != t2) {
          t4 = C.JSArray_methods.get$last(path).x;
          if (typeof t4 !== "number")
            return t4.$gt();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t4 = t4 > t2 ? -1 : 1;
        } else
          t4 = 0;
        if (typeof t3 !== "number")
          return t3.$add();
        t5 = C.JSArray_methods.get$last(path).y;
        if (C.JSArray_methods.get$last(path).y != t1) {
          t6 = C.JSArray_methods.get$last(path).y;
          if (typeof t6 !== "number")
            return t6.$gt();
          if (typeof t1 !== "number")
            return H.iae(t1);
          t6 = t6 > t1 ? -1 : 1;
        } else
          t6 = 0;
        if (typeof t5 !== "number")
          return t5.$add();
        C.JSArray_methods.add$1(path, new E.Position(t3 + t4, t5 + t6));
      }
      return path;
    }
  };
  S.PathfinderWorker.prototype = {
    _setup$0: function() {
      var t1 = [P.String];
      t1 = H.assertSubtype(H.setRuntimeTypeInfo(["size", "barrier_", "startPosition", "targetPosition", "algorithmType", "heuristicType", "gridMode", "directionMode", "cornerMode", "directionalMode", "currentStepId", "currentStepDescriptionHoverId"], t1), "$isList", t1, "$asList");
      this._PathfinderWorker$_store._startsWithListener.$indexSet(0, H.functionTypeCheck(new S.PathfinderWorker__setup_closure(this), {func: 1, ret: -1, args: [[P.Iterable, P.String]]}), t1);
      this._run$0();
    },
    _run$0: function() {
      var t1 = this._PathfinderWorker$_store;
      t1.autoTriggerListeners = false;
      this._runInner$1(H.intTypeCast(t1._store.$index(0, "currentStepId")));
      t1.autoTriggerListeners = true;
      t1.triggerListeners$0();
    },
    _runInner$1: function(currentStepId) {
      var t2, t3, startPosition, targetPosition, heuristic, algorithmFactory, algorithm, t4, t5, t6, t7, t8, t9, backgroundPathHighlights, foregroundPathHighlights, t10, backgroundHighlights, foregroundHighlights, t11, _null = null,
        _s9_ = "stepCount",
        _s10_ = "background",
        _s29_ = "currentStepDescriptionHoverId",
        t1 = "run algorithm with currentStepId = " + H.S(currentStepId);
      P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": " + t1);
      t1 = Date.now();
      t2 = this._PathfinderWorker$_store;
      t3 = t2._store;
      startPosition = E.Position$fromMap(H.interceptedTypeCast(t3.$index(0, "startPosition"), "$isMap"));
      targetPosition = E.Position$fromMap(H.interceptedTypeCast(t3.$index(0, "targetPosition"), "$isMap"));
      switch (C.JSArray_methods.$index(C.List_GRf, H.intTypeCast(t3.$index(0, "heuristicType")))) {
        case C.HeuristicType_1:
          heuristic = new F.Chebyshev("Chebyshev distance");
          break;
        case C.HeuristicType_0:
          heuristic = new O.ConstantZeroHeuristic("constant zero");
          break;
        case C.HeuristicType_2:
          heuristic = new Z.Euclidean("Euclidean distance");
          break;
        case C.HeuristicType_4:
          heuristic = new M.Manhattan("Manhattan distance");
          break;
        case C.HeuristicType_3:
          heuristic = new T.Octile("Octile distance");
          break;
        default:
          heuristic = _null;
      }
      switch (C.JSArray_methods.$index(C.List_MhI, H.intTypeCast(t3.$index(0, "algorithmType")))) {
        case C.AlgorithmType_0:
          algorithmFactory = $.$get$NoAlgorithm_factory();
          break;
        case C.AlgorithmType_1:
          algorithmFactory = $.$get$Dijkstra_factory();
          break;
        case C.AlgorithmType_2:
          algorithmFactory = $.$get$AStar_factory();
          break;
        case C.AlgorithmType_3:
          algorithmFactory = $.$get$DirectedJumpPointSearch_factory();
          break;
        case C.AlgorithmType_4:
          algorithmFactory = $.$get$DirectedJumpPointSearchLookUp_factory();
          break;
        case C.AlgorithmType_5:
          algorithmFactory = $.$get$DirectedJumpPointSearchPreCalculator_factory();
          break;
        default:
          algorithmFactory = _null;
      }
      algorithm = algorithmFactory.call$5(t2._gridCache, startPosition, targetPosition, heuristic, currentStepId);
      t4 = Date.now();
      algorithm.run$0();
      t5 = Date.now();
      t6 = H.intTypeCast(t3.$index(0, _s9_));
      if (typeof t6 !== "number")
        return t6.$sub();
      t7 = algorithm.searchHistory;
      t8 = t7.stepCount;
      t9 = t8 - 1;
      if (!(currentStepId === t6 - 1 && currentStepId !== t9)) {
        if (typeof currentStepId !== "number")
          return currentStepId.$ge();
        t6 = currentStepId >= t8;
      } else
        t6 = true;
      if (t6) {
        this._runInner$1(t9);
        return;
      }
      t2.$set$2("title", t7.title);
      t2.$set$2(_s9_, t7.stepCount);
      t2.$set$2("currentStepId", currentStepId);
      t2.$set$2("currentStepTitle", t7.stepTitle);
      t2.set$currentStepDescription(t7._stepDescription);
      t6 = t7._stepHighlights;
      t7 = [P.List, K.Highlight];
      backgroundPathHighlights = O.Util_notNull(J.$index$asx(t6.$index(0, _null), _s10_), new S.PathfinderWorker__runInner_closure(), t7);
      foregroundPathHighlights = O.Util_notNull(J.$index$asx(t6.$index(0, _null), H.stringTypeCast(t3.$index(0, _s29_))), new S.PathfinderWorker__runInner_closure0(), t7);
      t7 = K.Highlight;
      t8 = P.List_List$from(backgroundPathHighlights, true, t7);
      C.JSArray_methods.addAll$1(t8, foregroundPathHighlights);
      t9 = [t7];
      t2.$set$2("currentStepHighlights_null", K.Highlights_toListMap(H.assertSubtype(t8, "$isList", t9, "$asList")));
      for (t8 = F.Size$fromMap(H.interceptedTypeCast(t3.$index(0, "size"), "$isMap")).positions$0(), t8 = new H.ExpandIterator(J.get$iterator$ax(t8.__internal$_iterable), t8._f, C.C_EmptyIterator, [H.getTypeArgumentByIndex(t8, 0), H.getTypeArgumentByIndex(t8, 1)]); t8.moveNext$0();) {
        t10 = t8.__internal$_current;
        backgroundHighlights = J.$index$asx(t6.$index(0, t10), _s10_);
        backgroundHighlights = backgroundHighlights != null ? backgroundHighlights : new S.PathfinderWorker__runInner_closure1().call$0();
        foregroundHighlights = J.$index$asx(t6.$index(0, t10), H.stringTypeCast(t3.$index(0, _s29_)));
        foregroundHighlights = foregroundHighlights != null ? foregroundHighlights : new S.PathfinderWorker__runInner_closure2().call$0();
        t11 = P.List_List$from(backgroundHighlights, true, t7);
        C.JSArray_methods.addAll$1(t11, foregroundHighlights);
        H.assertSubtype(t11, "$isList", t9, "$asList");
        t2.$set$2("currentStepHighlights_" + H.S(t10), K.Highlights_toListMap(t11));
      }
      t2 = Date.now();
      t4 = new P.DateTime(t4, false)._value;
      t1 = "setup took " + C.JSInt_methods._tdivFast$1(P.Duration$(0, t4 - new P.DateTime(t1, false)._value)._duration, 1000) + "ms";
      P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": " + t1);
      t5 = new P.DateTime(t5, false)._value;
      t4 = "run   took: " + C.JSInt_methods._tdivFast$1(P.Duration$(0, t5 - t4)._duration, 1000) + "ms";
      P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": " + t4);
      t5 = "store took: " + C.JSInt_methods._tdivFast$1(P.Duration$(0, t2 - t5)._duration, 1000) + "ms";
      P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": " + t5);
    }
  };
  S.PathfinderWorker_closure.prototype = {
    call$0: function() {
      return;
    },
    $signature: 0
  };
  S.PathfinderWorker__setup_closure.prototype = {
    call$1: function(ids) {
      var t1;
      H.assertSubtype(ids, "$isIterable", [P.String], "$asIterable");
      t1 = this.$this;
      t1._timerToRun.cancel$0();
      t1._timerToRun = P.Timer_Timer(P.Duration$(0, 1), t1.get$_run());
    },
    $signature: 11
  };
  S.PathfinderWorker__runInner_closure.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [K.Highlight]);
    },
    $signature: 6
  };
  S.PathfinderWorker__runInner_closure0.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [K.Highlight]);
    },
    $signature: 6
  };
  S.PathfinderWorker__runInner_closure1.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [K.Highlight]);
    },
    $signature: 6
  };
  S.PathfinderWorker__runInner_closure2.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [K.Highlight]);
    },
    $signature: 6
  };
  E.Position.prototype = {
    toMap$0: function() {
      var t1 = new H.JsLinkedHashMap([null, null]);
      t1.$indexSet(0, "x", this.x);
      t1.$indexSet(0, "y", this.y);
      return t1;
    },
    legal$1: function(size) {
      var t2,
        t1 = this.x;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 0) {
        t2 = size.width;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 < t2) {
          t1 = this.y;
          if (typeof t1 !== "number")
            return t1.$ge();
          if (t1 >= 0) {
            t2 = size.height;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = t1 < t2;
            t1 = t2;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    toString$0: function(_) {
      return "(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this !== other)
        t1 = other instanceof E.Position && H.getRuntimeType(_this).$eq(0, H.getRuntimeType(other)) && _this.x == other.x && _this.y == other.y;
      else
        t1 = true;
      return t1;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.x) ^ J.get$hashCode$(this.y);
    },
    goMulti$2: function(direction, $length) {
      var t3, t4,
        t1 = this.x,
        t2 = O.Directions_getDx(direction);
      if (typeof $length !== "number")
        return H.iae($length);
      if (typeof t1 !== "number")
        return t1.$add();
      t3 = this.y;
      t4 = O.Directions_getDy(direction);
      if (typeof t3 !== "number")
        return t3.$add();
      return new E.Position(t1 + t2 * $length, t3 + t4 * $length);
    },
    _directionTo$2: function(targetPosition, last) {
      var dx, dy, t1 = {},
        t2 = targetPosition.x,
        t3 = this.x;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      dx = t2 - t3;
      t3 = targetPosition.y;
      t2 = this.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      dy = t3 - t2;
      t1.tdy = t1.tdx = null;
      if (last && Math.abs(dx) !== Math.abs(dy)) {
        t2 = Math.abs(dx);
        t3 = Math.abs(dy);
        t1.tdx = t2 > t3 ? C.JSInt_methods.get$sign(dx) : 0;
        t1.tdy = t2 < t3 ? C.JSInt_methods.get$sign(dy) : 0;
      } else {
        t1.tdx = C.JSInt_methods.get$sign(dx);
        t1.tdy = C.JSInt_methods.get$sign(dy);
      }
      t2 = H.getTypeArgumentByIndex(C.List_4j7, 0);
      t2 = new H.WhereIterable(C.List_4j7, H.functionTypeCheck(new E.Position__directionTo_closure(t1), {func: 1, ret: P.bool, args: [t2]}), [t2]);
      return t2.get$first(t2);
    },
    neighbours$1: function(size) {
      var t1 = E.Position,
        t2 = H.getTypeArgumentByIndex(C.List_4j7, 0);
      return new H.MappedListIterable(C.List_4j7, H.functionTypeCheck(new E.Position_neighbours_closure(this), {func: 1, ret: t1, args: [t2]}), [t2, t1]).super$Iterable$where(0, H.functionTypeCheck(new E.Position_neighbours_closure0(size), {func: 1, ret: P.bool, args: [t1]}));
    }
  };
  E.Position__directionTo_closure.prototype = {
    call$1: function(d) {
      var t1;
      H.interceptedTypeCheck(d, "$isDirection");
      t1 = this._box_0;
      return O.Directions_getDx(d) === t1.tdx && O.Directions_getDy(d) === t1.tdy;
    },
    $signature: 5
  };
  E.Position_neighbours_closure.prototype = {
    call$1: function(direction) {
      return this.$this.goMulti$2(H.interceptedTypeCheck(direction, "$isDirection"), 1);
    },
    $signature: 25
  };
  E.Position_neighbours_closure0.prototype = {
    call$1: function(position) {
      return H.interceptedTypeCheck(position, "$isPosition").legal$1(this.size);
    },
    $signature: 4
  };
  Y.SearchHistory.prototype = {
    addEMM$4: function(text, style, highlights, positions) {
      var t1;
      H.assertSubtype(highlights, "$isIterable", [K.Highlight], "$asIterable");
      H.assertSubtype(positions, "$isIterable", [E.Position], "$asIterable");
      t1 = [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]];
      this.addEM_$3(text, style, J.get$isNotEmpty$ax(highlights) ? H.setRuntimeTypeInfo([new S.Tuple2(highlights, positions, [[P.Iterable, K.Highlight], [P.Iterable, E.Position]])], t1) : H.setRuntimeTypeInfo([], t1));
    },
    addEM_$3: function(text, style, highlightsMap) {
      var t1, t2;
      H.assertSubtype(highlightsMap, "$isList", [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], "$asList");
      t1 = C.JSArray_methods.get$last(this._stepDescription);
      t2 = highlightsMap.length !== 0 ? "" + this._id++ : "foreground";
      C.JSArray_methods.add$1(t1._explanation, new M.ExplanationPart(t2, text, style));
      this.appendHM$1(highlightsMap);
    },
    appendHM$1: function(highlightsMap) {
      var explanationPart;
      H.assertSubtype(highlightsMap, "$isList", [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], "$asList");
      explanationPart = C.JSArray_methods.get$last(C.JSArray_methods.get$last(this._stepDescription)._explanation);
      C.JSArray_methods.forEach$1(highlightsMap, new Y.SearchHistory_appendHM_closure(explanationPart));
      this.addHM$2(explanationPart.id, highlightsMap);
    },
    addH_$3: function(id, highlights, positions) {
      this.addHM$2(id, H.setRuntimeTypeInfo([new S.Tuple2(H.assertSubtype(highlights, "$isIterable", [K.Highlight], "$asIterable"), H.assertSubtype(positions, "$isIterable", [E.Position], "$asIterable"), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]])], [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]]));
    },
    addHM$2: function(id, highlightsMap) {
      J.forEach$1$ax(H.assertSubtype(highlightsMap, "$isIterable", [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], "$asIterable"), new Y.SearchHistory_addHM_closure(this, id));
    }
  };
  Y.SearchHistory_closure.prototype = {
    call$1: function(p) {
      var t1 = new H.JsLinkedHashMap([P.String, [P.List, K.Highlight]]),
        t2 = [K.Highlight];
      t1.$indexSet(0, "background", H.setRuntimeTypeInfo([], t2));
      t1.$indexSet(0, "foreground", H.setRuntimeTypeInfo([], t2));
      return t1;
    },
    $signature: 56
  };
  Y.SearchHistory_appendHM_closure.prototype = {
    call$1: function(tuple) {
      return J.forEach$1$ax(H.assertSubtype(tuple, "$isTuple2", [[P.Iterable, K.Highlight], [P.Iterable, E.Position]], "$asTuple2").item1, new Y.SearchHistory_appendHM__closure(this.explanationPart));
    },
    $signature: 26
  };
  Y.SearchHistory_appendHM__closure.prototype = {
    call$1: function(h) {
      H.interceptedTypeCheck(h, "$isHighlight");
      if (h.style === "pleaseSetStyle")
        h.style = this.explanationPart.style;
      return;
    },
    $signature: 58
  };
  Y.SearchHistory_addHM_closure.prototype = {
    call$1: function(tuple) {
      H.assertSubtype(tuple, "$isTuple2", [[P.Iterable, K.Highlight], [P.Iterable, E.Position]], "$asTuple2");
      return J.forEach$1$ax(tuple.item2, new Y.SearchHistory_addHM__closure(this.$this, this.id, tuple));
    },
    $signature: 26
  };
  Y.SearchHistory_addHM__closure.prototype = {
    call$1: function(position) {
      return J.addAll$1$ax(this.$this._stepHighlights.$index(0, H.interceptedTypeCheck(position, "$isPosition")).putIfAbsent$2(this.id, new Y.SearchHistory_addHM___closure()), this.tuple.item1);
    },
    $signature: 9
  };
  Y.SearchHistory_addHM___closure.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [K.Highlight]);
    },
    $signature: 6
  };
  F.Size.prototype = {
    positions$0: function() {
      var t1 = P.Iterable_Iterable$generate(this.width, new F.Size_positions_closure(), P.int),
        t2 = E.Position,
        t3 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
      return new H.ExpandIterable(t1, H.functionTypeCheck(new F.Size_positions_closure0(this), {func: 1, ret: [P.Iterable, t2], args: [t3]}), [t3, t2]);
    }
  };
  F.Size_positions_closure.prototype = {
    call$1: function(x) {
      return H.intTypeCheck(x);
    },
    $signature: 59
  };
  F.Size_positions_closure0.prototype = {
    call$1: function(x) {
      return P.Iterable_Iterable$generate(this.$this.height, new F.Size_positions__closure(H.intTypeCheck(x)), E.Position);
    },
    $signature: 60
  };
  F.Size_positions__closure.prototype = {
    call$1: function(y) {
      return new E.Position(this.x, H.intTypeCheck(y));
    },
    $signature: 24
  };
  Q.Store.prototype = {
    Store$0: function() {
      var t1, _this = this;
      _this._gridBarrierManager = new E.BarrierManager(_this);
      t1 = new H.JsLinkedHashMap([null, null]);
      t1.$indexSet(0, "width", 15);
      t1.$indexSet(0, "height", 15);
      _this.$set$2("size", t1);
      _this.$set$2("startPosition", new E.Position(2, 7).toMap$0());
      _this.$set$2("targetPosition", new E.Position(12, 7).toMap$0());
      t1 = D.Barrier_totalBlocked();
      _this.$set$2("barrier_" + new E.Position(7, 5).toString$0(0), t1.toMap$0());
      t1 = D.Barrier_totalBlocked();
      _this.$set$2("barrier_" + new E.Position(7, 6).toString$0(0), t1.toMap$0());
      t1 = D.Barrier_totalBlocked();
      _this.$set$2("barrier_" + new E.Position(7, 7).toString$0(0), t1.toMap$0());
      t1 = D.Barrier_totalBlocked();
      _this.$set$2("barrier_" + new E.Position(7, 8).toString$0(0), t1.toMap$0());
      t1 = D.Barrier_totalBlocked();
      _this.$set$2("barrier_" + new E.Position(7, 9).toString$0(0), t1.toMap$0());
      _this.$set$2("algorithmType", 4);
      _this.$set$2("heuristicType", 3);
      _this.$set$2("algorithmUpdateMode", 0);
      _this.$set$2("gridMode", 0);
      _this.$set$2("directionMode", 0);
      _this.$set$2("cornerMode", 0);
      _this.$set$2("directionalMode", 0);
      _this.$set$2("title", "");
      _this.$set$2("stepCount", 0);
      _this.$set$2("currentStepId", -1);
      _this.$set$2("currentStepTitle", "");
      _this.set$currentStepDescription(H.setRuntimeTypeInfo([], [M.Explanation]));
      F.Size$fromMap(H.interceptedTypeCast(_this._store.$index(0, "size"), "$isMap")).positions$0().forEach$1(0, new Q.Store_closure(_this));
      t1 = [K.Highlight];
      _this.$set$2("currentStepHighlights_null", K.Highlights_toListMap(H.assertSubtype(H.setRuntimeTypeInfo([], t1), "$isList", t1, "$asList")));
      _this.$set$2("currentStepDescriptionHoverId", "foreground");
      _this._gridCache = S.GridCache$(_this);
    },
    getBarrier$1: function(position) {
      return D.Barrier$fromMap(O.Util_notNull(H.interceptedTypeCast(this._store.$index(0, "barrier_" + position.toString$0(0)), "$isMap"), new Q.Store_getBarrier_closure(), [P.Map,,,]));
    },
    set$currentStepDescription: function(newExplanations) {
      var t1, t2;
      H.assertSubtype(newExplanations, "$isList", [M.Explanation], "$asList");
      t1 = [P.Map,,,];
      t2 = H.getTypeArgumentByIndex(newExplanations, 0);
      this.$set$2("currentStepDescription", new H.MappedListIterable(newExplanations, H.functionTypeCheck(new Q.Store_currentStepDescription_closure(), {func: 1, ret: t1, args: [t2]}), [t2, t1]).toList$0(0));
    }
  };
  Q.Store_closure.prototype = {
    call$1: function(p) {
      var t1;
      H.interceptedTypeCheck(p, "$isPosition");
      t1 = [K.Highlight];
      t1 = H.assertSubtype(H.setRuntimeTypeInfo([], t1), "$isList", t1, "$asList");
      return this.$this.$set$2("currentStepHighlights_" + H.S(p), K.Highlights_toListMap(t1));
    },
    $signature: 9
  };
  Q.Store_getBarrier_closure.prototype = {
    call$0: function() {
      return new D.Barrier(P.LinkedHashMap_LinkedHashMap$_literal([C.Direction_0, false, C.Direction_1, false, C.Direction_2, false, C.Direction_3, false, C.Direction_4, false, C.Direction_5, false, C.Direction_6, false, C.Direction_7, false], O.Direction, P.bool)).toMap$0();
    },
    $signature: 61
  };
  Q.Store_currentStepDescription_closure.prototype = {
    call$1: function(p) {
      return H.interceptedTypeCheck(p, "$isExplanation").toMap$0();
    },
    $signature: 62
  };
  T.StoreTransferAble.prototype = {
    $set$3$toTransfer: function(id, newValue, toTransfer) {
      var t1, oldValue, _this = this;
      if (newValue == null)
        return;
      t1 = _this._store;
      oldValue = t1.$index(0, id);
      if (toTransfer ? !O.Util_equal(newValue, oldValue) : !J.$eq$(newValue, oldValue)) {
        t1.$indexSet(0, id, newValue);
        _this.changes.add$1(0, id);
        if (toTransfer)
          _this.changesToTransfer.add$1(0, id);
        if (_this.autoTriggerListeners)
          _this.triggerListeners$0();
      }
    },
    $set$2: function(id, newValue) {
      return this.$set$3$toTransfer(id, newValue, true);
    },
    triggerListeners$0: function() {
      var t1, t2, t3, t4, _this = this,
        equalListenerCalled = P.LinkedHashSet_LinkedHashSet({func: 1, ret: -1});
      for (t1 = _this.changes, t2 = P._LinkedHashSetIterator$(t1, t1._modifications, H.getTypeArgumentByIndex(t1, 0)), t3 = _this._equalListeners; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        Date.now();
        t4 = t3.$index(0, t4);
        t4 = t4 == null ? null : J.where$1$ax(t4, new T.StoreTransferAble_triggerListeners_closure(equalListenerCalled));
        if (t4 != null)
          t4.forEach$1(0, new T.StoreTransferAble_triggerListeners_closure0(equalListenerCalled));
        Date.now();
      }
      _this._startsWithListener.forEach$1(0, new T.StoreTransferAble_triggerListeners_closure1(_this));
      t1.clear$0(0);
      t1 = _this.changesToTransfer;
      if (t1._collection$_length !== 0)
        _this.transferListener.call$1(t1);
      t1.clear$0(0);
    },
    addEqualListener$2: function(ids, equalListener) {
      var t1, _i;
      H.assertSubtype(ids, "$isList", [P.String], "$asList");
      H.functionTypeCheck(equalListener, {func: 1, ret: -1});
      for (t1 = this._equalListeners, _i = 0; _i < 5; ++_i)
        J.add$1$ax(t1.putIfAbsent$2(ids[_i], new T.StoreTransferAble_addEqualListener_closure()), equalListener);
    },
    set$transferListener: function(transferListener) {
      this.transferListener = H.functionTypeCheck(transferListener, {func: 1, ret: -1, args: [[P.Iterable, P.String]]});
    }
  };
  T.StoreTransferAble_closure.prototype = {
    call$1: function(ids) {
      H.assertSubtype(ids, "$isIterable", [P.String], "$asIterable");
      return;
    },
    $signature: 11
  };
  T.StoreTransferAble_triggerListeners_closure.prototype = {
    call$1: function(el) {
      return !this.equalListenerCalled.contains$1(0, H.functionTypeCheck(el, {func: 1, ret: -1}));
    },
    $signature: 63
  };
  T.StoreTransferAble_triggerListeners_closure0.prototype = {
    call$1: function(equalListener) {
      H.functionTypeCheck(equalListener, {func: 1, ret: -1});
      equalListener.call$0();
      this.equalListenerCalled.add$1(0, equalListener);
    },
    $signature: 17
  };
  T.StoreTransferAble_triggerListeners_closure1.prototype = {
    call$2: function(startsWithListener, startsOfIds) {
      var t1, t2, matchingIds;
      H.functionTypeCheck(startsWithListener, {func: 1, ret: -1, args: [[P.Iterable, P.String]]});
      t1 = this.$this.changes;
      t2 = H.getTypeArgumentByIndex(t1, 0);
      matchingIds = P.List_List$from(new H.WhereIterable(t1, H.functionTypeCheck(new T.StoreTransferAble_triggerListeners__closure(H.assertSubtype(startsOfIds, "$isList", [P.String], "$asList")), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2);
      if (matchingIds.length !== 0)
        startsWithListener.call$1(matchingIds);
    },
    $signature: 64
  };
  T.StoreTransferAble_triggerListeners__closure.prototype = {
    call$1: function(changedId) {
      return J.any$1$ax(this.startsOfIds, new T.StoreTransferAble_triggerListeners___closure(H.stringTypeCheck(changedId)));
    },
    $signature: 15
  };
  T.StoreTransferAble_triggerListeners___closure.prototype = {
    call$1: function(startOfId) {
      return J.startsWith$1$s(this.changedId, H.stringTypeCheck(startOfId));
    },
    $signature: 15
  };
  T.StoreTransferAble_addEqualListener_closure.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [{func: 1, ret: -1}]);
    },
    $signature: 66
  };
  K.Transfer.prototype = {
    receive$1: function(jsonDatas) {
      var t3, _i, data, t4,
        t1 = Date.now(),
        datas = J.map$1$1$ax(H.listSuperNativeTypeCast(C.C_JsonCodec.decode$2$reviver(jsonDatas, null), "$isIterable"), new K.Transfer_receive_closure(), [P.Map,,,]).toList$0(0),
        t2 = this.store;
      t2.autoTriggerListeners = false;
      for (t3 = datas.length, _i = 0; _i < datas.length; datas.length === t3 || (0, H.throwConcurrentModificationError)(datas), ++_i) {
        data = datas[_i];
        t4 = J.getInterceptor$asx(data);
        t2.$set$3$toTransfer(H.stringTypeCast(t4.$index(data, "id")), t4.$index(data, "data"), false);
      }
      t2.autoTriggerListeners = true;
      t2.triggerListeners$0();
      t2 = P.String;
      t3 = H.getTypeArgumentByIndex(datas, 0);
      t2 = this.name + ": got   in " + C.JSInt_methods._tdivFast$1(P.Duration$(0, Date.now() - new P.DateTime(t1, false)._value)._duration, 1000) + "ms: " + new H.MappedListIterable(datas, H.functionTypeCheck(new K.Transfer_receive_closure0(), {func: 1, ret: t2, args: [t3]}), [t3, t2]).toString$0(0);
      P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": " + t2);
    },
    send$2: function(ids, $postMessage) {
      var t1;
      H.assertSubtype(ids, "$isIterable", [P.String], "$asIterable");
      H.functionTypeCheck($postMessage, {func: 1, ret: -1, args: [P.String]});
      t1 = Date.now();
      $postMessage.call$1(C.C_JsonCodec.encode$2$toEncodable(J.map$1$1$ax(ids, new K.Transfer_send_closure(this), [P.Map, P.String,,]).toList$0(0), null));
      t1 = this.name + ": send out " + C.JSInt_methods._tdivFast$1(P.Duration$(0, Date.now() - t1)._duration, 1000) + "ms: " + H.S(ids);
      P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": " + t1);
    }
  };
  K.Transfer_receive_closure.prototype = {
    call$1: function(map) {
      return H.interceptedTypeCast(map, "$isMap");
    },
    $signature: 67
  };
  K.Transfer_receive_closure0.prototype = {
    call$1: function(data) {
      return H.stringTypeCast(H.interceptedTypeCheck(data, "$isMap").$index(0, "id"));
    },
    $signature: 68
  };
  K.Transfer_send_closure.prototype = {
    call$1: function(id) {
      var t1;
      H.stringTypeCheck(id);
      t1 = new H.JsLinkedHashMap([P.String, null]);
      t1.$indexSet(0, "id", id);
      t1.$indexSet(0, "data", H.subtypeOfRuntimeTypeCast(this.$this.store._store.$index(0, id), null));
      return t1;
    },
    $signature: 69
  };
  M.TransferSlave.prototype = {
    TransferSlave$1: function(store) {
      var t1 = W.MessageEvent;
      W._EventStreamSubscription$(this._slaveReceiver, "message", H.functionTypeCheck(new M.TransferSlave_closure(this), {func: 1, ret: -1, args: [t1]}), false, t1);
      store.set$transferListener(new M.TransferSlave_closure0(this, store));
    }
  };
  M.TransferSlave_closure.prototype = {
    call$1: function(message) {
      var t1;
      H.interceptedTypeCheck(message, "$isMessageEvent");
      t1 = this.$this;
      if (t1._masterSender == null) {
        P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": _masterSender is null and gets set");
        t1._masterSender = H.interceptedTypeCast(new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(message.data, true), "$isMessagePort");
      } else
        t1.receive$1(H.stringTypeCast(new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(message.data, true)));
    },
    $signature: 70
  };
  M.TransferSlave_closure0.prototype = {
    call$1: function(ids) {
      var t1;
      H.assertSubtype(ids, "$isIterable", [P.String], "$asIterable");
      t1 = this.$this;
      if (t1._masterSender == null) {
        t1 = "_masterSender is null, transfer waiting to send for ids = " + H.S(ids);
        P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": " + t1);
        P.Timer_Timer(P.Duration$(0, 25), new M.TransferSlave__closure(this.store, ids));
      } else
        return t1.send$2(ids, new M.TransferSlave__closure0(t1));
    },
    $signature: 71
  };
  M.TransferSlave__closure.prototype = {
    call$0: function() {
      return this.store.transferListener.call$1(this.ids);
    },
    $signature: 1
  };
  M.TransferSlave__closure0.prototype = {
    call$1: function(message) {
      var t1 = this.$this._masterSender;
      return (t1 && C.MessagePort_methods).postMessage$1(t1, message);
    },
    $signature: 72
  };
  (function aliases() {
    var _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = D.BasicSearchAlgorithm.prototype;
    _.super$BasicSearchAlgorithm$runInner = _.runInner$0;
    _ = K.Highlight.prototype;
    _.super$Highlight$toMap = _.toMap$0;
  })();
  (function installTearOffs() {
    var _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_0_i = hunkHelpers._instance_0i,
      _instance_0_u = hunkHelpers._instance_0u;
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 14);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 14);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 14);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 1);
    _static_1(P, "convert___defaultToEncodable$closure", "_defaultToEncodable", 8);
    _instance_1_u(N.DirectedJumpPointSearchLookUp.prototype, "get$visualiseDirectionAdviser", "visualiseDirectionAdviser$1", 23);
    _instance_0_i(X.Distance.prototype, "get$length", "length$0", 46);
    var _;
    _instance_0_u(_ = S.GridCache.prototype, "get$rebuild", "rebuild$0", 1);
    _instance_1_u(_, "get$_updateOne", "_updateOne$1", 9);
    _instance_0_u(S.PathfinderWorker.prototype, "get$_run", "_run$0", 1);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P.Iterable, H.ListIterator, P.Iterator, H.ExpandIterator, H.EmptyIterator, H.FixedLengthListMixin, H.TypeErrorDecoder, P.Error, H.Closure, H._StackTrace, H.TypeImpl, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.StringMatch, P._TimerImpl, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.Stream, P.StreamSubscription, P.StreamTransformerBase, P.AsyncError, P._Zone, P._SetBase, P._LinkedHashSetCell, P._LinkedHashSetIterator, P.ListMixin, P._MapBaseValueIterator, P.Codec, P._JsonStringifier, P.bool, P.DateTime, P.num, P.Duration, P.StackOverflowError, P._Exception, P.FormatException, P.List, P.Map, P.Null, P.StackTrace, P.String, P.StringBuffer, P._StructuredClone, P._AcceptStructuredClone, S.Tuple2, S.Algorithm, F.Size, D.Barrier, E.BarrierManager, R.Heuristic, E.DirectedJumpPointSearchDataPoint, E.DirectedJumpPointSearchDataSignpost, E.DirectedJumpPointSearchDataDirectionAdviser, E.DirectedJumpPointSearchDataPointDirectionType, E.CountDirection, O.Direction, X.Distance, G.AlgorithmType, G.HeuristicType, G.GridMode, G.DirectionMode, G.DirectionalMode, G.CornerMode, M.Explanation, M.ExplanationPart, S.GridCache, K.Highlight, S.PathfinderWorker, E.Position, Y.SearchHistory, T.StoreTransferAble, K.Transfer]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeByteBuffer, H.NativeTypedData, W.Blob, W.EventTarget, W.DomException, W.Event]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Iterable, [H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H.ExpandIterable, P.IterableBase]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.EmptyIterable, H.LinkedHashMapKeyIterable, P._MapBaseValueIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator]);
    _inheritMany(H.ListIterable, [H.MappedListIterable, H.ReversedListIterable, P._JsonMapKeyIterable, P._GeneratorIterable]);
    _inheritMany(P.Error, [H.NullError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.TypeErrorImplementation, H.CastErrorImplementation, H.RuntimeError, P.AssertionError, P.JsonUnsupportedObjectError, P.NullThrownError, P.ArgumentError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError]);
    _inheritMany(H.Closure, [H.unwrapException_saveStackTrace, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncComplete_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_length_closure, P.Stream_length_closure0, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P.MapBase_mapToString_closure, P._JsonMap_values_closure, P._JsonStringifier_writeMap_closure, P.Duration_toString_sixDigits, P.Duration_toString_twoDigits, W._EventStreamSubscription_closure, P._StructuredClone_walk_closure, P._StructuredClone_walk_closure0, P._AcceptStructuredClone_walk_closure, P.promiseToFuture_closure, P.promiseToFuture_closure0, M.AStar_closure, M.AStar_findNextActiveNode_closure, M.AStar_findNextActiveNode_closure0, M.AStar_findNextActiveNode_closure1, M.AStar_findNextActiveNode_closure2, M.AStar_findNextActiveNode_closure3, M.AStar_findNextActiveNode_closure4, K.Array2D_closure, K.Array2D__closure, D.Barrier$fromMap_closure, D.Barrier$fromMap_closure0, D.Barrier_isAnyBlocked_closure, D.Barrier_toMap_closure, D.BasicSearchAlgorithm_runInner_closure, D.BasicSearchAlgorithm_runInner_closure0, D.BasicSearchAlgorithm_runInner_closure1, D.BasicSearchAlgorithm_runInner_closure2, D.BasicSearchAlgorithm_runInner_closure3, D.BasicSearchAlgorithm_runInner_closure4, D.BasicSearchAlgorithm_runInner_closure5, D.BasicSearchAlgorithm_runInner_closure6, D.BasicSearchAlgorithm_runInner_closure7, D.BasicSearchAlgorithm_runInner_closure8, D.BasicSearchAlgorithm_runInner_closure9, D.BasicSearchAlgorithm_runInner_closure10, D.BasicSearchAlgorithm_runInner_closure11, D.BasicSearchAlgorithm_runInner_closure12, Z.Dijkstra_closure, Z.Dijkstra_findNextActiveNode_closure, Z.Dijkstra_findNextActiveNode_closure0, Z.Dijkstra_findNextActiveNode_closure1, E.DirectedJumpPointSearch_closure, E.DirectedJumpPointSearch_findNeighbourNodes_closure, E.DirectedJumpPointSearch_findNeighbourNodes_closure0, E.DirectedJumpPointSearch_getNextJumpPoint_closure, N.DirectedJumpPointSearchLookUp_closure, N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure, N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure0, N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure1, N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure2, N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure3, N.DirectedJumpPointSearchLookUp_visualiseDirectionAdviserDirect_closure, E.DirectedJumpPointSearchPreCalculator_closure, E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator, E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator_closure, E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator, E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure, E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure0, E.DirectedJumpPointSearchPreCalculator_runInner_closure, E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights, E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights_closure, E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure, E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure0, E.DirectedJumpPointSearchPreCalculator_runInner_closure0, E.DirectedJumpPointSearchPreCalculator_runInner_closure1, E.DirectedJumpPointSearchPreCalculator_runInner_closure2, E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights, E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights_closure, E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights__closure, E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights___closure, E.DirectedJumpPointSearchPreCalculator_recomputeBox_closure, E.DirectedJumpPointSearchData_closure, E.DirectedJumpPointSearchDataPoint_closure, E.DirectedJumpPointSearchDataPoint_closure0, M.Explanation_toMap_closure, S.GridCache_closure, S.GridCache_rebuild_closure, S.GridCache_rebuild__closure, S.GridCache_accessibleNeighbours_closure, S.GridCache_accessibleNeighbours_closure0, S.GridCache_accessibleNeighbours_closure1, K.Highlights_toListMap_closure, K.PathHighlight_toMap_closure, E.DirectedJumpPointSearchHighlights_forcedDirections_closure, O.NoAlgorithm_closure, S.PathfinderWorker_closure, S.PathfinderWorker__setup_closure, S.PathfinderWorker__runInner_closure, S.PathfinderWorker__runInner_closure0, S.PathfinderWorker__runInner_closure1, S.PathfinderWorker__runInner_closure2, E.Position__directionTo_closure, E.Position_neighbours_closure, E.Position_neighbours_closure0, Y.SearchHistory_closure, Y.SearchHistory_appendHM_closure, Y.SearchHistory_appendHM__closure, Y.SearchHistory_addHM_closure, Y.SearchHistory_addHM__closure, Y.SearchHistory_addHM___closure, F.Size_positions_closure, F.Size_positions_closure0, F.Size_positions__closure, Q.Store_closure, Q.Store_getBarrier_closure, Q.Store_currentStepDescription_closure, T.StoreTransferAble_closure, T.StoreTransferAble_triggerListeners_closure, T.StoreTransferAble_triggerListeners_closure0, T.StoreTransferAble_triggerListeners_closure1, T.StoreTransferAble_triggerListeners__closure, T.StoreTransferAble_triggerListeners___closure, T.StoreTransferAble_addEqualListener_closure, K.Transfer_receive_closure, K.Transfer_receive_closure0, K.Transfer_send_closure, M.TransferSlave_closure, M.TransferSlave_closure0, M.TransferSlave__closure, M.TransferSlave__closure0]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.JsLinkedHashMap, P._JsonMap]);
    _inherit(H.NativeTypedArray, H.NativeTypedData);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inherit(P._AsyncCompleter, P._Completer);
    _inherit(P._RootZone, P._Zone);
    _inherit(P._LinkedHashSet, P._SetBase);
    _inherit(P.Converter, P.StreamTransformerBase);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inherit(P.JsonCodec, P.Codec);
    _inheritMany(P.Converter, [P.JsonEncoder, P.JsonDecoder]);
    _inherit(P._JsonStringStringifier, P._JsonStringifier);
    _inheritMany(P.num, [P.double, P.int]);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inheritMany(W.EventTarget, [W.WorkerGlobalScope, W.MessagePort]);
    _inherit(W.DedicatedWorkerGlobalScope, W.WorkerGlobalScope);
    _inherit(W.File, W.Blob);
    _inherit(W.MessageEvent, W.Event);
    _inherit(W._EventStream, P.Stream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(P._StructuredCloneDart2Js, P._StructuredClone);
    _inherit(P._AcceptStructuredCloneDart2Js, P._AcceptStructuredClone);
    _inherit(X.Optional, P.IterableBase);
    _inheritMany(S.Algorithm, [D.BasicSearchAlgorithm, E.DirectedJumpPointSearchPreCalculator, O.NoAlgorithm]);
    _inherit(Z.Dijkstra, D.BasicSearchAlgorithm);
    _inherit(M.AStar, Z.Dijkstra);
    _inherit(K.Array2D, F.Size);
    _inheritMany(R.Heuristic, [F.Chebyshev, Z.Euclidean, M.Manhattan, O.ConstantZeroHeuristic, T.Octile]);
    _inheritMany(M.AStar, [E.DirectedJumpPointSearch, N.DirectedJumpPointSearchLookUp]);
    _inherit(E.DirectedJumpPointSearchData, K.Array2D);
    _inheritMany(K.Highlight, [K.BoxHighlight, K.CircleHighlight, K.DotHighlight, K.PathHighlight, K.TextHighlight, K.DirectionTextHighlight]);
    _inherit(Q.Store, T.StoreTransferAble);
    _inherit(M.TransferSlave, K.Transfer);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
  })();
  var init = {mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"}, mangledNames: {}, getTypeFromName: getGlobalFromName, metadata: [], types: [{func: 1, ret: P.Null}, {func: 1, ret: -1}, {func: 1, ret: K.PathHighlight, args: [E.Position]}, {func: 1, ret: [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]], args: [E.Position]}, {func: 1, ret: P.bool, args: [E.Position]}, {func: 1, ret: P.bool, args: [O.Direction]}, {func: 1, ret: [P.List, K.Highlight]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, args: [,]}, {func: 1, ret: -1, args: [E.Position]}, {func: 1, ret: K.PathHighlight, args: [O.Direction]}, {func: 1, ret: P.Null, args: [[P.Iterable, P.String]]}, {func: 1, ret: P.bool, args: [E.Position, O.Direction]}, {func: 1, ret: P.bool, args: [E.DirectedJumpPointSearchDataSignpost]}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.String, args: [P.int]}, {func: 1, ret: -1, args: [,]}, {func: 1, ret: E.Position, args: [E.Position, E.Position]}, {func: 1, ret: P.bool, args: [,]}, {func: 1, ret: P.Null, args: [E.Position]}, {func: 1, ret: [P.Iterable, K.PathHighlight], args: [E.Position]}, {func: 1, ret: E.Position, args: [P.int]}, {func: 1, ret: E.Position, args: [O.Direction]}, {func: 1, ret: -1, args: [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]]}, {func: 1, ret: Z.Dijkstra, args: [S.GridCache, E.Position, E.Position, R.Heuristic, P.int]}, {func: 1, ret: O.Direction, args: [,]}, {func: 1, ret: N.DirectedJumpPointSearchLookUp, args: [S.GridCache, E.Position, E.Position, R.Heuristic, P.int]}, {func: 1, ret: P.Null, args: [,], opt: [P.StackTrace]}, {func: 1, ret: P.bool, args: [P.bool]}, {func: 1, ret: E.DirectedJumpPointSearchPreCalculator, args: [S.GridCache, E.Position, E.Position, R.Heuristic, P.int]}, {func: 1, ret: P.String, args: [O.Direction]}, {func: 1, ret: [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]], args: [O.Direction]}, {func: 1, ret: [P.List, [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], args: [O.Direction]}, {func: 1, ret: [P.List, [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], args: [E.Position]}, {func: 1, ret: [P.List, [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], args: [{func: 1, ret: P.bool, args: [E.DirectedJumpPointSearchDataSignpost]}]}, {func: 1, ret: [P.Iterable, [S.Tuple2, [P.List, K.DirectionTextHighlight], [P.List, E.Position]]], args: [E.Position]}, {func: 1, ret: [S.Tuple2, [P.List, K.DirectionTextHighlight], [P.List, E.Position]], args: [O.Direction]}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: [P.Iterable, K.Highlight], args: [[P.List, O.Direction]]}, {func: 1, ret: [P.List, K.PathHighlight], args: [O.Direction]}, {func: 1, ret: E.DirectedJumpPointSearchDataPoint, args: [E.Position]}, {func: 1, ret: E.DirectedJumpPointSearchDataSignpost, args: [O.Direction]}, {func: 1, ret: E.DirectedJumpPointSearchDataDirectionAdviser, args: [O.Direction]}, {func: 1, ret: P.double}, {func: 1, ret: [P.Map,,,], args: [M.ExplanationPart]}, {func: 1, ret: M.AStar, args: [S.GridCache, E.Position, E.Position, R.Heuristic, P.int]}, {func: 1, ret: [P.Map, O.Direction, P.bool], args: [E.Position]}, {func: 1, args: [, P.String]}, {func: 1, ret: [P.Map,,,], args: [K.Highlight]}, {func: 1, ret: [P.Map,,,], args: [E.Position]}, {func: 1, ret: [P.Iterable, K.Highlight], args: [O.Direction]}, {func: 1, ret: O.NoAlgorithm, args: [S.GridCache, E.Position, E.Position, R.Heuristic, P.int]}, {func: 1, ret: E.DirectedJumpPointSearch, args: [S.GridCache, E.Position, E.Position, R.Heuristic, P.int]}, {func: 1, ret: [P.Map, P.String, [P.List, K.Highlight]], args: [,]}, {func: 1, args: [P.String]}, {func: 1, ret: -1, args: [K.Highlight]}, {func: 1, ret: P.int, args: [P.int]}, {func: 1, ret: [P.Iterable, E.Position], args: [P.int]}, {func: 1, ret: [P.Map,,,]}, {func: 1, ret: [P.Map,,,], args: [M.Explanation]}, {func: 1, ret: P.bool, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1, args: [[P.Iterable, P.String]]}, [P.List, P.String]]}, {func: 1, args: [W.Event]}, {func: 1, ret: [P.List, {func: 1, ret: -1}]}, {func: 1, ret: [P.Map,,,], args: [,]}, {func: 1, ret: P.String, args: [[P.Map,,,]]}, {func: 1, ret: [P.Map, P.String,,], args: [P.String]}, {func: 1, ret: P.Null, args: [W.MessageEvent]}, {func: 1, ret: P.String, args: [[P.Iterable, P.String]]}, {func: 1, ret: -1, args: [P.String]}, {func: 1, args: [,,]}], interceptorsByTag: null, leafTags: null};
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.DedicatedWorkerGlobalScope_methods = W.DedicatedWorkerGlobalScope.prototype;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.MessagePort_methods = W.MessagePort.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.AlgorithmType_0 = new G.AlgorithmType(0, "AlgorithmType.NO_ALGORITHM");
    C.AlgorithmType_1 = new G.AlgorithmType(1, "AlgorithmType.DIJKSTRA");
    C.AlgorithmType_2 = new G.AlgorithmType(2, "AlgorithmType.A_STAR");
    C.AlgorithmType_3 = new G.AlgorithmType(3, "AlgorithmType.DJPS");
    C.AlgorithmType_4 = new G.AlgorithmType(4, "AlgorithmType.DJPS_LU");
    C.AlgorithmType_5 = new G.AlgorithmType(5, "AlgorithmType.DJPS_PC");
    C.C_EmptyIterator = new H.EmptyIterator([P.Null]);
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C_JsonCodec = new P.JsonCodec();
    C.C__RootZone = new P._RootZone();
    C.CornerMode_1 = new G.CornerMode(1, "CornerMode.BYPASS");
    C.CountDirection_0 = new E.CountDirection("CountDirection.COUNT_UP");
    C.CountDirection_1 = new E.CountDirection("CountDirection.COUNT_DOWN");
    C.CountDirection_2 = new E.CountDirection("CountDirection.COUNT_ANY");
    C.DirectedJumpPointSearchDataPointDirectionType_0 = new E.DirectedJumpPointSearchDataPointDirectionType("DirectedJumpPointSearchDataPointDirectionType.WALL");
    C.DirectedJumpPointSearchDataPointDirectionType_1 = new E.DirectedJumpPointSearchDataPointDirectionType("DirectedJumpPointSearchDataPointDirectionType.JUMP_POINT");
    C.DirectedJumpPointSearchDataPointDirectionType_2 = new E.DirectedJumpPointSearchDataPointDirectionType("DirectedJumpPointSearchDataPointDirectionType.INTERMEDIATE_JUMP_POINT");
    C.DirectionMode_1 = new G.DirectionMode(1, "DirectionMode.ONLY_CARDINAL");
    C.DirectionMode_2 = new G.DirectionMode(2, "DirectionMode.ONLY_DIAGONAL");
    C.Direction_0 = new O.Direction(0, "Direction.NORTH");
    C.Direction_1 = new O.Direction(1, "Direction.NORTH_EAST");
    C.Direction_2 = new O.Direction(2, "Direction.EAST");
    C.Direction_3 = new O.Direction(3, "Direction.SOUTH_EAST");
    C.Direction_4 = new O.Direction(4, "Direction.SOUTH");
    C.Direction_5 = new O.Direction(5, "Direction.SOUTH_WEST");
    C.Direction_6 = new O.Direction(6, "Direction.WEST");
    C.Direction_7 = new O.Direction(7, "Direction.NORTH_WEST");
    C.DirectionalMode_1 = new G.DirectionalMode(1, "DirectionalMode.BI");
    C.Duration_0 = new P.Duration(0);
    C.GridMode_0 = new G.GridMode(0, "GridMode.BASIC");
    C.HeuristicType_0 = new G.HeuristicType(0, "HeuristicType.ZERO");
    C.HeuristicType_1 = new G.HeuristicType(1, "HeuristicType.CHEBYSHEV");
    C.HeuristicType_2 = new G.HeuristicType(2, "HeuristicType.EUCLIDEAN");
    C.HeuristicType_3 = new G.HeuristicType(3, "HeuristicType.OCTILE");
    C.HeuristicType_4 = new G.HeuristicType(4, "HeuristicType.MANHATTAN");
    C.JsonDecoder_null = new P.JsonDecoder(null);
    C.JsonEncoder_null = new P.JsonEncoder(null);
    C.List_4j7 = H.setRuntimeTypeInfo(makeConstList([C.Direction_0, C.Direction_1, C.Direction_2, C.Direction_3, C.Direction_4, C.Direction_5, C.Direction_6, C.Direction_7]), [O.Direction]);
    C.List_9Ef = H.setRuntimeTypeInfo(makeConstList([C.Direction_0, C.Direction_2, C.Direction_4, C.Direction_6]), [O.Direction]);
    C.CornerMode_0 = new G.CornerMode(0, "CornerMode.CROSS");
    C.List_CornerMode_0_CornerMode_1 = H.setRuntimeTypeInfo(makeConstList([C.CornerMode_0, C.CornerMode_1]), [G.CornerMode]);
    C.List_GRf = H.setRuntimeTypeInfo(makeConstList([C.HeuristicType_0, C.HeuristicType_1, C.HeuristicType_2, C.HeuristicType_3, C.HeuristicType_4]), [G.HeuristicType]);
    C.GridMode_1 = new G.GridMode(1, "GridMode.ADVANCED");
    C.List_GridMode_0_GridMode_1 = H.setRuntimeTypeInfo(makeConstList([C.GridMode_0, C.GridMode_1]), [G.GridMode]);
    C.List_MhI = H.setRuntimeTypeInfo(makeConstList([C.AlgorithmType_0, C.AlgorithmType_1, C.AlgorithmType_2, C.AlgorithmType_3, C.AlgorithmType_4, C.AlgorithmType_5]), [G.AlgorithmType]);
    C.List_O1c = H.setRuntimeTypeInfo(makeConstList([C.Direction_1, C.Direction_3, C.Direction_5, C.Direction_7]), [O.Direction]);
    C.DirectionMode_0 = new G.DirectionMode(0, "DirectionMode.ALL");
    C.List_Ql0 = H.setRuntimeTypeInfo(makeConstList([C.DirectionMode_0, C.DirectionMode_1, C.DirectionMode_2]), [G.DirectionMode]);
    C.DirectionalMode_0 = new G.DirectionalMode(0, "DirectionalMode.MONO");
    C.List_WPn = H.setRuntimeTypeInfo(makeConstList([C.DirectionalMode_0, C.DirectionalMode_1]), [G.DirectionalMode]);
    C.List_empty = H.setRuntimeTypeInfo(makeConstList([]), [K.PathHighlight]);
    C.Optional_null0 = new X.Optional(null, [E.Position]);
    C.Optional_null = new X.Optional(null, [[S.Tuple2, E.Position, O.Direction]]);
  })();
  (function staticFields() {
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $._inTypeAssertion = false;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._toStringVisiting = [];
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy;
    _lazy($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazy($, "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
      return H.getIsolateAffinityTag("_$dart_js");
    });
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazy($, "AStar_factory", "$get$AStar_factory", function() {
      return new M.AStar_closure();
    });
    _lazy($, "Dijkstra_factory", "$get$Dijkstra_factory", function() {
      return new Z.Dijkstra_closure();
    });
    _lazy($, "DirectedJumpPointSearch_factory", "$get$DirectedJumpPointSearch_factory", function() {
      return new E.DirectedJumpPointSearch_closure();
    });
    _lazy($, "DirectedJumpPointSearchLookUp_factory", "$get$DirectedJumpPointSearchLookUp_factory", function() {
      return new N.DirectedJumpPointSearchLookUp_closure();
    });
    _lazy($, "DirectedJumpPointSearchPreCalculator_factory", "$get$DirectedJumpPointSearchPreCalculator_factory", function() {
      return new E.DirectedJumpPointSearchPreCalculator_closure();
    });
    _lazy($, "Distance_INFINITY", "$get$Distance_INFINITY", function() {
      return X.Distance$(H.intTypeCast(P.pow(2, 53)), H.intTypeCast(P.pow(2, 53)));
    });
    _lazy($, "NoAlgorithm_factory", "$get$NoAlgorithm_factory", function() {
      return new O.NoAlgorithm_closure();
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({DOMError: J.Interceptor, MediaError: J.Interceptor, NavigatorUserMediaError: J.Interceptor, OverconstrainedError: J.Interceptor, PositionError: J.Interceptor, SQLError: J.Interceptor, ArrayBuffer: H.NativeByteBuffer, DataView: H.NativeTypedData, ArrayBufferView: H.NativeTypedData, Float32Array: H.NativeTypedArrayOfDouble, Float64Array: H.NativeTypedArrayOfDouble, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, Blob: W.Blob, DedicatedWorkerGlobalScope: W.DedicatedWorkerGlobalScope, DOMException: W.DomException, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, ApplicationCacheErrorEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CloseEvent: W.Event, CompositionEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ErrorEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FocusEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, KeyboardEvent: W.Event, MediaEncryptedEvent: W.Event, MediaKeyMessageEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MouseEvent: W.Event, DragEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PointerEvent: W.Event, PopStateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, PresentationConnectionCloseEvent: W.Event, ProgressEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionError: W.Event, SpeechRecognitionEvent: W.Event, SpeechSynthesisEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TextEvent: W.Event, TouchEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, UIEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, WheelEvent: W.Event, MojoInterfaceRequestEvent: W.Event, ResourceProgressEvent: W.Event, USBConnectionEvent: W.Event, IDBVersionChangeEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, EventTarget: W.EventTarget, File: W.File, MessageEvent: W.MessageEvent, MessagePort: W.MessagePort, ServiceWorkerGlobalScope: W.WorkerGlobalScope, SharedWorkerGlobalScope: W.WorkerGlobalScope, WorkerGlobalScope: W.WorkerGlobalScope});
    hunkHelpers.setOrUpdateLeafTags({DOMError: true, MediaError: true, NavigatorUserMediaError: true, OverconstrainedError: true, PositionError: true, SQLError: true, ArrayBuffer: true, DataView: true, ArrayBufferView: false, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, Blob: false, DedicatedWorkerGlobalScope: true, DOMException: true, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CompositionEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FocusEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, KeyboardEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MouseEvent: true, DragEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PointerEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, ProgressEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TextEvent: true, TouchEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, UIEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, WheelEvent: true, MojoInterfaceRequestEvent: true, ResourceProgressEvent: true, USBConnectionEvent: true, IDBVersionChangeEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, EventTarget: false, File: true, MessageEvent: true, MessagePort: true, ServiceWorkerGlobalScope: true, SharedWorkerGlobalScope: true, WorkerGlobalScope: false});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
  })();
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(S.main, []);
    else
      S.main([]);
  });
})();

//# sourceMappingURL=PathfinderWorker.dart.js.map
