// Generated by dart2js (fast startup emitter, strong), the Dart to JavaScript compiler version: 2.7.0.
// The code supports the following hooks:
// dartPrint(message):
//    if this function is defined it is called instead of the Dart [print]
//    method.
//
// dartMainRunner(main, args):
//    if this function is defined, the Dart [main] method will not be invoked
//    directly. Instead, a closure that will invoke [main], and its arguments
//    [args] is passed to [dartMainRunner].
//
// dartDeferredLibraryLoader(uri, successCallback, errorCallback):
//    if this function is defined, it will be called when a deferred library
//    is loaded. It should load and eval the javascript of `uri`, and call
//    successCallback. If it fails to do so, it should call errorCallback with
//    an error.
//
// dartCallInstrumentation(id, qualifiedName):
//    if this function is defined, it will be called at each entry of a
//    method or constructor. Used only when compiling programs with
//    --experiment-call-instrumentation.
{
}
(function dartProgram() {
  function copyProperties(from, to) {
    var keys = Object.keys(from);
    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];
      to[key] = from[key];
    }
  }
  var supportsDirectProtoAccess = function() {
    var cls = function() {
    };
    cls.prototype = {p: {}};
    var object = new cls();
    if (!(object.__proto__ && object.__proto__.p === cls.prototype.p))
      return false;
    try {
      if (typeof navigator != "undefined" && typeof navigator.userAgent == "string" && navigator.userAgent.indexOf("Chrome/") >= 0)
        return true;
      if (typeof version == "function" && version.length == 0) {
        var v = version();
        if (/^\d+\.\d+\.\d+\.\d+$/.test(v))
          return true;
      }
    } catch (_) {
    }
    return false;
  }();
  function setFunctionNamesIfNecessary(holders) {
    function t() {
    }
    ;
    if (typeof t.name == "string")
      return;
    for (var i = 0; i < holders.length; i++) {
      var holder = holders[i];
      var keys = Object.keys(holder);
      for (var j = 0; j < keys.length; j++) {
        var key = keys[j];
        var f = holder[key];
        if (typeof f == 'function')
          f.name = key;
      }
    }
  }
  function inherit(cls, sup) {
    cls.prototype.constructor = cls;
    cls.prototype["$is" + cls.name] = cls;
    if (sup != null) {
      if (supportsDirectProtoAccess) {
        cls.prototype.__proto__ = sup.prototype;
        return;
      }
      var clsPrototype = Object.create(sup.prototype);
      copyProperties(cls.prototype, clsPrototype);
      cls.prototype = clsPrototype;
    }
  }
  function inheritMany(sup, classes) {
    for (var i = 0; i < classes.length; i++)
      inherit(classes[i], sup);
  }
  function mixin(cls, mixin) {
    copyProperties(mixin.prototype, cls.prototype);
    cls.prototype.constructor = cls;
  }
  function lazy(holder, name, getterName, initializer) {
    var uninitializedSentinel = holder;
    holder[name] = uninitializedSentinel;
    holder[getterName] = function() {
      holder[getterName] = function() {
        H.throwCyclicInit(name);
      };
      var result;
      var sentinelInProgress = initializer;
      try {
        if (holder[name] === uninitializedSentinel) {
          result = holder[name] = sentinelInProgress;
          result = holder[name] = initializer();
        } else
          result = holder[name];
      } finally {
        if (result === sentinelInProgress)
          holder[name] = null;
        holder[getterName] = function() {
          return this[name];
        };
      }
      return result;
    };
  }
  function makeConstList(list) {
    list.immutable$list = Array;
    list.fixed$length = Array;
    return list;
  }
  function convertToFastObject(properties) {
    function t() {
    }
    t.prototype = properties;
    new t();
    return properties;
  }
  function convertAllToFastObject(arrayOfObjects) {
    for (var i = 0; i < arrayOfObjects.length; ++i)
      convertToFastObject(arrayOfObjects[i]);
  }
  var functionCounter = 0;
  function tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted) {
    return isIntercepted ? new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "(receiver) {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, true, name);" + "return new c(this, funcs[0], receiver, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null) : new Function("funcs", "applyTrampolineIndex", "reflectionInfo", "name", "H", "c", "return function tearOff_" + name + functionCounter++ + "() {" + "if (c === null) c = " + "H.closureFromTearOff" + "(" + "this, funcs, applyTrampolineIndex, reflectionInfo, false, false, name);" + "return new c(this, funcs[0], null, name);" + "}")(funcs, applyTrampolineIndex, reflectionInfo, name, H, null);
  }
  function tearOff(funcs, applyTrampolineIndex, reflectionInfo, isStatic, name, isIntercepted) {
    var cache = null;
    return isStatic ? function() {
      if (cache === null)
        cache = H.closureFromTearOff(this, funcs, applyTrampolineIndex, reflectionInfo, true, false, name).prototype;
      return cache;
    } : tearOffGetter(funcs, applyTrampolineIndex, reflectionInfo, name, isIntercepted);
  }
  var typesOffset = 0;
  function installTearOff(container, getterName, isStatic, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    var funs = [];
    for (var i = 0; i < funsOrNames.length; i++) {
      var fun = funsOrNames[i];
      if (typeof fun == 'string')
        fun = container[fun];
      fun.$callName = callNames[i];
      funs.push(fun);
    }
    var fun = funs[0];
    fun.$requiredArgCount = requiredParameterCount;
    fun.$defaultValues = optionalParameterDefaultValues;
    var reflectionInfo = funType;
    if (typeof reflectionInfo == "number")
      reflectionInfo += typesOffset;
    var name = funsOrNames[0];
    fun.$stubName = name;
    var getterFunction = tearOff(funs, applyIndex || 0, reflectionInfo, isStatic, name, isIntercepted);
    container[getterName] = getterFunction;
    if (isStatic)
      fun.$tearOff = getterFunction;
  }
  function installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, true, false, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex) {
    return installTearOff(container, getterName, false, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, funsOrNames, funType, applyIndex);
  }
  function setOrUpdateInterceptorsByTag(newTags) {
    var tags = init.interceptorsByTag;
    if (!tags) {
      init.interceptorsByTag = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function setOrUpdateLeafTags(newTags) {
    var tags = init.leafTags;
    if (!tags) {
      init.leafTags = newTags;
      return;
    }
    copyProperties(newTags, tags);
  }
  function updateTypes(newTypes) {
    var types = init.types;
    var length = types.length;
    types.push.apply(types, newTypes);
    return length;
  }
  function updateHolder(holder, newHolder) {
    copyProperties(newHolder, holder);
    return holder;
  }
  var hunkHelpers = function() {
    var mkInstance = function(isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installInstanceTearOff(container, getterName, isIntercepted, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      },
      mkStatic = function(requiredParameterCount, optionalParameterDefaultValues, callNames, applyIndex) {
        return function(container, getterName, name, funType) {
          return installStaticTearOff(container, getterName, requiredParameterCount, optionalParameterDefaultValues, callNames, [name], funType, applyIndex);
        };
      };
    return {inherit: inherit, inheritMany: inheritMany, mixin: mixin, installStaticTearOff: installStaticTearOff, installInstanceTearOff: installInstanceTearOff, _instance_0u: mkInstance(0, 0, null, ["call$0"], 0), _instance_1u: mkInstance(0, 1, null, ["call$1"], 0), _instance_2u: mkInstance(0, 2, null, ["call$2"], 0), _instance_0i: mkInstance(1, 0, null, ["call$0"], 0), _instance_1i: mkInstance(1, 1, null, ["call$1"], 0), _instance_2i: mkInstance(1, 2, null, ["call$2"], 0), _static_0: mkStatic(0, null, ["call$0"], 0), _static_1: mkStatic(1, null, ["call$1"], 0), _static_2: mkStatic(2, null, ["call$2"], 0), makeConstList: makeConstList, lazy: lazy, updateHolder: updateHolder, convertToFastObject: convertToFastObject, setFunctionNamesIfNecessary: setFunctionNamesIfNecessary, updateTypes: updateTypes, setOrUpdateInterceptorsByTag: setOrUpdateInterceptorsByTag, setOrUpdateLeafTags: setOrUpdateLeafTags};
  }();
  function initializeDeferredHunk(hunk) {
    typesOffset = init.types.length;
    hunk(hunkHelpers, init, holders, $);
  }
  function getGlobalFromName(name) {
    for (var i = 0; i < holders.length; i++) {
      if (holders[i] == C)
        continue;
      if (holders[i][name])
        return holders[i][name];
    }
  }
  var C = {},
  H = {JS_CONST: function JS_CONST() {
    },
    MappedIterable_MappedIterable: function(iterable, $function, $S, $T) {
      if (!!J.getInterceptor$(iterable).$isEfficientLengthIterable)
        return new H.EfficientLengthMappedIterable(iterable, $function, [$S, $T]);
      return new H.MappedIterable(iterable, $function, [$S, $T]);
    },
    IterableElementError_noElement: function() {
      return new P.StateError("No element");
    },
    IterableElementError_tooMany: function() {
      return new P.StateError("Too many elements");
    },
    EfficientLengthIterable: function EfficientLengthIterable() {
    },
    ListIterable: function ListIterable() {
    },
    ListIterator: function ListIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_iterable = t0;
      _.__internal$_length = t1;
      _.__internal$_index = 0;
      _.__internal$_current = null;
      _.$ti = t2;
    },
    MappedIterable: function MappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    EfficientLengthMappedIterable: function EfficientLengthMappedIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    MappedIterator: function MappedIterator(t0, t1, t2) {
      var _ = this;
      _.__internal$_current = null;
      _._iterator = t0;
      _._f = t1;
      _.$ti = t2;
    },
    MappedListIterable: function MappedListIterable(t0, t1, t2) {
      this._source = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterable: function WhereIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    WhereIterator: function WhereIterator(t0, t1, t2) {
      this._iterator = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterable: function ExpandIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    ExpandIterator: function ExpandIterator(t0, t1, t2, t3) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._currentExpansion = t2;
      _.__internal$_current = null;
      _.$ti = t3;
    },
    TakeWhileIterable: function TakeWhileIterable(t0, t1, t2) {
      this.__internal$_iterable = t0;
      this._f = t1;
      this.$ti = t2;
    },
    TakeWhileIterator: function TakeWhileIterator(t0, t1, t2) {
      var _ = this;
      _._iterator = t0;
      _._f = t1;
      _._isFinished = false;
      _.$ti = t2;
    },
    EmptyIterable: function EmptyIterable(t0) {
      this.$ti = t0;
    },
    EmptyIterator: function EmptyIterator(t0) {
      this.$ti = t0;
    },
    FixedLengthListMixin: function FixedLengthListMixin() {
    },
    ReversedListIterable: function ReversedListIterable(t0, t1) {
      this._source = t0;
      this.$ti = t1;
    },
    Symbol: function Symbol(t0) {
      this._name = t0;
    },
    ConstantMap_ConstantMap$from: function(other, $K, $V) {
      var allStrings, k, object, containsProto, protoValue, $length, v,
        keys = P.List_List$from(other.get$keys(other), true, $K),
        t1 = keys.length,
        _i = 0;
      while (true) {
        if (!(_i < t1)) {
          allStrings = true;
          break;
        }
        k = keys[_i];
        if (typeof k !== "string") {
          allStrings = false;
          break;
        }
        ++_i;
      }
      if (allStrings) {
        object = {};
        for (containsProto = false, protoValue = null, $length = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
          k = keys[_i];
          v = H.assertSubtypeOfRuntimeType(other.$index(0, k), $V);
          if (!J.$eq$(k, "__proto__")) {
            H.stringTypeCheck(k);
            if (!object.hasOwnProperty(k))
              ++$length;
            object[k] = v;
          } else {
            protoValue = v;
            containsProto = true;
          }
        }
        if (containsProto)
          return new H.ConstantProtoMap(H.assertSubtypeOfRuntimeType(protoValue, $V), $length + 1, object, H.assertSubtype(keys, "$isList", [$K], "$asList"), [$K, $V]);
        return new H.ConstantStringMap($length, object, H.assertSubtype(keys, "$isList", [$K], "$asList"), [$K, $V]);
      }
      return new H.ConstantMapView(P.LinkedHashMap_LinkedHashMap$from(other, $K, $V), [$K, $V]);
    },
    ConstantMap__throwUnmodifiable: function() {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable Map"));
    },
    unminifyOrTag: function(rawClassName) {
      var preserved = H.unmangleGlobalNameIfPreservedAnyways(rawClassName);
      if (typeof preserved === "string")
        return preserved;
      return rawClassName;
    },
    getType: function(index) {
      return init.types[H.intTypeCheck(index)];
    },
    isJsIndexable: function(object, record) {
      var result;
      if (record != null) {
        result = record.x;
        if (result != null)
          return result;
      }
      return !!J.getInterceptor$(object).$isJavaScriptIndexingBehavior;
    },
    S: function(value) {
      var res;
      if (typeof value === "string")
        return value;
      if (typeof value === "number") {
        if (value !== 0)
          return "" + value;
      } else if (true === value)
        return "true";
      else if (false === value)
        return "false";
      else if (value == null)
        return "null";
      res = J.toString$0$(value);
      if (typeof res !== "string")
        throw H.wrapException(H.argumentErrorValue(value));
      return res;
    },
    createInvocationMirror: function($name, internalName, kind, $arguments, argumentNames, types) {
      H.stringTypeCheck(internalName);
      return new H.JSInvocationMirror($name, H.intTypeCheck(kind), H.listTypeCheck($arguments), H.listTypeCheck(argumentNames), H.intTypeCheck(types));
    },
    createUnmangledInvocationMirror: function(symbol, internalName, kind, $arguments, argumentNames, types) {
      H.stringTypeCheck(internalName);
      return new H.JSInvocationMirror(symbol, H.intTypeCheck(kind), H.listTypeCheck($arguments), H.listTypeCheck(argumentNames), H.intTypeCheck(types));
    },
    Primitives_objectHashCode: function(object) {
      var hash = object.$identityHash;
      if (hash == null) {
        hash = Math.random() * 0x3fffffff | 0;
        object.$identityHash = hash;
      }
      return hash;
    },
    Primitives_parseInt: function(source, radix) {
      var match, decimalMatch;
      if (typeof source !== "string")
        H.throwExpression(H.argumentErrorValue(source));
      match = /^\s*[+-]?((0x[a-f0-9]+)|(\d+)|([a-z0-9]+))\s*$/i.exec(source);
      if (match == null)
        return;
      if (3 >= match.length)
        return H.ioore(match, 3);
      decimalMatch = H.stringTypeCheck(match[3]);
      if (decimalMatch != null)
        return parseInt(source, 10);
      if (match[2] != null)
        return parseInt(source, 16);
      return;
    },
    Primitives_objectTypeName: function(object) {
      return H.Primitives__objectClassName(object) + H._joinArguments(H.getRuntimeTypeInfo(object), 0, null);
    },
    Primitives__objectClassName: function(object) {
      var interceptorConstructorName, $name, t1, dispatchName, objectConstructor, match, decompiledName,
        interceptor = J.getInterceptor$(object),
        interceptorConstructor = interceptor.constructor;
      if (typeof interceptorConstructor == "function") {
        interceptorConstructorName = interceptorConstructor.name;
        $name = typeof interceptorConstructorName === "string" ? interceptorConstructorName : null;
      } else
        $name = null;
      t1 = $name == null;
      if (t1 || interceptor === C.Interceptor_methods || !!interceptor.$isUnknownJavaScriptObject) {
        dispatchName = C.C_JS_CONST(object);
        if (t1)
          $name = dispatchName;
        if (dispatchName === "Object") {
          objectConstructor = object.constructor;
          if (typeof objectConstructor == "function") {
            match = String(objectConstructor).match(/^\s*function\s*([\w$]*)\s*\(/);
            decompiledName = match == null ? null : match[1];
            if (typeof decompiledName === "string" && /^\w+$/.test(decompiledName))
              $name = decompiledName;
          }
        }
        return $name;
      }
      $name = $name;
      return H.unminifyOrTag($name.length > 1 && C.JSString_methods._codeUnitAt$1($name, 0) === 36 ? C.JSString_methods.substring$1($name, 1) : $name);
    },
    Primitives_stringFromCharCode: function(charCode) {
      var bits;
      if (charCode <= 65535)
        return String.fromCharCode(charCode);
      if (charCode <= 1114111) {
        bits = charCode - 65536;
        return String.fromCharCode((55296 | C.JSInt_methods._shrOtherPositive$1(bits, 10)) >>> 0, 56320 | bits & 1023);
      }
      throw H.wrapException(P.RangeError$range(charCode, 0, 1114111, null, null));
    },
    Primitives_lazyAsJsDate: function(receiver) {
      if (receiver.date === void 0)
        receiver.date = new Date(receiver._value);
      return receiver.date;
    },
    Primitives_getYear: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCFullYear() + 0 : H.Primitives_lazyAsJsDate(receiver).getFullYear() + 0;
    },
    Primitives_getMonth: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMonth() + 1 : H.Primitives_lazyAsJsDate(receiver).getMonth() + 1;
    },
    Primitives_getDay: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCDate() + 0 : H.Primitives_lazyAsJsDate(receiver).getDate() + 0;
    },
    Primitives_getHours: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCHours() + 0 : H.Primitives_lazyAsJsDate(receiver).getHours() + 0;
    },
    Primitives_getMinutes: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMinutes() + 0 : H.Primitives_lazyAsJsDate(receiver).getMinutes() + 0;
    },
    Primitives_getSeconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCSeconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getSeconds() + 0;
    },
    Primitives_getMilliseconds: function(receiver) {
      return receiver.isUtc ? H.Primitives_lazyAsJsDate(receiver).getUTCMilliseconds() + 0 : H.Primitives_lazyAsJsDate(receiver).getMilliseconds() + 0;
    },
    Primitives_getProperty: function(object, key) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      return object[key];
    },
    Primitives_setProperty: function(object, key, value) {
      if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
        throw H.wrapException(H.argumentErrorValue(object));
      object[key] = value;
    },
    Primitives_functionNoSuchMethod: function($function, positionalArguments, namedArguments) {
      var $arguments, namedArgumentList, t1 = {};
      t1.argumentCount = 0;
      $arguments = [];
      namedArgumentList = [];
      t1.argumentCount = positionalArguments.length;
      C.JSArray_methods.addAll$1($arguments, positionalArguments);
      t1.names = "";
      if (namedArguments != null && !namedArguments.get$isEmpty(namedArguments))
        namedArguments.forEach$1(0, new H.Primitives_functionNoSuchMethod_closure(t1, namedArgumentList, $arguments));
      "" + t1.argumentCount;
      return J.noSuchMethod$1$($function, new H.JSInvocationMirror(C.Symbol_call, 0, $arguments, namedArgumentList, 0));
    },
    Primitives_applyFunction: function($function, positionalArguments, namedArguments) {
      var t1, $arguments, argumentCount, jsStub;
      if (positionalArguments instanceof Array)
        t1 = namedArguments == null || namedArguments.get$isEmpty(namedArguments);
      else
        t1 = false;
      if (t1) {
        $arguments = positionalArguments;
        argumentCount = $arguments.length;
        if (argumentCount === 0) {
          if (!!$function.call$0)
            return $function.call$0();
        } else if (argumentCount === 1) {
          if (!!$function.call$1)
            return $function.call$1($arguments[0]);
        } else if (argumentCount === 2) {
          if (!!$function.call$2)
            return $function.call$2($arguments[0], $arguments[1]);
        } else if (argumentCount === 3) {
          if (!!$function.call$3)
            return $function.call$3($arguments[0], $arguments[1], $arguments[2]);
        } else if (argumentCount === 4) {
          if (!!$function.call$4)
            return $function.call$4($arguments[0], $arguments[1], $arguments[2], $arguments[3]);
        } else if (argumentCount === 5)
          if (!!$function.call$5)
            return $function.call$5($arguments[0], $arguments[1], $arguments[2], $arguments[3], $arguments[4]);
        jsStub = $function["call" + "$" + argumentCount];
        if (jsStub != null)
          return jsStub.apply($function, $arguments);
      }
      return H.Primitives__genericApplyFunction2($function, positionalArguments, namedArguments);
    },
    Primitives__genericApplyFunction2: function($function, positionalArguments, namedArguments) {
      var $arguments, argumentCount, requiredParameterCount, defaultValuesClosure, t1, defaultValues, interceptor, jsFunction, keys, _i, used, t2;
      if (positionalArguments != null)
        $arguments = positionalArguments instanceof Array ? positionalArguments : P.List_List$from(positionalArguments, true, null);
      else
        $arguments = [];
      argumentCount = $arguments.length;
      requiredParameterCount = $function.$requiredArgCount;
      if (argumentCount < requiredParameterCount)
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      defaultValuesClosure = $function.$defaultValues;
      t1 = defaultValuesClosure == null;
      defaultValues = !t1 ? defaultValuesClosure() : null;
      interceptor = J.getInterceptor$($function);
      jsFunction = interceptor["call*"];
      if (typeof jsFunction === "string")
        jsFunction = interceptor[jsFunction];
      if (t1) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount === requiredParameterCount)
          return jsFunction.apply($function, $arguments);
        return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
      }
      if (defaultValues instanceof Array) {
        if (namedArguments != null && namedArguments.get$isNotEmpty(namedArguments))
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        if (argumentCount > requiredParameterCount + defaultValues.length)
          return H.Primitives_functionNoSuchMethod($function, $arguments, null);
        C.JSArray_methods.addAll$1($arguments, defaultValues.slice(argumentCount - requiredParameterCount));
        return jsFunction.apply($function, $arguments);
      } else {
        if (argumentCount > requiredParameterCount)
          return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        keys = Object.keys(defaultValues);
        if (namedArguments == null)
          for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i)
            C.JSArray_methods.add$1($arguments, defaultValues[H.stringTypeCheck(keys[_i])]);
        else {
          for (t1 = keys.length, used = 0, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
            t2 = H.stringTypeCheck(keys[_i]);
            if (namedArguments.containsKey$1(0, t2)) {
              ++used;
              C.JSArray_methods.add$1($arguments, namedArguments.$index(0, t2));
            } else
              C.JSArray_methods.add$1($arguments, defaultValues[t2]);
          }
          if (used !== namedArguments.get$length(namedArguments))
            return H.Primitives_functionNoSuchMethod($function, $arguments, namedArguments);
        }
        return jsFunction.apply($function, $arguments);
      }
    },
    iae: function(argument) {
      throw H.wrapException(H.argumentErrorValue(argument));
    },
    ioore: function(receiver, index) {
      if (receiver == null)
        J.get$length$asx(receiver);
      throw H.wrapException(H.diagnoseIndexError(receiver, index));
    },
    diagnoseIndexError: function(indexable, index) {
      var $length, t1, _s5_ = "index";
      if (typeof index !== "number" || Math.floor(index) !== index)
        return new P.ArgumentError(true, index, _s5_, null);
      $length = H.intTypeCheck(J.get$length$asx(indexable));
      if (!(index < 0)) {
        if (typeof $length !== "number")
          return H.iae($length);
        t1 = index >= $length;
      } else
        t1 = true;
      if (t1)
        return P.IndexError$(index, indexable, _s5_, null, $length);
      return P.RangeError$value(index, _s5_);
    },
    diagnoseRangeError: function(start, end, $length) {
      if (start > $length)
        return new P.RangeError(0, $length, true, start, "start", "Invalid value");
      return new P.ArgumentError(true, end, "end", null);
    },
    argumentErrorValue: function(object) {
      return new P.ArgumentError(true, object, null, null);
    },
    wrapException: function(ex) {
      var wrapper;
      if (ex == null)
        ex = new P.NullThrownError();
      wrapper = new Error();
      wrapper.dartException = ex;
      if ("defineProperty" in Object) {
        Object.defineProperty(wrapper, "message", {get: H.toStringWrapper});
        wrapper.name = "";
      } else
        wrapper.toString = H.toStringWrapper;
      return wrapper;
    },
    toStringWrapper: function() {
      return J.toString$0$(this.dartException);
    },
    throwExpression: function(ex) {
      throw H.wrapException(ex);
    },
    throwConcurrentModificationError: function(collection) {
      throw H.wrapException(P.ConcurrentModificationError$(collection));
    },
    TypeErrorDecoder_extractPattern: function(message) {
      var match, $arguments, argumentsExpr, expr, method, receiver;
      message = H.quoteStringForRegExp(message.replace(String({}), '$receiver$'));
      match = message.match(/\\\$[a-zA-Z]+\\\$/g);
      if (match == null)
        match = H.setRuntimeTypeInfo([], [P.String]);
      $arguments = match.indexOf("\\$arguments\\$");
      argumentsExpr = match.indexOf("\\$argumentsExpr\\$");
      expr = match.indexOf("\\$expr\\$");
      method = match.indexOf("\\$method\\$");
      receiver = match.indexOf("\\$receiver\\$");
      return new H.TypeErrorDecoder(message.replace(new RegExp('\\\\\\$arguments\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$argumentsExpr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$expr\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$method\\\\\\$', 'g'), '((?:x|[^x])*)').replace(new RegExp('\\\\\\$receiver\\\\\\$', 'g'), '((?:x|[^x])*)'), $arguments, argumentsExpr, expr, method, receiver);
    },
    TypeErrorDecoder_provokeCallErrorOn: function(expression) {
      return function($expr$) {
        var $argumentsExpr$ = '$arguments$';
        try {
          $expr$.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    TypeErrorDecoder_provokePropertyErrorOn: function(expression) {
      return function($expr$) {
        try {
          $expr$.$method$;
        } catch (e) {
          return e.message;
        }
      }(expression);
    },
    NullError$: function(_message, match) {
      return new H.NullError(_message, match == null ? null : match.method);
    },
    JsNoSuchMethodError$: function(_message, match) {
      var t1 = match == null,
        t2 = t1 ? null : match.method;
      return new H.JsNoSuchMethodError(_message, t2, t1 ? null : match.receiver);
    },
    unwrapException: function(ex) {
      var message, number, ieErrorCode, nsme, notClosure, nullCall, nullLiteralCall, undefCall, undefLiteralCall, nullProperty, undefProperty, undefLiteralProperty, match, t2, _null = null,
        t1 = new H.unwrapException_saveStackTrace(ex);
      if (ex == null)
        return;
      if (typeof ex !== "object")
        return ex;
      if ("dartException" in ex)
        return t1.call$1(ex.dartException);
      else if (!("message" in ex))
        return ex;
      message = ex.message;
      if ("number" in ex && typeof ex.number == "number") {
        number = ex.number;
        ieErrorCode = number & 65535;
        if ((C.JSInt_methods._shrOtherPositive$1(number, 16) & 8191) === 10)
          switch (ieErrorCode) {
            case 438:
              return t1.call$1(H.JsNoSuchMethodError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
            case 445:
            case 5007:
              return t1.call$1(H.NullError$(H.S(message) + " (Error " + ieErrorCode + ")", _null));
          }
      }
      if (ex instanceof TypeError) {
        nsme = $.$get$TypeErrorDecoder_noSuchMethodPattern();
        notClosure = $.$get$TypeErrorDecoder_notClosurePattern();
        nullCall = $.$get$TypeErrorDecoder_nullCallPattern();
        nullLiteralCall = $.$get$TypeErrorDecoder_nullLiteralCallPattern();
        undefCall = $.$get$TypeErrorDecoder_undefinedCallPattern();
        undefLiteralCall = $.$get$TypeErrorDecoder_undefinedLiteralCallPattern();
        nullProperty = $.$get$TypeErrorDecoder_nullPropertyPattern();
        $.$get$TypeErrorDecoder_nullLiteralPropertyPattern();
        undefProperty = $.$get$TypeErrorDecoder_undefinedPropertyPattern();
        undefLiteralProperty = $.$get$TypeErrorDecoder_undefinedLiteralPropertyPattern();
        match = nsme.matchTypeError$1(message);
        if (match != null)
          return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
        else {
          match = notClosure.matchTypeError$1(message);
          if (match != null) {
            match.method = "call";
            return t1.call$1(H.JsNoSuchMethodError$(H.stringTypeCheck(message), match));
          } else {
            match = nullCall.matchTypeError$1(message);
            if (match == null) {
              match = nullLiteralCall.matchTypeError$1(message);
              if (match == null) {
                match = undefCall.matchTypeError$1(message);
                if (match == null) {
                  match = undefLiteralCall.matchTypeError$1(message);
                  if (match == null) {
                    match = nullProperty.matchTypeError$1(message);
                    if (match == null) {
                      match = nullLiteralCall.matchTypeError$1(message);
                      if (match == null) {
                        match = undefProperty.matchTypeError$1(message);
                        if (match == null) {
                          match = undefLiteralProperty.matchTypeError$1(message);
                          t2 = match != null;
                        } else
                          t2 = true;
                      } else
                        t2 = true;
                    } else
                      t2 = true;
                  } else
                    t2 = true;
                } else
                  t2 = true;
              } else
                t2 = true;
            } else
              t2 = true;
            if (t2)
              return t1.call$1(H.NullError$(H.stringTypeCheck(message), match));
          }
        }
        return t1.call$1(new H.UnknownJsTypeError(typeof message === "string" ? message : ""));
      }
      if (ex instanceof RangeError) {
        if (typeof message === "string" && message.indexOf("call stack") !== -1)
          return new P.StackOverflowError();
        message = function(ex) {
          try {
            return String(ex);
          } catch (e) {
          }
          return null;
        }(ex);
        return t1.call$1(new P.ArgumentError(false, _null, _null, typeof message === "string" ? message.replace(/^RangeError:\s*/, "") : message));
      }
      if (typeof InternalError == "function" && ex instanceof InternalError)
        if (typeof message === "string" && message === "too much recursion")
          return new P.StackOverflowError();
      return ex;
    },
    getTraceFromException: function(exception) {
      var trace;
      if (exception == null)
        return new H._StackTrace(exception);
      trace = exception.$cachedTrace;
      if (trace != null)
        return trace;
      return exception.$cachedTrace = new H._StackTrace(exception);
    },
    fillLiteralMap: function(keyValuePairs, result) {
      var index, index0, index1,
        $length = keyValuePairs.length;
      for (index = 0; index < $length; index = index1) {
        index0 = index + 1;
        index1 = index0 + 1;
        result.$indexSet(0, keyValuePairs[index], keyValuePairs[index0]);
      }
      return result;
    },
    invokeClosure: function(closure, numberOfArguments, arg1, arg2, arg3, arg4) {
      H.interceptedTypeCheck(closure, "$isFunction");
      switch (H.intTypeCheck(numberOfArguments)) {
        case 0:
          return closure.call$0();
        case 1:
          return closure.call$1(arg1);
        case 2:
          return closure.call$2(arg1, arg2);
        case 3:
          return closure.call$3(arg1, arg2, arg3);
        case 4:
          return closure.call$4(arg1, arg2, arg3, arg4);
      }
      throw H.wrapException(P.Exception_Exception("Unsupported number of arguments for wrapped closure"));
    },
    convertDartClosureToJS: function(closure, arity) {
      var $function;
      if (closure == null)
        return;
      $function = closure.$identity;
      if (!!$function)
        return $function;
      $function = function(closure, arity, invoke) {
        return function(a1, a2, a3, a4) {
          return invoke(closure, arity, a1, a2, a3, a4);
        };
      }(closure, arity, H.invokeClosure);
      closure.$identity = $function;
      return $function;
    },
    Closure_fromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, propertyName) {
      var $constructor, t1, trampoline, signatureFunction, applyTrampoline, i, stub, stubCallName, _null = null,
        $function = functions[0],
        callName = $function.$callName,
        $prototype = isStatic ? Object.create(new H.StaticClosure().constructor.prototype) : Object.create(new H.BoundClosure(_null, _null, _null, _null).constructor.prototype);
      $prototype.$initialize = $prototype.constructor;
      if (isStatic)
        $constructor = function static_tear_off() {
          this.$initialize();
        };
      else {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        t1 = new Function("a,b,c,d" + t1, "this.$initialize(a,b,c,d" + t1 + ")");
        $constructor = t1;
      }
      $prototype.constructor = $constructor;
      $constructor.prototype = $prototype;
      if (!isStatic) {
        trampoline = H.Closure_forwardCallTo(receiver, $function, isIntercepted);
        trampoline.$reflectionInfo = reflectionInfo;
      } else {
        $prototype.$static_name = propertyName;
        trampoline = $function;
      }
      signatureFunction = H.Closure__computeSignatureFunctionLegacy(reflectionInfo, isStatic, isIntercepted);
      $prototype.$signature = signatureFunction;
      $prototype[callName] = trampoline;
      for (applyTrampoline = trampoline, i = 1; i < functions.length; ++i) {
        stub = functions[i];
        stubCallName = stub.$callName;
        if (stubCallName != null) {
          stub = isStatic ? stub : H.Closure_forwardCallTo(receiver, stub, isIntercepted);
          $prototype[stubCallName] = stub;
        }
        if (i === applyTrampolineIndex) {
          stub.$reflectionInfo = reflectionInfo;
          applyTrampoline = stub;
        }
      }
      $prototype["call*"] = applyTrampoline;
      $prototype.$requiredArgCount = $function.$requiredArgCount;
      $prototype.$defaultValues = $function.$defaultValues;
      return $constructor;
    },
    Closure__computeSignatureFunctionLegacy: function(functionType, isStatic, isIntercepted) {
      var getReceiver;
      if (typeof functionType == "number")
        return function(getType, t) {
          return function() {
            return getType(t);
          };
        }(H.getType, functionType);
      if (typeof functionType == "function")
        if (isStatic)
          return functionType;
        else {
          getReceiver = isIntercepted ? H.BoundClosure_receiverOf : H.BoundClosure_selfOf;
          return function(f, r) {
            return function() {
              return f.apply({$receiver: r(this)}, arguments);
            };
          }(functionType, getReceiver);
        }
      throw H.wrapException("Error in functionType of tearoff");
    },
    Closure_cspForwardCall: function(arity, isSuperCall, stubName, $function) {
      var getSelf = H.BoundClosure_selfOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          return function(n, S) {
            return function() {
              return S(this)[n]();
            };
          }(stubName, getSelf);
        case 1:
          return function(n, S) {
            return function(a) {
              return S(this)[n](a);
            };
          }(stubName, getSelf);
        case 2:
          return function(n, S) {
            return function(a, b) {
              return S(this)[n](a, b);
            };
          }(stubName, getSelf);
        case 3:
          return function(n, S) {
            return function(a, b, c) {
              return S(this)[n](a, b, c);
            };
          }(stubName, getSelf);
        case 4:
          return function(n, S) {
            return function(a, b, c, d) {
              return S(this)[n](a, b, c, d);
            };
          }(stubName, getSelf);
        case 5:
          return function(n, S) {
            return function(a, b, c, d, e) {
              return S(this)[n](a, b, c, d, e);
            };
          }(stubName, getSelf);
        default:
          return function(f, s) {
            return function() {
              return f.apply(s(this), arguments);
            };
          }($function, getSelf);
      }
    },
    Closure_forwardCallTo: function(receiver, $function, isIntercepted) {
      var stubName, arity, lookedUpFunction, t1, t2, selfName, $arguments;
      if (isIntercepted)
        return H.Closure_forwardInterceptedCallTo(receiver, $function);
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t1 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t2 = !t1 || arity >= 27;
      if (t2)
        return H.Closure_cspForwardCall(arity, !t1, stubName, $function);
      if (arity === 0) {
        t1 = $.Closure_functionCounter;
        if (typeof t1 !== "number")
          return t1.$add();
        $.Closure_functionCounter = t1 + 1;
        selfName = "self" + t1;
        t1 = "return function(){var " + selfName + " = this.";
        t2 = $.BoundClosure_selfFieldNameCache;
        return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + ";return " + selfName + "." + H.S(stubName) + "();}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity).join(",");
      t1 = $.Closure_functionCounter;
      if (typeof t1 !== "number")
        return t1.$add();
      $.Closure_functionCounter = t1 + 1;
      $arguments += t1;
      t1 = "return function(" + $arguments + "){return this.";
      t2 = $.BoundClosure_selfFieldNameCache;
      return new Function(t1 + H.S(t2 == null ? $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self") : t2) + "." + H.S(stubName) + "(" + $arguments + ");}")();
    },
    Closure_cspForwardInterceptedCall: function(arity, isSuperCall, $name, $function) {
      var getSelf = H.BoundClosure_selfOf,
        getReceiver = H.BoundClosure_receiverOf;
      switch (isSuperCall ? -1 : arity) {
        case 0:
          throw H.wrapException(H.RuntimeError$("Intercepted function with no arguments."));
        case 1:
          return function(n, s, r) {
            return function() {
              return s(this)[n](r(this));
            };
          }($name, getSelf, getReceiver);
        case 2:
          return function(n, s, r) {
            return function(a) {
              return s(this)[n](r(this), a);
            };
          }($name, getSelf, getReceiver);
        case 3:
          return function(n, s, r) {
            return function(a, b) {
              return s(this)[n](r(this), a, b);
            };
          }($name, getSelf, getReceiver);
        case 4:
          return function(n, s, r) {
            return function(a, b, c) {
              return s(this)[n](r(this), a, b, c);
            };
          }($name, getSelf, getReceiver);
        case 5:
          return function(n, s, r) {
            return function(a, b, c, d) {
              return s(this)[n](r(this), a, b, c, d);
            };
          }($name, getSelf, getReceiver);
        case 6:
          return function(n, s, r) {
            return function(a, b, c, d, e) {
              return s(this)[n](r(this), a, b, c, d, e);
            };
          }($name, getSelf, getReceiver);
        default:
          return function(f, s, r, a) {
            return function() {
              a = [r(this)];
              Array.prototype.push.apply(a, arguments);
              return f.apply(s(this), a);
            };
          }($function, getSelf, getReceiver);
      }
    },
    Closure_forwardInterceptedCallTo: function(receiver, $function) {
      var t2, stubName, arity, lookedUpFunction, t3, t4, $arguments,
        t1 = $.BoundClosure_selfFieldNameCache;
      if (t1 == null)
        t1 = $.BoundClosure_selfFieldNameCache = H.BoundClosure_computeFieldNamed("self");
      t2 = $.BoundClosure_receiverFieldNameCache;
      if (t2 == null)
        t2 = $.BoundClosure_receiverFieldNameCache = H.BoundClosure_computeFieldNamed("receiver");
      stubName = $function.$stubName;
      arity = $function.length;
      lookedUpFunction = receiver[stubName];
      t3 = $function == null ? lookedUpFunction == null : $function === lookedUpFunction;
      t4 = !t3 || arity >= 28;
      if (t4)
        return H.Closure_cspForwardInterceptedCall(arity, !t3, stubName, $function);
      if (arity === 1) {
        t1 = "return function(){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ");";
        t2 = $.Closure_functionCounter;
        if (typeof t2 !== "number")
          return t2.$add();
        $.Closure_functionCounter = t2 + 1;
        return new Function(t1 + t2 + "}")();
      }
      $arguments = "abcdefghijklmnopqrstuvwxyz".split("").splice(0, arity - 1).join(",");
      t1 = "return function(" + $arguments + "){return this." + H.S(t1) + "." + H.S(stubName) + "(this." + H.S(t2) + ", " + $arguments + ");";
      t2 = $.Closure_functionCounter;
      if (typeof t2 !== "number")
        return t2.$add();
      $.Closure_functionCounter = t2 + 1;
      return new Function(t1 + t2 + "}")();
    },
    closureFromTearOff: function(receiver, functions, applyTrampolineIndex, reflectionInfo, isStatic, isIntercepted, $name) {
      return H.Closure_fromTearOff(receiver, functions, applyTrampolineIndex, reflectionInfo, !!isStatic, !!isIntercepted, $name);
    },
    BoundClosure_selfOf: function(closure) {
      return closure._self;
    },
    BoundClosure_receiverOf: function(closure) {
      return closure.__js_helper$_receiver;
    },
    BoundClosure_computeFieldNamed: function(fieldName) {
      var t1, i, $name,
        template = new H.BoundClosure("self", "target", "receiver", "name"),
        names = J.JSArray_markFixedList(Object.getOwnPropertyNames(template));
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (template[$name] === fieldName)
          return $name;
      }
    },
    boolConversionCheck: function(value) {
      if (value == null)
        H.assertThrow("boolean expression must not be null");
      return value;
    },
    stringTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "String"));
    },
    stringTypeCast: function(value) {
      if (typeof value === "string" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "String"));
    },
    doubleTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "double"));
    },
    doubleTypeCast: function(value) {
      if (typeof value === "number" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "double"));
    },
    numTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "num"));
    },
    boolTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "boolean")
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "bool"));
    },
    boolTypeCast: function(value) {
      if (typeof value === "boolean" || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "bool"));
    },
    intTypeCheck: function(value) {
      if (value == null)
        return value;
      if (typeof value === "number" && Math.floor(value) === value)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "int"));
    },
    intTypeCast: function(value) {
      if (typeof value === "number" && Math.floor(value) === value || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "int"));
    },
    propertyTypeError: function(value, property) {
      throw H.wrapException(H.TypeErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    propertyTypeCastError: function(value, property) {
      throw H.wrapException(H.CastErrorImplementation$(value, H.unminifyOrTag(H.stringTypeCheck(property).substring(3))));
    },
    interceptedTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if ((typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    interceptedTypeCast: function(value, property) {
      var t1;
      if (value != null)
        t1 = (typeof value === "object" || typeof value === "function") && J.getInterceptor$(value)[property];
      else
        t1 = true;
      if (t1)
        return value;
      H.propertyTypeCastError(value, property);
    },
    numberOrStringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (typeof value === "number")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    stringSuperNativeTypeCheck: function(value, property) {
      if (value == null)
        return value;
      if (typeof value === "string")
        return value;
      if (J.getInterceptor$(value)[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listTypeCheck: function(value) {
      if (value == null)
        return value;
      if (!!J.getInterceptor$(value).$isList)
        return value;
      throw H.wrapException(H.TypeErrorImplementation$(value, "List<dynamic>"));
    },
    listTypeCast: function(value) {
      if (!!J.getInterceptor$(value).$isList || value == null)
        return value;
      throw H.wrapException(H.CastErrorImplementation$(value, "List<dynamic>"));
    },
    listSuperNativeTypeCheck: function(value, property) {
      var t1;
      if (value == null)
        return value;
      t1 = J.getInterceptor$(value);
      if (!!t1.$isList)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeError(value, property);
    },
    listSuperNativeTypeCast: function(value, property) {
      var t1 = J.getInterceptor$(value);
      if (!!t1.$isList || value == null)
        return value;
      if (t1[property])
        return value;
      H.propertyTypeCastError(value, property);
    },
    extractFunctionTypeObjectFromInternal: function(o) {
      var signature;
      if ("$signature" in o) {
        signature = o.$signature;
        if (typeof signature == "number")
          return init.types[H.intTypeCheck(signature)];
        else
          return o.$signature();
      }
      return;
    },
    functionTypeTest: function(value, functionTypeRti) {
      var functionTypeObject;
      if (typeof value == "function")
        return true;
      functionTypeObject = H.extractFunctionTypeObjectFromInternal(J.getInterceptor$(value));
      if (functionTypeObject == null)
        return false;
      return H._isFunctionSubtype(functionTypeObject, null, functionTypeRti, null);
    },
    functionTypeCheck: function(value, functionTypeRti) {
      var $self, t1;
      if (value == null)
        return value;
      if ($._inTypeAssertion)
        return value;
      $._inTypeAssertion = true;
      try {
        if (H.functionTypeTest(value, functionTypeRti))
          return value;
        $self = H.runtimeTypeToString(functionTypeRti);
        t1 = H.TypeErrorImplementation$(value, $self);
        throw H.wrapException(t1);
      } finally {
        $._inTypeAssertion = false;
      }
    },
    futureOrCheck: function(o, futureOrRti) {
      if (o != null && !H.checkSubtypeOfRuntimeType(o, futureOrRti))
        H.throwExpression(H.TypeErrorImplementation$(o, H.runtimeTypeToString(futureOrRti)));
      return o;
    },
    TypeErrorImplementation$: function(value, type) {
      return new H.TypeErrorImplementation("TypeError: " + P.Error_safeToString(value) + ": type '" + H.S(H._typeDescription(value)) + "' is not a subtype of type '" + type + "'");
    },
    CastErrorImplementation$: function(value, type) {
      return new H.CastErrorImplementation("CastError: " + P.Error_safeToString(value) + ": type '" + H.S(H._typeDescription(value)) + "' is not a subtype of type '" + type + "'");
    },
    _typeDescription: function(value) {
      var functionTypeObject,
        t1 = J.getInterceptor$(value);
      if (!!t1.$isClosure) {
        functionTypeObject = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionTypeObject != null)
          return H.runtimeTypeToString(functionTypeObject);
        return "Closure";
      }
      return H.Primitives_objectTypeName(value);
    },
    assertThrow: function(message) {
      throw H.wrapException(new H._AssertionError(message));
    },
    throwCyclicInit: function(staticName) {
      throw H.wrapException(new P.CyclicInitializationError(staticName));
    },
    RuntimeError$: function(message) {
      return new H.RuntimeError(message);
    },
    getIsolateAffinityTag: function($name) {
      return init.getIsolateTag($name);
    },
    createRuntimeType: function(rti) {
      return new H.TypeImpl(rti);
    },
    setRuntimeTypeInfo: function(target, rti) {
      target.$ti = rti;
      return target;
    },
    getRuntimeTypeInfo: function(target) {
      if (target == null)
        return;
      return target.$ti;
    },
    getRuntimeTypeArguments: function(interceptor, object, substitutionName) {
      return H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(object));
    },
    getRuntimeTypeArgumentIntercepted: function(interceptor, target, substitutionName, index) {
      var $arguments = H.substitute(interceptor["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getRuntimeTypeArgument: function(target, substitutionName, index) {
      var $arguments = H.substitute(target["$as" + H.S(substitutionName)], H.getRuntimeTypeInfo(target));
      return $arguments == null ? null : $arguments[index];
    },
    getTypeArgumentByIndex: function(target, index) {
      var rti = H.getRuntimeTypeInfo(target);
      return rti == null ? null : rti[index];
    },
    runtimeTypeToString: function(rti) {
      return H._runtimeTypeToString(rti, null);
    },
    _runtimeTypeToString: function(rti, genericContext) {
      var t1, t2;
      if (rti == null)
        return "dynamic";
      if (rti === -1)
        return "void";
      if (typeof rti === "object" && rti !== null && rti.constructor === Array)
        return H.unminifyOrTag(rti[0].name) + H._joinArguments(rti, 1, genericContext);
      if (typeof rti == "function")
        return H.unminifyOrTag(rti.name);
      if (rti === -2)
        return "dynamic";
      if (typeof rti === "number") {
        H.intTypeCheck(rti);
        if (genericContext == null || rti < 0 || rti >= genericContext.length)
          return "unexpected-generic-index:" + rti;
        t1 = genericContext.length;
        t2 = t1 - rti - 1;
        if (t2 < 0 || t2 >= t1)
          return H.ioore(genericContext, t2);
        return H.S(genericContext[t2]);
      }
      if ('func' in rti)
        return H._functionRtiToString(rti, genericContext);
      if ('futureOr' in rti)
        return "FutureOr<" + H._runtimeTypeToString("type" in rti ? rti.type : null, genericContext) + ">";
      return "unknown-reified-type";
    },
    _functionRtiToString: function(rti, genericContext) {
      var boundsRti, outerContextLength, offset, i, i0, typeParameters, typeSep, t1, t2, boundRti, returnTypeText, $arguments, argumentsText, sep, _i, argument, optionalArguments, namedArguments, t3, _s2_ = ", ";
      if ("bounds" in rti) {
        boundsRti = rti.bounds;
        if (genericContext == null) {
          genericContext = H.setRuntimeTypeInfo([], [P.String]);
          outerContextLength = null;
        } else
          outerContextLength = genericContext.length;
        offset = genericContext.length;
        for (i = boundsRti.length, i0 = i; i0 > 0; --i0)
          C.JSArray_methods.add$1(genericContext, "T" + (offset + i0));
        for (typeParameters = "<", typeSep = "", i0 = 0; i0 < i; ++i0, typeSep = _s2_) {
          typeParameters += typeSep;
          t1 = genericContext.length;
          t2 = t1 - i0 - 1;
          if (t2 < 0)
            return H.ioore(genericContext, t2);
          typeParameters = C.JSString_methods.$add(typeParameters, genericContext[t2]);
          boundRti = boundsRti[i0];
          if (boundRti != null && boundRti !== P.Object)
            typeParameters += " extends " + H._runtimeTypeToString(boundRti, genericContext);
        }
        typeParameters += ">";
      } else {
        typeParameters = "";
        outerContextLength = null;
      }
      returnTypeText = !!rti.v ? "void" : H._runtimeTypeToString(rti.ret, genericContext);
      if ("args" in rti) {
        $arguments = rti.args;
        for (t1 = $arguments.length, argumentsText = "", sep = "", _i = 0; _i < t1; ++_i, sep = _s2_) {
          argument = $arguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
      } else {
        argumentsText = "";
        sep = "";
      }
      if ("opt" in rti) {
        optionalArguments = rti.opt;
        argumentsText += sep + "[";
        for (t1 = optionalArguments.length, sep = "", _i = 0; _i < t1; ++_i, sep = _s2_) {
          argument = optionalArguments[_i];
          argumentsText = argumentsText + sep + H._runtimeTypeToString(argument, genericContext);
        }
        argumentsText += "]";
      }
      if ("named" in rti) {
        namedArguments = rti.named;
        argumentsText += sep + "{";
        for (t1 = H.extractKeys(namedArguments), t2 = t1.length, sep = "", _i = 0; _i < t2; ++_i, sep = _s2_) {
          t3 = H.stringTypeCheck(t1[_i]);
          argumentsText = argumentsText + sep + H._runtimeTypeToString(namedArguments[t3], genericContext) + (" " + H.S(t3));
        }
        argumentsText += "}";
      }
      if (outerContextLength != null)
        genericContext.length = outerContextLength;
      return typeParameters + "(" + argumentsText + ") => " + returnTypeText;
    },
    _joinArguments: function(types, startIndex, genericContext) {
      var buffer, index, separator, allDynamic, t1, argument;
      if (types == null)
        return "";
      buffer = new P.StringBuffer("");
      for (index = startIndex, separator = "", allDynamic = true, t1 = ""; index < types.length; ++index, separator = ", ") {
        buffer._contents = t1 + separator;
        argument = types[index];
        if (argument != null)
          allDynamic = false;
        t1 = buffer._contents += H._runtimeTypeToString(argument, genericContext);
      }
      return "<" + buffer.toString$0(0) + ">";
    },
    getRti: function(o) {
      var functionRti, type, rti,
        t1 = J.getInterceptor$(o);
      if (!!t1.$isClosure) {
        functionRti = H.extractFunctionTypeObjectFromInternal(t1);
        if (functionRti != null)
          return functionRti;
      }
      type = t1.constructor;
      if (typeof o != "object")
        return type;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return type;
    },
    getRuntimeType: function(object) {
      return new H.TypeImpl(H.getRti(object));
    },
    substitute: function(substitution, $arguments) {
      if (substitution == null)
        return $arguments;
      substitution = substitution.apply(null, $arguments);
      if (substitution == null)
        return;
      if (typeof substitution === "object" && substitution !== null && substitution.constructor === Array)
        return substitution;
      if (typeof substitution == "function")
        return substitution.apply(null, $arguments);
      return $arguments;
    },
    checkSubtype: function(object, isField, checks, asField) {
      var $arguments, interceptor;
      if (object == null)
        return false;
      $arguments = H.getRuntimeTypeInfo(object);
      interceptor = J.getInterceptor$(object);
      if (interceptor[isField] == null)
        return false;
      return H.areSubtypes(H.substitute(interceptor[asField], $arguments), null, checks, null);
    },
    assertSubtype: function(object, isField, checks, asField) {
      if (object == null)
        return object;
      if (H.checkSubtype(object, isField, checks, asField))
        return object;
      throw H.wrapException(H.TypeErrorImplementation$(object, function(str, names) {
        return str.replace(/[^<,> ]+/g, function(m) {
          return names[m] || m;
        });
      }(H.unminifyOrTag(isField.substring(3)) + H._joinArguments(checks, 0, null), init.mangledGlobalNames)));
    },
    areSubtypes: function(s, sEnv, t, tEnv) {
      var len, i;
      if (t == null)
        return true;
      if (s == null) {
        len = t.length;
        for (i = 0; i < len; ++i)
          if (!H._isSubtype(null, null, t[i], tEnv))
            return false;
        return true;
      }
      len = s.length;
      for (i = 0; i < len; ++i)
        if (!H._isSubtype(s[i], sEnv, t[i], tEnv))
          return false;
      return true;
    },
    computeSignature: function(signature, context, contextName) {
      return signature.apply(context, H.substitute(J.getInterceptor$(context)["$as" + H.S(contextName)], H.getRuntimeTypeInfo(context)));
    },
    isSupertypeOfNullRecursive: function(type) {
      var typeArgument;
      if (typeof type === "number")
        return false;
      if ('futureOr' in type) {
        typeArgument = "type" in type ? type.type : null;
        return type == null || type.name === "Object" || type.name === "Null" || type === -1 || type === -2 || H.isSupertypeOfNullRecursive(typeArgument);
      }
      return false;
    },
    checkSubtypeOfRuntimeType: function(o, t) {
      var type, rti;
      if (o == null)
        return t == null || t.name === "Object" || t.name === "Null" || t === -1 || t === -2 || H.isSupertypeOfNullRecursive(t);
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (typeof t == "object") {
        if ('futureOr' in t)
          if (H.checkSubtypeOfRuntimeType(o, "type" in t ? t.type : null))
            return true;
        if ('func' in t)
          return H.functionTypeTest(o, t);
      }
      type = J.getInterceptor$(o).constructor;
      rti = H.getRuntimeTypeInfo(o);
      if (rti != null) {
        rti = rti.slice();
        rti.splice(0, 0, type);
        type = rti;
      }
      return H._isSubtype(type, null, t, null);
    },
    subtypeOfRuntimeTypeCast: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.CastErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    assertSubtypeOfRuntimeType: function(object, type) {
      if (object != null && !H.checkSubtypeOfRuntimeType(object, type))
        throw H.wrapException(H.TypeErrorImplementation$(object, H.runtimeTypeToString(type)));
      return object;
    },
    _isSubtype: function(s, sEnv, t, tEnv) {
      var t1, typeOfS, tTypeArgument, futureSubstitution, futureArguments, t2, typeOfT, typeOfTString, substitution, _null = null;
      if (s === t)
        return true;
      if (t == null || t === -1 || t.name === "Object" || t === -2)
        return true;
      if (s === -2)
        return true;
      if (s == null || s === -1 || s.name === "Object" || s === -2) {
        if (typeof t === "number")
          return false;
        if ('futureOr' in t)
          return H._isSubtype(s, sEnv, "type" in t ? t.type : _null, tEnv);
        return false;
      }
      if (typeof s === "number")
        return H._isSubtype(sEnv[H.intTypeCheck(s)], sEnv, t, tEnv);
      if (typeof t === "number")
        return false;
      if (s.name === "Null")
        return true;
      t1 = typeof s === "object" && s !== null && s.constructor === Array;
      typeOfS = t1 ? s[0] : s;
      if ('futureOr' in t) {
        tTypeArgument = "type" in t ? t.type : _null;
        if ('futureOr' in s)
          return H._isSubtype("type" in s ? s.type : _null, sEnv, tTypeArgument, tEnv);
        else if (H._isSubtype(s, sEnv, tTypeArgument, tEnv))
          return true;
        else {
          if (!('$is' + "Future" in typeOfS.prototype))
            return false;
          futureSubstitution = typeOfS.prototype["$as" + "Future"];
          futureArguments = H.substitute(futureSubstitution, t1 ? s.slice(1) : _null);
          return H._isSubtype(typeof futureArguments === "object" && futureArguments !== null && futureArguments.constructor === Array ? futureArguments[0] : _null, sEnv, tTypeArgument, tEnv);
        }
      }
      if ('func' in t)
        return H._isFunctionSubtype(s, sEnv, t, tEnv);
      if ('func' in s)
        return t.name === "Function";
      t2 = typeof t === "object" && t !== null && t.constructor === Array;
      typeOfT = t2 ? t[0] : t;
      if (typeOfT !== typeOfS) {
        typeOfTString = typeOfT.name;
        if (!('$is' + typeOfTString in typeOfS.prototype))
          return false;
        substitution = typeOfS.prototype["$as" + typeOfTString];
      } else
        substitution = _null;
      if (!t2)
        return true;
      t1 = t1 ? s.slice(1) : _null;
      t2 = t.slice(1);
      return H.areSubtypes(H.substitute(substitution, t1), sEnv, t2, tEnv);
    },
    _isFunctionSubtype: function(s, sEnv, t, tEnv) {
      var sBounds, tBounds, sParameterTypes, tParameterTypes, sOptionalParameterTypes, tOptionalParameterTypes, sParametersLen, tParametersLen, sOptionalParametersLen, tOptionalParametersLen, pos, tPos, sPos, sNamedParameters, tNamedParameters;
      if (!('func' in s))
        return false;
      if ("bounds" in s) {
        if (!("bounds" in t))
          return false;
        sBounds = s.bounds;
        tBounds = t.bounds;
        if (sBounds.length !== tBounds.length)
          return false;
        sEnv = sEnv == null ? sBounds : sBounds.concat(sEnv);
        tEnv = tEnv == null ? tBounds : tBounds.concat(tEnv);
      } else if ("bounds" in t)
        return false;
      if (!H._isSubtype(s.ret, sEnv, t.ret, tEnv))
        return false;
      sParameterTypes = s.args;
      tParameterTypes = t.args;
      sOptionalParameterTypes = s.opt;
      tOptionalParameterTypes = t.opt;
      sParametersLen = sParameterTypes != null ? sParameterTypes.length : 0;
      tParametersLen = tParameterTypes != null ? tParameterTypes.length : 0;
      sOptionalParametersLen = sOptionalParameterTypes != null ? sOptionalParameterTypes.length : 0;
      tOptionalParametersLen = tOptionalParameterTypes != null ? tOptionalParameterTypes.length : 0;
      if (sParametersLen > tParametersLen)
        return false;
      if (sParametersLen + sOptionalParametersLen < tParametersLen + tOptionalParametersLen)
        return false;
      for (pos = 0; pos < sParametersLen; ++pos)
        if (!H._isSubtype(tParameterTypes[pos], tEnv, sParameterTypes[pos], sEnv))
          return false;
      for (tPos = pos, sPos = 0; tPos < tParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      for (tPos = 0; tPos < tOptionalParametersLen; ++sPos, ++tPos)
        if (!H._isSubtype(tOptionalParameterTypes[tPos], tEnv, sOptionalParameterTypes[sPos], sEnv))
          return false;
      sNamedParameters = s.named;
      tNamedParameters = t.named;
      if (tNamedParameters == null)
        return true;
      if (sNamedParameters == null)
        return false;
      return H.namedParametersSubtypeCheck(sNamedParameters, sEnv, tNamedParameters, tEnv);
    },
    namedParametersSubtypeCheck: function(s, sEnv, t, tEnv) {
      var t1, i, $name,
        names = Object.getOwnPropertyNames(t);
      for (t1 = names.length, i = 0; i < t1; ++i) {
        $name = names[i];
        if (!Object.hasOwnProperty.call(s, $name))
          return false;
        if (!H._isSubtype(t[$name], tEnv, s[$name], sEnv))
          return false;
      }
      return true;
    },
    defineProperty: function(obj, property, value) {
      Object.defineProperty(obj, property, {value: value, enumerable: false, writable: true, configurable: true});
    },
    lookupAndCacheInterceptor: function(obj) {
      var interceptor, interceptorClass, mark, t1,
        tag = H.stringTypeCheck($.getTagFunction.call$1(obj)),
        record = $.dispatchRecordsForInstanceTags[tag];
      if (record != null) {
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      interceptor = $.interceptorsForUncacheableTags[tag];
      if (interceptor != null)
        return interceptor;
      interceptorClass = init.interceptorsByTag[tag];
      if (interceptorClass == null) {
        tag = H.stringTypeCheck($.alternateTagFunction.call$2(obj, tag));
        if (tag != null) {
          record = $.dispatchRecordsForInstanceTags[tag];
          if (record != null) {
            Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
            return record.i;
          }
          interceptor = $.interceptorsForUncacheableTags[tag];
          if (interceptor != null)
            return interceptor;
          interceptorClass = init.interceptorsByTag[tag];
        }
      }
      if (interceptorClass == null)
        return;
      interceptor = interceptorClass.prototype;
      mark = tag[0];
      if (mark === "!") {
        record = H.makeLeafDispatchRecord(interceptor);
        $.dispatchRecordsForInstanceTags[tag] = record;
        Object.defineProperty(obj, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
        return record.i;
      }
      if (mark === "~") {
        $.interceptorsForUncacheableTags[tag] = interceptor;
        return interceptor;
      }
      if (mark === "-") {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      }
      if (mark === "+")
        return H.patchInteriorProto(obj, interceptor);
      if (mark === "*")
        throw H.wrapException(P.UnimplementedError$(tag));
      if (init.leafTags[tag] === true) {
        t1 = H.makeLeafDispatchRecord(interceptor);
        Object.defineProperty(Object.getPrototypeOf(obj), init.dispatchPropertyName, {value: t1, enumerable: false, writable: true, configurable: true});
        return t1.i;
      } else
        return H.patchInteriorProto(obj, interceptor);
    },
    patchInteriorProto: function(obj, interceptor) {
      var proto = Object.getPrototypeOf(obj);
      Object.defineProperty(proto, init.dispatchPropertyName, {value: J.makeDispatchRecord(interceptor, proto, null, null), enumerable: false, writable: true, configurable: true});
      return interceptor;
    },
    makeLeafDispatchRecord: function(interceptor) {
      return J.makeDispatchRecord(interceptor, false, null, !!interceptor.$isJavaScriptIndexingBehavior);
    },
    makeDefaultDispatchRecord: function(tag, interceptorClass, proto) {
      var interceptor = interceptorClass.prototype;
      if (init.leafTags[tag] === true)
        return H.makeLeafDispatchRecord(interceptor);
      else
        return J.makeDispatchRecord(interceptor, proto, null, null);
    },
    initNativeDispatch: function() {
      if (true === $.initNativeDispatchFlag)
        return;
      $.initNativeDispatchFlag = true;
      H.initNativeDispatchContinue();
    },
    initNativeDispatchContinue: function() {
      var map, tags, fun, i, tag, proto, record, interceptorClass;
      $.dispatchRecordsForInstanceTags = Object.create(null);
      $.interceptorsForUncacheableTags = Object.create(null);
      H.initHooks();
      map = init.interceptorsByTag;
      tags = Object.getOwnPropertyNames(map);
      if (typeof window != "undefined") {
        window;
        fun = function() {
        };
        for (i = 0; i < tags.length; ++i) {
          tag = tags[i];
          proto = $.prototypeForTagFunction.call$1(tag);
          if (proto != null) {
            record = H.makeDefaultDispatchRecord(tag, map[tag], proto);
            if (record != null) {
              Object.defineProperty(proto, init.dispatchPropertyName, {value: record, enumerable: false, writable: true, configurable: true});
              fun.prototype = proto;
            }
          }
        }
      }
      for (i = 0; i < tags.length; ++i) {
        tag = tags[i];
        if (/^[A-Za-z_]/.test(tag)) {
          interceptorClass = map[tag];
          map["!" + tag] = interceptorClass;
          map["~" + tag] = interceptorClass;
          map["-" + tag] = interceptorClass;
          map["+" + tag] = interceptorClass;
          map["*" + tag] = interceptorClass;
        }
      }
    },
    initHooks: function() {
      var transformers, i, transformer, getTag, getUnknownTag, prototypeForTag,
        hooks = C.C_JS_CONST0();
      hooks = H.applyHooksTransformer(C.C_JS_CONST1, H.applyHooksTransformer(C.C_JS_CONST2, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST3, H.applyHooksTransformer(C.C_JS_CONST4, H.applyHooksTransformer(C.C_JS_CONST5, H.applyHooksTransformer(C.C_JS_CONST6(C.C_JS_CONST), hooks)))))));
      if (typeof dartNativeDispatchHooksTransformer != "undefined") {
        transformers = dartNativeDispatchHooksTransformer;
        if (typeof transformers == "function")
          transformers = [transformers];
        if (transformers.constructor == Array)
          for (i = 0; i < transformers.length; ++i) {
            transformer = transformers[i];
            if (typeof transformer == "function")
              hooks = transformer(hooks) || hooks;
          }
      }
      getTag = hooks.getTag;
      getUnknownTag = hooks.getUnknownTag;
      prototypeForTag = hooks.prototypeForTag;
      $.getTagFunction = new H.initHooks_closure(getTag);
      $.alternateTagFunction = new H.initHooks_closure0(getUnknownTag);
      $.prototypeForTagFunction = new H.initHooks_closure1(prototypeForTag);
    },
    applyHooksTransformer: function(transformer, hooks) {
      return transformer(hooks) || hooks;
    },
    JSSyntaxRegExp_makeNative: function(source, multiLine, caseSensitive, unicode, dotAll, global) {
      var m = multiLine ? "m" : "",
        i = caseSensitive ? "" : "i",
        u = unicode ? "u" : "",
        s = dotAll ? "s" : "",
        g = global ? "g" : "",
        regexp = function(source, modifiers) {
          try {
            return new RegExp(source, modifiers);
          } catch (e) {
            return e;
          }
        }(source, m + i + u + s + g);
      if (regexp instanceof RegExp)
        return regexp;
      throw H.wrapException(P.FormatException$("Illegal RegExp pattern (" + String(regexp) + ")", source));
    },
    stringContainsUnchecked: function(receiver, other, startIndex) {
      var t1 = receiver.indexOf(other, startIndex);
      return t1 >= 0;
    },
    escapeReplacement: function(replacement) {
      if (replacement.indexOf("$", 0) >= 0)
        return replacement.replace(/\$/g, "$$$$");
      return replacement;
    },
    stringReplaceFirstRE: function(receiver, regexp, replacement, startIndex) {
      var match = regexp._execGlobal$2(receiver, startIndex);
      if (match == null)
        return receiver;
      return H.stringReplaceRangeUnchecked(receiver, match._match.index, match.get$end(match), replacement);
    },
    quoteStringForRegExp: function(string) {
      if (/[[\]{}()*+?.\\^$|]/.test(string))
        return string.replace(/[[\]{}()*+?.\\^$|]/g, "\\$&");
      return string;
    },
    stringReplaceAllUnchecked: function(receiver, pattern, replacement) {
      var t1 = H.stringReplaceAllUncheckedString(receiver, pattern, replacement);
      return t1;
    },
    stringReplaceAllUncheckedString: function(receiver, pattern, replacement) {
      var $length, t1, i, index;
      if (pattern === "") {
        if (receiver === "")
          return replacement;
        $length = receiver.length;
        for (t1 = replacement, i = 0; i < $length; ++i)
          t1 = t1 + receiver[i] + replacement;
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
      index = receiver.indexOf(pattern, 0);
      if (index < 0)
        return receiver;
      if (receiver.length < 500 || replacement.indexOf("$", 0) >= 0)
        return receiver.split(pattern).join(replacement);
      return receiver.replace(new RegExp(H.quoteStringForRegExp(pattern), 'g'), H.escapeReplacement(replacement));
    },
    stringReplaceFirstUnchecked: function(receiver, pattern, replacement, startIndex) {
      return startIndex === 0 ? receiver.replace(pattern._nativeRegExp, H.escapeReplacement(replacement)) : H.stringReplaceFirstRE(receiver, pattern, replacement, startIndex);
    },
    stringReplaceRangeUnchecked: function(receiver, start, end, replacement) {
      var prefix = receiver.substring(0, start),
        suffix = receiver.substring(end);
      return prefix + replacement + suffix;
    },
    ConstantMapView: function ConstantMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    ConstantMap: function ConstantMap() {
    },
    ConstantStringMap: function ConstantStringMap(t0, t1, t2, t3) {
      var _ = this;
      _.__js_helper$_length = t0;
      _._jsObject = t1;
      _._keys = t2;
      _.$ti = t3;
    },
    ConstantStringMap_values_closure: function ConstantStringMap_values_closure(t0) {
      this.$this = t0;
    },
    ConstantProtoMap: function ConstantProtoMap(t0, t1, t2, t3, t4) {
      var _ = this;
      _._protoValue = t0;
      _.__js_helper$_length = t1;
      _._jsObject = t2;
      _._keys = t3;
      _.$ti = t4;
    },
    _ConstantMapKeyIterable: function _ConstantMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    JSInvocationMirror: function JSInvocationMirror(t0, t1, t2, t3, t4) {
      var _ = this;
      _._memberName = t0;
      _._kind = t1;
      _._arguments = t2;
      _._namedArgumentNames = t3;
      _._typeArgumentCount = t4;
    },
    Primitives_functionNoSuchMethod_closure: function Primitives_functionNoSuchMethod_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.namedArgumentList = t1;
      this.$arguments = t2;
    },
    TypeErrorDecoder: function TypeErrorDecoder(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._pattern = t0;
      _._arguments = t1;
      _._argumentsExpr = t2;
      _._expr = t3;
      _._method = t4;
      _.__js_helper$_receiver = t5;
    },
    NullError: function NullError(t0, t1) {
      this._message = t0;
      this._method = t1;
    },
    JsNoSuchMethodError: function JsNoSuchMethodError(t0, t1, t2) {
      this._message = t0;
      this._method = t1;
      this.__js_helper$_receiver = t2;
    },
    UnknownJsTypeError: function UnknownJsTypeError(t0) {
      this._message = t0;
    },
    unwrapException_saveStackTrace: function unwrapException_saveStackTrace(t0) {
      this.ex = t0;
    },
    _StackTrace: function _StackTrace(t0) {
      this._exception = t0;
      this._trace = null;
    },
    Closure: function Closure() {
    },
    TearOffClosure: function TearOffClosure() {
    },
    StaticClosure: function StaticClosure() {
    },
    BoundClosure: function BoundClosure(t0, t1, t2, t3) {
      var _ = this;
      _._self = t0;
      _._target = t1;
      _.__js_helper$_receiver = t2;
      _.__js_helper$_name = t3;
    },
    TypeErrorImplementation: function TypeErrorImplementation(t0) {
      this.message = t0;
    },
    CastErrorImplementation: function CastErrorImplementation(t0) {
      this.message = t0;
    },
    RuntimeError: function RuntimeError(t0) {
      this.message = t0;
    },
    _AssertionError: function _AssertionError(t0) {
      this.message = t0;
    },
    TypeImpl: function TypeImpl(t0) {
      this._rti = t0;
      this._hashCode = this.__typeName = null;
    },
    JsLinkedHashMap: function JsLinkedHashMap(t0) {
      var _ = this;
      _.__js_helper$_length = 0;
      _._last = _._first = _._rest = _._nums = _._strings = null;
      _._modifications = 0;
      _.$ti = t0;
    },
    JsLinkedHashMap_values_closure: function JsLinkedHashMap_values_closure(t0) {
      this.$this = t0;
    },
    JsLinkedHashMap_addAll_closure: function JsLinkedHashMap_addAll_closure(t0) {
      this.$this = t0;
    },
    LinkedHashMapCell: function LinkedHashMapCell(t0, t1) {
      var _ = this;
      _.hashMapCellKey = t0;
      _.hashMapCellValue = t1;
      _._previous = _._next = null;
    },
    LinkedHashMapKeyIterable: function LinkedHashMapKeyIterable(t0, t1) {
      this.__js_helper$_map = t0;
      this.$ti = t1;
    },
    LinkedHashMapKeyIterator: function LinkedHashMapKeyIterator(t0, t1, t2) {
      var _ = this;
      _.__js_helper$_map = t0;
      _._modifications = t1;
      _.__js_helper$_current = _._cell = null;
      _.$ti = t2;
    },
    initHooks_closure: function initHooks_closure(t0) {
      this.getTag = t0;
    },
    initHooks_closure0: function initHooks_closure0(t0) {
      this.getUnknownTag = t0;
    },
    initHooks_closure1: function initHooks_closure1(t0) {
      this.prototypeForTag = t0;
    },
    JSSyntaxRegExp: function JSSyntaxRegExp(t0, t1) {
      var _ = this;
      _.pattern = t0;
      _._nativeRegExp = t1;
      _._nativeAnchoredRegExp = _._nativeGlobalRegExp = null;
    },
    _MatchImplementation: function _MatchImplementation(t0) {
      this._match = t0;
    },
    _AllMatchesIterator: function _AllMatchesIterator(t0, t1, t2) {
      var _ = this;
      _._regExp = t0;
      _._string = t1;
      _._nextIndex = t2;
      _.__js_helper$_current = null;
    },
    StringMatch: function StringMatch(t0, t1) {
      this.start = t0;
      this.pattern = t1;
    },
    _checkValidIndex: function(index, list, $length) {
      if (index >>> 0 !== index || index >= $length)
        throw H.wrapException(H.diagnoseIndexError(list, index));
    },
    _checkValidRange: function(start, end, $length) {
      var t1;
      if (!(start >>> 0 !== start))
        t1 = start > $length;
      else
        t1 = true;
      if (t1)
        throw H.wrapException(H.diagnoseRangeError(start, end, $length));
      return $length;
    },
    NativeByteBuffer: function NativeByteBuffer() {
    },
    NativeTypedData: function NativeTypedData() {
    },
    NativeByteData: function NativeByteData() {
    },
    NativeTypedArray: function NativeTypedArray() {
    },
    NativeTypedArrayOfDouble: function NativeTypedArrayOfDouble() {
    },
    NativeTypedArrayOfInt: function NativeTypedArrayOfInt() {
    },
    NativeFloat32List: function NativeFloat32List() {
    },
    NativeFloat64List: function NativeFloat64List() {
    },
    NativeInt16List: function NativeInt16List() {
    },
    NativeInt32List: function NativeInt32List() {
    },
    NativeInt8List: function NativeInt8List() {
    },
    NativeUint16List: function NativeUint16List() {
    },
    NativeUint32List: function NativeUint32List() {
    },
    NativeUint8ClampedList: function NativeUint8ClampedList() {
    },
    NativeUint8List: function NativeUint8List() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin() {
    },
    _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin: function _NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin() {
    },
    isBrowserObject: function(o) {
      var t1 = J.getInterceptor$(o);
      return !!t1.$isBlob || !!t1.$isEvent || !!t1.$isKeyRange || !!t1.$isImageData || !!t1.$isNode || !!t1.$isWindow || !!t1.$isWorkerGlobalScope;
    },
    extractKeys: function(victim) {
      return J.JSArray_JSArray$markFixed(victim ? Object.keys(victim) : [], null);
    },
    unmangleGlobalNameIfPreservedAnyways: function($name) {
      return init.mangledGlobalNames[$name];
    },
    printString: function(string) {
      if (typeof dartPrint == "function") {
        dartPrint(string);
        return;
      }
      if (typeof console == "object" && typeof console.log != "undefined") {
        console.log(string);
        return;
      }
      if (typeof window == "object")
        return;
      if (typeof print == "function") {
        print(string);
        return;
      }
      throw "Unable to print message: " + String(string);
    }
  },
  J = {
    makeDispatchRecord: function(interceptor, proto, extension, indexability) {
      return {i: interceptor, p: proto, e: extension, x: indexability};
    },
    getNativeInterceptor: function(object) {
      var proto, objectProto, $constructor, interceptor,
        record = object[init.dispatchPropertyName];
      if (record == null)
        if ($.initNativeDispatchFlag == null) {
          H.initNativeDispatch();
          record = object[init.dispatchPropertyName];
        }
      if (record != null) {
        proto = record.p;
        if (false === proto)
          return record.i;
        if (true === proto)
          return object;
        objectProto = Object.getPrototypeOf(object);
        if (proto === objectProto)
          return record.i;
        if (record.e === objectProto)
          throw H.wrapException(P.UnimplementedError$("Return interceptor for " + H.S(proto(object, record))));
      }
      $constructor = object.constructor;
      interceptor = $constructor == null ? null : $constructor[$.$get$JS_INTEROP_INTERCEPTOR_TAG()];
      if (interceptor != null)
        return interceptor;
      interceptor = H.lookupAndCacheInterceptor(object);
      if (interceptor != null)
        return interceptor;
      if (typeof object == "function")
        return C.JavaScriptFunction_methods;
      proto = Object.getPrototypeOf(object);
      if (proto == null)
        return C.PlainJavaScriptObject_methods;
      if (proto === Object.prototype)
        return C.PlainJavaScriptObject_methods;
      if (typeof $constructor == "function") {
        Object.defineProperty($constructor, $.$get$JS_INTEROP_INTERCEPTOR_TAG(), {value: C.UnknownJavaScriptObject_methods, enumerable: false, writable: true, configurable: true});
        return C.UnknownJavaScriptObject_methods;
      }
      return C.UnknownJavaScriptObject_methods;
    },
    JSArray_JSArray$markFixed: function(allocation, $E) {
      return J.JSArray_markFixedList(H.setRuntimeTypeInfo(allocation, [$E]));
    },
    JSArray_markFixedList: function(list) {
      list.fixed$length = Array;
      return list;
    },
    JSString__isWhitespace: function(codeUnit) {
      if (codeUnit < 256)
        switch (codeUnit) {
          case 9:
          case 10:
          case 11:
          case 12:
          case 13:
          case 32:
          case 133:
          case 160:
            return true;
          default:
            return false;
        }
      switch (codeUnit) {
        case 5760:
        case 8192:
        case 8193:
        case 8194:
        case 8195:
        case 8196:
        case 8197:
        case 8198:
        case 8199:
        case 8200:
        case 8201:
        case 8202:
        case 8232:
        case 8233:
        case 8239:
        case 8287:
        case 12288:
        case 65279:
          return true;
        default:
          return false;
      }
    },
    JSString__skipLeadingWhitespace: function(string, index) {
      var t1, codeUnit;
      for (t1 = string.length; index < t1;) {
        codeUnit = C.JSString_methods._codeUnitAt$1(string, index);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
        ++index;
      }
      return index;
    },
    JSString__skipTrailingWhitespace: function(string, index) {
      var index0, codeUnit;
      for (; index > 0; index = index0) {
        index0 = index - 1;
        codeUnit = C.JSString_methods.codeUnitAt$1(string, index0);
        if (codeUnit !== 32 && codeUnit !== 13 && !J.JSString__isWhitespace(codeUnit))
          break;
      }
      return index;
    },
    getInterceptor$: function(receiver) {
      if (typeof receiver == "number") {
        if (Math.floor(receiver) == receiver)
          return J.JSInt.prototype;
        return J.JSDouble.prototype;
      }
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return J.JSNull.prototype;
      if (typeof receiver == "boolean")
        return J.JSBool.prototype;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ansx: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$asx: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ax: function(receiver) {
      if (receiver == null)
        return receiver;
      if (receiver.constructor == Array)
        return J.JSArray.prototype;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$ns: function(receiver) {
      if (typeof receiver == "number")
        return J.JSNumber.prototype;
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$s: function(receiver) {
      if (typeof receiver == "string")
        return J.JSString.prototype;
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    getInterceptor$x: function(receiver) {
      if (receiver == null)
        return receiver;
      if (typeof receiver != "object") {
        if (typeof receiver == "function")
          return J.JavaScriptFunction.prototype;
        return receiver;
      }
      if (receiver instanceof P.Object)
        return receiver;
      return J.getNativeInterceptor(receiver);
    },
    getInterceptor$z: function(receiver) {
      if (receiver == null)
        return receiver;
      if (!(receiver instanceof P.Object))
        return J.UnknownJavaScriptObject.prototype;
      return receiver;
    },
    set$className$z: function(receiver, value) {
      return J.getInterceptor$z(receiver).set$className(receiver, value);
    },
    set$displayName$x: function(receiver, value) {
      return J.getInterceptor$x(receiver).set$displayName(receiver, value);
    },
    set$key$x: function(receiver, value) {
      return J.getInterceptor$x(receiver).set$key(receiver, value);
    },
    get$children$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$children(receiver);
    },
    get$className$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$className(receiver);
    },
    get$dartComponent$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$dartComponent(receiver);
    },
    get$data$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$data(receiver);
    },
    get$direction$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$direction(receiver);
    },
    get$dropEffect$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$dropEffect(receiver);
    },
    get$effectAllowed$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$effectAllowed(receiver);
    },
    get$files$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$files(receiver);
    },
    get$first$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$first(receiver);
    },
    get$grid$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$grid(receiver);
    },
    get$hashCode$: function(receiver) {
      return J.getInterceptor$(receiver).get$hashCode(receiver);
    },
    get$internal$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$internal(receiver);
    },
    get$isEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isEmpty(receiver);
    },
    get$isNotEmpty$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$isNotEmpty(receiver);
    },
    get$iterator$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$iterator(receiver);
    },
    get$keys$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$keys(receiver);
    },
    get$last$ax: function(receiver) {
      return J.getInterceptor$ax(receiver).get$last(receiver);
    },
    get$length$asx: function(receiver) {
      return J.getInterceptor$asx(receiver).get$length(receiver);
    },
    get$name$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$name(receiver);
    },
    get$onResize$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$onResize(receiver);
    },
    get$path$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$path(receiver);
    },
    get$position$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$position(receiver);
    },
    get$props$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$props(receiver);
    },
    get$refs$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$refs(receiver);
    },
    get$size$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$size(receiver);
    },
    get$store$z: function(receiver) {
      return J.getInterceptor$z(receiver).get$store(receiver);
    },
    get$target$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$target(receiver);
    },
    get$type$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$type(receiver);
    },
    get$types$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$types(receiver);
    },
    get$value$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$value(receiver);
    },
    get$values$x: function(receiver) {
      return J.getInterceptor$x(receiver).get$values(receiver);
    },
    $add$ansx: function(receiver, a0) {
      if (typeof receiver == "number" && typeof a0 == "number")
        return receiver + a0;
      return J.getInterceptor$ansx(receiver).$add(receiver, a0);
    },
    $eq$: function(receiver, a0) {
      if (receiver == null)
        return a0 == null;
      if (typeof receiver != "object")
        return a0 != null && receiver === a0;
      return J.getInterceptor$(receiver).$eq(receiver, a0);
    },
    $index$asx: function(receiver, a0) {
      if (typeof a0 === "number")
        if (receiver.constructor == Array || typeof receiver == "string" || H.isJsIndexable(receiver, receiver[init.dispatchPropertyName]))
          if (a0 >>> 0 === a0 && a0 < receiver.length)
            return receiver[a0];
      return J.getInterceptor$asx(receiver).$index(receiver, a0);
    },
    $indexSet$ax: function(receiver, a0, a1) {
      return J.getInterceptor$ax(receiver).$indexSet(receiver, a0, a1);
    },
    _removeEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver)._removeEventListener$3(receiver, a0, a1, a2);
    },
    add$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).add$1(receiver, a0);
    },
    addAll$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).addAll$1(receiver, a0);
    },
    addEventListener$3$x: function(receiver, a0, a1, a2) {
      return J.getInterceptor$x(receiver).addEventListener$3(receiver, a0, a1, a2);
    },
    any$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).any$1(receiver, a0);
    },
    compareTo$1$ns: function(receiver, a0) {
      return J.getInterceptor$ns(receiver).compareTo$1(receiver, a0);
    },
    contains$1$asx: function(receiver, a0) {
      return J.getInterceptor$asx(receiver).contains$1(receiver, a0);
    },
    containsKey$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).containsKey$1(receiver, a0);
    },
    dispose$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).dispose$0(receiver);
    },
    download$0$x: function(receiver) {
      return J.getInterceptor$x(receiver).download$0(receiver);
    },
    elementAt$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).elementAt$1(receiver, a0);
    },
    expand$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).expand$1$1(receiver, a0, $T1);
    },
    forEach$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).forEach$1(receiver, a0);
    },
    lastIndexOf$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).lastIndexOf$1(receiver, a0);
    },
    load$1$z: function(receiver, a0) {
      return J.getInterceptor$z(receiver).load$1(receiver, a0);
    },
    map$1$1$ax: function(receiver, a0, $T1) {
      return J.getInterceptor$ax(receiver).map$1$1(receiver, a0, $T1);
    },
    matchAsPrefix$2$s: function(receiver, a0, a1) {
      return J.getInterceptor$s(receiver).matchAsPrefix$2(receiver, a0, a1);
    },
    noSuchMethod$1$: function(receiver, a0) {
      return J.getInterceptor$(receiver).noSuchMethod$1(receiver, a0);
    },
    onResize$1$z: function(receiver, a0) {
      return J.getInterceptor$z(receiver).onResize$1(receiver, a0);
    },
    putIfAbsent$2$x: function(receiver, a0, a1) {
      return J.getInterceptor$x(receiver).putIfAbsent$2(receiver, a0, a1);
    },
    remove$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).remove$1(receiver, a0);
    },
    setState$1$x: function(receiver, a0) {
      return J.getInterceptor$x(receiver).setState$1(receiver, a0);
    },
    startsWith$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).startsWith$1(receiver, a0);
    },
    sublist$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).sublist$1(receiver, a0);
    },
    substring$1$s: function(receiver, a0) {
      return J.getInterceptor$s(receiver).substring$1(receiver, a0);
    },
    toString$0$: function(receiver) {
      return J.getInterceptor$(receiver).toString$0(receiver);
    },
    trim$0$s: function(receiver) {
      return J.getInterceptor$s(receiver).trim$0(receiver);
    },
    where$1$ax: function(receiver, a0) {
      return J.getInterceptor$ax(receiver).where$1(receiver, a0);
    },
    Interceptor: function Interceptor() {
    },
    JSBool: function JSBool() {
    },
    JSNull: function JSNull() {
    },
    JavaScriptObject: function JavaScriptObject() {
    },
    PlainJavaScriptObject: function PlainJavaScriptObject() {
    },
    UnknownJavaScriptObject: function UnknownJavaScriptObject() {
    },
    JavaScriptFunction: function JavaScriptFunction() {
    },
    JSArray: function JSArray(t0) {
      this.$ti = t0;
    },
    JSUnmodifiableArray: function JSUnmodifiableArray(t0) {
      this.$ti = t0;
    },
    ArrayIterator: function ArrayIterator(t0, t1, t2) {
      var _ = this;
      _._iterable = t0;
      _.__interceptors$_length = t1;
      _._index = 0;
      _.__interceptors$_current = null;
      _.$ti = t2;
    },
    JSNumber: function JSNumber() {
    },
    JSInt: function JSInt() {
    },
    JSDouble: function JSDouble() {
    },
    JSString: function JSString() {
    }
  },
  P = {
    _AsyncRun__initializeScheduleImmediate: function() {
      var div, span, t1 = {};
      if (self.scheduleImmediate != null)
        return P.async__AsyncRun__scheduleImmediateJsOverride$closure();
      if (self.MutationObserver != null && self.document != null) {
        div = self.document.createElement("div");
        span = self.document.createElement("span");
        t1.storedCallback = null;
        new self.MutationObserver(H.convertDartClosureToJS(new P._AsyncRun__initializeScheduleImmediate_internalCallback(t1), 1)).observe(div, {childList: true});
        return new P._AsyncRun__initializeScheduleImmediate_closure(t1, div, span);
      } else if (self.setImmediate != null)
        return P.async__AsyncRun__scheduleImmediateWithSetImmediate$closure();
      return P.async__AsyncRun__scheduleImmediateWithTimer$closure();
    },
    _AsyncRun__scheduleImmediateJsOverride: function(callback) {
      self.scheduleImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateJsOverride_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithSetImmediate: function(callback) {
      self.setImmediate(H.convertDartClosureToJS(new P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(H.functionTypeCheck(callback, {func: 1, ret: -1})), 0));
    },
    _AsyncRun__scheduleImmediateWithTimer: function(callback) {
      P.Timer__createTimer(C.Duration_0, H.functionTypeCheck(callback, {func: 1, ret: -1}));
    },
    Timer__createTimer: function(duration, callback) {
      var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return P._TimerImpl$(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    Timer__createPeriodicTimer: function(duration, callback) {
      var milliseconds = C.JSInt_methods._tdivFast$1(duration._duration, 1000);
      return P._TimerImpl$periodic(milliseconds < 0 ? 0 : milliseconds, callback);
    },
    _TimerImpl$: function(milliseconds, callback) {
      var t1 = new P._TimerImpl(true);
      t1._TimerImpl$2(milliseconds, callback);
      return t1;
    },
    _TimerImpl$periodic: function(milliseconds, callback) {
      var t1 = new P._TimerImpl(false);
      t1._TimerImpl$periodic$2(milliseconds, callback);
      return t1;
    },
    _Future__chainForeignFuture: function(source, target) {
      var e, s, exception;
      target._async$_state = 1;
      try {
        source.then$1$2$onError(new P._Future__chainForeignFuture_closure(target), new P._Future__chainForeignFuture_closure0(target), P.Null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P.scheduleMicrotask(new P._Future__chainForeignFuture_closure1(target, e, s));
      }
    },
    _Future__chainCoreFuture: function(source, target) {
      var t1, listeners;
      for (; t1 = source._async$_state, t1 === 2;)
        source = H.interceptedTypeCheck(source._resultOrListeners, "$is_Future");
      if (t1 >= 4) {
        listeners = target._removeListeners$0();
        target._async$_state = source._async$_state;
        target._resultOrListeners = source._resultOrListeners;
        P._Future__propagateToListeners(target, listeners);
      } else {
        listeners = H.interceptedTypeCheck(target._resultOrListeners, "$is_FutureListener");
        target._async$_state = 2;
        target._resultOrListeners = source;
        source._prependListeners$1(listeners);
      }
    },
    _Future__propagateToListeners: function(source, listeners) {
      var _box_0, hasError, asyncError, listeners0, sourceResult, t2, t3, zone, t4, oldZone, current, result, _null = null, _box_1 = {},
        t1 = _box_1.source = source;
      for (; true;) {
        _box_0 = {};
        hasError = t1._async$_state === 8;
        if (listeners == null) {
          if (hasError) {
            asyncError = H.interceptedTypeCheck(t1._resultOrListeners, "$isAsyncError");
            P._rootHandleUncaughtError(_null, _null, t1._zone, asyncError.error, asyncError.stackTrace);
          }
          return;
        }
        for (; listeners0 = listeners._nextListener, listeners0 != null; listeners = listeners0) {
          listeners._nextListener = null;
          P._Future__propagateToListeners(_box_1.source, listeners);
        }
        t1 = _box_1.source;
        sourceResult = t1._resultOrListeners;
        _box_0.listenerHasError = hasError;
        _box_0.listenerValueOrError = sourceResult;
        t2 = !hasError;
        if (t2) {
          t3 = listeners.state;
          t3 = (t3 & 1) !== 0 || (t3 & 15) === 8;
        } else
          t3 = true;
        if (t3) {
          t3 = listeners.result;
          zone = t3._zone;
          if (hasError) {
            t4 = t1._zone === zone;
            t4 = !(t4 || t4);
          } else
            t4 = false;
          if (t4) {
            H.interceptedTypeCheck(sourceResult, "$isAsyncError");
            P._rootHandleUncaughtError(_null, _null, t1._zone, sourceResult.error, sourceResult.stackTrace);
            return;
          }
          oldZone = $.Zone__current;
          if (oldZone !== zone)
            $.Zone__current = zone;
          else
            oldZone = _null;
          t1 = listeners.state;
          if ((t1 & 15) === 8)
            new P._Future__propagateToListeners_handleWhenCompleteCallback(_box_1, _box_0, listeners, hasError).call$0();
          else if (t2) {
            if ((t1 & 1) !== 0)
              new P._Future__propagateToListeners_handleValueCallback(_box_0, listeners, sourceResult).call$0();
          } else if ((t1 & 2) !== 0)
            new P._Future__propagateToListeners_handleError(_box_1, _box_0, listeners).call$0();
          if (oldZone != null)
            $.Zone__current = oldZone;
          t1 = _box_0.listenerValueOrError;
          if (!!J.getInterceptor$(t1).$isFuture) {
            if (t1._async$_state >= 4) {
              current = H.interceptedTypeCheck(t3._resultOrListeners, "$is_FutureListener");
              t3._resultOrListeners = null;
              listeners = t3._reverseListeners$1(current);
              t3._async$_state = t1._async$_state;
              t3._resultOrListeners = t1._resultOrListeners;
              _box_1.source = t1;
              continue;
            } else
              P._Future__chainCoreFuture(t1, t3);
            return;
          }
        }
        result = listeners.result;
        current = H.interceptedTypeCheck(result._resultOrListeners, "$is_FutureListener");
        result._resultOrListeners = null;
        listeners = result._reverseListeners$1(current);
        t1 = _box_0.listenerHasError;
        t2 = _box_0.listenerValueOrError;
        if (!t1) {
          H.assertSubtypeOfRuntimeType(t2, H.getTypeArgumentByIndex(result, 0));
          result._async$_state = 4;
          result._resultOrListeners = t2;
        } else {
          H.interceptedTypeCheck(t2, "$isAsyncError");
          result._async$_state = 8;
          result._resultOrListeners = t2;
        }
        _box_1.source = result;
        t1 = result;
      }
    },
    _registerErrorHandler: function(errorHandler, zone) {
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object, P.StackTrace]});
      if (H.functionTypeTest(errorHandler, {func: 1, args: [P.Object]}))
        return H.functionTypeCheck(errorHandler, {func: 1, ret: null, args: [P.Object]});
      throw H.wrapException(P.ArgumentError$value(errorHandler, "onError", "Error handler must accept one Object or one Object and a StackTrace as arguments, and return a a valid result"));
    },
    _microtaskLoop: function() {
      var t1, t2;
      for (; t1 = $._nextCallback, t1 != null;) {
        $._lastPriorityCallback = null;
        t2 = t1.next;
        $._nextCallback = t2;
        if (t2 == null)
          $._lastCallback = null;
        t1.callback.call$0();
      }
    },
    _startMicrotaskLoop: function() {
      $._isInCallbackLoop = true;
      try {
        P._microtaskLoop();
      } finally {
        $._lastPriorityCallback = null;
        $._isInCallbackLoop = false;
        if ($._nextCallback != null)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      }
    },
    _scheduleAsyncCallback: function(callback) {
      var newEntry = new P._AsyncCallbackEntry(callback);
      if ($._nextCallback == null) {
        $._nextCallback = $._lastCallback = newEntry;
        if (!$._isInCallbackLoop)
          $.$get$_AsyncRun__scheduleImmediateClosure().call$1(P.async___startMicrotaskLoop$closure());
      } else
        $._lastCallback = $._lastCallback.next = newEntry;
    },
    _schedulePriorityAsyncCallback: function(callback) {
      var entry, t2,
        t1 = $._nextCallback;
      if (t1 == null) {
        P._scheduleAsyncCallback(callback);
        $._lastPriorityCallback = $._lastCallback;
        return;
      }
      entry = new P._AsyncCallbackEntry(callback);
      t2 = $._lastPriorityCallback;
      if (t2 == null) {
        entry.next = t1;
        $._nextCallback = $._lastPriorityCallback = entry;
      } else {
        entry.next = t2.next;
        $._lastPriorityCallback = t2.next = entry;
        if (entry.next == null)
          $._lastCallback = entry;
      }
    },
    scheduleMicrotask: function(callback) {
      var _null = null,
        currentZone = $.Zone__current;
      if (C.C__RootZone === currentZone) {
        P._rootScheduleMicrotask(_null, _null, C.C__RootZone, callback);
        return;
      }
      P._rootScheduleMicrotask(_null, _null, currentZone, H.functionTypeCheck(currentZone.bindCallbackGuarded$1(callback), {func: 1, ret: -1}));
    },
    Timer_Timer: function(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return P.Timer__createTimer(duration, H.functionTypeCheck(callback, {func: 1, ret: -1}));
      return P.Timer__createTimer(duration, H.functionTypeCheck(t1.bindCallbackGuarded$1(callback), {func: 1, ret: -1}));
    },
    Timer_Timer$periodic: function(duration, callback) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return P.Timer__createPeriodicTimer(duration, H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.Timer]}));
      return P.Timer__createPeriodicTimer(duration, H.functionTypeCheck(t1.bindUnaryCallbackGuarded$1$1(callback, P.Timer), {func: 1, ret: -1, args: [P.Timer]}));
    },
    _rootHandleUncaughtError: function($self, $parent, zone, error, stackTrace) {
      var t1 = {};
      t1.error = error;
      P._schedulePriorityAsyncCallback(new P._rootHandleUncaughtError_closure(t1, stackTrace));
    },
    _rootRun: function($self, $parent, zone, f, $R) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$0();
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$0();
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunUnary: function($self, $parent, zone, f, arg, $R, $T) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$1(arg);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$1(arg);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootRunBinary: function($self, $parent, zone, f, arg1, arg2, $R, T1, T2) {
      var old,
        t1 = $.Zone__current;
      if (t1 === zone)
        return f.call$2(arg1, arg2);
      $.Zone__current = zone;
      old = t1;
      try {
        t1 = f.call$2(arg1, arg2);
        return t1;
      } finally {
        $.Zone__current = old;
      }
    },
    _rootScheduleMicrotask: function($self, $parent, zone, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      t1 = C.C__RootZone !== zone;
      if (t1)
        f = !(!t1 || false) ? zone.bindCallbackGuarded$1(f) : zone.bindCallback$1$1(f, -1);
      P._scheduleAsyncCallback(f);
    },
    _AsyncRun__initializeScheduleImmediate_internalCallback: function _AsyncRun__initializeScheduleImmediate_internalCallback(t0) {
      this._box_0 = t0;
    },
    _AsyncRun__initializeScheduleImmediate_closure: function _AsyncRun__initializeScheduleImmediate_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.div = t1;
      this.span = t2;
    },
    _AsyncRun__scheduleImmediateJsOverride_internalCallback: function _AsyncRun__scheduleImmediateJsOverride_internalCallback(t0) {
      this.callback = t0;
    },
    _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback: function _AsyncRun__scheduleImmediateWithSetImmediate_internalCallback(t0) {
      this.callback = t0;
    },
    _TimerImpl: function _TimerImpl(t0) {
      this._once = t0;
      this._handle = null;
      this._tick = 0;
    },
    _TimerImpl_internalCallback: function _TimerImpl_internalCallback(t0, t1) {
      this.$this = t0;
      this.callback = t1;
    },
    _TimerImpl$periodic_closure: function _TimerImpl$periodic_closure(t0, t1, t2, t3) {
      var _ = this;
      _.$this = t0;
      _.milliseconds = t1;
      _.start = t2;
      _.callback = t3;
    },
    _Completer: function _Completer() {
    },
    _AsyncCompleter: function _AsyncCompleter(t0, t1) {
      this.future = t0;
      this.$ti = t1;
    },
    _FutureListener: function _FutureListener(t0, t1, t2, t3, t4) {
      var _ = this;
      _._nextListener = null;
      _.result = t0;
      _.state = t1;
      _.callback = t2;
      _.errorCallback = t3;
      _.$ti = t4;
    },
    _Future: function _Future(t0, t1) {
      var _ = this;
      _._async$_state = 0;
      _._zone = t0;
      _._resultOrListeners = null;
      _.$ti = t1;
    },
    _Future__addListener_closure: function _Future__addListener_closure(t0, t1) {
      this.$this = t0;
      this.listener = t1;
    },
    _Future__prependListeners_closure: function _Future__prependListeners_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _Future__chainForeignFuture_closure: function _Future__chainForeignFuture_closure(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure0: function _Future__chainForeignFuture_closure0(t0) {
      this.target = t0;
    },
    _Future__chainForeignFuture_closure1: function _Future__chainForeignFuture_closure1(t0, t1, t2) {
      this.target = t0;
      this.e = t1;
      this.s = t2;
    },
    _Future__asyncComplete_closure: function _Future__asyncComplete_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__chainFuture_closure: function _Future__chainFuture_closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    _Future__asyncCompleteError_closure: function _Future__asyncCompleteError_closure(t0, t1, t2) {
      this.$this = t0;
      this.error = t1;
      this.stackTrace = t2;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback: function _Future__propagateToListeners_handleWhenCompleteCallback(t0, t1, t2, t3) {
      var _ = this;
      _._box_1 = t0;
      _._box_0 = t1;
      _.listener = t2;
      _.hasError = t3;
    },
    _Future__propagateToListeners_handleWhenCompleteCallback_closure: function _Future__propagateToListeners_handleWhenCompleteCallback_closure(t0) {
      this.originalSource = t0;
    },
    _Future__propagateToListeners_handleValueCallback: function _Future__propagateToListeners_handleValueCallback(t0, t1, t2) {
      this._box_0 = t0;
      this.listener = t1;
      this.sourceResult = t2;
    },
    _Future__propagateToListeners_handleError: function _Future__propagateToListeners_handleError(t0, t1, t2) {
      this._box_1 = t0;
      this._box_0 = t1;
      this.listener = t2;
    },
    _AsyncCallbackEntry: function _AsyncCallbackEntry(t0) {
      this.callback = t0;
      this.next = null;
    },
    Stream: function Stream() {
    },
    Stream_length_closure: function Stream_length_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    Stream_length_closure0: function Stream_length_closure0(t0, t1) {
      this._box_0 = t0;
      this.future = t1;
    },
    StreamSubscription: function StreamSubscription() {
    },
    StreamTransformerBase: function StreamTransformerBase() {
    },
    Timer: function Timer() {
    },
    AsyncError: function AsyncError(t0, t1) {
      this.error = t0;
      this.stackTrace = t1;
    },
    _Zone: function _Zone() {
    },
    _rootHandleUncaughtError_closure: function _rootHandleUncaughtError_closure(t0, t1) {
      this._box_0 = t0;
      this.stackTrace = t1;
    },
    _RootZone: function _RootZone() {
    },
    _RootZone_bindCallback_closure: function _RootZone_bindCallback_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.R = t2;
    },
    _RootZone_bindCallbackGuarded_closure: function _RootZone_bindCallbackGuarded_closure(t0, t1) {
      this.$this = t0;
      this.f = t1;
    },
    _RootZone_bindUnaryCallbackGuarded_closure: function _RootZone_bindUnaryCallbackGuarded_closure(t0, t1, t2) {
      this.$this = t0;
      this.f = t1;
      this.T = t2;
    },
    LinkedHashMap_LinkedHashMap: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    LinkedHashMap_LinkedHashMap$_literal: function(keyValuePairs, $K, $V) {
      return H.assertSubtype(H.fillLiteralMap(keyValuePairs, new H.JsLinkedHashMap([$K, $V])), "$isLinkedHashMap", [$K, $V], "$asLinkedHashMap");
    },
    LinkedHashMap_LinkedHashMap$_empty: function($K, $V) {
      return new H.JsLinkedHashMap([$K, $V]);
    },
    LinkedHashMap__makeEmpty: function() {
      return new H.JsLinkedHashMap([null, null]);
    },
    LinkedHashSet_LinkedHashSet: function($E) {
      return new P._LinkedHashSet([$E]);
    },
    _LinkedHashSet__newHashTable: function() {
      var table = Object.create(null);
      table["<non-identifier-key>"] = table;
      delete table["<non-identifier-key>"];
      return table;
    },
    _LinkedHashSetIterator$: function(_set, _modifications, $E) {
      var t1 = new P._LinkedHashSetIterator(_set, _modifications, [$E]);
      t1._collection$_cell = _set._collection$_first;
      return t1;
    },
    IterableBase_iterableToShortString: function(iterable, leftDelimiter, rightDelimiter) {
      var parts, t1;
      if (P._isToStringVisiting(iterable)) {
        if (leftDelimiter === "(" && rightDelimiter === ")")
          return "(...)";
        return leftDelimiter + "..." + rightDelimiter;
      }
      parts = H.setRuntimeTypeInfo([], [P.String]);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        P._iterablePartsToStrings(iterable, parts);
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = P.StringBuffer__writeAll(leftDelimiter, H.listSuperNativeTypeCheck(parts, "$isIterable"), ", ") + rightDelimiter;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    IterableBase_iterableToFullString: function(iterable, leftDelimiter, rightDelimiter) {
      var buffer, t1;
      if (P._isToStringVisiting(iterable))
        return leftDelimiter + "..." + rightDelimiter;
      buffer = new P.StringBuffer(leftDelimiter);
      C.JSArray_methods.add$1($._toStringVisiting, iterable);
      try {
        t1 = buffer;
        t1._contents = P.StringBuffer__writeAll(t1._contents, iterable, ", ");
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      buffer._contents += rightDelimiter;
      t1 = buffer._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _isToStringVisiting: function(o) {
      var t1, i;
      for (t1 = $._toStringVisiting.length, i = 0; i < t1; ++i)
        if (o === $._toStringVisiting[i])
          return true;
      return false;
    },
    _iterablePartsToStrings: function(iterable, parts) {
      var next, ultimateString, penultimateString, penultimate, ultimate, ultimate0, elision,
        it = J.get$iterator$ax(iterable),
        $length = 0, count = 0;
      while (true) {
        if (!($length < 80 || count < 3))
          break;
        if (!it.moveNext$0())
          return;
        next = H.S(it.get$current(it));
        C.JSArray_methods.add$1(parts, next);
        $length += next.length + 2;
        ++count;
      }
      if (!it.moveNext$0()) {
        if (count <= 5)
          return;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        ultimateString = parts.pop();
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        penultimateString = parts.pop();
      } else {
        penultimate = it.get$current(it);
        ++count;
        if (!it.moveNext$0()) {
          if (count <= 4) {
            C.JSArray_methods.add$1(parts, H.S(penultimate));
            return;
          }
          ultimateString = H.S(penultimate);
          if (0 >= parts.length)
            return H.ioore(parts, -1);
          penultimateString = parts.pop();
          $length += ultimateString.length + 2;
        } else {
          ultimate = it.get$current(it);
          ++count;
          for (; it.moveNext$0(); penultimate = ultimate, ultimate = ultimate0) {
            ultimate0 = it.get$current(it);
            ++count;
            if (count > 100) {
              while (true) {
                if (!($length > 75 && count > 3))
                  break;
                if (0 >= parts.length)
                  return H.ioore(parts, -1);
                $length -= parts.pop().length + 2;
                --count;
              }
              C.JSArray_methods.add$1(parts, "...");
              return;
            }
          }
          penultimateString = H.S(penultimate);
          ultimateString = H.S(ultimate);
          $length += ultimateString.length + penultimateString.length + 4;
        }
      }
      if (count > parts.length + 2) {
        $length += 5;
        elision = "...";
      } else
        elision = null;
      while (true) {
        if (!($length > 80 && parts.length > 3))
          break;
        if (0 >= parts.length)
          return H.ioore(parts, -1);
        $length -= parts.pop().length + 2;
        if (elision == null) {
          $length += 5;
          elision = "...";
        }
      }
      if (elision != null)
        C.JSArray_methods.add$1(parts, elision);
      C.JSArray_methods.add$1(parts, penultimateString);
      C.JSArray_methods.add$1(parts, ultimateString);
    },
    LinkedHashMap_LinkedHashMap$from: function(other, $K, $V) {
      var result = P.LinkedHashMap_LinkedHashMap($K, $V);
      J.forEach$1$ax(other, new P.LinkedHashMap_LinkedHashMap$from_closure(result, $K, $V));
      return result;
    },
    LinkedHashMap_LinkedHashMap$fromIterable: function(iterable, key, value, $K, $V) {
      var map = P.LinkedHashMap_LinkedHashMap($K, $V);
      P.MapBase__fillMapWithMappedIterable(map, iterable, key, value);
      return map;
    },
    LinkedHashMap_LinkedHashMap$fromIterables: function(keys, values, $K, $V) {
      var map = P.LinkedHashMap_LinkedHashMap($K, $V);
      P.MapBase__fillMapWithIterables(map, keys, values);
      return map;
    },
    LinkedHashSet_LinkedHashSet$from: function(elements, $E) {
      var t1,
        result = P.LinkedHashSet_LinkedHashSet($E);
      for (t1 = J.get$iterator$ax(elements); t1.moveNext$0();)
        result.add$1(0, H.assertSubtypeOfRuntimeType(t1.get$current(t1), $E));
      return result;
    },
    MapBase_mapToString: function(m) {
      var result, t1 = {};
      if (P._isToStringVisiting(m))
        return "{...}";
      result = new P.StringBuffer("");
      try {
        C.JSArray_methods.add$1($._toStringVisiting, m);
        result._contents += "{";
        t1.first = true;
        J.forEach$1$ax(m, new P.MapBase_mapToString_closure(t1, result));
        result._contents += "}";
      } finally {
        if (0 >= $._toStringVisiting.length)
          return H.ioore($._toStringVisiting, -1);
        $._toStringVisiting.pop();
      }
      t1 = result._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    MapBase__id: function(x) {
      return x;
    },
    MapBase__fillMapWithMappedIterable: function(map, iterable, key, value) {
      var t1, element;
      if (key == null)
        key = P.collection_MapBase__id$closure();
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0();) {
        element = t1.get$current(t1);
        map.$indexSet(0, key.call$1(element), value.call$1(element));
      }
    },
    MapBase__fillMapWithIterables: function(map, keys, values) {
      var keyIterator = J.get$iterator$ax(keys),
        valueIterator = J.get$iterator$ax(values),
        hasNextKey = keyIterator.moveNext$0(),
        hasNextValue = valueIterator.moveNext$0();
      while (true) {
        if (!(hasNextKey && hasNextValue))
          break;
        map.$indexSet(0, keyIterator.get$current(keyIterator), valueIterator.get$current(valueIterator));
        hasNextKey = keyIterator.moveNext$0();
        hasNextValue = valueIterator.moveNext$0();
      }
      if (hasNextKey || hasNextValue)
        throw H.wrapException(P.ArgumentError$("Iterables do not have same length."));
    },
    _dynamicCompare: function(a, b) {
      return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    _defaultCompare: function($K) {
      if (H.functionTypeTest(P.core_Comparable_compare$closure(), {func: 1, ret: P.int, args: [$K, $K]}))
        return P.core_Comparable_compare$closure();
      return P.collection___dynamicCompare$closure();
    },
    SplayTreeSet$: function($E) {
      var t1 = P._defaultCompare($E);
      return new P.SplayTreeSet(new P._SplayTreeNode(null, [$E]), t1, new P.SplayTreeSet_closure($E), [$E]);
    },
    _LinkedHashSet: function _LinkedHashSet(t0) {
      var _ = this;
      _._collection$_length = 0;
      _._collection$_last = _._collection$_first = _._collection$_rest = _._collection$_nums = _._collection$_strings = null;
      _._collection$_modifications = 0;
      _.$ti = t0;
    },
    _LinkedHashSetCell: function _LinkedHashSetCell(t0) {
      this._element = t0;
      this._collection$_previous = this._collection$_next = null;
    },
    _LinkedHashSetIterator: function _LinkedHashSetIterator(t0, t1, t2) {
      var _ = this;
      _._set = t0;
      _._collection$_modifications = t1;
      _._collection$_current = _._collection$_cell = null;
      _.$ti = t2;
    },
    IterableMixin: function IterableMixin() {
    },
    IterableBase: function IterableBase() {
    },
    LinkedHashMap_LinkedHashMap$from_closure: function LinkedHashMap_LinkedHashMap$from_closure(t0, t1, t2) {
      this.result = t0;
      this.K = t1;
      this.V = t2;
    },
    ListMixin: function ListMixin() {
    },
    MapBase: function MapBase() {
    },
    MapBase_mapToString_closure: function MapBase_mapToString_closure(t0, t1) {
      this._box_0 = t0;
      this.result = t1;
    },
    MapMixin: function MapMixin() {
    },
    _MapBaseValueIterable: function _MapBaseValueIterable(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    _MapBaseValueIterator: function _MapBaseValueIterator(t0, t1, t2) {
      var _ = this;
      _._collection$_keys = t0;
      _._collection$_map = t1;
      _._collection$_current = null;
      _.$ti = t2;
    },
    _UnmodifiableMapMixin: function _UnmodifiableMapMixin() {
    },
    MapView: function MapView() {
    },
    UnmodifiableMapView: function UnmodifiableMapView(t0, t1) {
      this._collection$_map = t0;
      this.$ti = t1;
    },
    SetMixin: function SetMixin() {
    },
    _SetBase: function _SetBase() {
    },
    _SplayTreeNode: function _SplayTreeNode(t0, t1) {
      var _ = this;
      _.key = t0;
      _.right = _.left = null;
      _.$ti = t1;
    },
    _SplayTree: function _SplayTree() {
    },
    _SplayTreeIterator: function _SplayTreeIterator() {
    },
    _SplayTreeKeyIterator: function _SplayTreeKeyIterator(t0, t1, t2, t3, t4) {
      var _ = this;
      _._tree = t0;
      _._workList = t1;
      _._modificationCount = t2;
      _._splayCount = t3;
      _._currentNode = null;
      _.$ti = t4;
    },
    SplayTreeSet: function SplayTreeSet(t0, t1, t2, t3) {
      var _ = this;
      _._root = null;
      _._dummy = t0;
      _._comparator = t1;
      _._validKey = t2;
      _._splayCount = _._modificationCount = _._count = 0;
      _.$ti = t3;
    },
    SplayTreeSet_closure: function SplayTreeSet_closure(t0) {
      this.E = t0;
    },
    _SplayTreeSet__SplayTree_IterableMixin: function _SplayTreeSet__SplayTree_IterableMixin() {
    },
    _SplayTreeSet__SplayTree_IterableMixin_SetMixin: function _SplayTreeSet__SplayTree_IterableMixin_SetMixin() {
    },
    _UnmodifiableMapView_MapView__UnmodifiableMapMixin: function _UnmodifiableMapView_MapView__UnmodifiableMapMixin() {
    },
    _parseJson: function(source, reviver) {
      var parsed, e, exception, t1;
      if (typeof source !== "string")
        throw H.wrapException(H.argumentErrorValue(source));
      parsed = null;
      try {
        parsed = JSON.parse(source);
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.FormatException$(String(e), null);
        throw H.wrapException(t1);
      }
      t1 = P._convertJsonToDartLazy(parsed);
      return t1;
    },
    _convertJsonToDartLazy: function(object) {
      var i;
      if (object == null)
        return;
      if (typeof object != "object")
        return object;
      if (Object.getPrototypeOf(object) !== Array.prototype)
        return new P._JsonMap(object, Object.create(null));
      for (i = 0; i < object.length; ++i)
        object[i] = P._convertJsonToDartLazy(object[i]);
      return object;
    },
    JsonUnsupportedObjectError$: function(unsupportedObject, cause, partialResult) {
      return new P.JsonUnsupportedObjectError(unsupportedObject, cause);
    },
    _defaultToEncodable: function(object) {
      return object.toJson$0();
    },
    _JsonStringStringifier_stringify: function(object, toEncodable, indent) {
      var t1,
        output = new P.StringBuffer(""),
        stringifier = new P._JsonStringStringifier(output, [], P.convert___defaultToEncodable$closure());
      stringifier.writeObject$1(object);
      t1 = output._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    _JsonMap: function _JsonMap(t0, t1) {
      this._original = t0;
      this._processed = t1;
      this._convert$_data = null;
    },
    _JsonMap_values_closure: function _JsonMap_values_closure(t0) {
      this.$this = t0;
    },
    _JsonMap_addAll_closure: function _JsonMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _JsonMapKeyIterable: function _JsonMapKeyIterable(t0) {
      this._parent = t0;
    },
    Codec: function Codec() {
    },
    Converter: function Converter() {
    },
    JsonUnsupportedObjectError: function JsonUnsupportedObjectError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCyclicError: function JsonCyclicError(t0, t1) {
      this.unsupportedObject = t0;
      this.cause = t1;
    },
    JsonCodec: function JsonCodec() {
    },
    JsonEncoder: function JsonEncoder(t0) {
      this._toEncodable = t0;
    },
    JsonDecoder: function JsonDecoder(t0) {
      this._reviver = t0;
    },
    _JsonStringifier: function _JsonStringifier() {
    },
    _JsonStringifier_writeMap_closure: function _JsonStringifier_writeMap_closure(t0, t1) {
      this._box_0 = t0;
      this.keyValueList = t1;
    },
    _JsonStringStringifier: function _JsonStringStringifier(t0, t1, t2) {
      this._sink = t0;
      this._seen = t1;
      this._toEncodable = t2;
    },
    Function_apply: function($function, positionalArguments) {
      return H.Primitives_applyFunction($function, positionalArguments, null);
    },
    Expando$: function($name, $T) {
      var t1;
      if (typeof WeakMap == "function")
        t1 = new WeakMap();
      else {
        t1 = $.Expando__keyCount;
        $.Expando__keyCount = t1 + 1;
        t1 = "expando$key$" + t1;
      }
      return new P.Expando(t1, $name, [$T]);
    },
    int_parse: function(source) {
      var value = H.Primitives_parseInt(source, null);
      if (value != null)
        return value;
      throw H.wrapException(P.FormatException$(source, null));
    },
    Error__objectToString: function(object) {
      if (object instanceof H.Closure)
        return object.toString$0(0);
      return "Instance of '" + H.S(H.Primitives_objectTypeName(object)) + "'";
    },
    List_List$from: function(elements, growable, $E) {
      var t2,
        t1 = [$E],
        list = H.setRuntimeTypeInfo([], t1);
      for (t2 = J.get$iterator$ax(elements); t2.moveNext$0();)
        C.JSArray_methods.add$1(list, H.assertSubtypeOfRuntimeType(t2.get$current(t2), $E));
      if (growable)
        return list;
      return H.assertSubtype(J.JSArray_markFixedList(list), "$isList", t1, "$asList");
    },
    RegExp_RegExp: function(source) {
      return new H.JSSyntaxRegExp(source, H.JSSyntaxRegExp_makeNative(source, false, true, false, false, false));
    },
    StringBuffer__writeAll: function(string, objects, separator) {
      var iterator = J.get$iterator$ax(objects);
      if (!iterator.moveNext$0())
        return string;
      if (separator.length === 0) {
        do
          string += H.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        string += H.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          string = string + separator + H.S(iterator.get$current(iterator));
      }
      return string;
    },
    NoSuchMethodError$: function(receiver, memberName, positionalArguments, namedArguments) {
      return new P.NoSuchMethodError(receiver, memberName, positionalArguments, namedArguments);
    },
    Comparable_compare: function(a, b) {
      return J.compareTo$1$ns(H.numberOrStringSuperNativeTypeCheck(a, "$isComparable"), H.numberOrStringSuperNativeTypeCheck(b, "$isComparable"));
    },
    DateTime__fourDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "";
      if (absN >= 1000)
        return "" + n;
      if (absN >= 100)
        return sign + "0" + absN;
      if (absN >= 10)
        return sign + "00" + absN;
      return sign + "000" + absN;
    },
    DateTime__sixDigits: function(n) {
      var absN = Math.abs(n),
        sign = n < 0 ? "-" : "+";
      if (absN >= 100000)
        return sign + absN;
      return sign + "0" + absN;
    },
    DateTime__threeDigits: function(n) {
      if (n >= 100)
        return "" + n;
      if (n >= 10)
        return "0" + n;
      return "00" + n;
    },
    DateTime__twoDigits: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    Duration$: function(days, milliseconds) {
      return new P.Duration(864e8 * days + 1000 * milliseconds);
    },
    Error_safeToString: function(object) {
      if (typeof object === "number" || typeof object === "boolean" || null == object)
        return J.toString$0$(object);
      if (typeof object === "string")
        return JSON.stringify(object);
      return P.Error__objectToString(object);
    },
    ArgumentError$: function(message) {
      return new P.ArgumentError(false, null, null, message);
    },
    ArgumentError$value: function(value, $name, message) {
      return new P.ArgumentError(true, value, $name, message);
    },
    RangeError$value: function(value, $name) {
      return new P.RangeError(null, null, true, value, $name, "Value not in range");
    },
    RangeError$range: function(invalidValue, minValue, maxValue, $name, message) {
      return new P.RangeError(minValue, maxValue, true, invalidValue, $name, "Invalid value");
    },
    RangeError_checkValidRange: function(start, end, $length) {
      if (0 > start || start > $length)
        throw H.wrapException(P.RangeError$range(start, 0, $length, "start", null));
      if (start > end || end > $length)
        throw H.wrapException(P.RangeError$range(end, start, $length, "end", null));
      return end;
    },
    RangeError_checkNotNegative: function(value, $name) {
      if (typeof value !== "number")
        return value.$lt();
      if (value < 0)
        throw H.wrapException(P.RangeError$range(value, 0, null, $name, null));
    },
    IndexError$: function(invalidValue, indexable, $name, message, $length) {
      var t1 = H.intTypeCheck($length == null ? J.get$length$asx(indexable) : $length);
      return new P.IndexError(t1, true, invalidValue, $name, "Index out of range");
    },
    UnsupportedError$: function(message) {
      return new P.UnsupportedError(message);
    },
    UnimplementedError$: function(message) {
      return new P.UnimplementedError(message);
    },
    StateError$: function(message) {
      return new P.StateError(message);
    },
    ConcurrentModificationError$: function(modifiedObject) {
      return new P.ConcurrentModificationError(modifiedObject);
    },
    Exception_Exception: function(message) {
      return new P._Exception(message);
    },
    FormatException$: function(message, source) {
      return new P.FormatException(message, source);
    },
    Iterable_Iterable$generate: function(count, generator, $E) {
      if (typeof count !== "number")
        return count.$le();
      if (count <= 0)
        return new H.EmptyIterable([$E]);
      return new P._GeneratorIterable(count, generator, [$E]);
    },
    List_List$generate: function($length, generator, $E) {
      var i,
        result = H.setRuntimeTypeInfo([], [$E]);
      C.JSArray_methods.set$length(result, $length);
      if (typeof $length !== "number")
        return H.iae($length);
      i = 0;
      for (; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, generator.call$1(i));
      return result;
    },
    print: function(object) {
      H.printString(object);
    },
    NoSuchMethodError_toString_closure: function NoSuchMethodError_toString_closure(t0, t1) {
      this._box_0 = t0;
      this.sb = t1;
    },
    bool: function bool() {
    },
    Comparable: function Comparable() {
    },
    DateTime: function DateTime(t0, t1) {
      this._value = t0;
      this.isUtc = t1;
    },
    double: function double() {
    },
    Duration: function Duration(t0) {
      this._duration = t0;
    },
    Duration_toString_sixDigits: function Duration_toString_sixDigits() {
    },
    Duration_toString_twoDigits: function Duration_toString_twoDigits() {
    },
    Error: function Error() {
    },
    AssertionError: function AssertionError() {
    },
    NullThrownError: function NullThrownError() {
    },
    ArgumentError: function ArgumentError(t0, t1, t2, t3) {
      var _ = this;
      _._hasValue = t0;
      _.invalidValue = t1;
      _.name = t2;
      _.message = t3;
    },
    RangeError: function RangeError(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.start = t0;
      _.end = t1;
      _._hasValue = t2;
      _.invalidValue = t3;
      _.name = t4;
      _.message = t5;
    },
    IndexError: function IndexError(t0, t1, t2, t3, t4) {
      var _ = this;
      _.length = t0;
      _._hasValue = t1;
      _.invalidValue = t2;
      _.name = t3;
      _.message = t4;
    },
    NoSuchMethodError: function NoSuchMethodError(t0, t1, t2, t3) {
      var _ = this;
      _._receiver = t0;
      _._core$_memberName = t1;
      _._core$_arguments = t2;
      _._namedArguments = t3;
    },
    UnsupportedError: function UnsupportedError(t0) {
      this.message = t0;
    },
    UnimplementedError: function UnimplementedError(t0) {
      this.message = t0;
    },
    StateError: function StateError(t0) {
      this.message = t0;
    },
    ConcurrentModificationError: function ConcurrentModificationError(t0) {
      this.modifiedObject = t0;
    },
    StackOverflowError: function StackOverflowError() {
    },
    CyclicInitializationError: function CyclicInitializationError(t0) {
      this.variableName = t0;
    },
    _Exception: function _Exception(t0) {
      this.message = t0;
    },
    FormatException: function FormatException(t0, t1) {
      this.message = t0;
      this.source = t1;
    },
    Expando: function Expando(t0, t1, t2) {
      this._jsWeakMapOrKey = t0;
      this.name = t1;
      this.$ti = t2;
    },
    Function: function Function() {
    },
    int: function int() {
    },
    Iterable: function Iterable() {
    },
    _GeneratorIterable: function _GeneratorIterable(t0, t1, t2) {
      this.length = t0;
      this._generator = t1;
      this.$ti = t2;
    },
    Iterator: function Iterator() {
    },
    List: function List() {
    },
    Map: function Map() {
    },
    Null: function Null() {
    },
    num: function num() {
    },
    Object: function Object() {
    },
    RegExpMatch: function RegExpMatch() {
    },
    StackTrace: function StackTrace() {
    },
    String: function String() {
    },
    StringBuffer: function StringBuffer(t0) {
      this._contents = t0;
    },
    Symbol0: function Symbol0() {
    },
    convertNativeToDart_ImageData: function(nativeImageData) {
      var data,
        t1 = J.getInterceptor$(nativeImageData);
      if (!!t1.$isImageData) {
        data = t1.get$data(nativeImageData);
        if (data.constructor === Array)
          if (typeof CanvasPixelArray !== "undefined") {
            data.constructor = CanvasPixelArray;
            data.BYTES_PER_ELEMENT = 1;
          }
        return nativeImageData;
      }
      t1 = nativeImageData.data;
      nativeImageData.width;
      return new P._TypedImageData(t1);
    },
    convertNativeToDart_Dictionary: function(object) {
      var dict, keys, t1, _i, key;
      if (object == null)
        return;
      dict = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      keys = Object.getOwnPropertyNames(object);
      for (t1 = keys.length, _i = 0; _i < keys.length; keys.length === t1 || (0, H.throwConcurrentModificationError)(keys), ++_i) {
        key = H.stringTypeCheck(keys[_i]);
        dict.$indexSet(0, key, object[key]);
      }
      return dict;
    },
    _StructuredClone: function _StructuredClone() {
    },
    _StructuredClone_walk_closure: function _StructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _StructuredClone_walk_closure0: function _StructuredClone_walk_closure0(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _AcceptStructuredClone: function _AcceptStructuredClone() {
    },
    _AcceptStructuredClone_walk_closure: function _AcceptStructuredClone_walk_closure(t0, t1) {
      this._box_0 = t0;
      this.$this = t1;
    },
    _TypedImageData: function _TypedImageData(t0) {
      this.data = t0;
    },
    _StructuredCloneDart2Js: function _StructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
    },
    _AcceptStructuredCloneDart2Js: function _AcceptStructuredCloneDart2Js(t0, t1) {
      this.values = t0;
      this.copies = t1;
      this.mustCopy = false;
    },
    Cursor: function Cursor() {
    },
    CursorWithValue: function CursorWithValue() {
    },
    KeyRange: function KeyRange() {
    },
    Observation: function Observation() {
    },
    OpenDBRequest: function OpenDBRequest() {
    },
    Request: function Request() {
    },
    VersionChangeEvent: function VersionChangeEvent() {
    },
    _callDartFunction: function(callback, captureThis, $self, $arguments) {
      var arguments0, dartArgs;
      H.boolTypeCheck(captureThis);
      H.listTypeCheck($arguments);
      if (H.boolConversionCheck(captureThis)) {
        arguments0 = [$self];
        C.JSArray_methods.addAll$1(arguments0, $arguments);
        $arguments = arguments0;
      }
      dartArgs = P.List_List$from(J.map$1$1$ax($arguments, P.js___convertToDart$closure(), null), true, null);
      return P._convertToJS(P.Function_apply(H.interceptedTypeCheck(callback, "$isFunction"), dartArgs));
    },
    _defineProperty: function(o, $name, value) {
      var exception;
      try {
        if (Object.isExtensible(o) && !Object.prototype.hasOwnProperty.call(o, $name)) {
          Object.defineProperty(o, $name, {value: value});
          return true;
        }
      } catch (exception) {
        H.unwrapException(exception);
      }
      return false;
    },
    _getOwnProperty: function(o, $name) {
      if (Object.prototype.hasOwnProperty.call(o, $name))
        return o[$name];
      return;
    },
    _convertToJS: function(o) {
      var t1;
      if (o == null || typeof o === "string" || typeof o === "number" || typeof o === "boolean")
        return o;
      t1 = J.getInterceptor$(o);
      if (!!t1.$isJsObject)
        return o._js$_jsObject;
      if (H.isBrowserObject(o))
        return o;
      if (!!t1.$isTypedData)
        return o;
      if (!!t1.$isDateTime)
        return H.Primitives_lazyAsJsDate(o);
      if (!!t1.$isFunction)
        return P._getJsProxy(o, "$dart_jsFunction", new P._convertToJS_closure());
      return P._getJsProxy(o, "_$dart_jsObject", new P._convertToJS_closure0($.$get$_dartProxyCtor()));
    },
    _getJsProxy: function(o, propertyName, createProxy) {
      var jsProxy = P._getOwnProperty(o, propertyName);
      if (jsProxy == null) {
        jsProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, jsProxy);
      }
      return jsProxy;
    },
    _convertToDart: function(o) {
      var ms, t1;
      if (o == null || typeof o == "string" || typeof o == "number" || typeof o == "boolean")
        return o;
      else if (o instanceof Object && H.isBrowserObject(o))
        return o;
      else if (o instanceof Object && !!J.getInterceptor$(o).$isTypedData)
        return o;
      else if (o instanceof Date) {
        ms = H.intTypeCheck(o.getTime());
        t1 = new P.DateTime(ms, false);
        t1.DateTime$_withValue$2$isUtc(ms, false);
        return t1;
      } else if (o.constructor === $.$get$_dartProxyCtor())
        return o.o;
      else
        return P._wrapToDart(o);
    },
    _wrapToDart: function(o) {
      if (typeof o == "function")
        return P._getDartProxy(o, $.$get$DART_CLOSURE_PROPERTY_NAME(), new P._wrapToDart_closure());
      if (o instanceof Array)
        return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure0());
      return P._getDartProxy(o, $.$get$_DART_OBJECT_PROPERTY_NAME(), new P._wrapToDart_closure1());
    },
    _getDartProxy: function(o, propertyName, createProxy) {
      var dartProxy = P._getOwnProperty(o, propertyName);
      if (dartProxy == null || !(o instanceof Object)) {
        dartProxy = createProxy.call$1(o);
        P._defineProperty(o, propertyName, dartProxy);
      }
      return dartProxy;
    },
    _convertDartFunctionFast: function(f) {
      var ret,
        existing = f.$dart_jsFunction;
      if (existing != null)
        return existing;
      ret = function(_call, f) {
        return function() {
          return _call(f, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunctionFast, f);
      ret[$.$get$DART_CLOSURE_PROPERTY_NAME()] = f;
      f.$dart_jsFunction = ret;
      return ret;
    },
    _callDartFunctionFast: function(callback, $arguments) {
      H.listTypeCheck($arguments);
      return P.Function_apply(H.interceptedTypeCheck(callback, "$isFunction"), $arguments);
    },
    allowInterop: function(f, $F) {
      if (typeof f == "function")
        return f;
      else
        return H.assertSubtypeOfRuntimeType(P._convertDartFunctionFast(f), $F);
    },
    JsObject: function JsObject(t0) {
      this._js$_jsObject = t0;
    },
    JsFunction: function JsFunction(t0) {
      this._js$_jsObject = t0;
    },
    JsArray: function JsArray(t0, t1) {
      this._js$_jsObject = t0;
      this.$ti = t1;
    },
    _convertToJS_closure: function _convertToJS_closure() {
    },
    _convertToJS_closure0: function _convertToJS_closure0(t0) {
      this.ctor = t0;
    },
    _wrapToDart_closure: function _wrapToDart_closure() {
    },
    _wrapToDart_closure0: function _wrapToDart_closure0() {
    },
    _wrapToDart_closure1: function _wrapToDart_closure1() {
    },
    _JsArray_JsObject_ListMixin: function _JsArray_JsObject_ListMixin() {
    },
    promiseToFuture: function(jsPromise, $T) {
      var t1 = new P._Future($.Zone__current, [$T]),
        completer = new P._AsyncCompleter(t1, [$T]);
      jsPromise.then(H.convertDartClosureToJS(new P.promiseToFuture_closure(completer, $T), 1), H.convertDartClosureToJS(new P.promiseToFuture_closure0(completer), 1));
      return t1;
    },
    promiseToFuture_closure: function promiseToFuture_closure(t0, t1) {
      this.completer = t0;
      this.T = t1;
    },
    promiseToFuture_closure0: function promiseToFuture_closure0(t0) {
      this.completer = t0;
    },
    pow: function(x, exponent) {
      return Math.pow(x, exponent);
    },
    _RectangleBase: function _RectangleBase() {
    },
    Rectangle: function Rectangle() {
    },
    AElement: function AElement() {
    },
    Angle: function Angle() {
    },
    AnimatedEnumeration: function AnimatedEnumeration() {
    },
    AnimatedString: function AnimatedString() {
    },
    FEColorMatrixElement: function FEColorMatrixElement() {
    },
    FETurbulenceElement: function FETurbulenceElement() {
    },
    GraphicsElement: function GraphicsElement() {
    },
    Length: function Length() {
    },
    LengthList: function LengthList() {
    },
    Number: function Number() {
    },
    NumberList: function NumberList() {
    },
    PointList: function PointList() {
    },
    ScriptElement0: function ScriptElement0() {
    },
    StringList: function StringList() {
    },
    StyleElement0: function StyleElement0() {
    },
    SvgElement: function SvgElement() {
    },
    Transform: function Transform() {
    },
    TransformList: function TransformList() {
    },
    _LengthList_Interceptor_ListMixin: function _LengthList_Interceptor_ListMixin() {
    },
    _LengthList_Interceptor_ListMixin_ImmutableListMixin: function _LengthList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NumberList_Interceptor_ListMixin: function _NumberList_Interceptor_ListMixin() {
    },
    _NumberList_Interceptor_ListMixin_ImmutableListMixin: function _NumberList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _StringList_Interceptor_ListMixin: function _StringList_Interceptor_ListMixin() {
    },
    _StringList_Interceptor_ListMixin_ImmutableListMixin: function _StringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TransformList_Interceptor_ListMixin: function _TransformList_Interceptor_ListMixin() {
    },
    _TransformList_Interceptor_ListMixin_ImmutableListMixin: function _TransformList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    AudioBuffer: function AudioBuffer() {
    },
    AudioNode: function AudioNode() {
    },
    AudioParam: function AudioParam() {
    },
    AudioParamMap: function AudioParamMap() {
    },
    AudioParamMap_keys_closure: function AudioParamMap_keys_closure(t0) {
      this.keys = t0;
    },
    AudioParamMap_values_closure: function AudioParamMap_values_closure(t0) {
      this.values = t0;
    },
    AudioScheduledSourceNode: function AudioScheduledSourceNode() {
    },
    AudioTrackList: function AudioTrackList() {
    },
    BaseAudioContext: function BaseAudioContext() {
    },
    BiquadFilterNode: function BiquadFilterNode() {
    },
    OfflineAudioContext: function OfflineAudioContext() {
    },
    OscillatorNode: function OscillatorNode() {
    },
    _AudioParamMap_Interceptor_MapMixin: function _AudioParamMap_Interceptor_MapMixin() {
    },
    ActiveInfo: function ActiveInfo() {
    },
    SqlResultSetRowList: function SqlResultSetRowList() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin: function _SqlResultSetRowList_Interceptor_ListMixin() {
    },
    _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin: function _SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  W = {
    CanvasElement_CanvasElement: function(height, width) {
      var e = document.createElement("canvas");
      e.width = width;
      e.height = height;
      return e;
    },
    ImageElement_ImageElement: function(src) {
      var e = document.createElement("img");
      if (src != null)
        e.src = src;
      return e;
    },
    _JenkinsSmiHash_combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    _JenkinsSmiHash_hash4: function(a, b, c, d) {
      var t1 = W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(W._JenkinsSmiHash_combine(0, a), b), c), d),
        hash = 536870911 & t1 + ((67108863 & t1) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    _EventStreamSubscription$: function(_target, _eventType, onData, _useCapture, $T) {
      var t1 = W._wrapZone(new W._EventStreamSubscription_closure(onData), W.Event);
      if (t1 != null && true)
        J.addEventListener$3$x(_target, _eventType, t1, false);
      return new W._EventStreamSubscription(_target, _eventType, t1, false, [$T]);
    },
    _convertNativeToDart_EventTarget: function(e) {
      var $window;
      if ("postMessage" in e) {
        $window = W._DOMWindowCrossFrame__createSafe(e);
        return $window;
      } else
        return H.interceptedTypeCheck(e, "$isEventTarget");
    },
    _DOMWindowCrossFrame__createSafe: function(w) {
      if (w === window)
        return H.interceptedTypeCheck(w, "$isWindowBase");
      else
        return new W._DOMWindowCrossFrame();
    },
    _wrapZone: function(callback, $T) {
      var t1 = $.Zone__current;
      if (t1 === C.C__RootZone)
        return callback;
      return t1.bindUnaryCallbackGuarded$1$1(callback, $T);
    },
    HtmlElement: function HtmlElement() {
    },
    AccessibleNode: function AccessibleNode() {
    },
    AccessibleNodeList: function AccessibleNodeList() {
    },
    AnchorElement: function AnchorElement() {
    },
    AreaElement: function AreaElement() {
    },
    BaseElement: function BaseElement() {
    },
    Blob: function Blob() {
    },
    BluetoothRemoteGattDescriptor: function BluetoothRemoteGattDescriptor() {
    },
    ButtonElement: function ButtonElement() {
    },
    CanvasElement: function CanvasElement() {
    },
    CanvasRenderingContext2D: function CanvasRenderingContext2D() {
    },
    CharacterData: function CharacterData() {
    },
    Client: function Client() {
    },
    Credential: function Credential() {
    },
    CryptoKey: function CryptoKey() {
    },
    CssKeywordValue: function CssKeywordValue() {
    },
    CssNumericValue: function CssNumericValue() {
    },
    CssPerspective: function CssPerspective() {
    },
    CssRule: function CssRule() {
    },
    CssStyleDeclaration: function CssStyleDeclaration() {
    },
    CssStyleDeclarationBase: function CssStyleDeclarationBase() {
    },
    CssStyleValue: function CssStyleValue() {
    },
    CssTransformComponent: function CssTransformComponent() {
    },
    CssTransformValue: function CssTransformValue() {
    },
    CssUnitValue: function CssUnitValue() {
    },
    CssUnparsedValue: function CssUnparsedValue() {
    },
    DataElement: function DataElement() {
    },
    DataTransfer: function DataTransfer() {
    },
    DataTransferItem: function DataTransferItem() {
    },
    DataTransferItemList: function DataTransferItemList() {
    },
    DomException: function DomException() {
    },
    DomRectList: function DomRectList() {
    },
    DomRectReadOnly: function DomRectReadOnly() {
    },
    DomStringList: function DomStringList() {
    },
    DomTokenList: function DomTokenList() {
    },
    Element: function Element() {
    },
    EmbedElement: function EmbedElement() {
    },
    Event: function Event() {
    },
    EventTarget: function EventTarget() {
    },
    FieldSetElement: function FieldSetElement() {
    },
    File: function File() {
    },
    FileList: function FileList() {
    },
    FileReader: function FileReader() {
    },
    FileWriter: function FileWriter() {
    },
    FormElement: function FormElement() {
    },
    Gamepad: function Gamepad() {
    },
    GamepadButton: function GamepadButton() {
    },
    History: function History() {
    },
    HtmlCollection: function HtmlCollection() {
    },
    ImageData: function ImageData() {
    },
    InputElement: function InputElement() {
    },
    IntersectionObserverEntry: function IntersectionObserverEntry() {
    },
    KeyboardEvent: function KeyboardEvent() {
    },
    LIElement: function LIElement() {
    },
    LinkElement: function LinkElement() {
    },
    Location: function Location() {
    },
    MediaList: function MediaList() {
    },
    MessageEvent: function MessageEvent() {
    },
    MessagePort: function MessagePort() {
    },
    MeterElement: function MeterElement() {
    },
    MidiInputMap: function MidiInputMap() {
    },
    MidiInputMap_keys_closure: function MidiInputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiInputMap_values_closure: function MidiInputMap_values_closure(t0) {
      this.values = t0;
    },
    MidiOutputMap: function MidiOutputMap() {
    },
    MidiOutputMap_keys_closure: function MidiOutputMap_keys_closure(t0) {
      this.keys = t0;
    },
    MidiOutputMap_values_closure: function MidiOutputMap_values_closure(t0) {
      this.values = t0;
    },
    MidiPort: function MidiPort() {
    },
    MimeType: function MimeType() {
    },
    MimeTypeArray: function MimeTypeArray() {
    },
    MouseEvent: function MouseEvent() {
    },
    MutationRecord: function MutationRecord() {
    },
    NetworkInformation: function NetworkInformation() {
    },
    Node: function Node() {
    },
    NodeList: function NodeList() {
    },
    OListElement: function OListElement() {
    },
    ObjectElement: function ObjectElement() {
    },
    OptionElement: function OptionElement() {
    },
    OutputElement: function OutputElement() {
    },
    ParamElement: function ParamElement() {
    },
    PerformanceEntry: function PerformanceEntry() {
    },
    PerformanceNavigation: function PerformanceNavigation() {
    },
    PerformanceNavigationTiming: function PerformanceNavigationTiming() {
    },
    PerformanceResourceTiming: function PerformanceResourceTiming() {
    },
    Plugin: function Plugin() {
    },
    PluginArray: function PluginArray() {
    },
    PresentationAvailability: function PresentationAvailability() {
    },
    ProcessingInstruction: function ProcessingInstruction() {
    },
    ProgressElement: function ProgressElement() {
    },
    ProgressEvent: function ProgressEvent() {
    },
    ResizeObserverEntry: function ResizeObserverEntry() {
    },
    RtcLegacyStatsReport: function RtcLegacyStatsReport() {
    },
    RtcSessionDescription: function RtcSessionDescription() {
    },
    RtcStatsReport: function RtcStatsReport() {
    },
    RtcStatsReport_keys_closure: function RtcStatsReport_keys_closure(t0) {
      this.keys = t0;
    },
    RtcStatsReport_values_closure: function RtcStatsReport_values_closure(t0) {
      this.values = t0;
    },
    ScreenOrientation: function ScreenOrientation() {
    },
    ScriptElement: function ScriptElement() {
    },
    SelectElement: function SelectElement() {
    },
    Selection: function Selection() {
    },
    SourceBuffer: function SourceBuffer() {
    },
    SourceBufferList: function SourceBufferList() {
    },
    SourceElement: function SourceElement() {
    },
    SpeechGrammar: function SpeechGrammar() {
    },
    SpeechGrammarList: function SpeechGrammarList() {
    },
    SpeechRecognitionResult: function SpeechRecognitionResult() {
    },
    Storage: function Storage() {
    },
    Storage_addAll_closure: function Storage_addAll_closure(t0) {
      this.$this = t0;
    },
    Storage_keys_closure: function Storage_keys_closure(t0) {
      this.keys = t0;
    },
    Storage_values_closure: function Storage_values_closure(t0) {
      this.values = t0;
    },
    StyleElement: function StyleElement() {
    },
    StyleMedia: function StyleMedia() {
    },
    StyleSheet: function StyleSheet() {
    },
    TextAreaElement: function TextAreaElement() {
    },
    TextTrack: function TextTrack() {
    },
    TextTrackCue: function TextTrackCue() {
    },
    TextTrackCueList: function TextTrackCueList() {
    },
    TextTrackList: function TextTrackList() {
    },
    TimeRanges: function TimeRanges() {
    },
    Touch: function Touch() {
    },
    TouchList: function TouchList() {
    },
    TrackDefault: function TrackDefault() {
    },
    TrackDefaultList: function TrackDefaultList() {
    },
    UIEvent: function UIEvent() {
    },
    Url: function Url() {
    },
    VideoTrackList: function VideoTrackList() {
    },
    Window: function Window() {
    },
    Worker: function Worker() {
    },
    WorkerGlobalScope: function WorkerGlobalScope() {
    },
    _Attr: function _Attr() {
    },
    _CssRuleList: function _CssRuleList() {
    },
    _DomRect: function _DomRect() {
    },
    _GamepadList: function _GamepadList() {
    },
    _NamedNodeMap: function _NamedNodeMap() {
    },
    _Report: function _Report() {
    },
    _SpeechRecognitionResultList: function _SpeechRecognitionResultList() {
    },
    _StyleSheetList: function _StyleSheetList() {
    },
    _AttributeMap: function _AttributeMap() {
    },
    _AttributeMap_addAll_closure: function _AttributeMap_addAll_closure(t0) {
      this.$this = t0;
    },
    _ElementAttributeMap: function _ElementAttributeMap(t0) {
      this._html$_element = t0;
    },
    _EventStream: function _EventStream(t0, t1, t2, t3) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _ElementEventStreamImpl: function _ElementEventStreamImpl(t0, t1, t2, t3) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._useCapture = t2;
      _.$ti = t3;
    },
    _EventStreamSubscription: function _EventStreamSubscription(t0, t1, t2, t3, t4) {
      var _ = this;
      _._html$_target = t0;
      _._eventType = t1;
      _._onData = t2;
      _._useCapture = t3;
      _.$ti = t4;
    },
    _EventStreamSubscription_closure: function _EventStreamSubscription_closure(t0) {
      this.onData = t0;
    },
    ImmutableListMixin: function ImmutableListMixin() {
    },
    FixedSizeListIterator: function FixedSizeListIterator(t0, t1, t2) {
      var _ = this;
      _._array = t0;
      _._length = t1;
      _._position = -1;
      _._current = null;
      _.$ti = t2;
    },
    _DOMWindowCrossFrame: function _DOMWindowCrossFrame() {
    },
    _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase: function _CssStyleDeclaration_Interceptor_CssStyleDeclarationBase() {
    },
    _DomRectList_Interceptor_ListMixin: function _DomRectList_Interceptor_ListMixin() {
    },
    _DomRectList_Interceptor_ListMixin_ImmutableListMixin: function _DomRectList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _DomStringList_Interceptor_ListMixin: function _DomStringList_Interceptor_ListMixin() {
    },
    _DomStringList_Interceptor_ListMixin_ImmutableListMixin: function _DomStringList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _FileList_Interceptor_ListMixin: function _FileList_Interceptor_ListMixin() {
    },
    _FileList_Interceptor_ListMixin_ImmutableListMixin: function _FileList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin: function _HtmlCollection_Interceptor_ListMixin() {
    },
    _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin: function _HtmlCollection_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _MidiInputMap_Interceptor_MapMixin: function _MidiInputMap_Interceptor_MapMixin() {
    },
    _MidiOutputMap_Interceptor_MapMixin: function _MidiOutputMap_Interceptor_MapMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin: function _MimeTypeArray_Interceptor_ListMixin() {
    },
    _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin: function _MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _NodeList_Interceptor_ListMixin: function _NodeList_Interceptor_ListMixin() {
    },
    _NodeList_Interceptor_ListMixin_ImmutableListMixin: function _NodeList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _PluginArray_Interceptor_ListMixin: function _PluginArray_Interceptor_ListMixin() {
    },
    _PluginArray_Interceptor_ListMixin_ImmutableListMixin: function _PluginArray_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _RtcStatsReport_Interceptor_MapMixin: function _RtcStatsReport_Interceptor_MapMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin: function _SourceBufferList_EventTarget_ListMixin() {
    },
    _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin: function _SourceBufferList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin: function _SpeechGrammarList_Interceptor_ListMixin() {
    },
    _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin: function _SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _Storage_Interceptor_MapMixin: function _Storage_Interceptor_MapMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin: function _TextTrackCueList_Interceptor_ListMixin() {
    },
    _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin: function _TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin: function _TextTrackList_EventTarget_ListMixin() {
    },
    _TextTrackList_EventTarget_ListMixin_ImmutableListMixin: function _TextTrackList_EventTarget_ListMixin_ImmutableListMixin() {
    },
    _TouchList_Interceptor_ListMixin: function _TouchList_Interceptor_ListMixin() {
    },
    _TouchList_Interceptor_ListMixin_ImmutableListMixin: function _TouchList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin: function __CssRuleList_Interceptor_ListMixin() {
    },
    __CssRuleList_Interceptor_ListMixin_ImmutableListMixin: function __CssRuleList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __GamepadList_Interceptor_ListMixin: function __GamepadList_Interceptor_ListMixin() {
    },
    __GamepadList_Interceptor_ListMixin_ImmutableListMixin: function __GamepadList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin: function __NamedNodeMap_Interceptor_ListMixin() {
    },
    __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin: function __NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin() {
    },
    __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin: function __SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin: function __StyleSheetList_Interceptor_ListMixin() {
    },
    __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin: function __StyleSheetList_Interceptor_ListMixin_ImmutableListMixin() {
    }
  },
  U = {DefaultEquality: function DefaultEquality(t0) {
      this.$ti = t0;
    }, IterableEquality: function IterableEquality(t0) {
      this.$ti = t0;
    },
    _$ReactDropDown: function(backingProps) {
      return U._$$ReactDropDownProps$(H.interceptedTypeCheck(backingProps, "$isMap"));
    },
    _$$ReactDropDownProps$: function(backingMap) {
      var t1 = new U._$$ReactDropDownProps(P.LinkedHashMap__makeEmpty(), null, null);
      t1.get$$$isClassGenerated();
      t1._ReactDropDown$_props = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    _$ReactDropDownProps: function _$ReactDropDownProps() {
    },
    _$ReactDropDownState: function _$ReactDropDownState() {
    },
    ReactDropDownComponent: function ReactDropDownComponent() {
    },
    ReactDropDownComponent_render_closure: function ReactDropDownComponent_render_closure(t0) {
      this.$this = t0;
    },
    ReactDropDownComponent_render_closure0: function ReactDropDownComponent_render_closure0(t0) {
      this.$this = t0;
    },
    ReactDropDownComponent_render_closure1: function ReactDropDownComponent_render_closure1(t0) {
      this.$this = t0;
    },
    ReactDropDownComponent_render__closure: function ReactDropDownComponent_render__closure(t0, t1) {
      this.$this = t0;
      this.value = t1;
    },
    closure6: function closure6() {
    },
    _$ReactDropDownPropsAccessorsMixin: function _$ReactDropDownPropsAccessorsMixin() {
    },
    ReactDropDownProps: function ReactDropDownProps() {
    },
    _$$ReactDropDownProps: function _$$ReactDropDownProps(t0, t1, t2) {
      var _ = this;
      _._ReactDropDown$_props = t0;
      _.getTitle = _.selectListener = _.values = _.value = null;
      _.UbiquitousDomPropsMixin__aria = t1;
      _.UbiquitousDomPropsMixin__dom = t2;
    },
    _$ReactDropDownStateAccessorsMixin: function _$ReactDropDownStateAccessorsMixin() {
    },
    ReactDropDownState: function ReactDropDownState() {
    },
    _$$ReactDropDownState: function _$$ReactDropDownState(t0) {
      this._ReactDropDown$_state = t0;
      this.width = this.isOpen = null;
    },
    _$ReactDropDownComponent: function _$ReactDropDownComponent(t0, t1, t2, t3, t4) {
      var _ = this;
      _._typedStateCache = t0;
      _._typedPropsCache = t1;
      _._react$_props = _._context = null;
      _._state = t2;
      _._jsThis = _._jsRedraw = null;
      _._setStateCallbacks = t3;
      _._transactionalSetStateCallbacks = t4;
      _.nextProps = _.prevState = _._nextState = _.nextContext = null;
    },
    _ReactDropDownProps__$ReactDropDownProps__$ReactDropDownPropsAccessorsMixin: function _ReactDropDownProps__$ReactDropDownProps__$ReactDropDownPropsAccessorsMixin() {
    },
    _ReactDropDownState__$ReactDropDownState__$ReactDropDownStateAccessorsMixin: function _ReactDropDownState__$ReactDropDownState__$ReactDropDownStateAccessorsMixin() {
    },
    __$$ReactDropDownProps__$ReactDropDownProps__$ReactDropDownPropsAccessorsMixin: function __$$ReactDropDownProps__$ReactDropDownProps__$ReactDropDownPropsAccessorsMixin() {
    },
    __$$ReactDropDownState__$ReactDropDownState__$ReactDropDownStateAccessorsMixin: function __$$ReactDropDownState__$ReactDropDownState__$ReactDropDownStateAccessorsMixin() {
    }
  },
  A = {
    DomProps$: function(componentFactory, props) {
      return new A.DomProps(componentFactory, props == null ? P.LinkedHashMap__makeEmpty() : props, null, null);
    },
    SvgProps$: function(componentFactory) {
      return new A.SvgProps(componentFactory, P.LinkedHashMap__makeEmpty(), null, null);
    },
    DomProps: function DomProps(t0, t1, t2, t3) {
      var _ = this;
      _.componentFactory = t0;
      _.props = t1;
      _.UbiquitousDomPropsMixin__aria = t2;
      _.UbiquitousDomPropsMixin__dom = t3;
    },
    SvgProps: function SvgProps(t0, t1, t2, t3) {
      var _ = this;
      _.componentFactory = t0;
      _.props = t1;
      _.UbiquitousDomPropsMixin__aria = t2;
      _.UbiquitousDomPropsMixin__dom = t3;
    },
    _DomProps_UiProps_DomPropsMixin: function _DomProps_UiProps_DomPropsMixin() {
    },
    _DomProps_UiProps_DomPropsMixin_GeneratedClass: function _DomProps_UiProps_DomPropsMixin_GeneratedClass() {
    },
    _SvgProps_UiProps_DomPropsMixin: function _SvgProps_UiProps_DomPropsMixin() {
    },
    _SvgProps_UiProps_DomPropsMixin_SvgPropsMixin: function _SvgProps_UiProps_DomPropsMixin_SvgPropsMixin() {
    },
    _SvgProps_UiProps_DomPropsMixin_SvgPropsMixin_GeneratedClass: function _SvgProps_UiProps_DomPropsMixin_SvgPropsMixin_GeneratedClass() {
    },
    listifyChildren: function(children) {
      var t1;
      if (H.boolConversionCheck(self.React.isValidElement(children)))
        return children;
      else {
        t1 = J.getInterceptor$(children);
        if (!!t1.$isIterable && !t1.$isList)
          return t1.toList$1$growable(children, false);
        else
          return children;
      }
    },
    ReactDartComponentFactoryProxy_generateExtendedJsProps: function(props, children, defaultProps) {
      var extendedProps, internal, interopProps, t1, ref;
      if (children == null)
        children = [];
      else if (!J.getInterceptor$(children).$isIterable)
        children = [children];
      extendedProps = defaultProps != null ? P.LinkedHashMap_LinkedHashMap$from(defaultProps, null, null) : P.LinkedHashMap__makeEmpty();
      extendedProps.addAll$1(0, props);
      extendedProps.$indexSet(0, "children", children);
      extendedProps.remove$1(0, "key");
      extendedProps.remove$1(0, "ref");
      internal = new K.ReactDartComponentInternal();
      internal.props = extendedProps;
      interopProps = {internal: internal};
      t1 = J.getInterceptor$x(props);
      if (H.boolConversionCheck(t1.containsKey$1(props, "key")))
        J.set$key$x(interopProps, t1.$index(props, "key"));
      if (H.boolConversionCheck(t1.containsKey$1(props, "ref"))) {
        ref = t1.$index(props, "ref");
        t1 = J.getInterceptor$x(interopProps);
        if (H.functionTypeTest(ref, {func: 1, args: [P.Null]}))
          t1.set$ref(interopProps, P.allowInterop(new A.ReactDartComponentFactoryProxy_generateExtendedJsProps_closure(ref), {func: 1, args: [K.ReactComponent]}));
        else
          t1.set$ref(interopProps, ref);
      }
      return interopProps;
    },
    _convertArgsToChildren: function(childrenArgs) {
      var t1 = childrenArgs.length;
      if (t1 === 0)
        return;
      else if (t1 === 1)
        return C.JSArray_methods.get$single(childrenArgs);
      else {
        K.markChildrenValidated(childrenArgs);
        return childrenArgs;
      }
    },
    _jsifyContext: function(context) {
      var interopContext = {};
      context.forEach$1(0, new A._jsifyContext_closure(interopContext));
      return interopContext;
    },
    _unjsifyContext: function(interopContext) {
      return P.LinkedHashMap_LinkedHashMap$fromIterable(self.Object.keys(interopContext), null, new A._unjsifyContext_closure(interopContext), P.String, null);
    },
    _registerComponent: function(componentFactory, skipMethods) {
      var componentInstance, jsConfig, t1, reactComponentClass;
      H.functionTypeCheck(componentFactory, {func: 1, ret: V.Component});
      H.assertSubtype(skipMethods, "$isIterable", [P.String], "$asIterable");
      componentInstance = componentFactory.call$0();
      componentInstance.toString;
      jsConfig = {childContextKeys: C.List_empty0, contextKeys: C.List_empty0};
      t1 = $.$get$_dartInteropStatics();
      t1 = self._createReactDartComponentClassConfig(t1, new K.ComponentStatics(componentFactory), jsConfig);
      J.set$displayName$x(t1, H.getRuntimeType(componentInstance).toString$0(0));
      reactComponentClass = self.React.createClass(t1);
      t1 = J.getInterceptor$x(reactComponentClass);
      t1.set$dartDefaultProps(reactComponentClass, H.ConstantMap_ConstantMap$from(componentInstance.getDefaultProps$0(), null, null));
      return new A.ReactDartComponentFactoryProxy(reactComponentClass, self.React.createFactory(reactComponentClass), t1.get$dartDefaultProps(reactComponentClass), [V.Component]);
    },
    _reactDom: function($name) {
      var t1 = new A.ReactDomComponentFactoryProxy($name, self.React.createFactory($name));
      if (H.boolConversionCheck($.$get$isBugPresent()))
        Z.patchName(t1);
      return t1;
    },
    _getValueFromDom: function(domElem) {
      var t1 = J.getInterceptor$x(domElem);
      if (t1.get$attributes(domElem).$index(0, "type") === "checkbox")
        return t1.get$checked(domElem);
      else
        return t1.get$value(domElem);
    },
    _convertBoundValues: function(args) {
      var t2, _s5_ = "value",
        _s7_ = "checked",
        _s8_ = "onChange",
        boundValue = args.$index(0, _s5_),
        t1 = J.getInterceptor$(boundValue);
      if (!!t1.$isList) {
        t2 = t1.$index(boundValue, 0);
        if (J.$eq$(args.$index(0, "type"), "checkbox")) {
          if (H.boolConversionCheck(H.boolTypeCheck(t2)))
            args.$indexSet(0, _s7_, true);
          else if (args.containsKey$1(0, _s7_))
            args.remove$1(0, _s7_);
        } else
          args.$indexSet(0, _s5_, t2);
        args.$indexSet(0, _s5_, t1.$index(boundValue, 0));
        args.$indexSet(0, _s8_, new A._convertBoundValues_closure(boundValue, args.$index(0, _s8_)));
      }
    },
    unconvertJsProps: function(instance) {
      var style,
        props = A._dartifyJsMap(J.get$props$x(instance), null, null);
      J.forEach$1$ax(J.get$keys$x($.$get$eventPropKeyToEventFactory()), new A.unconvertJsProps_closure(props));
      style = props.$index(0, "style");
      if (style != null)
        props.$indexSet(0, "style", A._dartifyJsMap(style, P.String, null));
      return props;
    },
    unconvertJsEventHandler: function(jsConvertedEventHandler) {
      if (jsConvertedEventHandler == null)
        return;
      return $.$get$_originalEventHandlers().$index(0, jsConvertedEventHandler);
    },
    _convertEventHandlers: function(args) {
      args.forEach$1(0, new A._convertEventHandlers_closure(args));
    },
    _dartifyJsMap: function(jsMap, $K, $V) {
      return P.LinkedHashMap_LinkedHashMap$fromIterable(self.Object.keys(jsMap), null, new A._dartifyJsMap_closure(jsMap, $V), $K, $V);
    },
    syntheticClipboardEventFactory: function(e) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      H.interceptedTypeCheck(e, "$isSyntheticClipboardEvent");
      t1 = J.getInterceptor$x(e);
      t2 = t1.get$bubbles(e);
      t3 = t1.get$cancelable(e);
      t1.get$currentTarget(e);
      t4 = t1.get$defaultPrevented(e);
      t5 = t1.get$eventPhase(e);
      t6 = t1.get$isTrusted(e);
      t1.get$nativeEvent(e);
      t7 = t1.get$target(e);
      t8 = t1.get$timeStamp(e);
      t9 = t1.get$type(e);
      t1.get$clipboardData(e);
      H.boolTypeCheck(t2);
      H.boolTypeCheck(t3);
      H.boolTypeCheck(t4);
      H.numTypeCheck(t5);
      H.boolTypeCheck(t6);
      H.numTypeCheck(t8);
      return new V.SyntheticClipboardEvent0(t7, H.stringTypeCheck(t9));
    },
    syntheticKeyboardEventFactory: function(e) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10;
      H.interceptedTypeCheck(e, "$isSyntheticKeyboardEvent");
      t1 = J.getInterceptor$x(e);
      t2 = t1.get$bubbles(e);
      t3 = t1.get$cancelable(e);
      t1.get$currentTarget(e);
      t4 = t1.get$defaultPrevented(e);
      t5 = t1.get$eventPhase(e);
      t6 = t1.get$isTrusted(e);
      t1.get$nativeEvent(e);
      t7 = t1.get$target(e);
      t8 = t1.get$timeStamp(e);
      t9 = t1.get$type(e);
      t1.get$altKey(e);
      t1.get$char(e);
      t1.get$charCode(e);
      t1.get$ctrlKey(e);
      t1.get$locale(e);
      t1.get$location(e);
      t10 = t1.get$key(e);
      t1.get$keyCode(e);
      t1.get$metaKey(e);
      t1.get$repeat(e);
      t1.get$shiftKey(e);
      H.boolTypeCheck(t2);
      H.boolTypeCheck(t3);
      H.boolTypeCheck(t4);
      H.numTypeCheck(t5);
      H.boolTypeCheck(t6);
      H.numTypeCheck(t8);
      return new V.SyntheticKeyboardEvent0(t10, t7, H.stringTypeCheck(t9));
    },
    syntheticFocusEventFactory: function(e) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      H.interceptedTypeCheck(e, "$isSyntheticFocusEvent");
      t1 = J.getInterceptor$x(e);
      t2 = t1.get$bubbles(e);
      t3 = t1.get$cancelable(e);
      t1.get$currentTarget(e);
      t4 = t1.get$defaultPrevented(e);
      t5 = t1.get$eventPhase(e);
      t6 = t1.get$isTrusted(e);
      t1.get$nativeEvent(e);
      t7 = t1.get$target(e);
      t8 = t1.get$timeStamp(e);
      t9 = t1.get$type(e);
      t1.get$relatedTarget(e);
      H.boolTypeCheck(t2);
      H.boolTypeCheck(t3);
      H.boolTypeCheck(t4);
      H.numTypeCheck(t5);
      H.boolTypeCheck(t6);
      H.numTypeCheck(t8);
      return new V.SyntheticFocusEvent0(t7, H.stringTypeCheck(t9));
    },
    syntheticFormEventFactory: function(e) {
      var t1, t2, t3, t4, t5, t6, t7, t8;
      H.interceptedTypeCheck(e, "$isSyntheticFormEvent");
      t1 = J.getInterceptor$x(e);
      t2 = t1.get$bubbles(e);
      t3 = t1.get$cancelable(e);
      t1.get$currentTarget(e);
      t4 = t1.get$defaultPrevented(e);
      t5 = t1.get$eventPhase(e);
      t6 = t1.get$isTrusted(e);
      t1.get$nativeEvent(e);
      t7 = t1.get$target(e);
      t8 = t1.get$timeStamp(e);
      t1 = t1.get$type(e);
      H.boolTypeCheck(t2);
      H.boolTypeCheck(t3);
      H.boolTypeCheck(t4);
      H.numTypeCheck(t5);
      H.boolTypeCheck(t6);
      H.numTypeCheck(t8);
      return new V.SyntheticFormEvent0(t7, H.stringTypeCheck(t1));
    },
    syntheticDataTransferFactory: function(dt) {
      var effectAllowed, dropEffect, castedDt, rawFiles, rawTypes, exception, files, types;
      if (dt == null)
        return;
      effectAllowed = null;
      dropEffect = null;
      if (!!J.getInterceptor$(dt).$isDataTransfer) {
        rawFiles = dt.files;
        rawTypes = dt.types;
        try {
          effectAllowed = dt.effectAllowed;
        } catch (exception) {
          H.unwrapException(exception);
          effectAllowed = "uninitialized";
        }
        try {
          dropEffect = dt.dropEffect;
        } catch (exception) {
          H.unwrapException(exception);
          dropEffect = "none";
        }
      } else {
        castedDt = H.interceptedTypeCast(dt, "$isNonNativeDataTransfer");
        rawFiles = J.get$files$x(castedDt);
        rawTypes = J.get$types$x(castedDt);
        try {
          effectAllowed = J.get$effectAllowed$x(castedDt);
        } catch (exception) {
          H.unwrapException(exception);
          effectAllowed = "uninitialized";
        }
        try {
          dropEffect = J.get$dropEffect$x(castedDt);
        } catch (exception) {
          H.unwrapException(exception);
          dropEffect = "none";
        }
      }
      files = H.setRuntimeTypeInfo([], [W.File]);
      types = H.setRuntimeTypeInfo([], [P.String]);
      if (rawFiles != null)
        J.forEach$1$ax(rawFiles, H.functionTypeCheck(C.JSArray_methods.get$add(files), {func: 1, ret: -1, args: [,]}));
      if (rawTypes != null)
        J.forEach$1$ax(rawTypes, H.functionTypeCheck(C.JSArray_methods.get$add(types), {func: 1, ret: -1, args: [,]}));
      return new V.SyntheticDataTransfer(files);
    },
    syntheticMouseEventFactory: function(e) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      H.interceptedTypeCheck(e, "$isSyntheticMouseEvent0");
      t1 = J.getInterceptor$x(e);
      A.syntheticDataTransferFactory(t1.get$dataTransfer(e));
      t2 = t1.get$bubbles(e);
      t3 = t1.get$cancelable(e);
      t1.get$currentTarget(e);
      t4 = t1.get$defaultPrevented(e);
      t5 = t1.get$eventPhase(e);
      t6 = t1.get$isTrusted(e);
      t1.get$nativeEvent(e);
      t7 = t1.get$target(e);
      t8 = t1.get$timeStamp(e);
      t9 = t1.get$type(e);
      t1.get$altKey(e);
      t1.get$button(e);
      t1.get$buttons(e);
      t1.get$clientX(e);
      t1.get$clientY(e);
      t1.get$ctrlKey(e);
      t1.get$metaKey(e);
      t1.get$pageX(e);
      t1.get$pageY(e);
      t1.get$relatedTarget(e);
      t1.get$screenX(e);
      t1.get$screenY(e);
      t1.get$shiftKey(e);
      H.boolTypeCheck(t2);
      H.boolTypeCheck(t3);
      H.boolTypeCheck(t4);
      H.numTypeCheck(t5);
      H.boolTypeCheck(t6);
      H.numTypeCheck(t8);
      return new V.SyntheticMouseEvent(t7, H.stringTypeCheck(t9));
    },
    syntheticTouchEventFactory: function(e) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      H.interceptedTypeCheck(e, "$isSyntheticTouchEvent");
      t1 = J.getInterceptor$x(e);
      t2 = t1.get$bubbles(e);
      t3 = t1.get$cancelable(e);
      t1.get$currentTarget(e);
      t4 = t1.get$defaultPrevented(e);
      t5 = t1.get$eventPhase(e);
      t6 = t1.get$isTrusted(e);
      t1.get$nativeEvent(e);
      t7 = t1.get$target(e);
      t8 = t1.get$timeStamp(e);
      t9 = t1.get$type(e);
      t1.get$altKey(e);
      t1.get$changedTouches(e);
      t1.get$ctrlKey(e);
      t1.get$metaKey(e);
      t1.get$shiftKey(e);
      t1.get$targetTouches(e);
      t1.get$touches(e);
      H.boolTypeCheck(t2);
      H.boolTypeCheck(t3);
      H.boolTypeCheck(t4);
      H.numTypeCheck(t5);
      H.boolTypeCheck(t6);
      H.numTypeCheck(t8);
      return new V.SyntheticTouchEvent0(t7, H.stringTypeCheck(t9));
    },
    syntheticTransitionEventFactory: function(e) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      H.interceptedTypeCheck(e, "$isSyntheticTransitionEvent");
      t1 = J.getInterceptor$x(e);
      t2 = t1.get$bubbles(e);
      t3 = t1.get$cancelable(e);
      t1.get$currentTarget(e);
      t4 = t1.get$defaultPrevented(e);
      t5 = t1.get$eventPhase(e);
      t6 = t1.get$isTrusted(e);
      t1.get$nativeEvent(e);
      t7 = t1.get$target(e);
      t8 = t1.get$timeStamp(e);
      t9 = t1.get$type(e);
      t1.get$propertyName(e);
      t1.get$elapsedTime(e);
      t1.get$pseudoElement(e);
      H.boolTypeCheck(t2);
      H.boolTypeCheck(t3);
      H.boolTypeCheck(t4);
      H.numTypeCheck(t5);
      H.boolTypeCheck(t6);
      H.numTypeCheck(t8);
      return new V.SyntheticTransitionEvent0(t7, H.stringTypeCheck(t9));
    },
    syntheticAnimationEventFactory: function(e) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      H.interceptedTypeCheck(e, "$isSyntheticAnimationEvent");
      t1 = J.getInterceptor$x(e);
      t2 = t1.get$bubbles(e);
      t3 = t1.get$cancelable(e);
      t1.get$currentTarget(e);
      t4 = t1.get$defaultPrevented(e);
      t5 = t1.get$eventPhase(e);
      t6 = t1.get$isTrusted(e);
      t1.get$nativeEvent(e);
      t7 = t1.get$target(e);
      t8 = t1.get$timeStamp(e);
      t9 = t1.get$type(e);
      t1.get$animationName(e);
      t1.get$elapsedTime(e);
      t1.get$pseudoElement(e);
      H.boolTypeCheck(t2);
      H.boolTypeCheck(t3);
      H.boolTypeCheck(t4);
      H.numTypeCheck(t5);
      H.boolTypeCheck(t6);
      H.numTypeCheck(t8);
      return new V.SyntheticAnimationEvent0(t7, H.stringTypeCheck(t9));
    },
    syntheticUIEventFactory: function(e) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      H.interceptedTypeCheck(e, "$isSyntheticUIEvent0");
      t1 = J.getInterceptor$x(e);
      t2 = t1.get$bubbles(e);
      t3 = t1.get$cancelable(e);
      t1.get$currentTarget(e);
      t4 = t1.get$defaultPrevented(e);
      t5 = t1.get$eventPhase(e);
      t6 = t1.get$isTrusted(e);
      t1.get$nativeEvent(e);
      t7 = t1.get$target(e);
      t8 = t1.get$timeStamp(e);
      t9 = t1.get$type(e);
      t1.get$detail(e);
      t1.get$view(e);
      H.boolTypeCheck(t2);
      H.boolTypeCheck(t3);
      H.boolTypeCheck(t4);
      H.numTypeCheck(t5);
      H.boolTypeCheck(t6);
      H.numTypeCheck(t8);
      return new V.SyntheticUIEvent(t7, H.stringTypeCheck(t9));
    },
    syntheticWheelEventFactory: function(e) {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9;
      H.interceptedTypeCheck(e, "$isSyntheticWheelEvent");
      t1 = J.getInterceptor$x(e);
      t2 = t1.get$bubbles(e);
      t3 = t1.get$cancelable(e);
      t1.get$currentTarget(e);
      t4 = t1.get$defaultPrevented(e);
      t5 = t1.get$eventPhase(e);
      t6 = t1.get$isTrusted(e);
      t1.get$nativeEvent(e);
      t7 = t1.get$target(e);
      t8 = t1.get$timeStamp(e);
      t9 = t1.get$type(e);
      t1.get$deltaX(e);
      t1.get$deltaMode(e);
      t1.get$deltaY(e);
      t1.get$deltaZ(e);
      H.boolTypeCheck(t2);
      H.boolTypeCheck(t3);
      H.boolTypeCheck(t4);
      H.numTypeCheck(t5);
      H.boolTypeCheck(t6);
      H.numTypeCheck(t8);
      return new V.SyntheticWheelEvent0(t7, H.stringTypeCheck(t9));
    },
    _findDomNode: function(component) {
      var t1 = component._jsThis;
      return self.ReactDOM.findDOMNode(t1);
    },
    setClientConfiguration: function() {
      var exception, t1;
      try {
        self.React.isValidElement(null);
        self.ReactDOM.findDOMNode(null);
        self._createReactDartComponentClassConfig(null, null);
      } catch (exception) {
        if (!!J.getInterceptor$(H.unwrapException(exception)).$isNoSuchMethodError)
          throw H.wrapException(P.Exception_Exception("react.js and react_dom.js must be loaded."));
        else {
          t1 = P.Exception_Exception("Loaded react.js must include react-dart JS interop helpers.");
          throw H.wrapException(t1);
        }
      }
      $.registerComponent0 = A.react_client___registerComponent$closure();
      A._reactDom("a");
      A._reactDom("abbr");
      A._reactDom("address");
      A._reactDom("area");
      A._reactDom("article");
      A._reactDom("aside");
      A._reactDom("audio");
      A._reactDom("b");
      A._reactDom("base");
      A._reactDom("bdi");
      A._reactDom("bdo");
      A._reactDom("big");
      A._reactDom("blockquote");
      A._reactDom("body");
      A._reactDom("br");
      A._reactDom("button");
      A._reactDom("canvas");
      A._reactDom("caption");
      A._reactDom("cite");
      A._reactDom("code");
      A._reactDom("col");
      A._reactDom("colgroup");
      A._reactDom("data");
      A._reactDom("datalist");
      A._reactDom("dd");
      A._reactDom("del");
      A._reactDom("details");
      A._reactDom("dfn");
      A._reactDom("dialog");
      $.div = A._reactDom("div");
      A._reactDom("dl");
      A._reactDom("dt");
      A._reactDom("em");
      A._reactDom("embed");
      A._reactDom("fieldset");
      A._reactDom("figcaption");
      A._reactDom("figure");
      A._reactDom("footer");
      A._reactDom("form");
      A._reactDom("h1");
      A._reactDom("h2");
      A._reactDom("h3");
      A._reactDom("h4");
      A._reactDom("h5");
      A._reactDom("h6");
      A._reactDom("head");
      A._reactDom("header");
      A._reactDom("hr");
      A._reactDom("html");
      A._reactDom("i");
      A._reactDom("iframe");
      A._reactDom("img");
      $.input = A._reactDom("input");
      A._reactDom("ins");
      A._reactDom("kbd");
      A._reactDom("keygen");
      $.label = A._reactDom("label");
      A._reactDom("legend");
      A._reactDom("li");
      A._reactDom("link");
      A._reactDom("main");
      A._reactDom("map");
      A._reactDom("mark");
      A._reactDom("menu");
      A._reactDom("menuitem");
      A._reactDom("meta");
      A._reactDom("meter");
      A._reactDom("nav");
      A._reactDom("noscript");
      A._reactDom("object");
      A._reactDom("ol");
      A._reactDom("optgroup");
      A._reactDom("option");
      A._reactDom("output");
      A._reactDom("p");
      A._reactDom("param");
      A._reactDom("picture");
      A._reactDom("pre");
      A._reactDom("progress");
      A._reactDom("q");
      A._reactDom("rp");
      A._reactDom("rt");
      A._reactDom("ruby");
      A._reactDom("s");
      A._reactDom("samp");
      A._reactDom("script");
      A._reactDom("section");
      A._reactDom("select");
      A._reactDom("small");
      A._reactDom("source");
      A._reactDom("span");
      A._reactDom("strong");
      A._reactDom("style");
      A._reactDom("sub");
      A._reactDom("summary");
      A._reactDom("sup");
      A._reactDom("table");
      A._reactDom("tbody");
      A._reactDom("td");
      A._reactDom("textarea");
      A._reactDom("tfoot");
      A._reactDom("th");
      A._reactDom("thead");
      A._reactDom("time");
      A._reactDom("title");
      A._reactDom("tr");
      A._reactDom("track");
      A._reactDom("u");
      A._reactDom("ul");
      A._reactDom("var");
      A._reactDom("video");
      A._reactDom("wbr");
      A._reactDom("altGlyph");
      A._reactDom("altGlyphDef");
      A._reactDom("altGlyphItem");
      A._reactDom("animate");
      A._reactDom("animateColor");
      A._reactDom("animateMotion");
      A._reactDom("animateTransform");
      A._reactDom("circle");
      A._reactDom("clipPath");
      A._reactDom("color-profile");
      A._reactDom("cursor");
      A._reactDom("defs");
      A._reactDom("desc");
      A._reactDom("discard");
      A._reactDom("ellipse");
      A._reactDom("feBlend");
      A._reactDom("feColorMatrix");
      A._reactDom("feComponentTransfer");
      A._reactDom("feComposite");
      A._reactDom("feConvolveMatrix");
      A._reactDom("feDiffuseLighting");
      A._reactDom("feDisplacementMap");
      A._reactDom("feDistantLight");
      A._reactDom("feDropShadow");
      A._reactDom("feFlood");
      A._reactDom("feFuncA");
      A._reactDom("feFuncB");
      A._reactDom("feFuncG");
      A._reactDom("feFuncR");
      A._reactDom("feGaussianBlur");
      A._reactDom("feImage");
      A._reactDom("feMerge");
      A._reactDom("feMergeNode");
      A._reactDom("feMorphology");
      A._reactDom("feOffset");
      A._reactDom("fePointLight");
      A._reactDom("feSpecularLighting");
      A._reactDom("feSpotLight");
      A._reactDom("feTile");
      A._reactDom("feTurbulence");
      A._reactDom("filter");
      A._reactDom("font");
      A._reactDom("font-face");
      A._reactDom("font-face-format");
      A._reactDom("font-face-name");
      A._reactDom("font-face-src");
      A._reactDom("font-face-uri");
      A._reactDom("foreignObject");
      $.g = A._reactDom("g");
      A._reactDom("glyph");
      A._reactDom("glyphRef");
      A._reactDom("hatch");
      A._reactDom("hatchpath");
      A._reactDom("hkern");
      A._reactDom("image");
      A._reactDom("line");
      A._reactDom("linearGradient");
      A._reactDom("marker");
      A._reactDom("mask");
      A._reactDom("mesh");
      A._reactDom("meshgradient");
      A._reactDom("meshpatch");
      A._reactDom("meshrow");
      A._reactDom("metadata");
      A._reactDom("missing-glyph");
      A._reactDom("mpath");
      A._reactDom("path");
      A._reactDom("pattern");
      $.polygon = A._reactDom("polygon");
      $.polyline = A._reactDom("polyline");
      A._reactDom("radialGradient");
      A._reactDom("rect");
      A._reactDom("set");
      A._reactDom("solidcolor");
      A._reactDom("stop");
      $.svg = A._reactDom("svg");
      A._reactDom("switch");
      A._reactDom("symbol");
      A._reactDom("text");
      A._reactDom("textPath");
      A._reactDom("tref");
      A._reactDom("tspan");
      A._reactDom("unknown");
      A._reactDom("use");
      A._reactDom("view");
      A._reactDom("vkern");
      $.render = K.react_interop_ReactDom_render$closure();
      $.findDOMNode = A.react_client___findDomNode$closure();
      $.$get$context().$index(0, "ReactDOMServer");
    },
    ReactDartComponentFactoryProxy: function ReactDartComponentFactoryProxy(t0, t1, t2, t3) {
      var _ = this;
      _.reactClass = t0;
      _.reactComponentFactory = t1;
      _.defaultProps = t2;
      _.$ti = t3;
    },
    ReactDartComponentFactoryProxy_generateExtendedJsProps_closure: function ReactDartComponentFactoryProxy_generateExtendedJsProps_closure(t0) {
      this.ref = t0;
    },
    _jsifyContext_closure: function _jsifyContext_closure(t0) {
      this.interopContext = t0;
    },
    _unjsifyContext_closure: function _unjsifyContext_closure(t0) {
      this.interopContext = t0;
    },
    closure2: function closure2() {
    },
    closure_initComponent: function closure_initComponent(t0) {
      this.zone = t0;
    },
    _initComponent_closure: function _initComponent_closure(t0, t1, t2, t3) {
      var _ = this;
      _.jsThis = t0;
      _.componentStatics = t1;
      _.internal = t2;
      _.context = t3;
    },
    _initComponent_closure_jsRedraw: function _initComponent_closure_jsRedraw(t0) {
      this.jsThis = t0;
    },
    _initComponent__closure: function _initComponent__closure(t0) {
      this.jsThis = t0;
    },
    closure_handleGetChildContext: function closure_handleGetChildContext(t0) {
      this.zone = t0;
    },
    _handleGetChildContext_closure: function _handleGetChildContext_closure(t0) {
      this.component = t0;
    },
    closure_handleComponentWillMount: function closure_handleComponentWillMount(t0) {
      this.zone = t0;
    },
    _handleComponentWillMount_closure: function _handleComponentWillMount_closure(t0) {
      this.component = t0;
    },
    closure_handleComponentDidMount: function closure_handleComponentDidMount(t0) {
      this.zone = t0;
    },
    _handleComponentDidMount_closure: function _handleComponentDidMount_closure(t0) {
      this.component = t0;
    },
    closure__getNextProps: function closure__getNextProps() {
    },
    closure__afterPropsChange: function closure__afterPropsChange() {
    },
    closure__clearPrevState: function closure__clearPrevState() {
    },
    closure__callSetStateCallbacks: function closure__callSetStateCallbacks() {
    },
    __callSetStateCallbacks_closure: function __callSetStateCallbacks_closure() {
    },
    closure__callSetStateTransactionalCallbacks: function closure__callSetStateTransactionalCallbacks() {
    },
    __callSetStateTransactionalCallbacks_closure: function __callSetStateTransactionalCallbacks_closure(t0, t1) {
      this.nextState = t0;
      this.props = t1;
    },
    closure_handleComponentWillReceiveProps: function closure_handleComponentWillReceiveProps(t0, t1) {
      this.zone = t0;
      this._getNextProps = t1;
    },
    _handleComponentWillReceiveProps_closure: function _handleComponentWillReceiveProps_closure(t0, t1, t2, t3) {
      var _ = this;
      _._getNextProps = t0;
      _.component = t1;
      _.nextInternal = t2;
      _.nextContext = t3;
    },
    closure_handleShouldComponentUpdate: function closure_handleShouldComponentUpdate(t0, t1, t2, t3, t4) {
      var _ = this;
      _.zone = t0;
      _._callSetStateTransactionalCallbacks = t1;
      _._afterPropsChange = t2;
      _._callSetStateCallbacks = t3;
      _._clearPrevState = t4;
    },
    _handleShouldComponentUpdate_closure: function _handleShouldComponentUpdate_closure(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._callSetStateTransactionalCallbacks = t0;
      _.component = t1;
      _._afterPropsChange = t2;
      _.nextContext = t3;
      _._callSetStateCallbacks = t4;
      _._clearPrevState = t5;
    },
    closure_handleComponentWillUpdate: function closure_handleComponentWillUpdate(t0, t1) {
      this.zone = t0;
      this._afterPropsChange = t1;
    },
    _handleComponentWillUpdate_closure: function _handleComponentWillUpdate_closure(t0, t1, t2) {
      this.component = t0;
      this._afterPropsChange = t1;
      this.nextContext = t2;
    },
    closure_handleComponentDidUpdate: function closure_handleComponentDidUpdate(t0, t1, t2) {
      this.zone = t0;
      this._callSetStateCallbacks = t1;
      this._clearPrevState = t2;
    },
    _handleComponentDidUpdate_closure: function _handleComponentDidUpdate_closure(t0, t1, t2, t3) {
      var _ = this;
      _.prevInternal = t0;
      _.component = t1;
      _._callSetStateCallbacks = t2;
      _._clearPrevState = t3;
    },
    closure_handleComponentWillUnmount: function closure_handleComponentWillUnmount(t0) {
      this.zone = t0;
    },
    _handleComponentWillUnmount_closure: function _handleComponentWillUnmount_closure(t0) {
      this.component = t0;
    },
    closure_handleRender: function closure_handleRender(t0) {
      this.zone = t0;
    },
    _handleRender_closure: function _handleRender_closure(t0) {
      this.component = t0;
    },
    ReactDomComponentFactoryProxy: function ReactDomComponentFactoryProxy(t0, t1) {
      this.name = t0;
      this.factory = t1;
    },
    _convertBoundValues_closure: function _convertBoundValues_closure(t0, t1) {
      this.boundValue = t0;
      this.onChange = t1;
    },
    unconvertJsProps_closure: function unconvertJsProps_closure(t0) {
      this.props = t0;
    },
    _convertEventHandlers_closure: function _convertEventHandlers_closure(t0) {
      this.args = t0;
    },
    _convertEventHandlers__closure: function _convertEventHandlers__closure(t0, t1) {
      this.value = t0;
      this.eventFactory = t1;
    },
    _dartifyJsMap_closure: function _dartifyJsMap_closure(t0, t1) {
      this.jsMap = t0;
      this.V = t1;
    },
    hashObjects: function(objects) {
      var hash,
        t1 = C.NativeFloat32List_methods.fold$1$2(objects, 0, new A.hashObjects_closure(), P.int);
      if (typeof t1 !== "number")
        return H.iae(t1);
      hash = 536870911 & t1 + ((67108863 & t1) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    hashObjects_closure: function hashObjects_closure() {
    }
  },
  Q = {ReactPropsMixin: function ReactPropsMixin() {
    }, DomPropsMixin: function DomPropsMixin() {
    }, SvgPropsMixin: function SvgPropsMixin() {
    }, UbiquitousDomPropsMixin: function UbiquitousDomPropsMixin() {
    }, SyntheticEvent0: function SyntheticEvent0() {
    }, SyntheticClipboardEvent: function SyntheticClipboardEvent() {
    }, SyntheticKeyboardEvent: function SyntheticKeyboardEvent() {
    }, SyntheticFocusEvent: function SyntheticFocusEvent() {
    }, SyntheticFormEvent: function SyntheticFormEvent() {
    }, NonNativeDataTransfer: function NonNativeDataTransfer() {
    }, SyntheticMouseEvent0: function SyntheticMouseEvent0() {
    }, SyntheticTouchEvent: function SyntheticTouchEvent() {
    }, SyntheticTransitionEvent: function SyntheticTransitionEvent() {
    }, SyntheticAnimationEvent: function SyntheticAnimationEvent() {
    }, SyntheticUIEvent0: function SyntheticUIEvent0() {
    }, SyntheticWheelEvent: function SyntheticWheelEvent() {
    },
    ReactPathsComponent_renderPathHighlight: function(highlight, size, wrap) {
      var t1 = B.ReactArrow___$ReactArrow$closure().call$0(),
        t2 = J.getInterceptor$z(t1);
      t2.set$className(t1, "pathHighlight highlight_" + H.S(highlight.style));
      t2.set$key(t1, H.Primitives_objectHashCode(highlight));
      t2.set$size(t1, size);
      t1.set$showStart(highlight.showStart);
      t1.set$showEnd(highlight.showEnd);
      t1.set$startIntermediate(highlight.startIntermediate);
      t1.set$endIntermediate(highlight.endIntermediate);
      t2.set$path(t1, highlight.path);
      t2.set$wrap(t1, wrap);
      return t1.call$0();
    },
    _$ReactPaths: function(backingProps) {
      return Q._$$ReactPathsProps$(H.interceptedTypeCheck(backingProps, "$isMap"));
    },
    _$$ReactPathsProps$: function(backingMap) {
      var t1 = new Q._$$ReactPathsProps(P.LinkedHashMap__makeEmpty(), null, null);
      t1.get$$$isClassGenerated();
      t1._ReactPaths$_props = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    _$ReactPathsProps: function _$ReactPathsProps() {
    },
    ReactPathsComponent: function ReactPathsComponent() {
    },
    ReactPathsComponent_pathHighlights_closure: function ReactPathsComponent_pathHighlights_closure() {
    },
    ReactPathsComponent_componentWillMount_closure: function ReactPathsComponent_componentWillMount_closure(t0) {
      this.$this = t0;
    },
    ReactPathsComponent_render_closure: function ReactPathsComponent_render_closure(t0) {
      this.$this = t0;
    },
    closure14: function closure14() {
    },
    _$ReactPathsPropsAccessorsMixin: function _$ReactPathsPropsAccessorsMixin() {
    },
    ReactPathsProps: function ReactPathsProps() {
    },
    _$$ReactPathsProps: function _$$ReactPathsProps(t0, t1, t2) {
      var _ = this;
      _._ReactPaths$_props = t0;
      _.store = null;
      _.UbiquitousDomPropsMixin__aria = t1;
      _.UbiquitousDomPropsMixin__dom = t2;
    },
    _$ReactPathsComponent: function _$ReactPathsComponent(t0, t1, t2, t3) {
      var _ = this;
      _.listener = null;
      _._typedPropsCache = t0;
      _._react$_props = _._context = null;
      _._state = t1;
      _._jsThis = _._jsRedraw = null;
      _._setStateCallbacks = t2;
      _._transactionalSetStateCallbacks = t3;
      _.nextProps = _.prevState = _._nextState = _.nextContext = null;
    },
    _ReactPathsProps__$ReactPathsProps__$ReactPathsPropsAccessorsMixin: function _ReactPathsProps__$ReactPathsProps__$ReactPathsPropsAccessorsMixin() {
    },
    __$$ReactPathsProps__$ReactPathsProps__$ReactPathsPropsAccessorsMixin: function __$$ReactPathsProps__$ReactPathsProps__$ReactPathsPropsAccessorsMixin() {
    },
    Store$: function() {
      var t1 = P.String;
      t1 = new Q.Store(new H.JsLinkedHashMap([t1, null]), new H.JsLinkedHashMap([t1, [P.List, {func: 1, ret: -1}]]), new H.JsLinkedHashMap([{func: 1, ret: -1, args: [[P.Iterable, P.String]]}, [P.List, P.String]]), new T.StoreTransferAble_closure(), P.LinkedHashSet_LinkedHashSet(t1), P.LinkedHashSet_LinkedHashSet(t1));
      t1.Store$0();
      return t1;
    },
    Store: function Store(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _._gridManager = _._gridCache = _._gridBarrierManager = null;
      _._StoreTransferAble$_store = t0;
      _._equalListeners = t1;
      _._startsWithListener = t2;
      _.transferListener = t3;
      _.autoTriggerTransferListener = _.autoTriggerListeners = true;
      _.changes = t4;
      _.changesToTransfer = t5;
    },
    Store_closure: function Store_closure(t0) {
      this.$this = t0;
    },
    Store_getBarrier_closure: function Store_getBarrier_closure() {
    },
    Store_currentStepDescription_closure: function Store_currentStepDescription_closure() {
    },
    Store_currentStepDescription_closure0: function Store_currentStepDescription_closure0() {
    },
    Store_getCurrentStepHighlights_closure: function Store_getCurrentStepHighlights_closure() {
    }
  },
  S = {
    _$ResizeSensor: function(backingProps) {
      return S._$$ResizeSensorProps$(H.interceptedTypeCheck(backingProps, "$isMap"));
    },
    _$$ResizeSensorProps$: function(backingMap) {
      var t1 = new S._$$ResizeSensorProps(P.LinkedHashMap__makeEmpty(), null, null);
      t1.get$$$isClassGenerated();
      t1._resize_sensor$_props = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    _$ResizeSensorProps: function _$ResizeSensorProps() {
    },
    ResizeSensorComponent: function ResizeSensorComponent() {
    },
    ResizeSensorComponent_componentDidMount_closure: function ResizeSensorComponent_componentDidMount_closure(t0) {
      this.$this = t0;
    },
    ResizeSensorComponent_render_closure: function ResizeSensorComponent_render_closure(t0) {
      this.$this = t0;
    },
    ResizeSensorComponent_render_closure0: function ResizeSensorComponent_render_closure0(t0) {
      this.$this = t0;
    },
    closure8: function closure8() {
    },
    ResizeSensorEvent: function ResizeSensorEvent(t0) {
      this.newWidth = t0;
    },
    ResizeSensorPropsMixinMapView: function ResizeSensorPropsMixinMapView(t0) {
      this._collection$_map = t0;
    },
    _SafeAnimationFrameMixin: function _SafeAnimationFrameMixin() {
    },
    _SafeAnimationFrameMixin_requestAnimationFrame_closure: function _SafeAnimationFrameMixin_requestAnimationFrame_closure(t0, t1, t2) {
      this._box_0 = t0;
      this.$this = t1;
      this.callback = t2;
    },
    closure7: function closure7() {
    },
    _$ResizeSensorPropsAccessorsMixin: function _$ResizeSensorPropsAccessorsMixin() {
    },
    ResizeSensorProps: function ResizeSensorProps() {
    },
    _$$ResizeSensorProps: function _$$ResizeSensorProps(t0, t1, t2) {
      this._resize_sensor$_props = t0;
      this.UbiquitousDomPropsMixin__aria = t1;
      this.UbiquitousDomPropsMixin__dom = t2;
    },
    _$ResizeSensorComponent: function _$ResizeSensorComponent(t0, t1, t2, t3, t4) {
      var _ = this;
      _._collapseSensorRef = _._expandSensorRef = null;
      _._lastWidth = _._lastHeight = _._scrollEventsToIgnore = 0;
      _._SafeAnimationFrameMixin__animationFrameIds = t0;
      _._typedPropsCache = t1;
      _._react$_props = _._context = null;
      _._state = t2;
      _._jsThis = _._jsRedraw = null;
      _._setStateCallbacks = t3;
      _._transactionalSetStateCallbacks = t4;
      _.nextProps = _.prevState = _._nextState = _.nextContext = null;
    },
    ResizeSensorPropsMixin: function ResizeSensorPropsMixin() {
    },
    _ResizeSensorComponent_UiComponent__SafeAnimationFrameMixin: function _ResizeSensorComponent_UiComponent__SafeAnimationFrameMixin() {
    },
    _ResizeSensorProps__$ResizeSensorProps__$ResizeSensorPropsAccessorsMixin: function _ResizeSensorProps__$ResizeSensorProps__$ResizeSensorPropsAccessorsMixin() {
    },
    _ResizeSensorPropsMixinMapView_MapView_ResizeSensorPropsMixin: function _ResizeSensorPropsMixinMapView_MapView_ResizeSensorPropsMixin() {
    },
    __$$ResizeSensorProps__$ResizeSensorProps__$ResizeSensorPropsAccessorsMixin: function __$$ResizeSensorProps__$ResizeSensorProps__$ResizeSensorPropsAccessorsMixin() {
    },
    __$ResizeSensorProps_UiProps_ResizeSensorPropsMixin: function __$ResizeSensorProps_UiProps_ResizeSensorPropsMixin() {
    },
    registerComponent: function(dartComponentFactory, builderFactory, componentClass, displayName, isWrapper, parentType) {
      var reactComponentFactory = H.assertSubtype($.$get$registerComponent().call$1(dartComponentFactory), "$isReactDartComponentFactoryProxy", [V.Component], "$asReactDartComponentFactoryProxy"),
        t1 = reactComponentFactory.reactClass;
      J.set$displayName$x(t1, displayName);
      $.$get$_typeAliasToFactory().$indexSet(0, builderFactory, reactComponentFactory);
      $.$get$_typeAliasToFactory().$indexSet(0, componentClass, reactComponentFactory);
      t1._componentTypeMeta = new B.ComponentTypeMeta(false);
      return reactComponentFactory;
    },
    UiComponent: function UiComponent() {
    },
    UiComponent_copyUnconsumedDomProps_closure: function UiComponent_copyUnconsumedDomProps_closure() {
    },
    UiComponent_validateRequiredProps_closure: function UiComponent_validateRequiredProps_closure(t0) {
      this.appliedProps = t0;
    },
    UiComponent_validateRequiredProps__closure: function UiComponent_validateRequiredProps__closure(t0) {
      this.appliedProps = t0;
    },
    UiStatefulComponent: function UiStatefulComponent() {
    },
    _WarnOnModify: function _WarnOnModify(t0, t1, t2) {
      var _ = this;
      _.isProps = t0;
      _.message = null;
      _._collection$_map = t1;
      _.$ti = t2;
    },
    UiState0: function UiState0() {
    },
    UiProps0: function UiProps0() {
    },
    UiProps_call_closure: function UiProps_call_closure() {
    },
    PropsMapViewMixin: function PropsMapViewMixin() {
    },
    StateMapViewMixin: function StateMapViewMixin() {
    },
    MapViewMixin: function MapViewMixin() {
    },
    PropDescriptor: function PropDescriptor(t0) {
      this.key = t0;
    },
    ConsumedProps: function ConsumedProps() {
    },
    PropsMeta: function PropsMeta(t0, t1) {
      this.fields = t0;
      this.keys = t1;
    },
    _UiProps_MapBase_MapViewMixin: function _UiProps_MapBase_MapViewMixin() {
    },
    _UiProps_MapBase_MapViewMixin_PropsMapViewMixin: function _UiProps_MapBase_MapViewMixin_PropsMapViewMixin() {
    },
    _UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin: function _UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin() {
    },
    _UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin_UbiquitousDomPropsMixin: function _UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin_UbiquitousDomPropsMixin() {
    },
    _UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin_UbiquitousDomPropsMixin_CssClassPropsMixin: function _UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin_UbiquitousDomPropsMixin_CssClassPropsMixin() {
    },
    _UiState_Object_MapViewMixin: function _UiState_Object_MapViewMixin() {
    },
    _UiState_Object_MapViewMixin_StateMapViewMixin: function _UiState_Object_MapViewMixin_StateMapViewMixin() {
    },
    splitSpaceDelimitedString: function(string) {
      var t1, start, end,
        strings = H.setRuntimeTypeInfo([], [P.String]);
      for (t1 = string.length, start = 0; start !== t1; start = end) {
        for (; C.JSString_methods._codeUnitAt$1(string, start) === 32;) {
          ++start;
          if (start === t1)
            return strings;
        }
        for (end = start; C.JSString_methods._codeUnitAt$1(string, end) !== 32;) {
          ++end;
          if (end === t1) {
            C.JSArray_methods.add$1(strings, C.JSString_methods.substring$2(string, start, end));
            return strings;
          }
        }
        C.JSArray_methods.add$1(strings, C.JSString_methods.substring$2(string, start, end));
      }
      return strings;
    },
    CssClassPropsMapView: function CssClassPropsMapView(t0) {
      this._collection$_map = t0;
    },
    ClassNameBuilder: function ClassNameBuilder(t0) {
      this._classNamesBuffer = t0;
      this._blacklistBuffer = null;
    },
    ClassNameBuilder_toClassName_closure: function ClassNameBuilder_toClassName_closure(t0) {
      this.blacklistedClasses = t0;
    },
    CssClassPropsMixin: function CssClassPropsMixin() {
    },
    _CssClassPropsMapView_MapView_CssClassPropsMixin: function _CssClassPropsMapView_MapView_CssClassPropsMixin() {
    },
    Tuple2: function Tuple2(t0, t1, t2) {
      this.item1 = t0;
      this.item2 = t1;
      this.$ti = t2;
    },
    Algorithm: function Algorithm() {
    },
    GridCache$: function(_store) {
      var t1 = new S.GridCache(_store);
      t1.GridCache$1(_store);
      return t1;
    },
    GridCache: function GridCache(t0) {
      this._GridCache$_store = t0;
      this._grid = null;
    },
    GridCache_closure: function GridCache_closure(t0) {
      this.$this = t0;
    },
    GridCache_rebuild_closure: function GridCache_rebuild_closure() {
    },
    GridCache_rebuild__closure: function GridCache_rebuild__closure() {
    },
    GridCache_accessibleNeighbours_closure: function GridCache_accessibleNeighbours_closure(t0, t1) {
      this.$this = t0;
      this.origin = t1;
    },
    GridCache_accessibleNeighbours_closure0: function GridCache_accessibleNeighbours_closure0(t0) {
      this.origin = t0;
    },
    GridCache_accessibleNeighbours_closure1: function GridCache_accessibleNeighbours_closure1(t0) {
      this.$this = t0;
    },
    PathfinderWorker$noIsolate: function(other_store) {
      var t1 = new S.PathfinderWorker(Q.Store$(), P.Timer_Timer(P.Duration$(1, 0), new S.PathfinderWorker_closure()));
      t1.PathfinderWorker$noIsolate$1(other_store);
      return t1;
    },
    PathfinderWorker: function PathfinderWorker(t0, t1) {
      this._store = t0;
      this._timerToRun = t1;
    },
    PathfinderWorker_closure: function PathfinderWorker_closure() {
    },
    PathfinderWorker$noIsolate_closure: function PathfinderWorker$noIsolate_closure(t0, t1) {
      this.$this = t0;
      this.other_store = t1;
    },
    PathfinderWorker$noIsolate__closure0: function PathfinderWorker$noIsolate__closure0(t0, t1) {
      this.$this = t0;
      this.other_store = t1;
    },
    PathfinderWorker$noIsolate_closure0: function PathfinderWorker$noIsolate_closure0(t0, t1) {
      this.$this = t0;
      this.other_store = t1;
    },
    PathfinderWorker$noIsolate__closure: function PathfinderWorker$noIsolate__closure(t0, t1) {
      this.$this = t0;
      this.other_store = t1;
    },
    PathfinderWorker__setup_closure: function PathfinderWorker__setup_closure(t0) {
      this.$this = t0;
    },
    PathfinderWorker__runInner_closure: function PathfinderWorker__runInner_closure() {
    },
    PathfinderWorker__runInner_closure0: function PathfinderWorker__runInner_closure0() {
    },
    PathfinderWorker__runInner_closure1: function PathfinderWorker__runInner_closure1() {
    },
    PathfinderWorker__runInner_closure2: function PathfinderWorker__runInner_closure2() {
    },
    ValidationUtil_warn: function(message, data) {
      var t1;
      $.ValidationUtil_WARNING_COUNT = $.ValidationUtil_WARNING_COUNT + 1;
      window;
      t1 = "VALIDATION WARNING: " + message;
      if (typeof console != "undefined")
        window.console.warn(t1);
      if (data != null) {
        window;
        if (typeof console != "undefined")
          window.console.groupCollapsed("(Warning info)");
        window;
        if (typeof console != "undefined")
          window.console.log(data);
        if (H.boolConversionCheck(self.React.isValidElement(data))) {
          window;
          t1 = "props: " + H.S(M._prettyObj(F.getProps(data, false)));
          if (typeof console != "undefined")
            window.console.log(t1);
        }
        window;
        if (typeof console != "undefined")
          window.console.groupEnd();
      }
      return true;
    }
  },
  B = {
    UngeneratedError$: function(member, message) {
      return new B.UngeneratedError(message == null ? "`" + member.toString$0(0) + "` should be implemented by code generation" : message);
    },
    GeneratedClass: function GeneratedClass() {
    },
    UiComponent0: function UiComponent0() {
    },
    UiStatefulComponent0: function UiStatefulComponent0() {
    },
    UiProps: function UiProps() {
    },
    UiState: function UiState() {
    },
    UngeneratedError: function UngeneratedError(t0) {
      this.message = t0;
    },
    _UiComponent_UiComponent_GeneratedClass: function _UiComponent_UiComponent_GeneratedClass() {
    },
    _UiProps_UiProps_GeneratedClass: function _UiProps_UiProps_GeneratedClass() {
    },
    _UiState_UiState_GeneratedClass: function _UiState_UiState_GeneratedClass() {
    },
    _UiStatefulComponent_UiStatefulComponent_GeneratedClass: function _UiStatefulComponent_UiStatefulComponent_GeneratedClass() {
    },
    getComponentTypeMeta: function(type) {
      var t1;
      if (typeof type !== "string") {
        t1 = type._componentTypeMeta;
        return H.interceptedTypeCheck(t1 == null ? C.ComponentTypeMeta_false : t1, "$isComponentTypeMeta");
      }
      return C.ComponentTypeMeta_false;
    },
    ComponentTypeMeta: function ComponentTypeMeta(t0) {
      this.isWrapper = t0;
    },
    EditNodeTypeMouseMode: function EditNodeTypeMouseMode(t0) {
      this._structureTypeChanging = null;
      this._reactGrid = t0;
    },
    _$ReactArrow: function(backingProps) {
      return B._$$ReactArrowProps$(H.interceptedTypeCheck(backingProps, "$isMap"));
    },
    _$$ReactArrowProps$: function(backingMap) {
      var t1 = new B._$$ReactArrowProps(P.LinkedHashMap__makeEmpty(), null, null);
      t1.get$$$isClassGenerated();
      t1._ReactArrow$_props = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    _$ReactArrowProps: function _$ReactArrowProps() {
    },
    ReactArrowComponent: function ReactArrowComponent() {
    },
    ReactArrowComponent_render_closure: function ReactArrowComponent_render_closure() {
    },
    closure15: function closure15() {
    },
    _$ReactArrowPropsAccessorsMixin: function _$ReactArrowPropsAccessorsMixin() {
    },
    ReactArrowProps: function ReactArrowProps() {
    },
    _$$ReactArrowProps: function _$$ReactArrowProps(t0, t1, t2) {
      var _ = this;
      _._ReactArrow$_props = t0;
      _.wrap = _.endIntermediate = _.startIntermediate = _.showEnd = _.showStart = _.path = _.size = null;
      _.UbiquitousDomPropsMixin__aria = t1;
      _.UbiquitousDomPropsMixin__dom = t2;
    },
    _$ReactArrowComponent: function _$ReactArrowComponent(t0, t1, t2, t3) {
      var _ = this;
      _._typedPropsCache = t0;
      _._react$_props = _._context = null;
      _._state = t1;
      _._jsThis = _._jsRedraw = null;
      _._setStateCallbacks = t2;
      _._transactionalSetStateCallbacks = t3;
      _.nextProps = _.prevState = _._nextState = _.nextContext = null;
    },
    _ReactArrowProps__$ReactArrowProps__$ReactArrowPropsAccessorsMixin: function _ReactArrowProps__$ReactArrowProps__$ReactArrowPropsAccessorsMixin() {
    },
    __$$ReactArrowProps__$ReactArrowProps__$ReactArrowPropsAccessorsMixin: function __$$ReactArrowProps__$ReactArrowProps__$ReactArrowPropsAccessorsMixin() {
    },
    TransferMaster$: function(_webworker, store) {
      var t1 = new B.TransferMaster(_webworker, "Master", store);
      t1.TransferMaster$2(_webworker, store);
      return t1;
    },
    TransferMaster: function TransferMaster(t0, t1, t2) {
      this._webworker = t0;
      this.name = t1;
      this.store = t2;
    },
    TransferMaster_closure: function TransferMaster_closure(t0) {
      this.$this = t0;
    },
    TransferMaster_closure0: function TransferMaster_closure0(t0, t1) {
      this.$this = t0;
      this.worker = t1;
    },
    TransferMaster__closure: function TransferMaster__closure(t0) {
      this.worker = t0;
    }
  },
  M = {NotSpecified: function NotSpecified() {
    },
    _indentString: function(str) {
      var t1 = P.String,
        t2 = H.setRuntimeTypeInfo(str.split("\n"), [t1]),
        t3 = H.getTypeArgumentByIndex(t2, 0);
      return new H.MappedListIterable(t2, H.functionTypeCheck(new M._indentString_closure(), {func: 1, ret: t1, args: [t3]}), [t3, t1]).join$1(0, "\n");
    },
    _prettyObj: function(obj) {
      var items, t2, namespacedKeys, otherKeys, pairs, t3, trailingComma,
        t1 = J.getInterceptor$(obj);
      if (!!t1.$isList) {
        items = t1.map$1$1(obj, M.pretty_print___prettyObj$closure(), P.String).toList$0(0);
        if (items.length > 4 || C.JSArray_methods.any$1(items, new M._prettyObj_closure()))
          return "[\n" + M._indentString(C.JSArray_methods.join$1(items, ",\n")) + "\n]";
        else
          return "[" + C.JSArray_methods.join$1(items, ", ") + "]";
      } else if (!!t1.$isMap) {
        t2 = P.String;
        namespacedKeys = P.LinkedHashMap_LinkedHashMap$_empty(t2, [P.List, P.String]);
        otherKeys = [];
        J.forEach$1$ax(t1.get$keys(obj), new M._prettyObj_closure0(namespacedKeys, otherKeys));
        pairs = H.setRuntimeTypeInfo([], [t2]);
        t1 = namespacedKeys.get$keys(namespacedKeys);
        t3 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
        C.JSArray_methods.addAll$1(pairs, H.MappedIterable_MappedIterable(t1, H.functionTypeCheck(new M._prettyObj_closure1(obj, namespacedKeys), {func: 1, ret: t2, args: [t3]}), t3, t2));
        t3 = H.getTypeArgumentByIndex(otherKeys, 0);
        C.JSArray_methods.addAll$1(pairs, new H.MappedListIterable(otherKeys, H.functionTypeCheck(new M._prettyObj_closure2(obj), {func: 1, ret: t2, args: [t3]}), [t3, t2]));
        trailingComma = P.RegExp_RegExp("\\s*,\\s*$");
        if (pairs.length > 1 || C.JSArray_methods.any$1(pairs, new M._prettyObj_closure3()))
          return "{\n" + C.JSString_methods.replaceFirst$2(M._indentString(C.JSArray_methods.join$1(pairs, "\n")), trailingComma, "") + "\n}";
        else
          return "{" + C.JSString_methods.replaceFirst$2(C.JSArray_methods.join$1(pairs, " "), trailingComma, "") + "}";
      } else
        return t1.toString$0(obj);
    },
    _indentString_closure: function _indentString_closure() {
    },
    _prettyObj_closure: function _prettyObj_closure() {
    },
    _prettyObj_closure0: function _prettyObj_closure0(t0, t1) {
      this.namespacedKeys = t0;
      this.otherKeys = t1;
    },
    _prettyObj_closure1: function _prettyObj_closure1(t0, t1) {
      this.obj = t0;
      this.namespacedKeys = t1;
    },
    _prettyObj_closure_renderSubKey: function _prettyObj_closure_renderSubKey(t0, t1) {
      this.namespace = t0;
      this.obj = t1;
    },
    _prettyObj__closure: function _prettyObj__closure() {
    },
    _prettyObj_closure2: function _prettyObj_closure2(t0) {
      this.obj = t0;
    },
    _prettyObj_closure3: function _prettyObj_closure3() {
    },
    AStar: function AStar(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.name = t0;
      _.closed = _.open = _.parent = _.distance = null;
      _.grid = t1;
      _.start = t2;
      _.target = t3;
      _.heuristic = t4;
      _._turnOfHistory = t5;
      _.searched = null;
      _.searchHistory = t6;
      _.nextTurn = 0;
    },
    AStar_closure: function AStar_closure() {
    },
    AStar_findNextActiveNode_closure: function AStar_findNextActiveNode_closure(t0) {
      this.$this = t0;
    },
    AStar_findNextActiveNode_closure0: function AStar_findNextActiveNode_closure0(t0) {
      this.$this = t0;
    },
    AStar_findNextActiveNode_closure1: function AStar_findNextActiveNode_closure1(t0) {
      this.$this = t0;
    },
    AStar_findNextActiveNode_closure2: function AStar_findNextActiveNode_closure2(t0) {
      this.$this = t0;
    },
    AStar_findNextActiveNode_closure3: function AStar_findNextActiveNode_closure3(t0) {
      this.$this = t0;
    },
    AStar_findNextActiveNode_closure4: function AStar_findNextActiveNode_closure4(t0) {
      this.$this = t0;
    },
    Explanation$fromMap: function(map) {
      var t1 = J.getInterceptor$asx(map);
      return new M.Explanation(H.stringTypeCast(t1.$index(map, "style")), J.map$1$1$ax(H.listTypeCast(t1.$index(map, "explanation")), new M.Explanation$fromMap_closure(), M.ExplanationPart).toList$0(0));
    },
    Explanation: function Explanation(t0, t1) {
      this.style = t0;
      this._explanation = t1;
    },
    Explanation$fromMap_closure: function Explanation$fromMap_closure() {
    },
    Explanation_toMap_closure: function Explanation_toMap_closure() {
    },
    ExplanationPart: function ExplanationPart(t0, t1, t2) {
      this.id = t0;
      this.text = t1;
      this.style = t2;
    },
    Manhattan: function Manhattan(t0) {
      this._Heuristic$_name = t0;
    }
  },
  R = {
    getPropsToForward: function(props, keySetsToOmit, keysToOmit, omitReactProps, onlyCopyDomProps) {
      var propsToForward = P.LinkedHashMap_LinkedHashMap$from(props, null, null);
      propsToForward.remove$1(0, "key");
      propsToForward.remove$1(0, "ref");
      propsToForward.remove$1(0, "children");
      J.forEach$1$ax(keySetsToOmit, new R.getPropsToForward_closure(propsToForward));
      C.JSArray_methods.forEach$1(P.List_List$from(propsToForward.get$keys(propsToForward), true, P.String), new R.getPropsToForward_closure0(propsToForward));
      return propsToForward;
    },
    newStyleFromProps: function(props) {
      var t2, _null = null,
        t1 = A.DomProps$(_null, props).props.$index(0, "style");
      if (t1 == null)
        t1 = _null;
      t2 = P.String;
      H.assertSubtype(t1, "$isMap", [t2, null], "$asMap");
      return t1 == null ? P.LinkedHashMap_LinkedHashMap$_empty(t2, _null) : P.LinkedHashMap_LinkedHashMap$from(t1, t2, _null);
    },
    getPropsToForward_closure: function getPropsToForward_closure(t0) {
      this.propsToForward = t0;
    },
    getPropsToForward__closure: function getPropsToForward__closure(t0) {
      this.propsToForward = t0;
    },
    getPropsToForward_closure0: function getPropsToForward_closure0(t0) {
      this.propsToForward = t0;
    },
    _getProperty: function(jsObj, key) {
      return _getProperty(jsObj, H.stringTypeCheck(key));
    },
    _setProperty: function(jsObj, key, value) {
      return _setProperty(jsObj, H.stringTypeCheck(key), value);
    },
    _MissingJsMemberError$: function($name, message) {
      return new R._MissingJsMemberError($name, message);
    },
    jsify: function(map) {
      var jsMap = {};
      J.forEach$1$ax(map, new R.jsify_closure(jsMap));
      return jsMap;
    },
    _MissingJsMemberError: function _MissingJsMemberError(t0, t1) {
      this.name = t0;
      this.message = t1;
    },
    closure10: function closure10() {
    },
    closure19: function closure19() {
    },
    EmptyObject: function EmptyObject() {
    },
    jsify_closure: function jsify_closure(t0) {
      this.jsMap = t0;
    },
    closure1: function closure1() {
    },
    Heuristic: function Heuristic() {
    },
    unindent: function(multilineString) {
      var t2,
        t1 = P.RegExp_RegExp("^( *)").firstMatch$1(multilineString)._match;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      t1 = t1[1];
      t2 = J.trim$0$s(multilineString);
      t1 = "\n" + H.S(t1);
      return H.stringReplaceAllUnchecked(t2, t1, "\n");
    }
  },
  F = {
    isDartComponent: function(instance) {
      var t1 = J.getInterceptor$(instance);
      if (!!t1.$isElement)
        return false;
      return J.get$internal$x(H.interceptedTypeCast(t1.get$props(instance), "$isInteropProps")) != null;
    },
    getProps: function(instance, traverseWrappers) {
      var t1, t2, cachedView, propsMap, view,
        _s8_ = "instance",
        isCompositeComponent = instance != null && instance.isReactComponent != null;
      if (H.boolConversionCheck(self.React.isValidElement(instance)) || isCompositeComponent) {
        if (traverseWrappers)
          if (isCompositeComponent && F.isDartComponent(instance))
            B.getComponentTypeMeta(H.interceptedTypeCheck(F.getDartComponent(instance, V.Component)._jsThis.constructor, "$isReactClass"));
          else if (H.boolConversionCheck(self.React.isValidElement(instance)))
            B.getComponentTypeMeta(J.get$type$x(instance));
          else
            throw H.wrapException(P.ArgumentError$value(instance, _s8_, "must either be a Dart component ReactComponent or ReactElement when traverseWrappers is true."));
        t1 = $.$get$_elementPropsCache();
        t2 = t1 != null;
        if (t2 && !isCompositeComponent) {
          cachedView = t1.$index(0, instance);
          if (cachedView != null)
            return cachedView;
        }
        propsMap = F.isDartComponent(instance) ? J.get$internal$x(H.interceptedTypeCast(J.get$props$x(instance), "$isInteropProps")).props : A.unconvertJsProps(instance);
        view = new P.UnmodifiableMapView(propsMap, [null, null]);
        if (t2 && !isCompositeComponent)
          t1.$indexSet(0, instance, view);
        return view;
      }
      throw H.wrapException(P.ArgumentError$value(instance, _s8_, "must be a valid ReactElement or composite ReactComponent"));
    },
    getDartComponent: function(instance, $T) {
      var t1 = J.getInterceptor$(instance);
      if (!!t1.$isElement)
        return;
      return H.assertSubtypeOfRuntimeType(t1.get$dartComponent(H.interceptedTypeCast(instance, "$isReactComponent")), $T);
    },
    closure11: function closure11() {
    },
    Chebyshev: function Chebyshev(t0) {
      this._Heuristic$_name = t0;
    },
    _$ReactPopover: function(backingProps) {
      return F._$$ReactPopoverProps$(H.interceptedTypeCheck(backingProps, "$isMap"));
    },
    _$$ReactPopoverProps$: function(backingMap) {
      var t1 = new F._$$ReactPopoverProps(P.LinkedHashMap__makeEmpty(), null, null);
      t1.get$$$isClassGenerated();
      t1._ReactPopover$_props = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    Tooltip: function Tooltip() {
    },
    TooltipOptions: function TooltipOptions() {
    },
    _$ReactPopoverProps: function _$ReactPopoverProps() {
    },
    ReactPopoverComponent: function ReactPopoverComponent() {
    },
    closure12: function closure12() {
    },
    _$ReactPopoverPropsAccessorsMixin: function _$ReactPopoverPropsAccessorsMixin() {
    },
    ReactPopoverProps: function ReactPopoverProps() {
    },
    _$$ReactPopoverProps: function _$$ReactPopoverProps(t0, t1, t2) {
      var _ = this;
      _._ReactPopover$_props = t0;
      _.html = _.popover = null;
      _.UbiquitousDomPropsMixin__aria = t1;
      _.UbiquitousDomPropsMixin__dom = t2;
    },
    _$ReactPopoverComponent: function _$ReactPopoverComponent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.id = t0;
      _.tooltip = null;
      _._typedPropsCache = t1;
      _._react$_props = _._context = null;
      _._state = t2;
      _._jsThis = _._jsRedraw = null;
      _._setStateCallbacks = t3;
      _._transactionalSetStateCallbacks = t4;
      _.nextProps = _.prevState = _._nextState = _.nextContext = null;
    },
    _ReactPopoverProps__$ReactPopoverProps__$ReactPopoverPropsAccessorsMixin: function _ReactPopoverProps__$ReactPopoverProps__$ReactPopoverPropsAccessorsMixin() {
    },
    __$$ReactPopoverProps__$ReactPopoverProps__$ReactPopoverPropsAccessorsMixin: function __$$ReactPopoverProps__$ReactPopoverProps__$ReactPopoverPropsAccessorsMixin() {
    },
    Size$: function(width, height) {
      return new F.Size(width, height);
    },
    Size$fromMap: function(map) {
      var t1 = J.getInterceptor$asx(map);
      return new F.Size(H.intTypeCast(t1.$index(map, "width")), H.intTypeCast(t1.$index(map, "height")));
    },
    Size: function Size(t0, t1) {
      this.width = t0;
      this.height = t1;
    },
    Size_positions_closure: function Size_positions_closure() {
    },
    Size_positions_closure0: function Size_positions_closure0(t0) {
      this.$this = t0;
    },
    Size_positions__closure: function Size_positions__closure(t0) {
      this.x = t0;
    },
    main: function() {
      var exception, t2, t3, t1 = {},
        store = Q.Store$();
      try {
        B.TransferMaster$("model/PathfinderWorker.dart", store);
      } catch (exception) {
        H.unwrapException(exception);
        S.PathfinderWorker$noIsolate(store);
      }
      G.Save$loadFromCookie(store);
      t2 = store;
      A.setClientConfiguration();
      O.setupAlgorithmRunner(t2);
      O.setupArrowKeys(t2);
      t3 = O.ReactMain___$ReactMain$closure().call$0();
      J.$indexSet$ax(t3._props, "ReactMainProps.store", t2);
      t3 = t3.call$0();
      t2 = document.querySelector("#contentContainer");
      $.$get$render().call$2(t3, t2);
      t1.lastSave = new P.DateTime(Date.now(), false);
      P.Timer_Timer$periodic(P.Duration$(0, 1000), new F.main_closure(t1, store));
    },
    main_closure: function main_closure(t0, t1) {
      this._box_0 = t0;
      this.store = t1;
    }
  },
  L = {
    Browser_getCurrentBrowser: function() {
      return C.JSArray_methods.firstWhere$2$orElse($.$get$Browser__knownBrowsers(), new L.Browser_getCurrentBrowser_closure(), new L.Browser_getCurrentBrowser_closure0());
    },
    Browser$: function($name, matchesNavigator, parseVersion, className) {
      return new L.Browser(matchesNavigator, parseVersion);
    },
    _Chrome__isChrome: function($navigator) {
      var vendor;
      H.interceptedTypeCheck($navigator, "$isNavigatorProvider").toString;
      vendor = window.navigator.vendor;
      return vendor != null && C.JSString_methods.contains$1(vendor, "Google");
    },
    _Chrome__getVersion: function($navigator) {
      var match, major, minor, patch,
        t1 = P.RegExp_RegExp("Chrome/(\\d+)\\.(\\d+)\\.(\\d+)\\.(\\d+)\\s");
      $navigator.toString;
      match = t1.firstMatch$1(window.navigator.appVersion);
      if (match != null) {
        t1 = match._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        major = P.int_parse(t1[1]);
        if (2 >= t1.length)
          return H.ioore(t1, 2);
        minor = P.int_parse(t1[2]);
        if (3 >= t1.length)
          return H.ioore(t1, 3);
        patch = P.int_parse(t1[3]);
        if (4 >= t1.length)
          return H.ioore(t1, 4);
        return T.Version_Version(major, minor, patch, t1[4]);
      } else
        return T.Version_Version(0, 0, 0, null);
    },
    _Firefox__isFirefox: function($navigator) {
      H.interceptedTypeCheck($navigator, "$isNavigatorProvider").toString;
      return J.contains$1$asx(window.navigator.userAgent, "Firefox");
    },
    _Firefox__getVersion: function($navigator) {
      var major,
        t1 = P.RegExp_RegExp("rv:(\\d+)\\.(\\d+)\\)");
      $navigator.toString;
      t1 = t1.firstMatch$1(window.navigator.userAgent)._match;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      major = P.int_parse(t1[1]);
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      return T.Version_Version(major, P.int_parse(t1[2]), 0, null);
    },
    _Safari__isSafari: function($navigator) {
      var vendor;
      H.interceptedTypeCheck($navigator, "$isNavigatorProvider").toString;
      vendor = window.navigator.vendor;
      return vendor != null && C.JSString_methods.contains$1(vendor, "Apple") && J.contains$1$asx(window.navigator.appVersion, "Version");
    },
    _Safari__getVersion: function($navigator) {
      var major, t2, minor,
        t1 = P.RegExp_RegExp("Version/(\\d+)(\\.(\\d+))?(\\.(\\d+))?");
      $navigator.toString;
      t1 = t1.firstMatch$1(window.navigator.appVersion)._match;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      major = P.int_parse(t1[1]);
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      t2 = t1[3];
      minor = P.int_parse(t2 == null ? "0" : t2);
      if (5 >= t1.length)
        return H.ioore(t1, 5);
      t1 = t1[5];
      return T.Version_Version(major, minor, P.int_parse(t1 == null ? "0" : t1), null);
    },
    _WKWebView__isWKWebView: function($navigator) {
      var vendor;
      H.interceptedTypeCheck($navigator, "$isNavigatorProvider").toString;
      vendor = window.navigator.vendor;
      return vendor != null && C.JSString_methods.contains$1(vendor, "Apple") && !J.contains$1$asx(window.navigator.appVersion, "Version");
    },
    _WKWebView__getVersion: function($navigator) {
      var major, minor,
        t1 = P.RegExp_RegExp("AppleWebKit/(\\d+)\\.(\\d+)\\.(\\d+)");
      $navigator.toString;
      t1 = t1.firstMatch$1(window.navigator.appVersion)._match;
      if (1 >= t1.length)
        return H.ioore(t1, 1);
      major = P.int_parse(t1[1]);
      if (2 >= t1.length)
        return H.ioore(t1, 2);
      minor = P.int_parse(t1[2]);
      if (3 >= t1.length)
        return H.ioore(t1, 3);
      return T.Version_Version(major, minor, P.int_parse(t1[3]), null);
    },
    _InternetExplorer__isInternetExplorer: function($navigator) {
      H.interceptedTypeCheck($navigator, "$isNavigatorProvider").toString;
      return J.contains$1$asx(window.navigator.appName, "Microsoft") || J.contains$1$asx(window.navigator.appVersion, "Trident") || J.contains$1$asx(window.navigator.appVersion, "Edge");
    },
    _InternetExplorer__getVersion: function($navigator) {
      var match, major, _null = null,
        t1 = P.RegExp_RegExp("MSIE (\\d+)\\.(\\d+);");
      $navigator.toString;
      match = t1.firstMatch$1(window.navigator.appVersion);
      if (match != null) {
        t1 = match._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        major = P.int_parse(t1[1]);
        if (2 >= t1.length)
          return H.ioore(t1, 2);
        return T.Version_Version(major, P.int_parse(t1[2]), 0, _null);
      }
      match = P.RegExp_RegExp("rv[: ](\\d+)\\.(\\d+)").firstMatch$1(window.navigator.appVersion);
      if (match != null) {
        t1 = match._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        major = P.int_parse(t1[1]);
        if (2 >= t1.length)
          return H.ioore(t1, 2);
        return T.Version_Version(major, P.int_parse(t1[2]), 0, _null);
      }
      match = P.RegExp_RegExp("Edge/(\\d+)\\.(\\d+)$").firstMatch$1(window.navigator.appVersion);
      if (match != null) {
        t1 = match._match;
        if (1 >= t1.length)
          return H.ioore(t1, 1);
        major = P.int_parse(t1[1]);
        if (2 >= t1.length)
          return H.ioore(t1, 2);
        return T.Version_Version(major, P.int_parse(t1[2]), 0, _null);
      }
      return T.Version_Version(0, 0, 0, _null);
    },
    Browser: function Browser(t0, t1) {
      this._matchesNavigator = t0;
      this._parseVersion = t1;
      this._version = null;
    },
    Browser_getCurrentBrowser_closure: function Browser_getCurrentBrowser_closure() {
    },
    Browser_getCurrentBrowser_closure0: function Browser_getCurrentBrowser_closure0() {
    },
    _Chrome: function _Chrome(t0, t1) {
      this._matchesNavigator = t0;
      this._parseVersion = t1;
      this._version = null;
    },
    _Firefox: function _Firefox(t0, t1) {
      this._matchesNavigator = t0;
      this._parseVersion = t1;
      this._version = null;
    },
    _Safari: function _Safari(t0, t1) {
      this._matchesNavigator = t0;
      this._parseVersion = t1;
      this._version = null;
    },
    _WKWebView: function _WKWebView(t0, t1) {
      this._matchesNavigator = t0;
      this._parseVersion = t1;
      this._version = null;
    },
    _InternetExplorer: function _InternetExplorer(t0, t1) {
      this._matchesNavigator = t0;
      this._parseVersion = t1;
      this._version = null;
    }
  },
  G = {
    browser: function() {
      var t1 = $._browser;
      if (t1 == null) {
        $.Browser_navigator = new G._HtmlNavigator();
        t1 = $._browser = L.Browser_getCurrentBrowser();
      }
      return t1;
    },
    _HtmlNavigator: function _HtmlNavigator() {
    },
    NavigatorProvider: function NavigatorProvider() {
    },
    Enums_toName: function(dynamic) {
      var t1 = J.getInterceptor$(dynamic);
      return J.substring$1$s(t1.toString$0(dynamic), J.lastIndexOf$1$s(t1.toString$0(dynamic), ".") + 1);
    },
    AlgorithmTypes_getTitle: function(algorithmType) {
      switch (algorithmType) {
        case C.AlgorithmType_0:
          return "None";
        case C.AlgorithmType_1:
          return "Dijkstra";
        case C.AlgorithmType_2:
          return "A*";
        case C.AlgorithmType_3:
          return "DJPS";
        case C.AlgorithmType_4:
          return "DJPS Lookup";
        case C.AlgorithmType_5:
          return "DJPS Pre-Calculation";
      }
      return "Not Found";
    },
    HeuristicTypes_getTitle: function(heuristicType) {
      switch (heuristicType) {
        case C.HeuristicType_4:
          return "Manhattan";
        case C.HeuristicType_2:
          return "Euclidean";
        case C.HeuristicType_3:
          return "Octile";
        case C.HeuristicType_1:
          return "Chebyshev";
        case C.HeuristicType_0:
          return "Constant Zero";
      }
      return "Not Found";
    },
    AlgorithmUpdateModes_getTitle: function(algorithmUpdateMode) {
      switch (algorithmUpdateMode) {
        case C.AlgorithmUpdateMode_0:
          return "During editing";
        case C.AlgorithmUpdateMode_1:
          return "After editing";
        case C.AlgorithmUpdateMode_2:
          return "Manually";
      }
      return "Not Found";
    },
    GridModes_getTitle: function(gridmode) {
      switch (gridmode) {
        case C.GridMode_0:
          return "Basic";
        case C.GridMode_1:
          return "Advanced";
      }
      return "Not Found";
    },
    DirectionModes_getTitle: function(directionMode) {
      switch (directionMode) {
        case C.DirectionMode_0:
          return "All";
        case C.DirectionMode_1:
          return "Only cardinal";
        case C.DirectionMode_2:
          return "Only diagonal";
      }
      return "Not Found";
    },
    DirectionalModes_getTitle: function(directionalMode) {
      switch (directionalMode) {
        case C.DirectionalMode_0:
          return "Mono";
        case C.DirectionalMode_1:
          return "Bi";
      }
      return "Not Found";
    },
    CornerModes_getTitle: function(cornerMode) {
      switch (cornerMode) {
        case C.CornerMode_0:
          return "Cross";
        case C.CornerMode_1:
          return "Bypass";
      }
      return "Not Found";
    },
    AlgorithmType: function AlgorithmType(t0, t1) {
      this.index = t0;
      this._Enums$_name = t1;
    },
    HeuristicType: function HeuristicType(t0, t1) {
      this.index = t0;
      this._Enums$_name = t1;
    },
    AlgorithmUpdateMode: function AlgorithmUpdateMode(t0, t1) {
      this.index = t0;
      this._Enums$_name = t1;
    },
    GridMode: function GridMode(t0, t1) {
      this.index = t0;
      this._Enums$_name = t1;
    },
    DirectionMode: function DirectionMode(t0, t1) {
      this.index = t0;
      this._Enums$_name = t1;
    },
    DirectionalMode: function DirectionalMode(t0, t1) {
      this.index = t0;
      this._Enums$_name = t1;
    },
    CornerMode: function CornerMode(t0, t1) {
      this.index = t0;
      this._Enums$_name = t1;
    },
    _$ReactNodePart: function(backingProps) {
      return G._$$ReactNodePartProps$(H.interceptedTypeCheck(backingProps, "$isMap"));
    },
    _$$ReactNodePartProps$: function(backingMap) {
      var t1 = new G._$$ReactNodePartProps(P.LinkedHashMap__makeEmpty(), null, null);
      t1.get$$$isClassGenerated();
      t1._ReactNodePart$_props = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    _$ReactNodePartProps: function _$ReactNodePartProps() {
    },
    _$ReactNodePartState: function _$ReactNodePartState() {
    },
    ReactNodePartComponent: function ReactNodePartComponent() {
    },
    ReactNodePartComponent_render_closure: function ReactNodePartComponent_render_closure(t0) {
      this.$this = t0;
    },
    ReactNodePartComponent_render_closure0: function ReactNodePartComponent_render_closure0(t0) {
      this.$this = t0;
    },
    ReactNodePartComponent_render_closure1: function ReactNodePartComponent_render_closure1(t0) {
      this.$this = t0;
    },
    closure18: function closure18() {
    },
    _$ReactNodePartPropsAccessorsMixin: function _$ReactNodePartPropsAccessorsMixin() {
    },
    ReactNodePartProps: function ReactNodePartProps() {
    },
    _$$ReactNodePartProps: function _$$ReactNodePartProps(t0, t1, t2) {
      var _ = this;
      _._ReactNodePart$_props = t0;
      _.position = _.directionTextHighlight = _.direction = _.grid = _.store = null;
      _.UbiquitousDomPropsMixin__aria = t1;
      _.UbiquitousDomPropsMixin__dom = t2;
    },
    _$ReactNodePartStateAccessorsMixin: function _$ReactNodePartStateAccessorsMixin() {
    },
    ReactNodePartState: function ReactNodePartState() {
    },
    _$$ReactNodePartState: function _$$ReactNodePartState(t0) {
      this._ReactNodePart$_state = t0;
    },
    _$ReactNodePartComponent: function _$ReactNodePartComponent(t0, t1, t2, t3, t4) {
      var _ = this;
      _._typedStateCache = t0;
      _._typedPropsCache = t1;
      _._react$_props = _._context = null;
      _._state = t2;
      _._jsThis = _._jsRedraw = null;
      _._setStateCallbacks = t3;
      _._transactionalSetStateCallbacks = t4;
      _.nextProps = _.prevState = _._nextState = _.nextContext = null;
    },
    _ReactNodePartProps__$ReactNodePartProps__$ReactNodePartPropsAccessorsMixin: function _ReactNodePartProps__$ReactNodePartProps__$ReactNodePartPropsAccessorsMixin() {
    },
    _ReactNodePartState__$ReactNodePartState__$ReactNodePartStateAccessorsMixin: function _ReactNodePartState__$ReactNodePartState__$ReactNodePartStateAccessorsMixin() {
    },
    __$$ReactNodePartProps__$ReactNodePartProps__$ReactNodePartPropsAccessorsMixin: function __$$ReactNodePartProps__$ReactNodePartProps__$ReactNodePartPropsAccessorsMixin() {
    },
    __$$ReactNodePartState__$ReactNodePartState__$ReactNodePartStateAccessorsMixin: function __$$ReactNodePartState__$ReactNodePartState__$ReactNodePartStateAccessorsMixin() {
    },
    Save$: function(store) {
      var t5, t6, t7, t8,
        t1 = new G.Save(),
        t2 = t1._gridSize = F.Size$fromMap(H.interceptedTypeCast(store._StoreTransferAble$_store.$index(0, "size"), "$isMap")),
        t3 = t2.width,
        t4 = $.$get$Save_scale();
      if (typeof t3 !== "number")
        return t3.$mul();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = t2.height;
      if (typeof t2 !== "number")
        return t2.$mul();
      t4 = W.CanvasElement_CanvasElement(t2 * t4 + 1, t3 * t4 + 1);
      t1._canvas = t4;
      t4 = H.interceptedTypeCast(C.CanvasElement_methods.getContext$1(t4, "2d"), "$isCanvasRenderingContext2D");
      t1._Save$_context = t4;
      t5 = $.Save_colorGrid;
      t6 = t5[0];
      t7 = t5[1];
      t8 = t5[2];
      t5 = t5[3];
      t4.toString;
      t4.fillStyle = "rgba(" + t6 + ", " + t7 + ", " + t8 + ", " + t5 + ")";
      t5 = $.$get$Save_scale();
      if (typeof t5 !== "number")
        return H.iae(t5);
      t4.fillRect(0, 0, t3 * t5 + 1, t2 * t5 + 1);
      t1._draw$1(store);
      return t1;
    },
    Save$loadFromCookie: function(store) {
      var t1 = new G.Save();
      t1.Save$loadFromCookie$1(store);
      return t1;
    },
    Save$loadFromSrc: function(imageSrc, store) {
      var t1 = new G.Save();
      t1.Save$loadFromSrc$2(imageSrc, store);
      return t1;
    },
    Save: function Save() {
      this._gridSize = this._Save$_context = this._canvas = null;
    },
    Save$loadFromCookie_closure: function Save$loadFromCookie_closure(t0, t1, t2) {
      this.$this = t0;
      this.image = t1;
      this.store = t2;
    },
    Save$loadFromSrc_closure: function Save$loadFromSrc_closure(t0, t1, t2) {
      this.$this = t0;
      this.image = t1;
      this.store = t2;
    },
    Save__loadIntoStore_closure: function Save__loadIntoStore_closure() {
    },
    Save__loadIntoStore_closure0: function Save__loadIntoStore_closure0(t0, t1) {
      this.$this = t0;
      this.position = t1;
    }
  },
  T = {
    Version_Version: function(major, minor, patch, build) {
      var text = H.S(major) + "." + H.S(minor) + "." + H.S(patch),
        t1 = build == null;
      if (!t1)
        text += "+" + build;
      t1 = t1 ? [] : T.Version__splitParts(build);
      if (typeof major !== "number")
        return major.$lt();
      if (major < 0)
        H.throwExpression(P.ArgumentError$("Major version must be non-negative."));
      if (typeof minor !== "number")
        return minor.$lt();
      if (minor < 0)
        H.throwExpression(P.ArgumentError$("Minor version must be non-negative."));
      if (typeof patch !== "number")
        return patch.$lt();
      if (patch < 0)
        H.throwExpression(P.ArgumentError$("Patch version must be non-negative."));
      return new T.Version(major, minor, patch, [], t1, text);
    },
    Version__splitParts: function(text) {
      var t1 = H.setRuntimeTypeInfo(text.split("."), [P.String]),
        t2 = P.Object,
        t3 = H.getTypeArgumentByIndex(t1, 0);
      return new H.MappedListIterable(t1, H.functionTypeCheck(new T.Version__splitParts_closure(), {func: 1, ret: t2, args: [t3]}), [t3, t2]).toList$0(0);
    },
    Version: function Version(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.major = t0;
      _.minor = t1;
      _.patch = t2;
      _.preRelease = t3;
      _.build = t4;
      _._text = t5;
    },
    Version__splitParts_closure: function Version__splitParts_closure() {
    },
    closure9: function closure9() {
    },
    Vector2: function Vector2(t0) {
      this._v2storage = t0;
    },
    Octile: function Octile(t0) {
      this._Heuristic$_name = t0;
    },
    StoreTransferAble: function StoreTransferAble() {
    },
    StoreTransferAble_closure: function StoreTransferAble_closure() {
    },
    StoreTransferAble_getAListMap_closure: function StoreTransferAble_getAListMap_closure() {
    },
    StoreTransferAble_triggerListeners_closure: function StoreTransferAble_triggerListeners_closure(t0) {
      this.equalListenerCalled = t0;
    },
    StoreTransferAble_triggerListeners_closure0: function StoreTransferAble_triggerListeners_closure0(t0) {
      this.equalListenerCalled = t0;
    },
    StoreTransferAble_triggerListeners_closure1: function StoreTransferAble_triggerListeners_closure1(t0) {
      this.$this = t0;
    },
    StoreTransferAble_triggerListeners__closure: function StoreTransferAble_triggerListeners__closure(t0) {
      this.startsOfIds = t0;
    },
    StoreTransferAble_triggerListeners___closure: function StoreTransferAble_triggerListeners___closure(t0) {
      this.changedId = t0;
    },
    StoreTransferAble_addEqualListener_closure: function StoreTransferAble_addEqualListener_closure() {
    },
    StoreTransferAble_removeEqualListener_closure: function StoreTransferAble_removeEqualListener_closure(t0) {
      this.equalListener = t0;
    }
  },
  X = {VersionRange: function VersionRange() {
    },
    _combine: function(hash, value) {
      hash = 536870911 & hash + value;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    Optional$of: function(value, $T) {
      if (value == null)
        H.throwExpression(P.ArgumentError$("Must not be null."));
      return new X.Optional(value, [$T]);
    },
    Optional: function Optional(t0, t1) {
      this._core0$_value = t0;
      this.$ti = t1;
    },
    Distance$: function(_cardinal, _diagonal) {
      return new X.Distance(_cardinal, _diagonal);
    },
    Distance$calc: function(p1, p2) {
      var dx, dy,
        t1 = new X.Distance(null, null),
        t2 = p1.x,
        t3 = p2.x;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      dx = Math.abs(t2 - t3);
      t3 = p1.y;
      t2 = p2.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      dy = Math.abs(t3 - t2);
      t2 = H.intTypeCheck(Math.min(dx, dy));
      t1._diagonal = t2;
      t1._cardinal = H.intTypeCheck(Math.max(dx, dy) - t2);
      return t1;
    },
    Distance: function Distance(t0, t1) {
      this._cardinal = t0;
      this._diagonal = t1;
    },
    DirectedJumpPointSearchJumpPoints_jumpDirections: function(grid, position, direction, hasNextCardinalPointOfInterest, isForPreCalculation) {
      if (C.JSArray_methods.contains$1(C.List_O1c, direction))
        return X.DirectedJumpPointSearchJumpPoints__diagonalJumpDirections(grid, position, direction, hasNextCardinalPointOfInterest, isForPreCalculation);
      else
        return X.DirectedJumpPointSearchJumpPoints__cardinalJumpDirections(grid, position, direction);
    },
    DirectedJumpPointSearchJumpPoints__cardinalJumpDirections: function(grid, position, direction) {
      var jumpDirections, t4, t5, _i, side, t6, t7, direction45, direction90, direction135, t8, canNotGoDiagonalBefore, canNotGoDiagonalBefore1, canNotGoDiagonalBefore2,
        direction180 = O.Directions_turn(direction, 180),
        wpBefore = position.goMulti$2(direction180, 1),
        t1 = grid._grid._Array2D$_array,
        t2 = wpBefore.x,
        t3 = wpBefore.y;
      if (!H.boolConversionCheck(J.$index$asx(J.$index$asx((t1 && C.JSArray_methods).$index(t1, t2), t3), direction)))
        return P.LinkedHashSet_LinkedHashSet(O.Direction);
      jumpDirections = P.LinkedHashSet_LinkedHashSet(O.Direction);
      for (t1 = [1, -1], t4 = position.x, t5 = position.y, _i = 0; _i < 2; ++_i) {
        side = t1[_i];
        t6 = direction.index * 45;
        t7 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(t6 + 45 * side + 360, 360), 45);
        if (t7 < 0 || t7 >= 8)
          return H.ioore(C.List_4j7, t7);
        direction45 = C.List_4j7[t7];
        t7 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(t6 + 90 * side + 360, 360), 45);
        if (t7 < 0 || t7 >= 8)
          return H.ioore(C.List_4j7, t7);
        direction90 = C.List_4j7[t7];
        t6 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(t6 + 135 * side + 360, 360), 45);
        if (t6 < 0 || t6 >= 8)
          return H.ioore(C.List_4j7, t6);
        direction135 = C.List_4j7[t6];
        t6 = grid._grid._Array2D$_array;
        if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t4), t5), direction45))) {
          t6 = grid._grid._Array2D$_array;
          if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t2), t3), direction45))) {
            t6 = O.Directions_getDx(direction45);
            if (typeof t2 !== "number")
              return t2.$add();
            t6 = t2 + t6;
            t7 = O.Directions_getDy(direction45);
            if (typeof t3 !== "number")
              return t3.$add();
            t8 = grid._grid._Array2D$_array;
            if (t6 < 0 || t6 >= t8.length)
              return H.ioore(t8, t6);
            canNotGoDiagonalBefore = !H.boolConversionCheck(J.$index$asx(J.$index$asx(t8[t6], t3 + t7), direction));
          } else
            canNotGoDiagonalBefore = true;
          if (canNotGoDiagonalBefore)
            jumpDirections.add$1(0, direction45);
        }
        t6 = grid._grid._Array2D$_array;
        if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t4), t5), direction90))) {
          t6 = grid._grid._Array2D$_array;
          if (!H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t2), t3), direction45)))
            jumpDirections.add$1(0, direction90);
        }
        t6 = grid._grid._Array2D$_array;
        if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t4), t5), direction135))) {
          t6 = grid._grid._Array2D$_array;
          if (!H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t2), t3), direction90))) {
            t6 = grid._grid._Array2D$_array;
            if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t2), t3), direction45))) {
              t6 = O.Directions_getDx(direction45);
              if (typeof t2 !== "number")
                return t2.$add();
              t6 = t2 + t6;
              t7 = O.Directions_getDy(direction45);
              if (typeof t3 !== "number")
                return t3.$add();
              t8 = grid._grid._Array2D$_array;
              if (t6 < 0 || t6 >= t8.length)
                return H.ioore(t8, t6);
              canNotGoDiagonalBefore1 = !H.boolConversionCheck(J.$index$asx(J.$index$asx(t8[t6], t3 + t7), direction180));
            } else
              canNotGoDiagonalBefore1 = true;
            t6 = grid._grid._Array2D$_array;
            if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t6 && C.JSArray_methods).$index(t6, t2), t3), direction135))) {
              t6 = O.Directions_getDx(direction135);
              if (typeof t2 !== "number")
                return t2.$add();
              t6 = t2 + t6;
              t7 = O.Directions_getDy(direction135);
              if (typeof t3 !== "number")
                return t3.$add();
              t8 = grid._grid._Array2D$_array;
              if (t6 < 0 || t6 >= t8.length)
                return H.ioore(t8, t6);
              canNotGoDiagonalBefore2 = !H.boolConversionCheck(J.$index$asx(J.$index$asx(t8[t6], t3 + t7), direction));
            } else
              canNotGoDiagonalBefore2 = true;
            if (canNotGoDiagonalBefore1 && canNotGoDiagonalBefore2)
              jumpDirections.add$1(0, direction135);
          }
        }
      }
      return jumpDirections;
    },
    DirectedJumpPointSearchJumpPoints__diagonalJumpDirections: function(grid, position, direction, hasNextCardinalPointOfInterest, isForPreCalculation) {
      var jumpDirections, t4, t5, t6, _i, side, t7, t8, direction45, direction90, direction135, t9, canNotGoCardinalBefore,
        wpBefore = position.goMulti$2(O.Directions_turn(direction, 180), 1),
        t1 = grid._grid._Array2D$_array,
        t2 = wpBefore.x,
        t3 = wpBefore.y;
      if (!H.boolConversionCheck(J.$index$asx(J.$index$asx((t1 && C.JSArray_methods).$index(t1, t2), t3), direction)))
        return P.LinkedHashSet_LinkedHashSet(O.Direction);
      jumpDirections = P.LinkedHashSet_LinkedHashSet(O.Direction);
      for (t1 = [1, -1], t4 = position.x, t5 = position.y, t6 = !isForPreCalculation, _i = 0; _i < 2; ++_i) {
        side = t1[_i];
        t7 = direction.index * 45;
        t8 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(t7 + 45 * side + 360, 360), 45);
        if (t8 < 0 || t8 >= 8)
          return H.ioore(C.List_4j7, t8);
        direction45 = C.List_4j7[t8];
        t8 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(t7 + 90 * side + 360, 360), 45);
        if (t8 < 0 || t8 >= 8)
          return H.ioore(C.List_4j7, t8);
        direction90 = C.List_4j7[t8];
        t7 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(t7 + 135 * side + 360, 360), 45);
        if (t7 < 0 || t7 >= 8)
          return H.ioore(C.List_4j7, t7);
        direction135 = C.List_4j7[t7];
        t7 = grid._grid._Array2D$_array;
        if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t7 && C.JSArray_methods).$index(t7, t4), t5), direction45)))
          if (H.boolConversionCheck(hasNextCardinalPointOfInterest.call$2(position, direction45)))
            jumpDirections.add$1(0, direction45);
        t7 = grid._grid._Array2D$_array;
        if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t7 && C.JSArray_methods).$index(t7, t4), t5), direction90))) {
          t7 = grid._grid._Array2D$_array;
          if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t7 && C.JSArray_methods).$index(t7, t2), t3), direction45))) {
            t7 = O.Directions_getDx(direction45);
            if (typeof t2 !== "number")
              return t2.$add();
            t7 = t2 + t7;
            t8 = O.Directions_getDy(direction45);
            if (typeof t3 !== "number")
              return t3.$add();
            t9 = grid._grid._Array2D$_array;
            if (t7 < 0 || t7 >= t9.length)
              return H.ioore(t9, t7);
            canNotGoCardinalBefore = !H.boolConversionCheck(J.$index$asx(J.$index$asx(t9[t7], t3 + t8), direction45));
          } else
            canNotGoCardinalBefore = true;
          if (canNotGoCardinalBefore)
            jumpDirections.add$1(0, direction90);
        }
        t7 = grid._grid._Array2D$_array;
        if (H.boolConversionCheck(J.$index$asx(J.$index$asx((t7 && C.JSArray_methods).$index(t7, t4), t5), direction135))) {
          t7 = grid._grid._Array2D$_array;
          if (!H.boolConversionCheck(J.$index$asx(J.$index$asx((t7 && C.JSArray_methods).$index(t7, t2), t3), direction45)))
            if (!t6 || H.boolConversionCheck(hasNextCardinalPointOfInterest.call$2(position, direction135)))
              jumpDirections.add$1(0, direction135);
        }
      }
      return jumpDirections;
    }
  },
  V = {Component: function Component() {
    }, ReactComponentFactoryProxy: function ReactComponentFactoryProxy() {
    }, NotSpecified0: function NotSpecified0() {
    }, SyntheticEvent: function SyntheticEvent() {
    }, SyntheticClipboardEvent0: function SyntheticClipboardEvent0(t0, t1) {
      this.target = t0;
      this.type = t1;
    }, SyntheticKeyboardEvent0: function SyntheticKeyboardEvent0(t0, t1, t2) {
      this.key = t0;
      this.target = t1;
      this.type = t2;
    }, SyntheticFocusEvent0: function SyntheticFocusEvent0(t0, t1) {
      this.target = t0;
      this.type = t1;
    }, SyntheticFormEvent0: function SyntheticFormEvent0(t0, t1) {
      this.target = t0;
      this.type = t1;
    }, SyntheticDataTransfer: function SyntheticDataTransfer(t0) {
      this.files = t0;
    }, SyntheticMouseEvent: function SyntheticMouseEvent(t0, t1) {
      this.target = t0;
      this.type = t1;
    }, SyntheticTouchEvent0: function SyntheticTouchEvent0(t0, t1) {
      this.target = t0;
      this.type = t1;
    }, SyntheticTransitionEvent0: function SyntheticTransitionEvent0(t0, t1) {
      this.target = t0;
      this.type = t1;
    }, SyntheticAnimationEvent0: function SyntheticAnimationEvent0(t0, t1) {
      this.target = t0;
      this.type = t1;
    }, SyntheticUIEvent: function SyntheticUIEvent(t0, t1) {
      this.target = t0;
      this.type = t1;
    }, SyntheticWheelEvent0: function SyntheticWheelEvent0(t0, t1) {
      this.target = t0;
      this.type = t1;
    }, closure0: function closure0() {
    },
    _$ReactAlgorithmSettings: function(backingProps) {
      return V._$$ReactAlgorithmSettingsProps$(H.interceptedTypeCheck(backingProps, "$isMap"));
    },
    _$$ReactAlgorithmSettingsProps$: function(backingMap) {
      var t1 = new V._$$ReactAlgorithmSettingsProps(P.LinkedHashMap__makeEmpty(), null, null);
      t1.get$$$isClassGenerated();
      t1._ReactAlgorithmSettings$_props = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    _$ReactAlgorithmSettingsProps: function _$ReactAlgorithmSettingsProps() {
    },
    ReactAlgorithmSettingsComponent: function ReactAlgorithmSettingsComponent() {
    },
    ReactAlgorithmSettingsComponent_componentWillMount_closure: function ReactAlgorithmSettingsComponent_componentWillMount_closure(t0) {
      this.$this = t0;
    },
    ReactAlgorithmSettingsComponent_render_closure: function ReactAlgorithmSettingsComponent_render_closure() {
    },
    ReactAlgorithmSettingsComponent_render_closure0: function ReactAlgorithmSettingsComponent_render_closure0(t0) {
      this.$this = t0;
    },
    ReactAlgorithmSettingsComponent_render_closure1: function ReactAlgorithmSettingsComponent_render_closure1() {
    },
    ReactAlgorithmSettingsComponent_render_closure2: function ReactAlgorithmSettingsComponent_render_closure2(t0) {
      this.$this = t0;
    },
    ReactAlgorithmSettingsComponent_render_closure3: function ReactAlgorithmSettingsComponent_render_closure3() {
    },
    ReactAlgorithmSettingsComponent_render_closure4: function ReactAlgorithmSettingsComponent_render_closure4(t0) {
      this.$this = t0;
    },
    ReactAlgorithmSettingsComponent_render_closure5: function ReactAlgorithmSettingsComponent_render_closure5(t0) {
      this.$this = t0;
    },
    closure5: function closure5() {
    },
    _$ReactAlgorithmSettingsPropsAccessorsMixin: function _$ReactAlgorithmSettingsPropsAccessorsMixin() {
    },
    ReactAlgorithmSettingsProps: function ReactAlgorithmSettingsProps() {
    },
    _$$ReactAlgorithmSettingsProps: function _$$ReactAlgorithmSettingsProps(t0, t1, t2) {
      var _ = this;
      _._ReactAlgorithmSettings$_props = t0;
      _.store = null;
      _.UbiquitousDomPropsMixin__aria = t1;
      _.UbiquitousDomPropsMixin__dom = t2;
    },
    _$ReactAlgorithmSettingsComponent: function _$ReactAlgorithmSettingsComponent(t0, t1, t2, t3) {
      var _ = this;
      _.listener = null;
      _._typedPropsCache = t0;
      _._react$_props = _._context = null;
      _._state = t1;
      _._jsThis = _._jsRedraw = null;
      _._setStateCallbacks = t2;
      _._transactionalSetStateCallbacks = t3;
      _.nextProps = _.prevState = _._nextState = _.nextContext = null;
    },
    _ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsPropsAccessorsMixin: function _ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsPropsAccessorsMixin() {
    },
    __$$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsPropsAccessorsMixin: function __$$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsPropsAccessorsMixin() {
    },
    _$ReactNode: function(backingProps) {
      return V._$$ReactNodeProps$(H.interceptedTypeCheck(backingProps, "$isMap"));
    },
    _$$ReactNodeProps$: function(backingMap) {
      var t1 = new V._$$ReactNodeProps(P.LinkedHashMap__makeEmpty(), null, null);
      t1.get$$$isClassGenerated();
      t1._ReactNode$_props = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    _$ReactNodeProps: function _$ReactNodeProps() {
    },
    _$ReactNodeState: function _$ReactNodeState() {
    },
    ReactNodeComponent: function ReactNodeComponent() {
    },
    ReactNodeComponent_boxHighlight_closure: function ReactNodeComponent_boxHighlight_closure() {
    },
    ReactNodeComponent_boxHighlight_closure0: function ReactNodeComponent_boxHighlight_closure0() {
    },
    ReactNodeComponent_directionTextHighlights_closure: function ReactNodeComponent_directionTextHighlights_closure() {
    },
    ReactNodeComponent_directionTextHighlights_closure0: function ReactNodeComponent_directionTextHighlights_closure0() {
    },
    ReactNodeComponent_pathHighlights_closure: function ReactNodeComponent_pathHighlights_closure() {
    },
    ReactNodeComponent_pathHighlights_closure0: function ReactNodeComponent_pathHighlights_closure0() {
    },
    ReactNodeComponent_textHighlight_closure: function ReactNodeComponent_textHighlight_closure() {
    },
    ReactNodeComponent_textHighlight_closure0: function ReactNodeComponent_textHighlight_closure0() {
    },
    ReactNodeComponent_circleHighlight_closure: function ReactNodeComponent_circleHighlight_closure() {
    },
    ReactNodeComponent_circleHighlight_closure0: function ReactNodeComponent_circleHighlight_closure0() {
    },
    ReactNodeComponent_dotHighlight_closure: function ReactNodeComponent_dotHighlight_closure() {
    },
    ReactNodeComponent_dotHighlight_closure0: function ReactNodeComponent_dotHighlight_closure0() {
    },
    ReactNodeComponent_componentWillMount_closure: function ReactNodeComponent_componentWillMount_closure(t0) {
      this.$this = t0;
    },
    ReactNodeComponent_componentWillMount_closure0: function ReactNodeComponent_componentWillMount_closure0() {
    },
    ReactNodeComponent_render_closure: function ReactNodeComponent_render_closure(t0) {
      this.$this = t0;
    },
    ReactNodeComponent_render_closure0: function ReactNodeComponent_render_closure0(t0) {
      this.$this = t0;
    },
    ReactNodeComponent_render_closure1: function ReactNodeComponent_render_closure1(t0) {
      this.$this = t0;
    },
    ReactNodeComponent_render_closure2: function ReactNodeComponent_render_closure2(t0) {
      this.$this = t0;
    },
    ReactNodeComponent__renderPart_closure: function ReactNodeComponent__renderPart_closure(t0) {
      this.direction = t0;
    },
    ReactNodeComponent__renderPart_closure0: function ReactNodeComponent__renderPart_closure0() {
    },
    ReactNodeComponent__renderPathHighlights_closure: function ReactNodeComponent__renderPathHighlights_closure(t0) {
      this.$this = t0;
    },
    closure17: function closure17() {
    },
    _$ReactNodePropsAccessorsMixin: function _$ReactNodePropsAccessorsMixin() {
    },
    ReactNodeProps: function ReactNodeProps() {
    },
    _$$ReactNodeProps: function _$$ReactNodeProps(t0, t1, t2) {
      var _ = this;
      _._ReactNode$_props = t0;
      _.position = _.grid = _.store = null;
      _.UbiquitousDomPropsMixin__aria = t1;
      _.UbiquitousDomPropsMixin__dom = t2;
    },
    _$ReactNodeStateAccessorsMixin: function _$ReactNodeStateAccessorsMixin() {
    },
    ReactNodeState: function ReactNodeState() {
    },
    _$$ReactNodeState: function _$$ReactNodeState(t0) {
      this._ReactNode$_state = t0;
      this.mouseIsDown = this.mouseIsOver = null;
    },
    _$ReactNodeComponent: function _$ReactNodeComponent(t0, t1, t2, t3, t4) {
      var _ = this;
      _.listener = null;
      _._typedStateCache = t0;
      _._typedPropsCache = t1;
      _._react$_props = _._context = null;
      _._state = t2;
      _._jsThis = _._jsRedraw = null;
      _._setStateCallbacks = t3;
      _._transactionalSetStateCallbacks = t4;
      _.nextProps = _.prevState = _._nextState = _.nextContext = null;
    },
    _ReactNodeProps__$ReactNodeProps__$ReactNodePropsAccessorsMixin: function _ReactNodeProps__$ReactNodeProps__$ReactNodePropsAccessorsMixin() {
    },
    _ReactNodeState__$ReactNodeState__$ReactNodeStateAccessorsMixin: function _ReactNodeState__$ReactNodeState__$ReactNodeStateAccessorsMixin() {
    },
    __$$ReactNodeProps__$ReactNodeProps__$ReactNodePropsAccessorsMixin: function __$$ReactNodeProps__$ReactNodeProps__$ReactNodePropsAccessorsMixin() {
    },
    __$$ReactNodeState__$ReactNodeState__$ReactNodeStateAccessorsMixin: function __$$ReactNodeState__$ReactNodeState__$ReactNodeStateAccessorsMixin() {
    }
  },
  K = {
    ReactDom_render: function(component, element) {
      return self.ReactDOM.render(component, element);
    },
    markChildrenValidated: function(children) {
      C.JSArray_methods.forEach$1(children, new K.markChildrenValidated_closure());
    },
    React: function React() {
    },
    ReactDomServer: function ReactDomServer() {
    },
    ReactClass: function ReactClass() {
    },
    ReactClassConfig: function ReactClassConfig() {
    },
    ReactElementStore: function ReactElementStore() {
    },
    ReactElement: function ReactElement() {
    },
    ReactComponent: function ReactComponent() {
    },
    InteropContextValue: function InteropContextValue() {
    },
    InteropProps: function InteropProps() {
    },
    ReactDartComponentInternal: function ReactDartComponentInternal() {
      this.props = null;
    },
    ReactDartContextInternal: function ReactDartContextInternal(t0) {
      this.value = t0;
    },
    markChildrenValidated_closure: function markChildrenValidated_closure() {
    },
    ReactDartInteropStatics: function ReactDartInteropStatics() {
    },
    ComponentStatics: function ComponentStatics(t0) {
      this.componentFactory = t0;
    },
    JsComponentConfig: function JsComponentConfig() {
    },
    ReactDOM: function ReactDOM() {
    },
    Array2D$: function(size, _producer, $T) {
      var t1 = new K.Array2D(_producer, size.width, size.height, [$T]);
      t1.Array2D$2(size, _producer, $T);
      return t1;
    },
    Array2D: function Array2D(t0, t1, t2, t3) {
      var _ = this;
      _._Array2D$_array = null;
      _._producer = t0;
      _.width = t1;
      _.height = t2;
      _.$ti = t3;
    },
    Array2D_closure: function Array2D_closure(t0, t1, t2) {
      this.$this = t0;
      this.size = t1;
      this.T = t2;
    },
    Array2D__closure: function Array2D__closure(t0, t1, t2) {
      this.$this = t0;
      this.x = t1;
      this.T = t2;
    },
    Highlights_fromMap: function(map) {
      var _s5_ = "style",
        t1 = J.getInterceptor$asx(map);
      switch (H.stringTypeCast(t1.$index(map, "highlight"))) {
        case "BoxHighlight":
          return new K.BoxHighlight(H.stringTypeCast(t1.$index(map, _s5_)));
        case "CircleHighlight":
          return new K.CircleHighlight(H.stringTypeCast(t1.$index(map, _s5_)));
        case "DotHighlight":
          return new K.DotHighlight(H.stringTypeCast(t1.$index(map, _s5_)));
        case "PathHighlight":
          return K.PathHighlight$fromMap(map);
        case "TextHighlight":
          return new K.TextHighlight(H.stringTypeCast(t1.$index(map, "text")), H.stringTypeCast(t1.$index(map, _s5_)));
        case "DirectionTextHighlight":
          return new K.DirectionTextHighlight(C.JSArray_methods.$index(C.List_4j7, H.intTypeCast(t1.$index(map, "direction"))), H.stringTypeCast(t1.$index(map, "text")), H.stringTypeCast(t1.$index(map, _s5_)));
      }
      throw H.wrapException(P.Exception_Exception("Invalid Highlight"));
    },
    Highlights_toListMap: function(highlights) {
      var t1 = [P.Map,,,],
        t2 = H.getTypeArgumentByIndex(highlights, 0);
      return new H.MappedListIterable(highlights, H.functionTypeCheck(new K.Highlights_toListMap_closure(), {func: 1, ret: t1, args: [t2]}), [t2, t1]).toList$0(0);
    },
    Highlights_fromListMap: function(mapList) {
      return J.map$1$1$ax(mapList, new K.Highlights_fromListMap_closure(), K.Highlight).toList$0(0);
    },
    PathHighlight$: function(path, showEnd) {
      return new K.PathHighlight(path, true, false, 1, 1, "pleaseSetStyle");
    },
    PathHighlight$styled: function(style, path, endIntermediate, showEnd, startIntermediate) {
      var t1 = startIntermediate != null ? startIntermediate : 1;
      t1 = new K.PathHighlight(path, true, false, t1, endIntermediate != null ? endIntermediate : 1, "pleaseSetStyle");
      t1.style = style;
      return t1;
    },
    PathHighlight$fromMap: function(map) {
      var t1 = J.getInterceptor$asx(map);
      return new K.PathHighlight(J.map$1$1$ax(H.listTypeCast(t1.$index(map, "path")), new K.PathHighlight$fromMap_closure(), E.Position).toList$0(0), H.boolTypeCast(t1.$index(map, "showEnd")), H.boolTypeCast(t1.$index(map, "showStart")), H.doubleTypeCast(t1.$index(map, "startIntermediate")), H.doubleTypeCast(t1.$index(map, "endIntermediate")), H.stringTypeCast(t1.$index(map, "style")));
    },
    Highlights_toListMap_closure: function Highlights_toListMap_closure() {
    },
    Highlights_fromListMap_closure: function Highlights_fromListMap_closure() {
    },
    Highlight: function Highlight() {
    },
    BoxHighlight: function BoxHighlight(t0) {
      this.style = t0;
    },
    CircleHighlight: function CircleHighlight(t0) {
      this.style = t0;
    },
    DotHighlight: function DotHighlight(t0) {
      this.style = t0;
    },
    PathHighlight: function PathHighlight(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.path = t0;
      _.showEnd = t1;
      _.showStart = t2;
      _.startIntermediate = t3;
      _.endIntermediate = t4;
      _.style = t5;
    },
    PathHighlight$fromMap_closure: function PathHighlight$fromMap_closure() {
    },
    PathHighlight_toMap_closure: function PathHighlight_toMap_closure() {
    },
    TextHighlight: function TextHighlight(t0, t1) {
      this.text = t0;
      this.style = t1;
    },
    DirectionTextHighlight: function DirectionTextHighlight(t0, t1, t2) {
      this.direction = t0;
      this.text = t1;
      this.style = t2;
    },
    _$ReactHistory: function(backingProps) {
      return K._$$ReactHistoryProps$(H.interceptedTypeCheck(backingProps, "$isMap"));
    },
    _$$ReactHistoryProps$: function(backingMap) {
      var t1 = new K._$$ReactHistoryProps(P.LinkedHashMap__makeEmpty(), null, null);
      t1.get$$$isClassGenerated();
      t1._ReactHistory$_props = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    _$ReactHistoryProps: function _$ReactHistoryProps() {
    },
    ReactHistoryComponent: function ReactHistoryComponent() {
    },
    ReactHistoryComponent_componentWillMount_closure: function ReactHistoryComponent_componentWillMount_closure(t0) {
      this.$this = t0;
    },
    ReactHistoryComponent_render_closure: function ReactHistoryComponent_render_closure(t0) {
      this.$this = t0;
    },
    ReactHistoryComponent__renderPart_closure: function ReactHistoryComponent__renderPart_closure(t0, t1, t2) {
      this.$this = t0;
      this.selected = t1;
      this.stepId = t2;
    },
    ReactHistoryComponent__renderExplanations_closure: function ReactHistoryComponent__renderExplanations_closure(t0) {
      this.$this = t0;
    },
    ReactHistoryComponent__renderExplanation_closure: function ReactHistoryComponent__renderExplanation_closure(t0) {
      this.$this = t0;
    },
    closure3: function closure3() {
    },
    _$ReactHistoryPropsAccessorsMixin: function _$ReactHistoryPropsAccessorsMixin() {
    },
    ReactHistoryProps: function ReactHistoryProps() {
    },
    _$$ReactHistoryProps: function _$$ReactHistoryProps(t0, t1, t2) {
      var _ = this;
      _._ReactHistory$_props = t0;
      _.store = null;
      _.UbiquitousDomPropsMixin__aria = t1;
      _.UbiquitousDomPropsMixin__dom = t2;
    },
    _$ReactHistoryComponent: function _$ReactHistoryComponent(t0, t1, t2, t3) {
      var _ = this;
      _.listener = null;
      _._typedPropsCache = t0;
      _._react$_props = _._context = null;
      _._state = t1;
      _._jsThis = _._jsRedraw = null;
      _._setStateCallbacks = t2;
      _._transactionalSetStateCallbacks = t3;
      _.nextProps = _.prevState = _._nextState = _.nextContext = null;
    },
    _ReactHistoryProps__$ReactHistoryProps__$ReactHistoryPropsAccessorsMixin: function _ReactHistoryProps__$ReactHistoryProps__$ReactHistoryPropsAccessorsMixin() {
    },
    __$$ReactHistoryProps__$ReactHistoryProps__$ReactHistoryPropsAccessorsMixin: function __$$ReactHistoryProps__$ReactHistoryProps__$ReactHistoryPropsAccessorsMixin() {
    },
    Transfer: function Transfer() {
    },
    Transfer_receive_closure: function Transfer_receive_closure() {
    },
    Transfer_receive_closure0: function Transfer_receive_closure0() {
    },
    Transfer_send_closure: function Transfer_send_closure(t0) {
      this.$this = t0;
    }
  },
  Z = {
    patchName: function(object) {
      var current, nameDescriptor;
      for (current = object; current = self.Object.getPrototypeOf(current), current != null;) {
        nameDescriptor = self.Object.getOwnPropertyDescriptor(current, "name");
        if (nameDescriptor != null) {
          self.Object.defineProperty(object, "name", nameDescriptor);
          return;
        }
      }
    },
    _NsmEmulatedFunctionWithNameProperty: function _NsmEmulatedFunctionWithNameProperty() {
      this._ddc_emulated_function_name_bug$_name = null;
    },
    closure20: function closure20() {
    },
    _PropertyDescriptor: function _PropertyDescriptor() {
    },
    Dijkstra: function Dijkstra(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.name = t0;
      _.closed = _.open = _.parent = _.distance = null;
      _.grid = t1;
      _.start = t2;
      _.target = t3;
      _.heuristic = t4;
      _._turnOfHistory = t5;
      _.searched = null;
      _.searchHistory = t6;
      _.nextTurn = 0;
    },
    Dijkstra_closure: function Dijkstra_closure() {
    },
    Dijkstra_findNextActiveNode_closure: function Dijkstra_findNextActiveNode_closure(t0) {
      this.$this = t0;
    },
    Dijkstra_findNextActiveNode_closure0: function Dijkstra_findNextActiveNode_closure0(t0) {
      this.$this = t0;
    },
    Dijkstra_findNextActiveNode_closure1: function Dijkstra_findNextActiveNode_closure1(t0) {
      this.$this = t0;
    },
    Euclidean: function Euclidean(t0) {
      this._Heuristic$_name = t0;
    }
  },
  D = {
    Barrier_totalUnblocked: function() {
      return new D.Barrier(P.LinkedHashMap_LinkedHashMap$_literal([C.Direction_0, false, C.Direction_1, false, C.Direction_2, false, C.Direction_3, false, C.Direction_4, false, C.Direction_5, false, C.Direction_6, false, C.Direction_7, false], O.Direction, P.bool));
    },
    Barrier_totalBlocked: function() {
      return new D.Barrier(P.LinkedHashMap_LinkedHashMap$_literal([C.Direction_0, true, C.Direction_1, true, C.Direction_2, true, C.Direction_3, true, C.Direction_4, true, C.Direction_5, true, C.Direction_6, true, C.Direction_7, true], O.Direction, P.bool));
    },
    Barrier$fromMap: function(map) {
      var t1 = J.getInterceptor$x(map),
        t2 = O.Direction,
        t3 = P.bool;
      return new D.Barrier(P.LinkedHashMap_LinkedHashMap$fromIterables(J.map$1$1$ax(t1.get$keys(map), new D.Barrier$fromMap_closure(), t2), J.map$1$1$ax(t1.get$values(map), new D.Barrier$fromMap_closure0(), t3).toList$0(0), t2, t3));
    },
    Barrier: function Barrier(t0) {
      this._blocked = t0;
    },
    Barrier$fromMap_closure: function Barrier$fromMap_closure() {
    },
    Barrier$fromMap_closure0: function Barrier$fromMap_closure0() {
    },
    Barrier_isAnyBlocked_closure: function Barrier_isAnyBlocked_closure() {
    },
    Barrier_toMap_closure: function Barrier_toMap_closure() {
    },
    BasicSearchAlgorithm: function BasicSearchAlgorithm() {
    },
    BasicSearchAlgorithm_runInner_closure: function BasicSearchAlgorithm_runInner_closure(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure0: function BasicSearchAlgorithm_runInner_closure0(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure1: function BasicSearchAlgorithm_runInner_closure1(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure2: function BasicSearchAlgorithm_runInner_closure2(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure3: function BasicSearchAlgorithm_runInner_closure3(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure4: function BasicSearchAlgorithm_runInner_closure4(t0, t1) {
      this.$this = t0;
      this.nStar = t1;
    },
    BasicSearchAlgorithm_runInner_closure5: function BasicSearchAlgorithm_runInner_closure5(t0, t1) {
      this.$this = t0;
      this.nStar = t1;
    },
    BasicSearchAlgorithm_runInner_closure6: function BasicSearchAlgorithm_runInner_closure6(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure7: function BasicSearchAlgorithm_runInner_closure7(t0, t1) {
      this.$this = t0;
      this.nStar = t1;
    },
    BasicSearchAlgorithm_runInner_closure8: function BasicSearchAlgorithm_runInner_closure8(t0, t1, t2) {
      this.$this = t0;
      this.nStar = t1;
      this.updatedNodes = t2;
    },
    BasicSearchAlgorithm_runInner_closure9: function BasicSearchAlgorithm_runInner_closure9(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure10: function BasicSearchAlgorithm_runInner_closure10(t0, t1, t2) {
      this.$this = t0;
      this.nStar = t1;
      this.updatedNodes = t2;
    },
    BasicSearchAlgorithm_runInner_closure11: function BasicSearchAlgorithm_runInner_closure11(t0) {
      this.$this = t0;
    },
    BasicSearchAlgorithm_runInner_closure12: function BasicSearchAlgorithm_runInner_closure12(t0) {
      this.nStar = t0;
    },
    MouseTracker$: function() {
      var t1 = new D.MouseTracker();
      t1.MouseTracker$0();
      return t1;
    },
    MouseTracker: function MouseTracker() {
      this._mouseIsDown = false;
      this.lastMouseEvent = null;
    },
    MouseTracker_closure: function MouseTracker_closure(t0) {
      this.$this = t0;
    },
    MouseTracker_closure0: function MouseTracker_closure0(t0) {
      this.$this = t0;
    },
    _$ReactGrid: function(backingProps) {
      return D._$$ReactGridProps$(H.interceptedTypeCheck(backingProps, "$isMap"));
    },
    _$$ReactGridProps$: function(backingMap) {
      var t1 = new D._$$ReactGridProps(P.LinkedHashMap__makeEmpty(), null, null);
      t1.get$$$isClassGenerated();
      t1._ReactGrid$_props = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    _$ReactGridProps: function _$ReactGridProps() {
    },
    ReactGridComponent: function ReactGridComponent() {
    },
    ReactGridComponent_componentWillMount_closure: function ReactGridComponent_componentWillMount_closure(t0) {
      this.$this = t0;
    },
    ReactGridComponent_componentWillMount_closure0: function ReactGridComponent_componentWillMount_closure0(t0) {
      this.$this = t0;
    },
    ReactGridComponent_componentWillMount_closure1: function ReactGridComponent_componentWillMount_closure1(t0) {
      this.$this = t0;
    },
    ReactGridComponent__renderRow_closure: function ReactGridComponent__renderRow_closure(t0, t1) {
      this.$this = t0;
      this.y = t1;
    },
    ReactGridComponent_updateMouseModeFromNode_closure: function ReactGridComponent_updateMouseModeFromNode_closure(t0) {
      this.position = t0;
    },
    ReactGridComponent_updateMouseModeFromNodePart_closure: function ReactGridComponent_updateMouseModeFromNodePart_closure(t0, t1) {
      this.position = t0;
      this.direction = t1;
    },
    closure16: function closure16() {
    },
    _$ReactGridPropsAccessorsMixin: function _$ReactGridPropsAccessorsMixin() {
    },
    ReactGridProps: function ReactGridProps() {
    },
    _$$ReactGridProps: function _$$ReactGridProps(t0, t1, t2) {
      var _ = this;
      _._ReactGrid$_props = t0;
      _.store = null;
      _.UbiquitousDomPropsMixin__aria = t1;
      _.UbiquitousDomPropsMixin__dom = t2;
    },
    _$ReactGridComponent: function _$ReactGridComponent(t0, t1, t2, t3) {
      var _ = this;
      _._onDocumentMouseUpListener = _._mouseMode = _.listener = null;
      _._typedPropsCache = t0;
      _._react$_props = _._context = null;
      _._state = t1;
      _._jsThis = _._jsRedraw = null;
      _._setStateCallbacks = t2;
      _._transactionalSetStateCallbacks = t3;
      _.nextProps = _.prevState = _._nextState = _.nextContext = null;
    },
    _ReactGridProps__$ReactGridProps__$ReactGridPropsAccessorsMixin: function _ReactGridProps__$ReactGridProps__$ReactGridPropsAccessorsMixin() {
    },
    __$$ReactGridProps__$ReactGridProps__$ReactGridPropsAccessorsMixin: function __$$ReactGridProps__$ReactGridProps__$ReactGridPropsAccessorsMixin() {
    }
  },
  E = {BarrierManager: function BarrierManager(t0) {
      this._BarrierManager$_store = t0;
    }, BarrierManager_somethingToDisplay_closure: function BarrierManager_somethingToDisplay_closure(t0, t1) {
      this.$this = t0;
      this.position = t1;
    }, DirectedJumpPointSearch: function DirectedJumpPointSearch(t0, t1, t2, t3, t4, t5, t6, t7) {
      var _ = this;
      _.nextJumpPointHighlights = t0;
      _.name = t1;
      _.closed = _.open = _.parent = _.distance = null;
      _.grid = t2;
      _.start = t3;
      _.target = t4;
      _.heuristic = t5;
      _._turnOfHistory = t6;
      _.searched = null;
      _.searchHistory = t7;
      _.nextTurn = 0;
    }, DirectedJumpPointSearch_closure: function DirectedJumpPointSearch_closure() {
    }, DirectedJumpPointSearch_findNeighbourNodes_closure: function DirectedJumpPointSearch_findNeighbourNodes_closure(t0) {
      this.$this = t0;
    }, DirectedJumpPointSearch_findNeighbourNodes_closure0: function DirectedJumpPointSearch_findNeighbourNodes_closure0(t0) {
      this.neighbours = t0;
    }, DirectedJumpPointSearch_getNextJumpPoint_closure: function DirectedJumpPointSearch_getNextJumpPoint_closure(t0) {
      this.$this = t0;
    },
    DirectedJumpPointSearchData$: function(size) {
      var t1 = new E.DirectedJumpPointSearchData_closure(),
        t2 = new E.DirectedJumpPointSearchData(t1, size.width, size.height);
      t2.Array2D$2(size, t1, E.DirectedJumpPointSearchDataPoint);
      return t2;
    },
    DirectedJumpPointSearchDataPoint$: function() {
      var t1 = E.DirectedJumpPointSearchDataSignpost,
        t2 = H.getTypeArgumentByIndex(C.List_4j7, 0),
        t3 = O.Direction,
        t4 = E.DirectedJumpPointSearchDataDirectionAdviser;
      return new E.DirectedJumpPointSearchDataPoint(P.LinkedHashMap_LinkedHashMap$fromIterables(C.List_4j7, new H.MappedListIterable(C.List_4j7, H.functionTypeCheck(new E.DirectedJumpPointSearchDataPoint_closure(), {func: 1, ret: t1, args: [t2]}), [t2, t1]), t3, t1), P.LinkedHashMap_LinkedHashMap$fromIterables(C.List_4j7, new H.MappedListIterable(C.List_4j7, H.functionTypeCheck(new E.DirectedJumpPointSearchDataPoint_closure0(), {func: 1, ret: t4, args: [t2]}), [t2, t4]), t3, t4));
    },
    DirectedJumpPointSearchPreCalculator: function DirectedJumpPointSearchPreCalculator(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _.data = t0;
      _.grid = t1;
      _.start = t2;
      _.target = t3;
      _.heuristic = t4;
      _._turnOfHistory = t5;
      _.searched = null;
      _.searchHistory = t6;
      _.nextTurn = 0;
    },
    DirectedJumpPointSearchPreCalculator_closure: function DirectedJumpPointSearchPreCalculator_closure() {
    },
    DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator: function DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator(t0) {
      this.$this = t0;
    },
    DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator_closure: function DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator_closure(t0, t1) {
      this.position = t0;
      this.direction = t1;
    },
    DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator: function DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator(t0, t1) {
      this.$this = t0;
      this.pathHighlightGenerator = t1;
    },
    DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure: function DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure(t0, t1, t2) {
      this.pathHighlightGenerator = t0;
      this.origin = t1;
      this.position = t2;
    },
    DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure0: function DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure0(t0, t1, t2, t3, t4) {
      var _ = this;
      _.$this = t0;
      _.position = t1;
      _.pathHighlightsGenerator = t2;
      _.origin = t3;
      _.depth = t4;
    },
    DirectedJumpPointSearchPreCalculator_runInner_closure: function DirectedJumpPointSearchPreCalculator_runInner_closure(t0) {
      this.pathHighlightsGenerator = t0;
    },
    DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights: function DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights(t0) {
      this.$this = t0;
    },
    DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights_closure: function DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights_closure(t0, t1) {
      this.$this = t0;
      this.where = t1;
    },
    DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure: function DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure(t0, t1, t2) {
      this.$this = t0;
      this.where = t1;
      this.position = t2;
    },
    DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure0: function DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure0(t0, t1) {
      this.$this = t0;
      this.position = t1;
    },
    DirectedJumpPointSearchPreCalculator_runInner_closure0: function DirectedJumpPointSearchPreCalculator_runInner_closure0() {
    },
    DirectedJumpPointSearchPreCalculator_runInner_closure1: function DirectedJumpPointSearchPreCalculator_runInner_closure1() {
    },
    DirectedJumpPointSearchPreCalculator_runInner_closure2: function DirectedJumpPointSearchPreCalculator_runInner_closure2() {
    },
    DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights: function DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights(t0) {
      this.$this = t0;
    },
    DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights_closure: function DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights_closure(t0, t1) {
      this.$this = t0;
      this.sourceDirections = t1;
    },
    DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights__closure: function DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights__closure(t0, t1) {
      this.$this = t0;
      this.position = t1;
    },
    DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights___closure: function DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights___closure(t0) {
      this.position = t0;
    },
    DirectedJumpPointSearchPreCalculator_recomputeBox_closure: function DirectedJumpPointSearchPreCalculator_recomputeBox_closure(t0) {
      this.$this = t0;
    },
    DirectedJumpPointSearchData: function DirectedJumpPointSearchData(t0, t1, t2) {
      var _ = this;
      _._Array2D$_array = null;
      _._producer = t0;
      _.width = t1;
      _.height = t2;
    },
    DirectedJumpPointSearchData_closure: function DirectedJumpPointSearchData_closure() {
    },
    DirectedJumpPointSearchDataPoint: function DirectedJumpPointSearchDataPoint(t0, t1) {
      this.signposts = t0;
      this.directionAdvisers = t1;
    },
    DirectedJumpPointSearchDataPoint_closure: function DirectedJumpPointSearchDataPoint_closure() {
    },
    DirectedJumpPointSearchDataPoint_closure0: function DirectedJumpPointSearchDataPoint_closure0() {
    },
    DirectedJumpPointSearchDataSignpost: function DirectedJumpPointSearchDataSignpost(t0) {
      this.type = t0;
      this.distance = 0;
    },
    DirectedJumpPointSearchDataDirectionAdviser: function DirectedJumpPointSearchDataDirectionAdviser(t0) {
      this.jumpDirections = t0;
    },
    DirectedJumpPointSearchDataPointDirectionType: function DirectedJumpPointSearchDataPointDirectionType(t0) {
      this._DirectedJumpPointSearchPreCalculator$_name = t0;
    },
    CountDirection: function CountDirection(t0) {
      this._DirectedJumpPointSearchPreCalculator$_name = t0;
    },
    DirectedJumpPointSearchHighlights_forcedDirections: function(jumpPoint, directions) {
      return J.expand$1$1$ax(directions, new E.DirectedJumpPointSearchHighlights_forcedDirections_closure(jumpPoint), K.Highlight);
    },
    DirectedJumpPointSearchHighlights_forcedDirections_closure: function DirectedJumpPointSearchHighlights_forcedDirections_closure(t0) {
      this.jumpPoint = t0;
    },
    Position$fromMap: function(map) {
      var t1 = J.getInterceptor$asx(map);
      return new E.Position(H.intTypeCast(t1.$index(map, "x")), H.intTypeCast(t1.$index(map, "y")));
    },
    Position: function Position(t0, t1) {
      this.x = t0;
      this.y = t1;
    },
    Position__directionTo_closure: function Position__directionTo_closure(t0) {
      this._box_0 = t0;
    },
    Position_neighbours_closure: function Position_neighbours_closure(t0) {
      this.$this = t0;
    },
    Position_neighbours_closure0: function Position_neighbours_closure0(t0) {
      this.size = t0;
    }
  },
  N = {DirectedJumpPointSearchLookUp: function DirectedJumpPointSearchLookUp(t0, t1, t2, t3, t4, t5, t6) {
      var _ = this;
      _._data = null;
      _.name = t0;
      _.closed = _.open = _.parent = _.distance = null;
      _.grid = t1;
      _.start = t2;
      _.target = t3;
      _.heuristic = t4;
      _._turnOfHistory = t5;
      _.searched = null;
      _.searchHistory = t6;
      _.nextTurn = 0;
    }, DirectedJumpPointSearchLookUp_closure: function DirectedJumpPointSearchLookUp_closure() {
    }, DirectedJumpPointSearchLookUp_findNeighbourNodes_closure: function DirectedJumpPointSearchLookUp_findNeighbourNodes_closure(t0, t1) {
      this.$this = t0;
      this.node = t1;
    }, DirectedJumpPointSearchLookUp_findNeighbourNodes_closure0: function DirectedJumpPointSearchLookUp_findNeighbourNodes_closure0(t0, t1) {
      this.$this = t0;
      this.node = t1;
    }, DirectedJumpPointSearchLookUp_findNeighbourNodes_closure1: function DirectedJumpPointSearchLookUp_findNeighbourNodes_closure1(t0, t1) {
      this.$this = t0;
      this.node = t1;
    }, DirectedJumpPointSearchLookUp_findNeighbourNodes_closure2: function DirectedJumpPointSearchLookUp_findNeighbourNodes_closure2(t0, t1) {
      this.$this = t0;
      this.node = t1;
    }, DirectedJumpPointSearchLookUp_findNeighbourNodes_closure3: function DirectedJumpPointSearchLookUp_findNeighbourNodes_closure3(t0) {
      this.node = t0;
    }, DirectedJumpPointSearchLookUp_visualiseDirectionAdviserDirect_closure: function DirectedJumpPointSearchLookUp_visualiseDirectionAdviserDirect_closure(t0) {
      this.newNeighbourNode = t0;
    }, EditBarrierMouseMode: function EditBarrierMouseMode(t0, t1) {
      this._easyFillMode = t0;
      this._reactGrid = t1;
    }, EditBarrierMouseMode__getAndUpdateEasyFillMode_closure: function EditBarrierMouseMode__getAndUpdateEasyFillMode_closure(t0, t1) {
      this.$this = t0;
      this.maybeNewValue = t1;
    }, GridManager: function GridManager(t0) {
      this._GridManager$_store = t0;
    }, GridManager_clear_closure: function GridManager_clear_closure(t0) {
      this.$this = t0;
    }, GridManager_clear_closure0: function GridManager_clear_closure0(t0) {
      this.$this = t0;
    }, MouseMode: function MouseMode() {
    }, StructureNodeType: function StructureNodeType(t0) {
      this._MouseMode$_name = t0;
    }},
  O = {
    Directions_turn: function(direction, plusDeg) {
      var t1 = C.JSInt_methods._tdivFast$1(C.JSInt_methods.$mod(direction.index * 45 + plusDeg + 360, 360), 45);
      if (t1 < 0 || t1 >= 8)
        return H.ioore(C.List_4j7, t1);
      return C.List_4j7[t1];
    },
    Directions_getDx: function(direction) {
      switch (direction) {
        case C.Direction_0:
          return 0;
        case C.Direction_1:
          return 1;
        case C.Direction_2:
          return 1;
        case C.Direction_3:
          return 1;
        case C.Direction_4:
          return 0;
        case C.Direction_5:
          return -1;
        case C.Direction_6:
          return -1;
        case C.Direction_7:
          return -1;
      }
      throw H.wrapException(P.Exception_Exception("Invalid"));
    },
    Directions_getDy: function(direction) {
      switch (direction) {
        case C.Direction_0:
          return -1;
        case C.Direction_1:
          return -1;
        case C.Direction_2:
          return 0;
        case C.Direction_3:
          return 1;
        case C.Direction_4:
          return 1;
        case C.Direction_5:
          return 1;
        case C.Direction_6:
          return 0;
        case C.Direction_7:
          return -1;
      }
      throw H.wrapException(P.Exception_Exception("Invalid"));
    },
    Directions_getName: function(direction) {
      switch (direction) {
        case C.Direction_0:
          return "north";
        case C.Direction_1:
          return "northeast";
        case C.Direction_2:
          return "east";
        case C.Direction_3:
          return "southeast";
        case C.Direction_4:
          return "south";
        case C.Direction_5:
          return "southwest";
        case C.Direction_6:
          return "west";
        case C.Direction_7:
          return "northwest";
      }
      return "Not Found";
    },
    Direction: function Direction(t0, t1) {
      this.index = t0;
      this._Direction$_name = t1;
    },
    NoAlgorithm: function NoAlgorithm(t0, t1, t2, t3, t4, t5) {
      var _ = this;
      _.grid = t0;
      _.start = t1;
      _.target = t2;
      _.heuristic = t3;
      _._turnOfHistory = t4;
      _.searched = null;
      _.searchHistory = t5;
      _.nextTurn = 0;
    },
    NoAlgorithm_closure: function NoAlgorithm_closure() {
    },
    ConstantZeroHeuristic: function ConstantZeroHeuristic(t0) {
      this._Heuristic$_name = t0;
    },
    _$ReactGridSettings: function(backingProps) {
      return O._$$ReactGridSettingsProps$(H.interceptedTypeCheck(backingProps, "$isMap"));
    },
    _$$ReactGridSettingsProps$: function(backingMap) {
      var t1 = new O._$$ReactGridSettingsProps(P.LinkedHashMap__makeEmpty(), null, null);
      t1.get$$$isClassGenerated();
      t1._ReactGridSettings$_props = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    _$ReactGridSettingsProps: function _$ReactGridSettingsProps() {
    },
    ReactGridSettingsComponent: function ReactGridSettingsComponent() {
    },
    ReactGridSettingsComponent_componentWillMount_closure: function ReactGridSettingsComponent_componentWillMount_closure(t0) {
      this.$this = t0;
    },
    ReactGridSettingsComponent_render_closure: function ReactGridSettingsComponent_render_closure() {
    },
    ReactGridSettingsComponent_render_closure0: function ReactGridSettingsComponent_render_closure0(t0) {
      this.$this = t0;
    },
    ReactGridSettingsComponent_render_closure1: function ReactGridSettingsComponent_render_closure1() {
    },
    ReactGridSettingsComponent_render_closure2: function ReactGridSettingsComponent_render_closure2(t0) {
      this.$this = t0;
    },
    ReactGridSettingsComponent_render_closure3: function ReactGridSettingsComponent_render_closure3() {
    },
    ReactGridSettingsComponent_render_closure4: function ReactGridSettingsComponent_render_closure4(t0) {
      this.$this = t0;
    },
    ReactGridSettingsComponent_render_closure5: function ReactGridSettingsComponent_render_closure5() {
    },
    ReactGridSettingsComponent_render_closure6: function ReactGridSettingsComponent_render_closure6(t0) {
      this.$this = t0;
    },
    ReactGridSettingsComponent_render_closure7: function ReactGridSettingsComponent_render_closure7(t0) {
      this.$this = t0;
    },
    ReactGridSettingsComponent_render_closure8: function ReactGridSettingsComponent_render_closure8(t0) {
      this.$this = t0;
    },
    ReactGridSettingsComponent_render_closure9: function ReactGridSettingsComponent_render_closure9(t0) {
      this.$this = t0;
    },
    ReactGridSettingsComponent_render_closure10: function ReactGridSettingsComponent_render_closure10(t0) {
      this.$this = t0;
    },
    ReactGridSettingsComponent_render__closure: function ReactGridSettingsComponent_render__closure(t0, t1) {
      this.$this = t0;
      this.reader = t1;
    },
    ReactGridSettingsComponent_render_closure11: function ReactGridSettingsComponent_render_closure11(t0) {
      this.$this = t0;
    },
    closure13: function closure13() {
    },
    _$ReactGridSettingsPropsAccessorsMixin: function _$ReactGridSettingsPropsAccessorsMixin() {
    },
    ReactGridSettingsProps: function ReactGridSettingsProps() {
    },
    _$$ReactGridSettingsProps: function _$$ReactGridSettingsProps(t0, t1, t2) {
      var _ = this;
      _._ReactGridSettings$_props = t0;
      _.load = _.download = _.store = null;
      _.UbiquitousDomPropsMixin__aria = t1;
      _.UbiquitousDomPropsMixin__dom = t2;
    },
    _$ReactGridSettingsComponent: function _$ReactGridSettingsComponent(t0, t1, t2, t3) {
      var _ = this;
      _.listener = null;
      _._typedPropsCache = t0;
      _._react$_props = _._context = null;
      _._state = t1;
      _._jsThis = _._jsRedraw = null;
      _._setStateCallbacks = t2;
      _._transactionalSetStateCallbacks = t3;
      _.nextProps = _.prevState = _._nextState = _.nextContext = null;
    },
    _ReactGridSettingsProps__$ReactGridSettingsProps__$ReactGridSettingsPropsAccessorsMixin: function _ReactGridSettingsProps__$ReactGridSettingsProps__$ReactGridSettingsPropsAccessorsMixin() {
    },
    __$$ReactGridSettingsProps__$ReactGridSettingsProps__$ReactGridSettingsPropsAccessorsMixin: function __$$ReactGridSettingsProps__$ReactGridSettingsProps__$ReactGridSettingsPropsAccessorsMixin() {
    },
    setupAlgorithmRunner: function(store) {
      var algorithmUpdateModeChanged,
        t1 = W.MouseEvent;
      W._EventStreamSubscription$(window.document, "mouseup", H.functionTypeCheck(new O.setupAlgorithmRunner_closure(store), {func: 1, ret: -1, args: [t1]}), false, t1);
      algorithmUpdateModeChanged = new O.setupAlgorithmRunner_closure0(store);
      t1 = [P.String];
      store.addEqualListener$2(H.setRuntimeTypeInfo(["algorithmUpdateMode"], t1), algorithmUpdateModeChanged);
      algorithmUpdateModeChanged.call$0();
      store.addEqualListener$2(H.setRuntimeTypeInfo(["size", "algorithmType", "heuristicType", "gridMode", "directionMode", "cornerMode", "directionalMode", "currentStepId"], t1), new O.setupAlgorithmRunner_closure1(store));
    },
    setupArrowKeys: function(store) {
      var t1 = W.KeyboardEvent;
      W._EventStreamSubscription$(window.document, "keydown", H.functionTypeCheck(new O.setupArrowKeys_closure(store), {func: 1, ret: -1, args: [t1]}), false, t1);
    },
    _$ReactMain: function(backingProps) {
      return O._$$ReactMainProps$(H.interceptedTypeCheck(backingProps, "$isMap"));
    },
    _$$ReactMainProps$: function(backingMap) {
      var t1 = new O._$$ReactMainProps(P.LinkedHashMap__makeEmpty(), null, null);
      t1.get$$$isClassGenerated();
      t1._props = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    setupAlgorithmRunner_closure: function setupAlgorithmRunner_closure(t0) {
      this.store = t0;
    },
    setupAlgorithmRunner_closure0: function setupAlgorithmRunner_closure0(t0) {
      this.store = t0;
    },
    setupAlgorithmRunner_closure1: function setupAlgorithmRunner_closure1(t0) {
      this.store = t0;
    },
    setupArrowKeys_closure: function setupArrowKeys_closure(t0) {
      this.store = t0;
    },
    _$ReactMainProps: function _$ReactMainProps() {
    },
    ReactMainComponent: function ReactMainComponent() {
    },
    closure: function closure() {
    },
    _$ReactMainPropsAccessorsMixin: function _$ReactMainPropsAccessorsMixin() {
    },
    ReactMainProps: function ReactMainProps() {
    },
    _$$ReactMainProps: function _$$ReactMainProps(t0, t1, t2) {
      var _ = this;
      _._props = t0;
      _.store = null;
      _.UbiquitousDomPropsMixin__aria = t1;
      _.UbiquitousDomPropsMixin__dom = t2;
    },
    _$ReactMainComponent: function _$ReactMainComponent(t0, t1, t2, t3) {
      var _ = this;
      _._typedPropsCache = t0;
      _._react$_props = _._context = null;
      _._state = t1;
      _._jsThis = _._jsRedraw = null;
      _._setStateCallbacks = t2;
      _._transactionalSetStateCallbacks = t3;
      _.nextProps = _.prevState = _._nextState = _.nextContext = null;
    },
    _ReactMainProps__$ReactMainProps__$ReactMainPropsAccessorsMixin: function _ReactMainProps__$ReactMainProps__$ReactMainPropsAccessorsMixin() {
    },
    __$$ReactMainProps__$ReactMainProps__$ReactMainPropsAccessorsMixin: function __$$ReactMainProps__$ReactMainProps__$ReactMainPropsAccessorsMixin() {
    },
    Util_notNull: function(value, orElse, $T) {
      return value != null ? value : orElse.call$0();
    },
    Util_equal: function(itemOne, itemTwo) {
      var t1 = J.getInterceptor$(itemOne);
      if (t1.$eq(itemOne, itemTwo))
        return true;
      if (itemOne == null || itemTwo == null)
        return false;
      if (!!t1.$isMap && !!J.getInterceptor$(itemTwo).$isMap)
        return O.Util__equalMap(itemOne, itemTwo);
      if (!!t1.$isList && !!J.getInterceptor$(itemTwo).$isList)
        return O.Util__equalList(itemOne, itemTwo);
      return false;
    },
    Util__equalList: function(listOne, listTwo) {
      var i,
        t1 = J.getInterceptor$asx(listOne),
        t2 = J.getInterceptor$asx(listTwo);
      if (t1.get$length(listOne) !== t2.get$length(listTwo))
        return false;
      for (i = 0; i < t1.get$length(listOne); ++i)
        if (!O.Util_equal(t1.$index(listOne, i), t2.$index(listTwo, i)))
          return false;
      return true;
    },
    Util__equalMap: function(mapOne, mapTwo) {
      var t3, key,
        t1 = J.getInterceptor$asx(mapOne),
        t2 = J.getInterceptor$asx(mapTwo);
      if (t1.get$length(mapOne) != t2.get$length(mapTwo))
        return false;
      for (t3 = J.get$iterator$ax(t1.get$keys(mapOne)); t3.moveNext$0();) {
        key = t3.get$current(t3);
        if (!O.Util_equal(t1.$index(mapOne, key), t2.$index(mapTwo, key)))
          return false;
      }
      return true;
    }
  },
  Y = {
    _$ReactExplanationPart: function(backingProps) {
      return Y._$$ReactExplanationPartProps$(H.interceptedTypeCheck(backingProps, "$isMap"));
    },
    _$$ReactExplanationPartProps$: function(backingMap) {
      var t1 = new Y._$$ReactExplanationPartProps(P.LinkedHashMap__makeEmpty(), null, null);
      t1.get$$$isClassGenerated();
      t1._ReactExplanationPart$_props = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    _$ReactExplanationPartProps: function _$ReactExplanationPartProps() {
    },
    ReactExplanationPartComponent: function ReactExplanationPartComponent() {
    },
    ReactExplanationPartComponent_render_closure: function ReactExplanationPartComponent_render_closure(t0, t1) {
      this.$this = t0;
      this.explanationPart = t1;
    },
    ReactExplanationPartComponent_render_closure0: function ReactExplanationPartComponent_render_closure0(t0, t1) {
      this.$this = t0;
      this.explanationPart = t1;
    },
    closure4: function closure4() {
    },
    _$ReactExplanationPartPropsAccessorsMixin: function _$ReactExplanationPartPropsAccessorsMixin() {
    },
    ReactExplanationPartProps: function ReactExplanationPartProps() {
    },
    _$$ReactExplanationPartProps: function _$$ReactExplanationPartProps(t0, t1, t2) {
      var _ = this;
      _._ReactExplanationPart$_props = t0;
      _.store = _.explanationPart = null;
      _.UbiquitousDomPropsMixin__aria = t1;
      _.UbiquitousDomPropsMixin__dom = t2;
    },
    _$ReactExplanationPartComponent: function _$ReactExplanationPartComponent(t0, t1, t2, t3) {
      var _ = this;
      _._typedPropsCache = t0;
      _._react$_props = _._context = null;
      _._state = t1;
      _._jsThis = _._jsRedraw = null;
      _._setStateCallbacks = t2;
      _._transactionalSetStateCallbacks = t3;
      _.nextProps = _.prevState = _._nextState = _.nextContext = null;
    },
    _ReactExplanationPartProps__$ReactExplanationPartProps__$ReactExplanationPartPropsAccessorsMixin: function _ReactExplanationPartProps__$ReactExplanationPartProps__$ReactExplanationPartPropsAccessorsMixin() {
    },
    __$$ReactExplanationPartProps__$ReactExplanationPartProps__$ReactExplanationPartPropsAccessorsMixin: function __$$ReactExplanationPartProps__$ReactExplanationPartProps__$ReactExplanationPartPropsAccessorsMixin() {
    },
    SearchHistory$: function(size) {
      var t1 = H.setRuntimeTypeInfo([], [M.Explanation]),
        t2 = P.LinkedHashMap_LinkedHashMap$fromIterable(size.positions$0(), null, new Y.SearchHistory_closure(), E.Position, [P.Map, P.String, [P.List, K.Highlight]]),
        t3 = new H.JsLinkedHashMap([P.String, [P.List, K.Highlight]]),
        t4 = [K.Highlight];
      t3.$indexSet(0, "background", H.setRuntimeTypeInfo([], t4));
      t3.$indexSet(0, "foreground", H.setRuntimeTypeInfo([], t4));
      t2.$indexSet(0, null, t3);
      return new Y.SearchHistory(t1, t2);
    },
    SearchHistory: function SearchHistory(t0, t1) {
      var _ = this;
      _._id = 0;
      _.foundPath = false;
      _.title = "";
      _.stepCount = 0;
      _.stepTitle = "";
      _._stepDescription = t0;
      _._stepHighlights = t1;
    },
    SearchHistory_closure: function SearchHistory_closure() {
    },
    SearchHistory_appendHM_closure: function SearchHistory_appendHM_closure(t0) {
      this.explanationPart = t0;
    },
    SearchHistory_appendHM__closure: function SearchHistory_appendHM__closure(t0) {
      this.explanationPart = t0;
    },
    SearchHistory_addHM_closure: function SearchHistory_addHM_closure(t0, t1) {
      this.$this = t0;
      this.id = t1;
    },
    SearchHistory_addHM__closure: function SearchHistory_addHM__closure(t0, t1, t2) {
      this.$this = t0;
      this.id = t1;
      this.tuple = t2;
    },
    SearchHistory_addHM___closure: function SearchHistory_addHM___closure() {
    }
  };
  var holders = [C, H, J, P, W, U, A, Q, S, B, M, R, F, L, G, T, X, V, K, Z, D, E, N, O, Y];
  hunkHelpers.setFunctionNamesIfNecessary(holders);
  var $ = {};
  H.JS_CONST.prototype = {};
  J.Interceptor.prototype = {
    $eq: function(receiver, other) {
      return receiver === other;
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    toString$0: function(receiver) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(receiver)) + "'";
    },
    noSuchMethod$1: function(receiver, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(receiver, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    }
  };
  J.JSBool.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$hashCode: function(receiver) {
      return receiver ? 519018 : 218159;
    },
    $isbool: 1
  };
  J.JSNull.prototype = {
    $eq: function(receiver, other) {
      return null == other;
    },
    toString$0: function(receiver) {
      return "null";
    },
    get$hashCode: function(receiver) {
      return 0;
    },
    noSuchMethod$1: function(receiver, invocation) {
      return this.super$Interceptor$noSuchMethod(receiver, H.interceptedTypeCheck(invocation, "$isInvocation"));
    },
    $isNull: 1
  };
  J.JavaScriptObject.prototype = {
    get$hashCode: function(receiver) {
      return 0;
    },
    toString$0: function(receiver) {
      return String(receiver);
    },
    $isJSObject: 1,
    $isReactClass: 1,
    $isReactElement: 1,
    $isReactComponent: 1,
    $isInteropContextValue: 1,
    $isInteropProps: 1,
    $isReactDartInteropStatics: 1,
    $isSyntheticEvent0: 1,
    $isSyntheticClipboardEvent: 1,
    $isSyntheticKeyboardEvent: 1,
    $isSyntheticFocusEvent: 1,
    $isSyntheticFormEvent: 1,
    $isNonNativeDataTransfer: 1,
    $isSyntheticMouseEvent0: 1,
    $isSyntheticTouchEvent: 1,
    $isSyntheticTransitionEvent: 1,
    $isSyntheticAnimationEvent: 1,
    $isSyntheticUIEvent0: 1,
    $isSyntheticWheelEvent: 1,
    $isTooltip: 1,
    set$displayName: function(obj, v) {
      return obj.displayName = v;
    },
    get$dartDefaultProps: function(obj) {
      return obj.dartDefaultProps;
    },
    set$dartDefaultProps: function(obj, v) {
      return obj.dartDefaultProps = v;
    },
    get$type: function(obj) {
      return obj.type;
    },
    get$props: function(obj) {
      return obj.props;
    },
    get$key: function(obj) {
      return obj.key;
    },
    get$dartComponent: function(obj) {
      return obj.dartComponent;
    },
    get$refs: function(obj) {
      return obj.refs;
    },
    setState$1: function(receiver, p0) {
      return receiver.setState(p0);
    },
    get$internal: function(obj) {
      return obj.internal;
    },
    set$key: function(obj, v) {
      return obj.key = v;
    },
    set$ref: function(obj, v) {
      return obj.ref = v;
    },
    get$bubbles: function(obj) {
      return obj.bubbles;
    },
    get$cancelable: function(obj) {
      return obj.cancelable;
    },
    get$currentTarget: function(obj) {
      return obj.currentTarget;
    },
    get$defaultPrevented: function(obj) {
      return obj.defaultPrevented;
    },
    get$eventPhase: function(obj) {
      return obj.eventPhase;
    },
    get$isTrusted: function(obj) {
      return obj.isTrusted;
    },
    get$nativeEvent: function(obj) {
      return obj.nativeEvent;
    },
    get$target: function(obj) {
      return obj.target;
    },
    get$timeStamp: function(obj) {
      return obj.timeStamp;
    },
    get$clipboardData: function(obj) {
      return obj.clipboardData;
    },
    get$altKey: function(obj) {
      return obj.altKey;
    },
    get$char: function(obj) {
      return obj.char;
    },
    get$ctrlKey: function(obj) {
      return obj.ctrlKey;
    },
    get$locale: function(obj) {
      return obj.locale;
    },
    get$location: function(obj) {
      return obj.location;
    },
    get$metaKey: function(obj) {
      return obj.metaKey;
    },
    get$repeat: function(obj) {
      return obj.repeat;
    },
    get$shiftKey: function(obj) {
      return obj.shiftKey;
    },
    get$keyCode: function(obj) {
      return obj.keyCode;
    },
    get$charCode: function(obj) {
      return obj.charCode;
    },
    get$relatedTarget: function(obj) {
      return obj.relatedTarget;
    },
    get$dropEffect: function(obj) {
      return obj.dropEffect;
    },
    get$effectAllowed: function(obj) {
      return obj.effectAllowed;
    },
    get$files: function(obj) {
      return obj.files;
    },
    get$types: function(obj) {
      return obj.types;
    },
    get$button: function(obj) {
      return obj.button;
    },
    get$buttons: function(obj) {
      return obj.buttons;
    },
    get$clientX: function(obj) {
      return obj.clientX;
    },
    get$clientY: function(obj) {
      return obj.clientY;
    },
    get$dataTransfer: function(obj) {
      return obj.dataTransfer;
    },
    get$pageX: function(obj) {
      return obj.pageX;
    },
    get$pageY: function(obj) {
      return obj.pageY;
    },
    get$screenX: function(obj) {
      return obj.screenX;
    },
    get$screenY: function(obj) {
      return obj.screenY;
    },
    get$changedTouches: function(obj) {
      return obj.changedTouches;
    },
    get$targetTouches: function(obj) {
      return obj.targetTouches;
    },
    get$touches: function(obj) {
      return obj.touches;
    },
    get$propertyName: function(obj) {
      return obj.propertyName;
    },
    get$elapsedTime: function(obj) {
      return obj.elapsedTime;
    },
    get$pseudoElement: function(obj) {
      return obj.pseudoElement;
    },
    get$animationName: function(obj) {
      return obj.animationName;
    },
    get$detail: function(obj) {
      return obj.detail;
    },
    get$view: function(obj) {
      return obj.view;
    },
    get$deltaX: function(obj) {
      return obj.deltaX;
    },
    get$deltaMode: function(obj) {
      return obj.deltaMode;
    },
    get$deltaY: function(obj) {
      return obj.deltaY;
    },
    get$deltaZ: function(obj) {
      return obj.deltaZ;
    },
    dispose$0: function(receiver) {
      return receiver.dispose();
    }
  };
  J.PlainJavaScriptObject.prototype = {};
  J.UnknownJavaScriptObject.prototype = {};
  J.JavaScriptFunction.prototype = {
    toString$0: function(receiver) {
      var dartClosure = receiver[$.$get$DART_CLOSURE_PROPERTY_NAME()];
      if (dartClosure == null)
        return this.super$JavaScriptObject$toString(receiver);
      return "JavaScript function for " + H.S(J.toString$0$(dartClosure));
    },
    $signature: function() {
      return {func: 1, opt: [,,,,,,,,,,,,,,,,]};
    },
    $isFunction: 1
  };
  J.JSArray.prototype = {
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("add"));
      receiver.push(value);
    },
    removeLast$0: function(receiver) {
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("removeLast"));
      if (receiver.length === 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, -1));
      return receiver.pop();
    },
    remove$1: function(receiver, element) {
      var i;
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("remove"));
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], element)) {
          receiver.splice(i, 1);
          return true;
        }
      return false;
    },
    where$1: function(receiver, f) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.WhereIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    expand$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.ExpandIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: [P.Iterable, $T], args: [t1]}), [t1, $T]);
    },
    addAll$1: function(receiver, collection) {
      var t1;
      H.assertSubtype(collection, "$isIterable", [H.getTypeArgumentByIndex(receiver, 0)], "$asIterable");
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("addAll"));
      for (t1 = J.get$iterator$ax(collection); t1.moveNext$0();)
        receiver.push(t1.get$current(t1));
    },
    forEach$1: function(receiver, f) {
      var end, i;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        f.call$1(receiver[i]);
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    join$1: function(receiver, separator) {
      var i,
        list = new Array(receiver.length);
      list.fixed$length = Array;
      for (i = 0; i < receiver.length; ++i)
        this.$indexSet(list, i, H.S(receiver[i]));
      return list.join(separator);
    },
    firstWhere$2$orElse: function(receiver, test, orElse) {
      var end, i, element,
        t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
      H.functionTypeCheck(orElse, {func: 1, ret: t1});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        element = receiver[i];
        if (H.boolConversionCheck(test.call$1(element)))
          return element;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return orElse.call$0();
    },
    lastWhere$2$orElse: function(receiver, test, orElse) {
      var $length, i, element,
        t1 = H.getTypeArgumentByIndex(receiver, 0);
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
      H.functionTypeCheck(orElse, {func: 1, ret: t1});
      $length = receiver.length;
      for (i = $length - 1; i >= 0; --i) {
        element = receiver[i];
        if (H.boolConversionCheck(test.call$1(element)))
          return element;
        if ($length !== receiver.length)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return orElse.call$0();
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    sublist$1: function(receiver, start) {
      var t1 = receiver.length;
      if (start > t1)
        throw H.wrapException(P.RangeError$range(start, 0, t1, "start", null));
      if (start === t1)
        return H.setRuntimeTypeInfo([], [H.getTypeArgumentByIndex(receiver, 0)]);
      return H.setRuntimeTypeInfo(receiver.slice(start, t1), [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$last: function(receiver) {
      var t1 = receiver.length;
      if (t1 > 0)
        return receiver[t1 - 1];
      throw H.wrapException(H.IterableElementError_noElement());
    },
    get$single: function(receiver) {
      var t1 = receiver.length;
      if (t1 === 1) {
        if (0 >= t1)
          return H.ioore(receiver, 0);
        return receiver[0];
      }
      if (t1 === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      throw H.wrapException(H.IterableElementError_tooMany());
    },
    any$1: function(receiver, test) {
      var end, i;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (H.boolConversionCheck(test.call$1(receiver[i])))
          return true;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    every$1: function(receiver, test) {
      var end, i;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getTypeArgumentByIndex(receiver, 0)]});
      end = receiver.length;
      for (i = 0; i < end; ++i) {
        if (!H.boolConversionCheck(test.call$1(receiver[i])))
          return false;
        if (receiver.length !== end)
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return true;
    },
    contains$1: function(receiver, other) {
      var i;
      for (i = 0; i < receiver.length; ++i)
        if (J.$eq$(receiver[i], other))
          return true;
      return false;
    },
    get$isEmpty: function(receiver) {
      return receiver.length === 0;
    },
    get$isNotEmpty: function(receiver) {
      return receiver.length !== 0;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    },
    toList$1$growable: function(receiver, growable) {
      var t1 = H.getTypeArgumentByIndex(receiver, 0);
      return growable ? H.setRuntimeTypeInfo(receiver.slice(0), [t1]) : J.JSArray_JSArray$markFixed(receiver.slice(0), t1);
    },
    get$iterator: function(receiver) {
      return new J.ArrayIterator(receiver, receiver.length, [H.getTypeArgumentByIndex(receiver, 0)]);
    },
    get$hashCode: function(receiver) {
      return H.Primitives_objectHashCode(receiver);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    set$length: function(receiver, newLength) {
      var _s9_ = "newLength";
      if (!!receiver.fixed$length)
        H.throwExpression(P.UnsupportedError$("set length"));
      if (typeof newLength !== "number" || Math.floor(newLength) !== newLength)
        throw H.wrapException(P.ArgumentError$value(newLength, _s9_, null));
      if (newLength < 0)
        throw H.wrapException(P.RangeError$range(newLength, 0, null, _s9_, null));
      receiver.length = newLength;
    },
    $index: function(receiver, index) {
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(receiver, 0));
      if (!!receiver.immutable$list)
        H.throwExpression(P.UnsupportedError$("indexed set"));
      if (typeof index !== "number" || Math.floor(index) !== index)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length || index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  J.JSUnmodifiableArray.prototype = {};
  J.ArrayIterator.prototype = {
    get$current: function(_) {
      return this.__interceptors$_current;
    },
    moveNext$0: function() {
      var t2, _this = this,
        t1 = _this._iterable,
        $length = t1.length;
      if (_this.__interceptors$_length !== $length)
        throw H.wrapException(H.throwConcurrentModificationError(t1));
      t2 = _this._index;
      if (t2 >= $length) {
        _this.set$__interceptors$_current(null);
        return false;
      }
      _this.set$__interceptors$_current(t1[t2]);
      ++_this._index;
      return true;
    },
    set$__interceptors$_current: function(_current) {
      this.__interceptors$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  J.JSNumber.prototype = {
    compareTo$1: function(receiver, b) {
      var bIsNegative;
      H.numTypeCheck(b);
      if (typeof b !== "number")
        throw H.wrapException(H.argumentErrorValue(b));
      if (receiver < b)
        return -1;
      else if (receiver > b)
        return 1;
      else if (receiver === b) {
        if (receiver === 0) {
          bIsNegative = this.get$isNegative(b);
          if (this.get$isNegative(receiver) === bIsNegative)
            return 0;
          if (this.get$isNegative(receiver))
            return -1;
          return 1;
        }
        return 0;
      } else if (isNaN(receiver)) {
        if (isNaN(b))
          return 0;
        return 1;
      } else
        return -1;
    },
    get$isNegative: function(receiver) {
      return receiver === 0 ? 1 / receiver < 0 : receiver < 0;
    },
    toInt$0: function(receiver) {
      var t1;
      if (receiver >= -2147483648 && receiver <= 2147483647)
        return receiver | 0;
      if (isFinite(receiver)) {
        t1 = receiver < 0 ? Math.ceil(receiver) : Math.floor(receiver);
        return t1 + 0;
      }
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".toInt()"));
    },
    round$0: function(receiver) {
      if (receiver > 0) {
        if (receiver !== 1 / 0)
          return Math.round(receiver);
      } else if (receiver > -1 / 0)
        return 0 - Math.round(0 - receiver);
      throw H.wrapException(P.UnsupportedError$("" + receiver + ".round()"));
    },
    toStringAsPrecision$1: function(receiver, precision) {
      var result;
      if (precision < 1 || precision > 21)
        throw H.wrapException(P.RangeError$range(precision, 1, 21, "precision", null));
      result = receiver.toPrecision(precision);
      if (receiver === 0 && this.get$isNegative(receiver))
        return "-" + result;
      return result;
    },
    toString$0: function(receiver) {
      if (receiver === 0 && 1 / receiver < 0)
        return "-0.0";
      else
        return "" + receiver;
    },
    get$hashCode: function(receiver) {
      var absolute, floorLog2, factor, scaled,
        intValue = receiver | 0;
      if (receiver === intValue)
        return 536870911 & intValue;
      absolute = Math.abs(receiver);
      floorLog2 = Math.log(absolute) / 0.6931471805599453 | 0;
      factor = Math.pow(2, floorLog2);
      scaled = absolute < 1 ? absolute / factor : factor / absolute;
      return 536870911 & ((scaled * 9007199254740992 | 0) + (scaled * 3542243181176521 | 0)) * 599197 + floorLog2 * 1259;
    },
    $mod: function(receiver, other) {
      var result = receiver % other;
      if (result === 0)
        return 0;
      if (result > 0)
        return result;
      if (other < 0)
        return result - other;
      else
        return result + other;
    },
    $tdiv: function(receiver, other) {
      if ((receiver | 0) === receiver)
        if (other >= 1 || other < -1)
          return receiver / other | 0;
      return this._tdivSlow$1(receiver, other);
    },
    _tdivFast$1: function(receiver, other) {
      return (receiver | 0) === receiver ? receiver / other | 0 : this._tdivSlow$1(receiver, other);
    },
    _tdivSlow$1: function(receiver, other) {
      var quotient = receiver / other;
      if (quotient >= -2147483648 && quotient <= 2147483647)
        return quotient | 0;
      if (quotient > 0) {
        if (quotient !== 1 / 0)
          return Math.floor(quotient);
      } else if (quotient > -1 / 0)
        return Math.ceil(quotient);
      throw H.wrapException(P.UnsupportedError$("Result of truncating division is " + H.S(quotient) + ": " + H.S(receiver) + " ~/ " + other));
    },
    _shrOtherPositive$1: function(receiver, other) {
      var t1;
      if (receiver > 0)
        t1 = this._shrBothPositive$1(receiver, other);
      else {
        t1 = other > 31 ? 31 : other;
        t1 = receiver >> t1 >>> 0;
      }
      return t1;
    },
    _shrBothPositive$1: function(receiver, other) {
      return other > 31 ? 0 : receiver >>> other;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.num];
    },
    $isdouble: 1,
    $isnum: 1
  };
  J.JSInt.prototype = {
    get$sign: function(receiver) {
      var t1;
      if (receiver > 0)
        t1 = 1;
      else
        t1 = receiver < 0 ? -1 : receiver;
      return t1;
    },
    $isint: 1
  };
  J.JSDouble.prototype = {};
  J.JSString.prototype = {
    codeUnitAt$1: function(receiver, index) {
      if (index < 0)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      if (index >= receiver.length)
        H.throwExpression(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    _codeUnitAt$1: function(receiver, index) {
      if (index >= receiver.length)
        throw H.wrapException(H.diagnoseIndexError(receiver, index));
      return receiver.charCodeAt(index);
    },
    matchAsPrefix$2: function(receiver, string, start) {
      var t1, i;
      if (start < 0 || start > string.length)
        throw H.wrapException(P.RangeError$range(start, 0, string.length, null, null));
      t1 = receiver.length;
      if (start + t1 > string.length)
        return;
      for (i = 0; i < t1; ++i)
        if (this.codeUnitAt$1(string, start + i) !== this._codeUnitAt$1(receiver, i))
          return;
      return new H.StringMatch(start, receiver);
    },
    $add: function(receiver, other) {
      if (typeof other !== "string")
        throw H.wrapException(P.ArgumentError$value(other, null, null));
      return receiver + other;
    },
    replaceFirst$2: function(receiver, from, to) {
      return H.stringReplaceFirstUnchecked(receiver, from, to, 0);
    },
    startsWith$1: function(receiver, pattern) {
      var otherLength;
      if (typeof pattern === "string") {
        otherLength = pattern.length;
        if (otherLength > receiver.length)
          return false;
        return pattern === receiver.substring(0, otherLength);
      }
      return J.matchAsPrefix$2$s(pattern, receiver, 0) != null;
    },
    substring$2: function(receiver, startIndex, endIndex) {
      if (endIndex == null)
        endIndex = receiver.length;
      if (startIndex < 0)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (startIndex > endIndex)
        throw H.wrapException(P.RangeError$value(startIndex, null));
      if (endIndex > receiver.length)
        throw H.wrapException(P.RangeError$value(endIndex, null));
      return receiver.substring(startIndex, endIndex);
    },
    substring$1: function($receiver, startIndex) {
      return this.substring$2($receiver, startIndex, null);
    },
    trim$0: function(receiver) {
      var startIndex, t1, endIndex0,
        result = receiver.trim(),
        endIndex = result.length;
      if (endIndex === 0)
        return result;
      if (this._codeUnitAt$1(result, 0) === 133) {
        startIndex = J.JSString__skipLeadingWhitespace(result, 1);
        if (startIndex === endIndex)
          return "";
      } else
        startIndex = 0;
      t1 = endIndex - 1;
      endIndex0 = this.codeUnitAt$1(result, t1) === 133 ? J.JSString__skipTrailingWhitespace(result, t1) : endIndex;
      if (startIndex === 0 && endIndex0 === endIndex)
        return result;
      return result.substring(startIndex, endIndex0);
    },
    trimRight$0: function(receiver) {
      var result, endIndex, t1;
      if (typeof receiver.trimRight != "undefined") {
        result = receiver.trimRight();
        endIndex = result.length;
        if (endIndex === 0)
          return result;
        t1 = endIndex - 1;
        if (this.codeUnitAt$1(result, t1) === 133)
          endIndex = J.JSString__skipTrailingWhitespace(result, t1);
      } else {
        endIndex = J.JSString__skipTrailingWhitespace(receiver, receiver.length);
        result = receiver;
      }
      if (endIndex === result.length)
        return result;
      if (endIndex === 0)
        return "";
      return result.substring(0, endIndex);
    },
    indexOf$1: function(receiver, pattern) {
      var t1 = receiver.indexOf(pattern, 0);
      return t1;
    },
    lastIndexOf$1: function(receiver, pattern) {
      var start = receiver.length,
        t1 = pattern.length;
      if (start + t1 > start)
        start -= t1;
      return receiver.lastIndexOf(pattern, start);
    },
    contains$2: function(receiver, other, startIndex) {
      var t1 = receiver.length;
      if (startIndex > t1)
        throw H.wrapException(P.RangeError$range(startIndex, 0, t1, null, null));
      return H.stringContainsUnchecked(receiver, other, startIndex);
    },
    contains$1: function($receiver, other) {
      return this.contains$2($receiver, other, 0);
    },
    compareTo$1: function(receiver, other) {
      var t1;
      H.stringTypeCheck(other);
      if (typeof other !== "string")
        throw H.wrapException(H.argumentErrorValue(other));
      if (receiver === other)
        t1 = 0;
      else
        t1 = receiver < other ? -1 : 1;
      return t1;
    },
    toString$0: function(receiver) {
      return receiver;
    },
    get$hashCode: function(receiver) {
      var t1, hash, i;
      for (t1 = receiver.length, hash = 0, i = 0; i < t1; ++i) {
        hash = 536870911 & hash + receiver.charCodeAt(i);
        hash = 536870911 & hash + ((524287 & hash) << 10);
        hash ^= hash >> 6;
      }
      hash = 536870911 & hash + ((67108863 & hash) << 3);
      hash ^= hash >> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1,
    $isString: 1
  };
  H.EfficientLengthIterable.prototype = {};
  H.ListIterable.prototype = {
    get$iterator: function(_) {
      var _this = this;
      return new H.ListIterator(_this, _this.get$length(_this), [H.getRuntimeTypeArgument(_this, "ListIterable", 0)]);
    },
    forEach$1: function(_, action) {
      var $length, i, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(_this, "ListIterable", 0)]});
      $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        action.call$1(_this.elementAt$1(0, i));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    contains$1: function(_, element) {
      var i, _this = this,
        $length = _this.get$length(_this);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(_this.elementAt$1(0, i), element))
          return true;
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
      return false;
    },
    join$1: function(_, separator) {
      var first, t1, i, _this = this,
        $length = _this.get$length(_this);
      if (separator.length !== 0) {
        if ($length === 0)
          return "";
        first = H.S(_this.elementAt$1(0, 0));
        if ($length !== _this.get$length(_this))
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        for (t1 = first, i = 1; i < $length; ++i) {
          t1 = t1 + separator + H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      } else {
        for (i = 0, t1 = ""; i < $length; ++i) {
          t1 += H.S(_this.elementAt$1(0, i));
          if ($length !== _this.get$length(_this))
            throw H.wrapException(P.ConcurrentModificationError$(_this));
        }
        return t1.charCodeAt(0) == 0 ? t1 : t1;
      }
    },
    join$0: function($receiver) {
      return this.join$1($receiver, "");
    },
    where$1: function(_, test) {
      return this.super$Iterable$where(0, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "ListIterable", 0)]}));
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "ListIterable", 0);
      return new H.MappedListIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    toList$1$growable: function(_, growable) {
      var result, t2, i, _this = this,
        t1 = H.getRuntimeTypeArgument(_this, "ListIterable", 0);
      if (growable) {
        result = H.setRuntimeTypeInfo([], [t1]);
        C.JSArray_methods.set$length(result, _this.get$length(_this));
      } else {
        t2 = new Array(_this.get$length(_this));
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, [t1]);
      }
      for (i = 0; i < _this.get$length(_this); ++i)
        C.JSArray_methods.$indexSet(result, i, _this.elementAt$1(0, i));
      return result;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.ListIterator.prototype = {
    get$current: function(_) {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t3, _this = this,
        t1 = _this.__internal$_iterable,
        t2 = J.getInterceptor$asx(t1),
        $length = t2.get$length(t1);
      if (_this.__internal$_length !== $length)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t3 = _this.__internal$_index;
      if (t3 >= $length) {
        _this.set$__internal$_current(null);
        return false;
      }
      _this.set$__internal$_current(t2.elementAt$1(t1, t3));
      ++_this.__internal$_index;
      return true;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.MappedIterable.prototype = {
    get$iterator: function(_) {
      return new H.MappedIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
    },
    get$length: function(_) {
      return J.get$length$asx(this.__internal$_iterable);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.__internal$_iterable);
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.EfficientLengthMappedIterable.prototype = {$isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    }
  };
  H.MappedIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._iterator;
      if (t1.moveNext$0()) {
        _this.set$__internal$_current(_this._f.call$1(t1.get$current(t1)));
        return true;
      }
      _this.set$__internal$_current(null);
      return false;
    },
    get$current: function(_) {
      return this.__internal$_current;
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.MappedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      return this._f.call$1(J.elementAt$1$ax(this._source, index));
    },
    $asEfficientLengthIterable: function($S, $T) {
      return [$T];
    },
    $asListIterable: function($S, $T) {
      return [$T];
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.WhereIterable.prototype = {
    get$iterator: function(_) {
      return new H.WhereIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return new H.MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    }
  };
  H.WhereIterator.prototype = {
    moveNext$0: function() {
      var t1, t2;
      for (t1 = this._iterator, t2 = this._f; t1.moveNext$0();)
        if (H.boolConversionCheck(t2.call$1(t1.get$current(t1))))
          return true;
      return false;
    },
    get$current: function(_) {
      var t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  H.ExpandIterable.prototype = {
    get$iterator: function(_) {
      return new H.ExpandIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, C.C_EmptyIterator, this.$ti);
    },
    $asIterable: function($S, $T) {
      return [$T];
    }
  };
  H.ExpandIterator.prototype = {
    get$current: function(_) {
      return this.__internal$_current;
    },
    moveNext$0: function() {
      var t1, t2, _this = this;
      if (_this._currentExpansion == null)
        return false;
      for (t1 = _this._iterator, t2 = _this._f; !_this._currentExpansion.moveNext$0();) {
        _this.set$__internal$_current(null);
        if (t1.moveNext$0()) {
          _this.set$_currentExpansion(null);
          _this.set$_currentExpansion(J.get$iterator$ax(t2.call$1(t1.get$current(t1))));
        } else
          return false;
      }
      t1 = _this._currentExpansion;
      _this.set$__internal$_current(t1.get$current(t1));
      return true;
    },
    set$_currentExpansion: function(_currentExpansion) {
      this._currentExpansion = H.assertSubtype(_currentExpansion, "$isIterator", [H.getTypeArgumentByIndex(this, 1)], "$asIterator");
    },
    set$__internal$_current: function(_current) {
      this.__internal$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($S, $T) {
      return [$T];
    }
  };
  H.TakeWhileIterable.prototype = {
    get$iterator: function(_) {
      return new H.TakeWhileIterator(J.get$iterator$ax(this.__internal$_iterable), this._f, this.$ti);
    }
  };
  H.TakeWhileIterator.prototype = {
    moveNext$0: function() {
      var t1, _this = this;
      if (_this._isFinished)
        return false;
      t1 = _this._iterator;
      if (!t1.moveNext$0() || !H.boolConversionCheck(_this._f.call$1(t1.get$current(t1)))) {
        _this._isFinished = true;
        return false;
      }
      return true;
    },
    get$current: function(_) {
      var t1;
      if (this._isFinished)
        return;
      t1 = this._iterator;
      return t1.get$current(t1);
    }
  };
  H.EmptyIterable.prototype = {
    get$iterator: function(_) {
      return C.C_EmptyIterator;
    },
    forEach$1: function(_, action) {
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
    },
    get$isEmpty: function(_) {
      return true;
    },
    get$length: function(_) {
      return 0;
    },
    contains$1: function(_, element) {
      return false;
    },
    map$1$1: function(_, f, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $T, args: [H.getTypeArgumentByIndex(this, 0)]});
      return new H.EmptyIterable([$T]);
    },
    toList$1$growable: function(_, growable) {
      var t2,
        t1 = this.$ti;
      if (growable)
        t1 = H.setRuntimeTypeInfo([], t1);
      else {
        t2 = new Array(0);
        t2.fixed$length = Array;
        t1 = H.setRuntimeTypeInfo(t2, t1);
      }
      return t1;
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    }
  };
  H.EmptyIterator.prototype = {
    moveNext$0: function() {
      return false;
    },
    get$current: function(_) {
      return;
    },
    $isIterator: 1
  };
  H.FixedLengthListMixin.prototype = {
    set$length: function(receiver, newLength) {
      throw H.wrapException(P.UnsupportedError$("Cannot change the length of a fixed-length list"));
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    addAll$1: function(receiver, iterable) {
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "FixedLengthListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to a fixed-length list"));
    },
    remove$1: function(receiver, element) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    },
    removeLast$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from a fixed-length list"));
    }
  };
  H.ReversedListIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._source);
    },
    elementAt$1: function(_, index) {
      var t1 = this._source,
        t2 = J.getInterceptor$asx(t1);
      return t2.elementAt$1(t1, t2.get$length(t1) - 1 - index);
    }
  };
  H.Symbol.prototype = {
    get$hashCode: function(_) {
      var hash = this._hashCode;
      if (hash != null)
        return hash;
      hash = 536870911 & 664597 * J.get$hashCode$(this._name);
      this._hashCode = hash;
      return hash;
    },
    toString$0: function(_) {
      return 'Symbol("' + H.S(this._name) + '")';
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.Symbol && this._name == other._name;
    },
    $isSymbol0: 1
  };
  H.ConstantMapView.prototype = {};
  H.ConstantMap.prototype = {
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    $indexSet: function(_, key, val) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.assertSubtypeOfRuntimeType(val, H.getTypeArgumentByIndex(this, 1));
      return H.ConstantMap__throwUnmodifiable();
    },
    putIfAbsent$2: function(_, key, ifAbsent) {
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(this, 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(this, 1)});
      return H.ConstantMap__throwUnmodifiable();
    },
    remove$1: function(_, key) {
      return H.ConstantMap__throwUnmodifiable();
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", this.$ti, "$asMap");
      return H.ConstantMap__throwUnmodifiable();
    },
    $isMap: 1
  };
  H.ConstantStringMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    containsKey$1: function(_, key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return false;
      return this._jsObject.hasOwnProperty(key);
    },
    $index: function(_, key) {
      if (!this.containsKey$1(0, key))
        return;
      return this._fetch$1(key);
    },
    _fetch$1: function(key) {
      return this._jsObject[H.stringTypeCheck(key)];
    },
    forEach$1: function(_, f) {
      var keys, t2, i, key, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 1);
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), t1]});
      keys = _this._keys;
      for (t2 = keys.length, i = 0; i < t2; ++i) {
        key = keys[i];
        f.call$2(key, H.assertSubtypeOfRuntimeType(_this._fetch$1(key), t1));
      }
    },
    get$keys: function(_) {
      return new H._ConstantMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this._keys, new H.ConstantStringMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    }
  };
  H.ConstantStringMap_values_closure.prototype = {
    call$1: function(key) {
      var t1 = this.$this;
      return H.assertSubtypeOfRuntimeType(t1._fetch$1(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0))), H.getTypeArgumentByIndex(t1, 1));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.ConstantProtoMap.prototype = {
    containsKey$1: function(_, key) {
      if (typeof key !== "string")
        return false;
      if ("__proto__" === key)
        return true;
      return this._jsObject.hasOwnProperty(key);
    },
    _fetch$1: function(key) {
      return "__proto__" === key ? this._protoValue : this._jsObject[H.stringTypeCheck(key)];
    }
  };
  H._ConstantMapKeyIterable.prototype = {
    get$iterator: function(_) {
      var t1 = this.__js_helper$_map._keys;
      return new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
    },
    get$length: function(_) {
      return this.__js_helper$_map._keys.length;
    }
  };
  H.JSInvocationMirror.prototype = {
    get$memberName: function() {
      var t1 = this._memberName;
      if (!!J.getInterceptor$(t1).$isSymbol0)
        return t1;
      return this._memberName = new H.Symbol(H.stringTypeCheck(t1));
    },
    get$positionalArguments: function() {
      var t1, t2, t3, t4, t5, argumentCount, list, index, _this = this;
      if (_this._kind === 1)
        return C.List_empty;
      t1 = _this._arguments;
      t2 = J.getInterceptor$asx(t1);
      t3 = t2.get$length(t1);
      t4 = J.get$length$asx(_this._namedArgumentNames);
      t5 = _this._typeArgumentCount;
      if (typeof t5 !== "number")
        return H.iae(t5);
      argumentCount = t3 - t4 - t5;
      if (argumentCount === 0)
        return C.List_empty;
      list = [];
      for (index = 0; index < argumentCount; ++index)
        list.push(t2.$index(t1, index));
      list.fixed$length = Array;
      list.immutable$list = Array;
      return list;
    },
    get$namedArguments: function() {
      var t1, t2, namedArgumentCount, t3, t4, t5, t6, namedArgumentsStartIndex, map, i, _this = this;
      if (_this._kind !== 0)
        return C.Map_empty;
      t1 = _this._namedArgumentNames;
      t2 = J.getInterceptor$asx(t1);
      namedArgumentCount = t2.get$length(t1);
      t3 = _this._arguments;
      t4 = J.getInterceptor$asx(t3);
      t5 = t4.get$length(t3);
      t6 = _this._typeArgumentCount;
      if (typeof t6 !== "number")
        return H.iae(t6);
      namedArgumentsStartIndex = t5 - namedArgumentCount - t6;
      if (namedArgumentCount === 0)
        return C.Map_empty;
      t5 = P.Symbol0;
      map = new H.JsLinkedHashMap([t5, null]);
      for (i = 0; i < namedArgumentCount; ++i)
        map.$indexSet(0, new H.Symbol(H.stringTypeCheck(t2.$index(t1, i))), t4.$index(t3, namedArgumentsStartIndex + i));
      return new H.ConstantMapView(map, [t5, null]);
    },
    $isInvocation: 1
  };
  H.Primitives_functionNoSuchMethod_closure.prototype = {
    call$2: function($name, argument) {
      var t1;
      H.stringTypeCheck($name);
      t1 = this._box_0;
      t1.names = t1.names + "$" + H.S($name);
      C.JSArray_methods.add$1(this.namedArgumentList, $name);
      C.JSArray_methods.add$1(this.$arguments, argument);
      ++t1.argumentCount;
    },
    $signature: 26
  };
  H.TypeErrorDecoder.prototype = {
    matchTypeError$1: function(message) {
      var result, t1, _this = this,
        match = new RegExp(_this._pattern).exec(message);
      if (match == null)
        return;
      result = Object.create(null);
      t1 = _this._arguments;
      if (t1 !== -1)
        result.arguments = match[t1 + 1];
      t1 = _this._argumentsExpr;
      if (t1 !== -1)
        result.argumentsExpr = match[t1 + 1];
      t1 = _this._expr;
      if (t1 !== -1)
        result.expr = match[t1 + 1];
      t1 = _this._method;
      if (t1 !== -1)
        result.method = match[t1 + 1];
      t1 = _this.__js_helper$_receiver;
      if (t1 !== -1)
        result.receiver = match[t1 + 1];
      return result;
    }
  };
  H.NullError.prototype = {
    toString$0: function(_) {
      var t1 = this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(this._message);
      return "NoSuchMethodError: method not found: '" + t1 + "' on null";
    },
    $isNoSuchMethodError: 1
  };
  H.JsNoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t2, _this = this,
        _s38_ = "NoSuchMethodError: method not found: '",
        t1 = _this._method;
      if (t1 == null)
        return "NoSuchMethodError: " + H.S(_this._message);
      t2 = _this.__js_helper$_receiver;
      if (t2 == null)
        return _s38_ + t1 + "' (" + H.S(_this._message) + ")";
      return _s38_ + t1 + "' on '" + t2 + "' (" + H.S(_this._message) + ")";
    },
    $isNoSuchMethodError: 1
  };
  H.UnknownJsTypeError.prototype = {
    toString$0: function(_) {
      var t1 = this._message;
      return t1.length === 0 ? "Error" : "Error: " + t1;
    }
  };
  H.unwrapException_saveStackTrace.prototype = {
    call$1: function(error) {
      if (!!J.getInterceptor$(error).$isError)
        if (error.$thrownJsError == null)
          error.$thrownJsError = this.ex;
      return error;
    },
    $signature: 3
  };
  H._StackTrace.prototype = {
    toString$0: function(_) {
      var trace,
        t1 = this._trace;
      if (t1 != null)
        return t1;
      t1 = this._exception;
      trace = t1 !== null && typeof t1 === "object" ? t1.stack : null;
      return this._trace = trace == null ? "" : trace;
    },
    $isStackTrace: 1
  };
  H.Closure.prototype = {
    toString$0: function(_) {
      var $constructor = this.constructor,
        $name = $constructor == null ? null : $constructor.name;
      return "Closure '" + H.unminifyOrTag($name == null ? "unknown" : $name) + "'";
    },
    $isFunction: 1,
    get$$call: function() {
      return this;
    },
    "call*": "call$1",
    $requiredArgCount: 1,
    $defaultValues: null
  };
  H.TearOffClosure.prototype = {};
  H.StaticClosure.prototype = {
    toString$0: function(_) {
      var $name = this.$static_name;
      if ($name == null)
        return "Closure of unknown static method";
      return "Closure '" + H.unminifyOrTag($name) + "'";
    }
  };
  H.BoundClosure.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (_this === other)
        return true;
      if (!(other instanceof H.BoundClosure))
        return false;
      return _this._self === other._self && _this._target === other._target && _this.__js_helper$_receiver === other.__js_helper$_receiver;
    },
    get$hashCode: function(_) {
      var receiverHashCode,
        t1 = this.__js_helper$_receiver;
      if (t1 == null)
        receiverHashCode = H.Primitives_objectHashCode(this._self);
      else
        receiverHashCode = typeof t1 !== "object" ? J.get$hashCode$(t1) : H.Primitives_objectHashCode(t1);
      return (receiverHashCode ^ H.Primitives_objectHashCode(this._target)) >>> 0;
    },
    toString$0: function(_) {
      var receiver = this.__js_helper$_receiver;
      if (receiver == null)
        receiver = this._self;
      return "Closure '" + H.S(this.__js_helper$_name) + "' of " + ("Instance of '" + H.S(H.Primitives_objectTypeName(receiver)) + "'");
    }
  };
  H.TypeErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.CastErrorImplementation.prototype = {
    toString$0: function(_) {
      return this.message;
    }
  };
  H.RuntimeError.prototype = {
    toString$0: function(_) {
      return "RuntimeError: " + H.S(this.message);
    }
  };
  H._AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed: " + P.Error_safeToString(this.message);
    }
  };
  H.TypeImpl.prototype = {
    get$_typeName: function() {
      var t1 = this.__typeName;
      return t1 == null ? this.__typeName = H.runtimeTypeToString(this._rti) : t1;
    },
    toString$0: function(_) {
      return this.get$_typeName();
    },
    get$hashCode: function(_) {
      var t1 = this._hashCode;
      return t1 == null ? this._hashCode = C.JSString_methods.get$hashCode(this.get$_typeName()) : t1;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof H.TypeImpl && this.get$_typeName() === other.get$_typeName();
    }
  };
  H.JsLinkedHashMap.prototype = {
    get$length: function(_) {
      return this.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_helper$_length === 0;
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    get$keys: function(_) {
      return new H.LinkedHashMapKeyIterable(this, [H.getTypeArgumentByIndex(this, 0)]);
    },
    get$values: function(_) {
      var _this = this;
      return H.MappedIterable_MappedIterable(_this.get$keys(_this), new H.JsLinkedHashMap_values_closure(_this), H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1));
    },
    containsKey$1: function(_, key) {
      var strings, t1;
      if (typeof key === "string") {
        strings = this._strings;
        if (strings == null)
          return false;
        return this._containsTableEntry$2(strings, key);
      } else {
        t1 = this.internalContainsKey$1(key);
        return t1;
      }
    },
    internalContainsKey$1: function(key) {
      var _this = this,
        rest = _this._rest;
      if (rest == null)
        return false;
      return _this.internalFindBucketIndex$2(_this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key)), key) >= 0;
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(H.assertSubtype(other, "$isMap", this.$ti, "$asMap"), new H.JsLinkedHashMap_addAll_closure(this));
    },
    $index: function(_, key) {
      var strings, cell, t1, nums, _this = this;
      if (typeof key === "string") {
        strings = _this._strings;
        if (strings == null)
          return;
        cell = _this._getTableCell$2(strings, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        if (nums == null)
          return;
        cell = _this._getTableCell$2(nums, key);
        t1 = cell == null ? null : cell.hashMapCellValue;
        return t1;
      } else
        return _this.internalGet$1(key);
    },
    internalGet$1: function(key) {
      var bucket, index, _this = this,
        rest = _this._rest;
      if (rest == null)
        return;
      bucket = _this._getTableBucket$2(rest, _this.internalComputeHashCode$1(key));
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      return bucket[index].hashMapCellValue;
    },
    $indexSet: function(_, key, value) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (typeof key === "string") {
        strings = _this._strings;
        _this._addHashTableEntry$3(strings == null ? _this._strings = _this._newHashTable$0() : strings, key, value);
      } else if (typeof key === "number" && (key & 0x3ffffff) === key) {
        nums = _this._nums;
        _this._addHashTableEntry$3(nums == null ? _this._nums = _this._newHashTable$0() : nums, key, value);
      } else
        _this.internalSet$2(key, value);
    },
    internalSet$2: function(key, value) {
      var rest, hash, bucket, index, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      rest = _this._rest;
      if (rest == null)
        rest = _this._rest = _this._newHashTable$0();
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      if (bucket == null)
        _this._setTableEntry$3(rest, hash, [_this._newLinkedCell$2(key, value)]);
      else {
        index = _this.internalFindBucketIndex$2(bucket, key);
        if (index >= 0)
          bucket[index].hashMapCellValue = value;
        else
          bucket.push(_this._newLinkedCell$2(key, value));
      }
    },
    putIfAbsent$2: function(_, key, ifAbsent) {
      var value, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getTypeArgumentByIndex(_this, 1)});
      if (_this.containsKey$1(0, key))
        return _this.$index(0, key);
      value = ifAbsent.call$0();
      _this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      var _this = this;
      if (typeof key === "string")
        return _this._removeHashTableEntry$2(_this._strings, key);
      else if (typeof key === "number" && (key & 0x3ffffff) === key)
        return _this._removeHashTableEntry$2(_this._nums, key);
      else
        return _this.internalRemove$1(key);
    },
    internalRemove$1: function(key) {
      var hash, bucket, index, cell, _this = this,
        rest = _this._rest;
      if (rest == null)
        return;
      hash = _this.internalComputeHashCode$1(key);
      bucket = _this._getTableBucket$2(rest, hash);
      index = _this.internalFindBucketIndex$2(bucket, key);
      if (index < 0)
        return;
      cell = bucket.splice(index, 1)[0];
      _this._unlinkCell$1(cell);
      if (bucket.length === 0)
        _this._deleteTableEntry$2(rest, hash);
      return cell.hashMapCellValue;
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0), H.getTypeArgumentByIndex(_this, 1)]});
      cell = _this._first;
      modifications = _this._modifications;
      for (; cell != null;) {
        action.call$2(cell.hashMapCellKey, cell.hashMapCellValue);
        if (modifications !== _this._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._next;
      }
    },
    _addHashTableEntry$3: function(table, key, value) {
      var cell, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      cell = _this._getTableCell$2(table, key);
      if (cell == null)
        _this._setTableEntry$3(table, key, _this._newLinkedCell$2(key, value));
      else
        cell.hashMapCellValue = value;
    },
    _removeHashTableEntry$2: function(table, key) {
      var cell;
      if (table == null)
        return;
      cell = this._getTableCell$2(table, key);
      if (cell == null)
        return;
      this._unlinkCell$1(cell);
      this._deleteTableEntry$2(table, key);
      return cell.hashMapCellValue;
    },
    _modified$0: function() {
      this._modifications = this._modifications + 1 & 67108863;
    },
    _newLinkedCell$2: function(key, value) {
      var last, _this = this,
        cell = new H.LinkedHashMapCell(H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1)));
      if (_this._first == null)
        _this._first = _this._last = cell;
      else {
        last = _this._last;
        cell._previous = last;
        _this._last = last._next = cell;
      }
      ++_this.__js_helper$_length;
      _this._modified$0();
      return cell;
    },
    _unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._previous,
        next = cell._next;
      if (previous == null)
        _this._first = next;
      else
        previous._next = next;
      if (next == null)
        _this._last = previous;
      else
        next._previous = previous;
      --_this.__js_helper$_length;
      _this._modified$0();
    },
    internalComputeHashCode$1: function(key) {
      return J.get$hashCode$(key) & 0x3ffffff;
    },
    internalFindBucketIndex$2: function(bucket, key) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i].hashMapCellKey, key))
          return i;
      return -1;
    },
    toString$0: function(_) {
      return P.MapBase_mapToString(this);
    },
    _getTableCell$2: function(table, key) {
      return table[key];
    },
    _getTableBucket$2: function(table, key) {
      return table[key];
    },
    _setTableEntry$3: function(table, key, value) {
      table[key] = value;
    },
    _deleteTableEntry$2: function(table, key) {
      delete table[key];
    },
    _containsTableEntry$2: function(table, key) {
      return this._getTableCell$2(table, key) != null;
    },
    _newHashTable$0: function() {
      var _s20_ = "<non-identifier-key>",
        table = Object.create(null);
      this._setTableEntry$3(table, _s20_, table);
      this._deleteTableEntry$2(table, _s20_);
      return table;
    },
    $isLinkedHashMap: 1
  };
  H.JsLinkedHashMap_values_closure.prototype = {
    call$1: function(each) {
      var t1 = this.$this;
      return t1.$index(0, H.assertSubtypeOfRuntimeType(each, H.getTypeArgumentByIndex(t1, 0)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: H.getTypeArgumentByIndex(t1, 1), args: [H.getTypeArgumentByIndex(t1, 0)]};
    }
  };
  H.JsLinkedHashMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this.$this;
      t1.$indexSet(0, H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(t1, 0)), H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(t1, 1)));
    },
    $signature: function() {
      var t1 = this.$this;
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]};
    }
  };
  H.LinkedHashMapCell.prototype = {};
  H.LinkedHashMapKeyIterable.prototype = {
    get$length: function(_) {
      return this.__js_helper$_map.__js_helper$_length;
    },
    get$isEmpty: function(_) {
      return this.__js_helper$_map.__js_helper$_length === 0;
    },
    get$iterator: function(_) {
      var t1 = this.__js_helper$_map,
        t2 = new H.LinkedHashMapKeyIterator(t1, t1._modifications, this.$ti);
      t2._cell = t1._first;
      return t2;
    },
    contains$1: function(_, element) {
      return this.__js_helper$_map.containsKey$1(0, element);
    },
    forEach$1: function(_, f) {
      var t1, cell, modifications;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(this, 0)]});
      t1 = this.__js_helper$_map;
      cell = t1._first;
      modifications = t1._modifications;
      for (; cell != null;) {
        f.call$1(cell.hashMapCellKey);
        if (modifications !== t1._modifications)
          throw H.wrapException(P.ConcurrentModificationError$(t1));
        cell = cell._next;
      }
    }
  };
  H.LinkedHashMapKeyIterator.prototype = {
    get$current: function(_) {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this.__js_helper$_map;
      if (_this._modifications !== t1._modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._cell;
        if (t1 == null) {
          _this.set$__js_helper$_current(null);
          return false;
        } else {
          _this.set$__js_helper$_current(t1.hashMapCellKey);
          _this._cell = _this._cell._next;
          return true;
        }
      }
    },
    set$__js_helper$_current: function(_current) {
      this.__js_helper$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  H.initHooks_closure.prototype = {
    call$1: function(o) {
      return this.getTag(o);
    },
    $signature: 3
  };
  H.initHooks_closure0.prototype = {
    call$2: function(o, tag) {
      return this.getUnknownTag(o, tag);
    },
    $signature: 42
  };
  H.initHooks_closure1.prototype = {
    call$1: function(tag) {
      return this.prototypeForTag(H.stringTypeCheck(tag));
    },
    $signature: 34
  };
  H.JSSyntaxRegExp.prototype = {
    toString$0: function(_) {
      return "RegExp/" + this.pattern + "/" + this._nativeRegExp.flags;
    },
    get$_nativeGlobalVersion: function() {
      var _this = this,
        t1 = _this._nativeGlobalRegExp;
      if (t1 != null)
        return t1;
      t1 = _this._nativeRegExp;
      return _this._nativeGlobalRegExp = H.JSSyntaxRegExp_makeNative(_this.pattern, t1.multiline, !t1.ignoreCase, t1.unicode, t1.dotAll, true);
    },
    firstMatch$1: function(string) {
      var m;
      if (typeof string !== "string")
        H.throwExpression(H.argumentErrorValue(string));
      m = this._nativeRegExp.exec(string);
      if (m == null)
        return;
      return new H._MatchImplementation(m);
    },
    _execGlobal$2: function(string, start) {
      var match,
        regexp = this.get$_nativeGlobalVersion();
      regexp.lastIndex = start;
      match = regexp.exec(string);
      if (match == null)
        return;
      return new H._MatchImplementation(match);
    },
    $isPattern: 1,
    $isRegExp: 1
  };
  H._MatchImplementation.prototype = {
    get$end: function(_) {
      var t1 = this._match;
      return t1.index + t1[0].length;
    },
    $isRegExpMatch: 1
  };
  H._AllMatchesIterator.prototype = {
    get$current: function(_) {
      return this.__js_helper$_current;
    },
    moveNext$0: function() {
      var t2, t3, match, nextIndex, _this = this,
        t1 = _this._string;
      if (t1 == null)
        return false;
      t2 = _this._nextIndex;
      if (t2 <= t1.length) {
        t3 = _this._regExp;
        match = t3._execGlobal$2(t1, t2);
        if (match != null) {
          _this.__js_helper$_current = match;
          nextIndex = match.get$end(match);
          if (match._match.index === nextIndex) {
            if (t3._nativeRegExp.unicode) {
              t1 = _this._nextIndex;
              t2 = t1 + 1;
              t3 = _this._string;
              if (t2 < t3.length) {
                t1 = J.getInterceptor$s(t3).codeUnitAt$1(t3, t1);
                if (t1 >= 55296 && t1 <= 56319) {
                  t1 = C.JSString_methods.codeUnitAt$1(t3, t2);
                  t1 = t1 >= 56320 && t1 <= 57343;
                } else
                  t1 = false;
              } else
                t1 = false;
            } else
              t1 = false;
            nextIndex = (t1 ? nextIndex + 1 : nextIndex) + 1;
          }
          _this._nextIndex = nextIndex;
          return true;
        }
      }
      _this._string = _this.__js_helper$_current = null;
      return false;
    },
    $isIterator: 1,
    $asIterator: function() {
      return [P.RegExpMatch];
    }
  };
  H.StringMatch.prototype = {};
  H.NativeByteBuffer.prototype = {$isNativeByteBuffer: 1, $isByteBuffer: 1};
  H.NativeTypedData.prototype = {$isNativeTypedData: 1, $isTypedData: 1};
  H.NativeByteData.prototype = {$isByteData: 1};
  H.NativeTypedArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
    }
  };
  H.NativeTypedArrayOfDouble.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.doubleTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.double];
    },
    $asFixedLengthListMixin: function() {
      return [P.double];
    },
    $asListMixin: function() {
      return [P.double];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.double];
    },
    $isList: 1,
    $asList: function() {
      return [P.double];
    }
  };
  H.NativeTypedArrayOfInt.prototype = {
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.intTypeCheck(value);
      H._checkValidIndex(index, receiver, receiver.length);
      receiver[index] = value;
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.int];
    },
    $asFixedLengthListMixin: function() {
      return [P.int];
    },
    $asListMixin: function() {
      return [P.int];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.int];
    },
    $isList: 1,
    $asList: function() {
      return [P.int];
    }
  };
  H.NativeFloat32List.prototype = {
    sublist$1: function(receiver, start) {
      return new Float32Array(receiver.subarray(start, H._checkValidRange(start, null, receiver.length)));
    },
    $isFloat32List: 1
  };
  H.NativeFloat64List.prototype = {
    sublist$1: function(receiver, start) {
      return new Float64Array(receiver.subarray(start, H._checkValidRange(start, null, receiver.length)));
    }
  };
  H.NativeInt16List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$1: function(receiver, start) {
      return new Int16Array(receiver.subarray(start, H._checkValidRange(start, null, receiver.length)));
    }
  };
  H.NativeInt32List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$1: function(receiver, start) {
      return new Int32Array(receiver.subarray(start, H._checkValidRange(start, null, receiver.length)));
    }
  };
  H.NativeInt8List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$1: function(receiver, start) {
      return new Int8Array(receiver.subarray(start, H._checkValidRange(start, null, receiver.length)));
    }
  };
  H.NativeUint16List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$1: function(receiver, start) {
      return new Uint16Array(receiver.subarray(start, H._checkValidRange(start, null, receiver.length)));
    }
  };
  H.NativeUint32List.prototype = {
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$1: function(receiver, start) {
      return new Uint32Array(receiver.subarray(start, H._checkValidRange(start, null, receiver.length)));
    }
  };
  H.NativeUint8ClampedList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$1: function(receiver, start) {
      return new Uint8ClampedArray(receiver.subarray(start, H._checkValidRange(start, null, receiver.length)));
    },
    $isUint8ClampedList: 1
  };
  H.NativeUint8List.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      H._checkValidIndex(index, receiver, receiver.length);
      return receiver[index];
    },
    sublist$1: function(receiver, start) {
      return new Uint8Array(receiver.subarray(start, H._checkValidRange(start, null, receiver.length)));
    }
  };
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.prototype = {};
  H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.prototype = {};
  P._AsyncRun__initializeScheduleImmediate_internalCallback.prototype = {
    call$1: function(_) {
      var t1 = this._box_0,
        f = t1.storedCallback;
      t1.storedCallback = null;
      f.call$0();
    },
    $signature: 4
  };
  P._AsyncRun__initializeScheduleImmediate_closure.prototype = {
    call$1: function(callback) {
      var t1, t2;
      this._box_0.storedCallback = H.functionTypeCheck(callback, {func: 1, ret: -1});
      t1 = this.div;
      t2 = this.span;
      t1.firstChild ? t1.removeChild(t2) : t1.appendChild(t2);
    },
    $signature: 37
  };
  P._AsyncRun__scheduleImmediateJsOverride_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback.prototype = {
    call$0: function() {
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._TimerImpl.prototype = {
    _TimerImpl$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setTimeout(H.convertDartClosureToJS(new P._TimerImpl_internalCallback(this, callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("`setTimeout()` not found."));
    },
    _TimerImpl$periodic$2: function(milliseconds, callback) {
      if (self.setTimeout != null)
        this._handle = self.setInterval(H.convertDartClosureToJS(new P._TimerImpl$periodic_closure(this, milliseconds, Date.now(), callback), 0), milliseconds);
      else
        throw H.wrapException(P.UnsupportedError$("Periodic timer."));
    },
    cancel$0: function(_) {
      var t1;
      if (self.setTimeout != null) {
        t1 = this._handle;
        if (t1 == null)
          return;
        if (this._once)
          self.clearTimeout(t1);
        else
          self.clearInterval(t1);
        this._handle = null;
      } else
        throw H.wrapException(P.UnsupportedError$("Canceling a timer."));
    },
    $isTimer: 1
  };
  P._TimerImpl_internalCallback.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._handle = null;
      t1._tick = 1;
      this.callback.call$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  P._TimerImpl$periodic_closure.prototype = {
    call$0: function() {
      var duration, _this = this,
        t1 = _this.$this,
        tick = t1._tick + 1,
        t2 = _this.milliseconds;
      if (t2 > 0) {
        duration = Date.now() - _this.start;
        if (duration > (tick + 1) * t2)
          tick = C.JSInt_methods.$tdiv(duration, t2);
      }
      t1._tick = tick;
      _this.callback.call$1(t1);
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  P._Completer.prototype = {};
  P._AsyncCompleter.prototype = {};
  P._FutureListener.prototype = {
    matchesErrorTest$1: function(asyncError) {
      if ((this.state & 15) !== 6)
        return true;
      return this.result._zone.runUnary$2$2(H.functionTypeCheck(this.callback, {func: 1, ret: P.bool, args: [P.Object]}), asyncError.error, P.bool, P.Object);
    },
    handleError$1: function(asyncError) {
      var errorCallback = this.errorCallback,
        t1 = P.Object,
        t2 = {futureOr: 1, type: H.getTypeArgumentByIndex(this, 1)},
        t3 = this.result._zone;
      if (H.functionTypeTest(errorCallback, {func: 1, args: [P.Object, P.StackTrace]}))
        return H.futureOrCheck(t3.runBinary$3$3(errorCallback, asyncError.error, asyncError.stackTrace, null, t1, P.StackTrace), t2);
      else
        return H.futureOrCheck(t3.runUnary$2$2(H.functionTypeCheck(errorCallback, {func: 1, args: [P.Object]}), asyncError.error, null, t1), t2);
    }
  };
  P._Future.prototype = {
    then$1$2$onError: function(f, onError, $R) {
      var currentZone, result, t2,
        t1 = H.getTypeArgumentByIndex(this, 0);
      H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
      currentZone = $.Zone__current;
      if (currentZone !== C.C__RootZone) {
        H.functionTypeCheck(f, {func: 1, ret: {futureOr: 1, type: $R}, args: [t1]});
        if (onError != null)
          onError = P._registerErrorHandler(onError, currentZone);
      }
      result = new P._Future($.Zone__current, [$R]);
      t2 = onError == null ? 1 : 3;
      this._addListener$1(new P._FutureListener(result, t2, f, onError, [t1, $R]));
      return result;
    },
    then$1$1: function(f, $R) {
      return this.then$1$2$onError(f, null, $R);
    },
    _addListener$1: function(listener) {
      var source, _this = this,
        t1 = _this._async$_state;
      if (t1 <= 1) {
        listener._nextListener = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        _this._resultOrListeners = listener;
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(_this._resultOrListeners, "$is_Future");
          t1 = source._async$_state;
          if (t1 < 4) {
            source._addListener$1(listener);
            return;
          }
          _this._async$_state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        P._rootScheduleMicrotask(null, null, _this._zone, H.functionTypeCheck(new P._Future__addListener_closure(_this, listener), {func: 1, ret: -1}));
      }
    },
    _prependListeners$1: function(listeners) {
      var t1, existingListeners, cursor, cursor0, source, _this = this, _box_0 = {};
      _box_0.listeners = listeners;
      if (listeners == null)
        return;
      t1 = _this._async$_state;
      if (t1 <= 1) {
        existingListeners = H.interceptedTypeCheck(_this._resultOrListeners, "$is_FutureListener");
        cursor = _this._resultOrListeners = listeners;
        if (existingListeners != null) {
          for (; cursor0 = cursor._nextListener, cursor0 != null; cursor = cursor0)
            ;
          cursor._nextListener = existingListeners;
        }
      } else {
        if (t1 === 2) {
          source = H.interceptedTypeCheck(_this._resultOrListeners, "$is_Future");
          t1 = source._async$_state;
          if (t1 < 4) {
            source._prependListeners$1(listeners);
            return;
          }
          _this._async$_state = t1;
          _this._resultOrListeners = source._resultOrListeners;
        }
        _box_0.listeners = _this._reverseListeners$1(listeners);
        P._rootScheduleMicrotask(null, null, _this._zone, H.functionTypeCheck(new P._Future__prependListeners_closure(_box_0, _this), {func: 1, ret: -1}));
      }
    },
    _removeListeners$0: function() {
      var current = H.interceptedTypeCheck(this._resultOrListeners, "$is_FutureListener");
      this._resultOrListeners = null;
      return this._reverseListeners$1(current);
    },
    _reverseListeners$1: function(listeners) {
      var current, prev, next;
      for (current = listeners, prev = null; current != null; prev = current, current = next) {
        next = current._nextListener;
        current._nextListener = prev;
      }
      return prev;
    },
    _complete$1: function(value) {
      var t2, listeners, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.futureOrCheck(value, {futureOr: 1, type: t1});
      t2 = _this.$ti;
      if (H.checkSubtype(value, "$isFuture", t2, "$asFuture"))
        if (H.checkSubtype(value, "$is_Future", t2, null))
          P._Future__chainCoreFuture(value, _this);
        else
          P._Future__chainForeignFuture(value, _this);
      else {
        listeners = _this._removeListeners$0();
        H.assertSubtypeOfRuntimeType(value, t1);
        _this._async$_state = 4;
        _this._resultOrListeners = value;
        P._Future__propagateToListeners(_this, listeners);
      }
    },
    _completeError$2: function(error, stackTrace) {
      var listeners, _this = this;
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      listeners = _this._removeListeners$0();
      _this._async$_state = 8;
      _this._resultOrListeners = new P.AsyncError(error, stackTrace);
      P._Future__propagateToListeners(_this, listeners);
    },
    _asyncComplete$1: function(value) {
      var _this = this;
      H.futureOrCheck(value, {futureOr: 1, type: H.getTypeArgumentByIndex(_this, 0)});
      if (H.checkSubtype(value, "$isFuture", _this.$ti, "$asFuture")) {
        _this._chainFuture$1(value);
        return;
      }
      _this._async$_state = 1;
      P._rootScheduleMicrotask(null, null, _this._zone, H.functionTypeCheck(new P._Future__asyncComplete_closure(_this, value), {func: 1, ret: -1}));
    },
    _chainFuture$1: function(value) {
      var _this = this,
        t1 = _this.$ti;
      H.assertSubtype(value, "$isFuture", t1, "$asFuture");
      if (H.checkSubtype(value, "$is_Future", t1, null)) {
        if (value._async$_state === 8) {
          _this._async$_state = 1;
          P._rootScheduleMicrotask(null, null, _this._zone, H.functionTypeCheck(new P._Future__chainFuture_closure(_this, value), {func: 1, ret: -1}));
        } else
          P._Future__chainCoreFuture(value, _this);
        return;
      }
      P._Future__chainForeignFuture(value, _this);
    },
    _asyncCompleteError$2: function(error, stackTrace) {
      this._async$_state = 1;
      P._rootScheduleMicrotask(null, null, this._zone, H.functionTypeCheck(new P._Future__asyncCompleteError_closure(this, error, stackTrace), {func: 1, ret: -1}));
    },
    $isFuture: 1
  };
  P._Future__addListener_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this.listener);
    },
    $signature: 0
  };
  P._Future__prependListeners_closure.prototype = {
    call$0: function() {
      P._Future__propagateToListeners(this.$this, this._box_0.listeners);
    },
    $signature: 0
  };
  P._Future__chainForeignFuture_closure.prototype = {
    call$1: function(value) {
      var t1 = this.target;
      t1._async$_state = 0;
      t1._complete$1(value);
    },
    $signature: 4
  };
  P._Future__chainForeignFuture_closure0.prototype = {
    call$2: function(error, stackTrace) {
      H.interceptedTypeCheck(stackTrace, "$isStackTrace");
      this.target._completeError$2(error, stackTrace);
    },
    call$1: function(error) {
      return this.call$2(error, null);
    },
    "call*": "call$2",
    $defaultValues: function() {
      return [null];
    },
    $signature: 77
  };
  P._Future__chainForeignFuture_closure1.prototype = {
    call$0: function() {
      this.target._completeError$2(this.e, this.s);
    },
    $signature: 0
  };
  P._Future__asyncComplete_closure.prototype = {
    call$0: function() {
      var t1 = this.$this,
        t2 = H.assertSubtypeOfRuntimeType(this.value, H.getTypeArgumentByIndex(t1, 0)),
        listeners = t1._removeListeners$0();
      t1._async$_state = 4;
      t1._resultOrListeners = t2;
      P._Future__propagateToListeners(t1, listeners);
    },
    $signature: 0
  };
  P._Future__chainFuture_closure.prototype = {
    call$0: function() {
      P._Future__chainCoreFuture(this.value, this.$this);
    },
    $signature: 0
  };
  P._Future__asyncCompleteError_closure.prototype = {
    call$0: function() {
      this.$this._completeError$2(this.error, this.stackTrace);
    },
    $signature: 0
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback.prototype = {
    call$0: function() {
      var e, s, t1, exception, t2, originalSource, _this = this, completeResult = null;
      try {
        t1 = _this.listener;
        completeResult = t1.result._zone.run$1$1(H.functionTypeCheck(t1.callback, {func: 1}), null);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        if (_this.hasError) {
          t1 = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError").error;
          t2 = e;
          t2 = t1 == null ? t2 == null : t1 === t2;
          t1 = t2;
        } else
          t1 = false;
        t2 = _this._box_0;
        if (t1)
          t2.listenerValueOrError = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        else
          t2.listenerValueOrError = new P.AsyncError(e, s);
        t2.listenerHasError = true;
        return;
      }
      if (!!J.getInterceptor$(completeResult).$isFuture) {
        if (completeResult instanceof P._Future && completeResult._async$_state >= 4) {
          if (completeResult._async$_state === 8) {
            t1 = _this._box_0;
            t1.listenerValueOrError = H.interceptedTypeCheck(completeResult._resultOrListeners, "$isAsyncError");
            t1.listenerHasError = true;
          }
          return;
        }
        originalSource = _this._box_1.source;
        t1 = _this._box_0;
        t1.listenerValueOrError = completeResult.then$1$1(new P._Future__propagateToListeners_handleWhenCompleteCallback_closure(originalSource), null);
        t1.listenerHasError = false;
      }
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleWhenCompleteCallback_closure.prototype = {
    call$1: function(_) {
      return this.originalSource;
    },
    $signature: 62
  };
  P._Future__propagateToListeners_handleValueCallback.prototype = {
    call$0: function() {
      var e, s, t1, t2, t3, t4, exception, _this = this;
      try {
        t1 = _this.listener;
        t2 = H.getTypeArgumentByIndex(t1, 0);
        t3 = H.assertSubtypeOfRuntimeType(_this.sourceResult, t2);
        t4 = H.getTypeArgumentByIndex(t1, 1);
        _this._box_0.listenerValueOrError = t1.result._zone.runUnary$2$2(H.functionTypeCheck(t1.callback, {func: 1, ret: {futureOr: 1, type: t4}, args: [t2]}), t3, {futureOr: 1, type: t4}, t2);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = _this._box_0;
        t1.listenerValueOrError = new P.AsyncError(e, s);
        t1.listenerHasError = true;
      }
    },
    $signature: 1
  };
  P._Future__propagateToListeners_handleError.prototype = {
    call$0: function() {
      var asyncError, e, s, t1, t2, exception, t3, t4, _this = this;
      try {
        asyncError = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        t1 = _this.listener;
        if (H.boolConversionCheck(t1.matchesErrorTest$1(asyncError)) && t1.errorCallback != null) {
          t2 = _this._box_0;
          t2.listenerValueOrError = t1.handleError$1(asyncError);
          t2.listenerHasError = false;
        }
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        t1 = H.interceptedTypeCheck(_this._box_1.source._resultOrListeners, "$isAsyncError");
        t2 = t1.error;
        t3 = e;
        t4 = _this._box_0;
        if (t2 == null ? t3 == null : t2 === t3)
          t4.listenerValueOrError = t1;
        else
          t4.listenerValueOrError = new P.AsyncError(e, s);
        t4.listenerHasError = true;
      }
    },
    $signature: 1
  };
  P._AsyncCallbackEntry.prototype = {};
  P.Stream.prototype = {
    get$length: function(_) {
      var t2, t3, _this = this, t1 = {},
        future = new P._Future($.Zone__current, [P.int]);
      t1.count = 0;
      t2 = H.getTypeArgumentByIndex(_this, 0);
      t3 = H.functionTypeCheck(new P.Stream_length_closure(t1, _this), {func: 1, ret: -1, args: [t2]});
      H.functionTypeCheck(new P.Stream_length_closure0(t1, future), {func: 1, ret: -1});
      W._EventStreamSubscription$(_this._html$_target, _this._eventType, t3, false, t2);
      return future;
    }
  };
  P.Stream_length_closure.prototype = {
    call$1: function(_) {
      H.assertSubtypeOfRuntimeType(_, H.getTypeArgumentByIndex(this.$this, 0));
      ++this._box_0.count;
    },
    $signature: function() {
      return {func: 1, ret: P.Null, args: [H.getTypeArgumentByIndex(this.$this, 0)]};
    }
  };
  P.Stream_length_closure0.prototype = {
    call$0: function() {
      this.future._complete$1(this._box_0.count);
    },
    $signature: 0
  };
  P.StreamSubscription.prototype = {};
  P.StreamTransformerBase.prototype = {};
  P.Timer.prototype = {};
  P.AsyncError.prototype = {
    toString$0: function(_) {
      return H.S(this.error);
    },
    $isError: 1
  };
  P._Zone.prototype = {$isZone: 1};
  P._rootHandleUncaughtError_closure.prototype = {
    call$0: function() {
      var error,
        t1 = this._box_0,
        t2 = t1.error;
      t1 = t2 == null ? t1.error = new P.NullThrownError() : t2;
      t2 = this.stackTrace;
      if (t2 == null)
        throw H.wrapException(t1);
      error = H.wrapException(t1);
      error.stack = t2.toString$0(0);
      throw error;
    },
    $signature: 0
  };
  P._RootZone.prototype = {
    runGuarded$1: function(f) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1});
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$0();
          return;
        }
        P._rootRun(_null, _null, this, f, -1);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    runUnaryGuarded$1$2: function(f, arg, $T) {
      var e, s, exception, _null = null;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      try {
        if (C.C__RootZone === $.Zone__current) {
          f.call$1(arg);
          return;
        }
        P._rootRunUnary(_null, _null, this, f, arg, -1, $T);
      } catch (exception) {
        e = H.unwrapException(exception);
        s = H.getTraceFromException(exception);
        P._rootHandleUncaughtError(_null, _null, this, e, H.interceptedTypeCheck(s, "$isStackTrace"));
      }
    },
    bindCallback$1$1: function(f, $R) {
      return new P._RootZone_bindCallback_closure(this, H.functionTypeCheck(f, {func: 1, ret: $R}), $R);
    },
    bindCallbackGuarded$1: function(f) {
      return new P._RootZone_bindCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1}));
    },
    bindUnaryCallbackGuarded$1$1: function(f, $T) {
      return new P._RootZone_bindUnaryCallbackGuarded_closure(this, H.functionTypeCheck(f, {func: 1, ret: -1, args: [$T]}), $T);
    },
    run$1$1: function(f, $R) {
      H.functionTypeCheck(f, {func: 1, ret: $R});
      if ($.Zone__current === C.C__RootZone)
        return f.call$0();
      return P._rootRun(null, null, this, f, $R);
    },
    runUnary$2$2: function(f, arg, $R, $T) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [$T]});
      H.assertSubtypeOfRuntimeType(arg, $T);
      if ($.Zone__current === C.C__RootZone)
        return f.call$1(arg);
      return P._rootRunUnary(null, null, this, f, arg, $R, $T);
    },
    runBinary$3$3: function(f, arg1, arg2, $R, T1, T2) {
      H.functionTypeCheck(f, {func: 1, ret: $R, args: [T1, T2]});
      H.assertSubtypeOfRuntimeType(arg1, T1);
      H.assertSubtypeOfRuntimeType(arg2, T2);
      if ($.Zone__current === C.C__RootZone)
        return f.call$2(arg1, arg2);
      return P._rootRunBinary(null, null, this, f, arg1, arg2, $R, T1, T2);
    }
  };
  P._RootZone_bindCallback_closure.prototype = {
    call$0: function() {
      return this.$this.run$1$1(this.f, this.R);
    },
    $signature: function() {
      return {func: 1, ret: this.R};
    }
  };
  P._RootZone_bindCallbackGuarded_closure.prototype = {
    call$0: function() {
      return this.$this.runGuarded$1(this.f);
    },
    $signature: 1
  };
  P._RootZone_bindUnaryCallbackGuarded_closure.prototype = {
    call$1: function(arg) {
      var t1 = this.T;
      return this.$this.runUnaryGuarded$1$2(this.f, H.assertSubtypeOfRuntimeType(arg, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: -1, args: [this.T]};
    }
  };
  P._LinkedHashSet.prototype = {
    get$iterator: function(_) {
      var _this = this,
        t1 = new P._LinkedHashSetIterator(_this, _this._collection$_modifications, _this.$ti);
      t1._collection$_cell = _this._collection$_first;
      return t1;
    },
    get$length: function(_) {
      return this._collection$_length;
    },
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    contains$1: function(_, object) {
      var strings, t1;
      if (typeof object === "string" && object !== "__proto__") {
        strings = this._collection$_strings;
        if (strings == null)
          return false;
        return H.interceptedTypeCheck(strings[object], "$is_LinkedHashSetCell") != null;
      } else {
        t1 = this._contains$1(object);
        return t1;
      }
    },
    _contains$1: function(object) {
      var rest = this._collection$_rest;
      if (rest == null)
        return false;
      return this._findBucketIndex$2(this._getBucket$2(rest, object), object) >= 0;
    },
    forEach$1: function(_, action) {
      var cell, modifications, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [t1]});
      cell = _this._collection$_first;
      modifications = _this._collection$_modifications;
      for (; cell != null;) {
        action.call$1(H.assertSubtypeOfRuntimeType(cell._element, t1));
        if (modifications !== _this._collection$_modifications)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
        cell = cell._collection$_next;
      }
    },
    add$1: function(_, element) {
      var strings, nums, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      if (typeof element === "string" && element !== "__proto__") {
        strings = _this._collection$_strings;
        return _this._collection$_addHashTableEntry$2(strings == null ? _this._collection$_strings = P._LinkedHashSet__newHashTable() : strings, element);
      } else if (typeof element === "number" && (element & 1073741823) === element) {
        nums = _this._collection$_nums;
        return _this._collection$_addHashTableEntry$2(nums == null ? _this._collection$_nums = P._LinkedHashSet__newHashTable() : nums, element);
      } else
        return _this._add$1(0, element);
    },
    _add$1: function(_, element) {
      var rest, hash, bucket, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0));
      rest = _this._collection$_rest;
      if (rest == null)
        rest = _this._collection$_rest = P._LinkedHashSet__newHashTable();
      hash = _this._computeHashCode$1(element);
      bucket = rest[hash];
      if (bucket == null)
        rest[hash] = [_this._collection$_newLinkedCell$1(element)];
      else {
        if (_this._findBucketIndex$2(bucket, element) >= 0)
          return false;
        bucket.push(_this._collection$_newLinkedCell$1(element));
      }
      return true;
    },
    remove$1: function(_, object) {
      var _this = this;
      if (typeof object === "string" && object !== "__proto__")
        return _this._collection$_removeHashTableEntry$2(_this._collection$_strings, object);
      else if (typeof object === "number" && (object & 1073741823) === object)
        return _this._collection$_removeHashTableEntry$2(_this._collection$_nums, object);
      else
        return _this._remove$1(0, object);
    },
    _remove$1: function(_, object) {
      var bucket, index, _this = this,
        rest = _this._collection$_rest;
      if (rest == null)
        return false;
      bucket = _this._getBucket$2(rest, object);
      index = _this._findBucketIndex$2(bucket, object);
      if (index < 0)
        return false;
      _this._collection$_unlinkCell$1(bucket.splice(index, 1)[0]);
      return true;
    },
    clear$0: function(_) {
      var _this = this;
      if (_this._collection$_length > 0) {
        _this._collection$_strings = _this._collection$_nums = _this._collection$_rest = _this._collection$_first = _this._collection$_last = null;
        _this._collection$_length = 0;
        _this._collection$_modified$0();
      }
    },
    _collection$_addHashTableEntry$2: function(table, element) {
      H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0));
      if (H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell") != null)
        return false;
      table[element] = this._collection$_newLinkedCell$1(element);
      return true;
    },
    _collection$_removeHashTableEntry$2: function(table, element) {
      var cell;
      if (table == null)
        return false;
      cell = H.interceptedTypeCheck(table[element], "$is_LinkedHashSetCell");
      if (cell == null)
        return false;
      this._collection$_unlinkCell$1(cell);
      delete table[element];
      return true;
    },
    _collection$_modified$0: function() {
      this._collection$_modifications = 1073741823 & this._collection$_modifications + 1;
    },
    _collection$_newLinkedCell$1: function(element) {
      var last, _this = this,
        cell = new P._LinkedHashSetCell(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(_this, 0)));
      if (_this._collection$_first == null)
        _this._collection$_first = _this._collection$_last = cell;
      else {
        last = _this._collection$_last;
        cell._collection$_previous = last;
        _this._collection$_last = last._collection$_next = cell;
      }
      ++_this._collection$_length;
      _this._collection$_modified$0();
      return cell;
    },
    _collection$_unlinkCell$1: function(cell) {
      var _this = this,
        previous = cell._collection$_previous,
        next = cell._collection$_next;
      if (previous == null)
        _this._collection$_first = next;
      else
        previous._collection$_next = next;
      if (next == null)
        _this._collection$_last = previous;
      else
        next._collection$_previous = previous;
      --_this._collection$_length;
      _this._collection$_modified$0();
    },
    _computeHashCode$1: function(element) {
      return J.get$hashCode$(element) & 1073741823;
    },
    _getBucket$2: function(table, element) {
      return table[this._computeHashCode$1(element)];
    },
    _findBucketIndex$2: function(bucket, element) {
      var $length, i;
      if (bucket == null)
        return -1;
      $length = bucket.length;
      for (i = 0; i < $length; ++i)
        if (J.$eq$(bucket[i]._element, element))
          return i;
      return -1;
    }
  };
  P._LinkedHashSetCell.prototype = {};
  P._LinkedHashSetIterator.prototype = {
    get$current: function(_) {
      return this._collection$_current;
    },
    moveNext$0: function() {
      var _this = this,
        t1 = _this._set;
      if (_this._collection$_modifications !== t1._collection$_modifications)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      else {
        t1 = _this._collection$_cell;
        if (t1 == null) {
          _this.set$_collection$_current(null);
          return false;
        } else {
          _this.set$_collection$_current(H.assertSubtypeOfRuntimeType(t1._element, H.getTypeArgumentByIndex(_this, 0)));
          _this._collection$_cell = _this._collection$_cell._collection$_next;
          return true;
        }
      }
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  P.IterableMixin.prototype = {
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return H.MappedIterable_MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    contains$1: function(_, element) {
      var t1, _this = this;
      for (t1 = H.getTypeArgumentByIndex(_this, 0), t1 = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, t1]]), _this._modificationCount, _this._splayCount, [t1]), t1._findLeftMostDescendent$1(_this._root); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(t1), element))
          return true;
      return false;
    },
    forEach$1: function(_, f) {
      var t1, _this = this;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0)]});
      for (t1 = H.getTypeArgumentByIndex(_this, 0), t1 = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, t1]]), _this._modificationCount, _this._splayCount, [t1]), t1._findLeftMostDescendent$1(_this._root); t1.moveNext$0();)
        f.call$1(t1.get$current(t1));
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, false, H.getTypeArgumentByIndex(this, 0));
    },
    get$length: function(_) {
      var count, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0),
        it = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, t1]]), _this._modificationCount, _this._splayCount, [t1]);
      it._findLeftMostDescendent$1(_this._root);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      var _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      t1 = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, t1]]), _this._modificationCount, _this._splayCount, [t1]);
      t1._findLeftMostDescendent$1(_this._root);
      return !t1.moveNext$0();
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P.IterableBase.prototype = {};
  P.LinkedHashMap_LinkedHashMap$from_closure.prototype = {
    call$2: function(k, v) {
      this.result.$indexSet(0, H.assertSubtypeOfRuntimeType(k, this.K), H.assertSubtypeOfRuntimeType(v, this.V));
    },
    $signature: 5
  };
  P.ListMixin.prototype = {
    get$iterator: function(receiver) {
      return new H.ListIterator(receiver, this.get$length(receiver), [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    forEach$1: function(receiver, action) {
      var $length, i, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        action.call$1(_this.$index(receiver, i));
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
    },
    get$isEmpty: function(receiver) {
      return this.get$length(receiver) === 0;
    },
    get$isNotEmpty: function(receiver) {
      return this.get$length(receiver) !== 0;
    },
    get$first: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, 0);
    },
    get$last: function(receiver) {
      if (this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      return this.$index(receiver, this.get$length(receiver) - 1);
    },
    contains$1: function(receiver, element) {
      var i,
        $length = this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (J.$eq$(this.$index(receiver, i), element))
          return true;
        if ($length !== this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    any$1: function(receiver, test) {
      var $length, i, _this = this;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      for (i = 0; i < $length; ++i) {
        if (H.boolConversionCheck(test.call$1(_this.$index(receiver, i))))
          return true;
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return false;
    },
    where$1: function(receiver, test) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return new H.WhereIterable(receiver, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    map$1$1: function(receiver, f, $T) {
      var t1 = H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0);
      return new H.MappedListIterable(receiver, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    fold$1$2: function(receiver, initialValue, combine, $T) {
      var $length, value, i, _this = this;
      H.assertSubtypeOfRuntimeType(initialValue, $T);
      H.functionTypeCheck(combine, {func: 1, ret: $T, args: [$T, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]});
      $length = _this.get$length(receiver);
      for (value = initialValue, i = 0; i < $length; ++i) {
        value = combine.call$2(value, _this.$index(receiver, i));
        if ($length !== _this.get$length(receiver))
          throw H.wrapException(P.ConcurrentModificationError$(receiver));
      }
      return value;
    },
    toList$1$growable: function(receiver, growable) {
      var result, i, _this = this,
        t1 = new Array(_this.get$length(receiver));
      t1.fixed$length = Array;
      result = H.setRuntimeTypeInfo(t1, [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)]);
      for (i = 0; i < _this.get$length(receiver); ++i)
        C.JSArray_methods.$indexSet(result, i, _this.$index(receiver, i));
      return result;
    },
    add$1: function(receiver, element) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(element, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0));
      t1 = _this.get$length(receiver);
      _this.set$length(receiver, t1 + 1);
      _this.$indexSet(receiver, t1, element);
    },
    addAll$1: function(receiver, iterable) {
      var i, t1, element, i0, _this = this;
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "ListMixin", 0)], "$asIterable");
      i = _this.get$length(receiver);
      for (t1 = J.get$iterator$ax(iterable); t1.moveNext$0(); i = i0) {
        element = t1.get$current(t1);
        i0 = i + 1;
        _this.set$length(receiver, i0);
        _this.$indexSet(receiver, i, element);
      }
    },
    remove$1: function(receiver, element) {
      var i;
      for (i = 0; i < this.get$length(receiver); ++i)
        if (J.$eq$(this.$index(receiver, i), element)) {
          this._closeGap$2(receiver, i, i + 1);
          return true;
        }
      return false;
    },
    _closeGap$2: function(receiver, start, end) {
      var i, _this = this,
        $length = _this.get$length(receiver),
        size = end - start;
      for (i = end; i < $length; ++i)
        _this.$indexSet(receiver, i - size, _this.$index(receiver, i));
      _this.set$length(receiver, $length - size);
    },
    removeLast$0: function(receiver) {
      var result, _this = this;
      if (_this.get$length(receiver) === 0)
        throw H.wrapException(H.IterableElementError_noElement());
      result = _this.$index(receiver, _this.get$length(receiver) - 1);
      _this.set$length(receiver, _this.get$length(receiver) - 1);
      return result;
    },
    sublist$1: function(receiver, start) {
      var $length, result, i,
        listLength = this.get$length(receiver);
      P.RangeError_checkValidRange(start, listLength, listLength);
      $length = listLength - start;
      result = H.setRuntimeTypeInfo([], [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ListMixin", 0)]);
      C.JSArray_methods.set$length(result, $length);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(result, i, this.$index(receiver, start + i));
      return result;
    },
    toString$0: function(receiver) {
      return P.IterableBase_iterableToFullString(receiver, "[", "]");
    }
  };
  P.MapBase.prototype = {};
  P.MapBase_mapToString_closure.prototype = {
    call$2: function(k, v) {
      var t2,
        t1 = this._box_0;
      if (!t1.first)
        this.result._contents += ", ";
      t1.first = false;
      t1 = this.result;
      t2 = t1._contents += H.S(k);
      t1._contents = t2 + ": ";
      t1._contents += H.S(v);
    },
    $signature: 5
  };
  P.MapMixin.prototype = {
    forEach$1: function(receiver, action) {
      var t1, key, _this = this;
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgumentIntercepted(_this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(_this, receiver, "MapMixin", 1)]});
      for (t1 = J.get$iterator$ax(_this.get$keys(receiver)); t1.moveNext$0();) {
        key = t1.get$current(t1);
        action.call$2(key, _this.$index(receiver, key));
      }
    },
    addAll$1: function(receiver, other) {
      var t1, t2, key;
      H.assertSubtype(other, "$isMap", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 1)], "$asMap");
      for (t1 = J.getInterceptor$x(other), t2 = J.get$iterator$ax(t1.get$keys(other)); t2.moveNext$0();) {
        key = t2.get$current(t2);
        this.$indexSet(receiver, key, t1.$index(other, key));
      }
    },
    putIfAbsent$2: function(receiver, key, ifAbsent) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgumentIntercepted(_this, receiver, "MapMixin", 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getRuntimeTypeArgumentIntercepted(_this, receiver, "MapMixin", 1)});
      if (H.boolConversionCheck(_this.containsKey$1(receiver, key)))
        return _this.$index(receiver, key);
      t1 = ifAbsent.call$0();
      _this.$indexSet(receiver, key, t1);
      return t1;
    },
    containsKey$1: function(receiver, key) {
      return J.contains$1$asx(this.get$keys(receiver), key);
    },
    get$length: function(receiver) {
      return J.get$length$asx(this.get$keys(receiver));
    },
    get$isEmpty: function(receiver) {
      return J.get$isEmpty$asx(this.get$keys(receiver));
    },
    get$values: function(receiver) {
      return new P._MapBaseValueIterable(receiver, [H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 0), H.getRuntimeTypeArgumentIntercepted(this, receiver, "MapMixin", 1)]);
    },
    toString$0: function(receiver) {
      return P.MapBase_mapToString(receiver);
    },
    $isMap: 1
  };
  P._MapBaseValueIterable.prototype = {
    get$length: function(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$iterator: function(_) {
      var t1 = this._collection$_map;
      return new P._MapBaseValueIterator(J.get$iterator$ax(J.get$keys$x(t1)), t1, this.$ti);
    },
    $asEfficientLengthIterable: function($K, $V) {
      return [$V];
    },
    $asIterable: function($K, $V) {
      return [$V];
    }
  };
  P._MapBaseValueIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        t1 = _this._collection$_keys;
      if (t1.moveNext$0()) {
        _this.set$_collection$_current(J.$index$asx(_this._collection$_map, t1.get$current(t1)));
        return true;
      }
      _this.set$_collection$_current(null);
      return false;
    },
    get$current: function(_) {
      return this._collection$_current;
    },
    set$_collection$_current: function(_current) {
      this._collection$_current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 1));
    },
    $isIterator: 1,
    $asIterator: function($K, $V) {
      return [$V];
    }
  };
  P._UnmodifiableMapMixin.prototype = {
    $indexSet: function(_, key, value) {
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 0));
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 1));
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", [H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 0), H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 1)], "$asMap");
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    remove$1: function(_, key) {
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    },
    putIfAbsent$2: function(_, key, ifAbsent) {
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getRuntimeTypeArgument(this, "_UnmodifiableMapMixin", 1)});
      throw H.wrapException(P.UnsupportedError$("Cannot modify unmodifiable map"));
    }
  };
  P.MapView.prototype = {
    $index: function(_, key) {
      return J.$index$asx(this._collection$_map, key);
    },
    $indexSet: function(_, key, value) {
      J.$indexSet$ax(this._collection$_map, H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(this, "MapView", 0)), H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "MapView", 1)));
    },
    addAll$1: function(_, other) {
      J.addAll$1$ax(this._collection$_map, H.assertSubtype(other, "$isMap", [H.getRuntimeTypeArgument(this, "MapView", 0), H.getRuntimeTypeArgument(this, "MapView", 1)], "$asMap"));
    },
    putIfAbsent$2: function(_, key, ifAbsent) {
      return J.putIfAbsent$2$x(this._collection$_map, H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(this, "MapView", 0)), H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getRuntimeTypeArgument(this, "MapView", 1)}));
    },
    containsKey$1: function(_, key) {
      return J.containsKey$1$x(this._collection$_map, key);
    },
    forEach$1: function(_, action) {
      J.forEach$1$ax(this._collection$_map, H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "MapView", 0), H.getRuntimeTypeArgument(this, "MapView", 1)]}));
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this._collection$_map);
    },
    get$length: function(_) {
      return J.get$length$asx(this._collection$_map);
    },
    get$keys: function(_) {
      return J.get$keys$x(this._collection$_map);
    },
    remove$1: function(_, key) {
      return J.remove$1$ax(this._collection$_map, key);
    },
    toString$0: function(_) {
      return J.toString$0$(this._collection$_map);
    },
    get$values: function(_) {
      return J.get$values$x(this._collection$_map);
    },
    $isMap: 1
  };
  P.UnmodifiableMapView.prototype = {};
  P.SetMixin.prototype = {
    get$isEmpty: function(_) {
      return this._count === 0;
    },
    toList$1$growable: function(_, growable) {
      var result, t2, i, i0, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      if (growable) {
        result = H.setRuntimeTypeInfo([], [t1]);
        C.JSArray_methods.set$length(result, _this._count);
      } else {
        t2 = new Array(_this._count);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, [t1]);
      }
      for (t1 = H.getTypeArgumentByIndex(_this, 0), t1 = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, t1]]), _this._modificationCount, _this._splayCount, [t1]), t1._findLeftMostDescendent$1(_this._root), i = 0; t1.moveNext$0(); i = i0) {
        i0 = i + 1;
        C.JSArray_methods.$indexSet(result, i, t1.get$current(t1));
      }
      return result;
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return new H.EfficientLengthMappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    forEach$1: function(_, f) {
      var t1, _this = this;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0)]});
      for (t1 = H.getTypeArgumentByIndex(_this, 0), t1 = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, t1]]), _this._modificationCount, _this._splayCount, [t1]), t1._findLeftMostDescendent$1(_this._root); t1.moveNext$0();)
        f.call$1(t1.get$current(t1));
    }
  };
  P._SetBase.prototype = {
    get$isEmpty: function(_) {
      return this._collection$_length === 0;
    },
    toList$1$growable: function(_, growable) {
      var result, t2, i, i0, _this = this,
        t1 = _this.$ti;
      if (growable) {
        result = H.setRuntimeTypeInfo([], t1);
        C.JSArray_methods.set$length(result, _this._collection$_length);
      } else {
        t2 = new Array(_this._collection$_length);
        t2.fixed$length = Array;
        result = H.setRuntimeTypeInfo(t2, t1);
      }
      for (t1 = P._LinkedHashSetIterator$(_this, _this._collection$_modifications, H.getTypeArgumentByIndex(_this, 0)), i = 0; t1.moveNext$0(); i = i0) {
        i0 = i + 1;
        C.JSArray_methods.$indexSet(result, i, t1._collection$_current);
      }
      return result;
    },
    map$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return new H.EfficientLengthMappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), [t1, $T]);
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    expand$1$1: function(_, f, $T) {
      var t1 = H.getTypeArgumentByIndex(this, 0);
      return new H.ExpandIterable(this, H.functionTypeCheck(f, {func: 1, ret: [P.Iterable, $T], args: [t1]}), [t1, $T]);
    },
    forEach$1: function(_, f) {
      var t1, _this = this;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(_this, 0)]});
      for (t1 = P._LinkedHashSetIterator$(_this, _this._collection$_modifications, H.getTypeArgumentByIndex(_this, 0)); t1.moveNext$0();)
        f.call$1(t1._collection$_current);
    },
    reduce$1: function(_, combine) {
      var iterator, value, _this = this,
        t1 = H.getTypeArgumentByIndex(_this, 0);
      H.functionTypeCheck(combine, {func: 1, ret: t1, args: [t1, t1]});
      iterator = P._LinkedHashSetIterator$(_this, _this._collection$_modifications, H.getTypeArgumentByIndex(_this, 0));
      if (!iterator.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      value = iterator._collection$_current;
      for (; iterator.moveNext$0();)
        value = combine.call$2(value, iterator._collection$_current);
      return value;
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isSet: 1
  };
  P._SplayTreeNode.prototype = {
    set$left: function(_, left) {
      this.left = H.assertSubtype(left, "$is_SplayTreeNode", this.$ti, "$as_SplayTreeNode");
    },
    set$right: function(_, right) {
      this.right = H.assertSubtype(right, "$is_SplayTreeNode", this.$ti, "$as_SplayTreeNode");
    }
  };
  P._SplayTree.prototype = {
    _splay$1: function(key) {
      var current, left, t1, t2, right, left0, comp, t3, t4, t5, tmp, current0, _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(_this, "_SplayTree", 0));
      current = _this._root;
      if (current == null)
        return -1;
      left = _this._dummy;
      for (t1 = H.getRuntimeTypeArgument(_this, "_SplayTree", 1), t2 = H.getTypeArgumentByIndex(_this, 0), right = left, left0 = right, comp = null; true;) {
        t3 = H.assertSubtypeOfRuntimeType(current.key, t2);
        H.assertSubtypeOfRuntimeType(key, t2);
        t4 = _this._comparator;
        t3 = t4.call$2(t3, key);
        if (typeof t3 !== "number")
          return t3.$gt();
        if (t3 > 0) {
          t5 = current.left;
          if (t5 == null) {
            comp = t3;
            break;
          }
          t3 = t4.call$2(H.assertSubtypeOfRuntimeType(t5.key, t2), key);
          if (typeof t3 !== "number")
            return t3.$gt();
          if (t3 > 0) {
            tmp = current.left;
            current.set$left(0, tmp.right);
            tmp.set$right(0, current);
            H.assertSubtypeOfRuntimeType(tmp, t1);
            if (tmp.left == null) {
              comp = t3;
              current = tmp;
              break;
            }
            current = tmp;
          }
          right.set$left(0, current);
          current0 = H.assertSubtypeOfRuntimeType(current.left, t1);
          comp = t3;
          right = current;
          current = current0;
        } else {
          if (t3 < 0) {
            t5 = current.right;
            if (t5 == null) {
              comp = t3;
              break;
            }
            t3 = t4.call$2(H.assertSubtypeOfRuntimeType(t5.key, t2), key);
            if (typeof t3 !== "number")
              return t3.$lt();
            if (t3 < 0) {
              tmp = H.assertSubtypeOfRuntimeType(current.right, t1);
              current.set$right(0, tmp.left);
              tmp.set$left(0, current);
              if (tmp.right == null) {
                comp = t3;
                current = tmp;
                break;
              }
              current = tmp;
            }
            left0.set$right(0, current);
            current0 = H.assertSubtypeOfRuntimeType(current.right, t1);
          } else {
            comp = t3;
            break;
          }
          comp = t3;
          left0 = current;
          current = current0;
        }
      }
      left0.set$right(0, current.left);
      right.set$left(0, current.right);
      current.set$left(0, left.right);
      current.set$right(0, left.left);
      _this.set$_root(current);
      left.set$right(0, null);
      left.set$left(0, null);
      ++_this._splayCount;
      return comp;
    },
    _addNewRoot$2: function(node, comp) {
      var t1, _this = this;
      H.assertSubtypeOfRuntimeType(node, H.getRuntimeTypeArgument(_this, "_SplayTree", 1));
      ++_this._count;
      ++_this._modificationCount;
      t1 = _this._root;
      if (t1 == null) {
        _this.set$_root(node);
        return;
      }
      if (typeof comp !== "number")
        return comp.$lt();
      if (comp < 0) {
        node.set$left(0, t1);
        node.set$right(0, _this._root.right);
        _this._root.set$right(0, null);
      } else {
        node.set$right(0, t1);
        node.set$left(0, _this._root.left);
        _this._root.set$left(0, null);
      }
      _this.set$_root(node);
    }
  };
  P._SplayTreeIterator.prototype = {
    get$current: function(_) {
      var t1 = this._currentNode;
      if (t1 == null)
        return;
      return H.assertSubtype(t1, "$is_SplayTreeNode", [H.getTypeArgumentByIndex(this, 0)], "$as_SplayTreeNode").key;
    },
    _findLeftMostDescendent$1: function(node) {
      var t1;
      H.assertSubtype(node, "$is_SplayTreeNode", [H.getRuntimeTypeArgument(this, "_SplayTreeIterator", 0)], "$as_SplayTreeNode");
      for (t1 = this._workList; node != null;) {
        C.JSArray_methods.add$1(t1, node);
        node = node.left;
      }
    },
    moveNext$0: function() {
      var t2, t3, _this = this,
        t1 = _this._tree;
      if (_this._modificationCount !== t1._modificationCount)
        throw H.wrapException(P.ConcurrentModificationError$(t1));
      t2 = _this._workList;
      if (t2.length === 0) {
        _this.set$_currentNode(null);
        return false;
      }
      if (t1._splayCount !== _this._splayCount && _this._currentNode != null) {
        t3 = H.assertSubtype(_this._currentNode, "$is_SplayTreeNode", [H.getRuntimeTypeArgument(_this, "_SplayTreeIterator", 0)], "$as_SplayTreeNode");
        C.JSArray_methods.set$length(t2, 0);
        if (t3 == null)
          _this._findLeftMostDescendent$1(t1._root);
        else {
          t1._splay$1(t3.key);
          _this._findLeftMostDescendent$1(t1._root.right);
        }
      }
      if (0 >= t2.length)
        return H.ioore(t2, -1);
      _this.set$_currentNode(t2.pop());
      _this._findLeftMostDescendent$1(_this._currentNode.right);
      return true;
    },
    set$_currentNode: function(_currentNode) {
      this._currentNode = H.assertSubtype(_currentNode, "$is_SplayTreeNode", [H.getRuntimeTypeArgument(this, "_SplayTreeIterator", 0)], "$as_SplayTreeNode");
    },
    $isIterator: 1,
    $asIterator: function($K, $T) {
      return [$T];
    }
  };
  P._SplayTreeKeyIterator.prototype = {
    $as_SplayTreeIterator: function($K) {
      return [$K, $K];
    },
    $asIterator: null
  };
  P.SplayTreeSet.prototype = {
    get$iterator: function(_) {
      var _this = this,
        t1 = new P._SplayTreeKeyIterator(_this, H.setRuntimeTypeInfo([], [[P._SplayTreeNode, H.getTypeArgumentByIndex(_this, 0)]]), _this._modificationCount, _this._splayCount, _this.$ti);
      t1._findLeftMostDescendent$1(_this._root);
      return t1;
    },
    get$length: function(_) {
      return this._count;
    },
    get$isEmpty: function(_) {
      return this._root == null;
    },
    contains$1: function(_, element) {
      return H.boolConversionCheck(this._validKey.call$1(element)) && this._splay$1(H.assertSubtypeOfRuntimeType(element, H.getTypeArgumentByIndex(this, 0))) === 0;
    },
    addAll$1: function(_, elements) {
      var t2, _i, element, compare,
        t1 = this.$ti;
      H.assertSubtype(elements, "$isIterable", t1, "$asIterable");
      for (t2 = elements.length, _i = 0; _i < t2; ++_i) {
        element = elements[_i];
        compare = this._splay$1(element);
        if (compare !== 0)
          this._addNewRoot$2(new P._SplayTreeNode(element, t1), compare);
      }
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToFullString(this, "{", "}");
    },
    set$_root: function(_root) {
      this._root = H.assertSubtype(_root, "$is_SplayTreeNode", this.$ti, "$as_SplayTreeNode");
    },
    $isEfficientLengthIterable: 1,
    $as_SplayTree: function($E) {
      return [$E, [P._SplayTreeNode, $E]];
    },
    $isIterable: 1,
    $isSet: 1
  };
  P.SplayTreeSet_closure.prototype = {
    call$1: function(v) {
      return H.checkSubtypeOfRuntimeType(v, this.E);
    },
    $signature: 15
  };
  P._SplayTreeSet__SplayTree_IterableMixin.prototype = {};
  P._SplayTreeSet__SplayTree_IterableMixin_SetMixin.prototype = {};
  P._UnmodifiableMapView_MapView__UnmodifiableMapMixin.prototype = {};
  P._JsonMap.prototype = {
    $index: function(_, key) {
      var result,
        t1 = this._processed;
      if (t1 == null)
        return this._convert$_data.$index(0, key);
      else if (typeof key !== "string")
        return;
      else {
        result = t1[key];
        return typeof result == "undefined" ? this._process$1(key) : result;
      }
    },
    get$length: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._convert$_data;
        t1 = t1.get$length(t1);
      } else
        t1 = this._computeKeys$0().length;
      return t1;
    },
    get$isEmpty: function(_) {
      return this.get$length(this) === 0;
    },
    get$keys: function(_) {
      var t1;
      if (this._processed == null) {
        t1 = this._convert$_data;
        return t1.get$keys(t1);
      }
      return new P._JsonMapKeyIterable(this);
    },
    get$values: function(_) {
      var t1, _this = this;
      if (_this._processed == null) {
        t1 = _this._convert$_data;
        return t1.get$values(t1);
      }
      return H.MappedIterable_MappedIterable(_this._computeKeys$0(), new P._JsonMap_values_closure(_this), P.String, null);
    },
    $indexSet: function(_, key, value) {
      var processed, original, _this = this;
      H.stringTypeCheck(key);
      if (_this._processed == null)
        _this._convert$_data.$indexSet(0, key, value);
      else if (_this.containsKey$1(0, key)) {
        processed = _this._processed;
        processed[key] = value;
        original = _this._original;
        if (original == null ? processed != null : original !== processed)
          original[key] = null;
      } else
        _this._upgrade$0().$indexSet(0, key, value);
    },
    addAll$1: function(_, other) {
      J.forEach$1$ax(H.assertSubtype(other, "$isMap", [P.String, null], "$asMap"), new P._JsonMap_addAll_closure(this));
    },
    containsKey$1: function(_, key) {
      if (this._processed == null)
        return this._convert$_data.containsKey$1(0, key);
      if (typeof key !== "string")
        return false;
      return Object.prototype.hasOwnProperty.call(this._original, key);
    },
    putIfAbsent$2: function(_, key, ifAbsent) {
      var value;
      H.functionTypeCheck(ifAbsent, {func: 1});
      if (this.containsKey$1(0, key))
        return this.$index(0, key);
      value = ifAbsent.call$0();
      this.$indexSet(0, key, value);
      return value;
    },
    remove$1: function(_, key) {
      if (this._processed != null && !this.containsKey$1(0, key))
        return;
      return this._upgrade$0().remove$1(0, key);
    },
    forEach$1: function(_, f) {
      var keys, i, key, value, _this = this;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      if (_this._processed == null)
        return _this._convert$_data.forEach$1(0, f);
      keys = _this._computeKeys$0();
      for (i = 0; i < keys.length; ++i) {
        key = keys[i];
        value = _this._processed[key];
        if (typeof value == "undefined") {
          value = P._convertJsonToDartLazy(_this._original[key]);
          _this._processed[key] = value;
        }
        f.call$2(key, value);
        if (keys !== _this._convert$_data)
          throw H.wrapException(P.ConcurrentModificationError$(_this));
      }
    },
    _computeKeys$0: function() {
      var keys = H.listTypeCheck(this._convert$_data);
      if (keys == null)
        keys = this._convert$_data = H.setRuntimeTypeInfo(Object.keys(this._original), [P.String]);
      return keys;
    },
    _upgrade$0: function() {
      var result, keys, i, t1, key, _this = this;
      if (_this._processed == null)
        return _this._convert$_data;
      result = P.LinkedHashMap_LinkedHashMap$_empty(P.String, null);
      keys = _this._computeKeys$0();
      for (i = 0; t1 = keys.length, i < t1; ++i) {
        key = keys[i];
        result.$indexSet(0, key, _this.$index(0, key));
      }
      if (t1 === 0)
        C.JSArray_methods.add$1(keys, null);
      else
        C.JSArray_methods.set$length(keys, 0);
      _this._original = _this._processed = null;
      return _this._convert$_data = result;
    },
    _process$1: function(key) {
      var result;
      if (!Object.prototype.hasOwnProperty.call(this._original, key))
        return;
      result = P._convertJsonToDartLazy(this._original[key]);
      return this._processed[key] = result;
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $asMap: function() {
      return [P.String, null];
    }
  };
  P._JsonMap_values_closure.prototype = {
    call$1: function(each) {
      return this.$this.$index(0, each);
    },
    $signature: 3
  };
  P._JsonMap_addAll_closure.prototype = {
    call$2: function(key, value) {
      this.$this.$indexSet(0, H.stringTypeCheck(key), value);
    },
    $signature: 26
  };
  P._JsonMapKeyIterable.prototype = {
    get$length: function(_) {
      var t1 = this._parent;
      return t1.get$length(t1);
    },
    elementAt$1: function(_, index) {
      var t1 = this._parent;
      if (t1._processed == null)
        t1 = t1.get$keys(t1).elementAt$1(0, index);
      else {
        t1 = t1._computeKeys$0();
        if (index < 0 || index >= t1.length)
          return H.ioore(t1, index);
        t1 = t1[index];
      }
      return t1;
    },
    get$iterator: function(_) {
      var t1 = this._parent;
      if (t1._processed == null) {
        t1 = t1.get$keys(t1);
        t1 = t1.get$iterator(t1);
      } else {
        t1 = t1._computeKeys$0();
        t1 = new J.ArrayIterator(t1, t1.length, [H.getTypeArgumentByIndex(t1, 0)]);
      }
      return t1;
    },
    contains$1: function(_, key) {
      return this._parent.containsKey$1(0, key);
    },
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asListIterable: function() {
      return [P.String];
    },
    $asIterable: function() {
      return [P.String];
    }
  };
  P.Codec.prototype = {};
  P.Converter.prototype = {};
  P.JsonUnsupportedObjectError.prototype = {
    toString$0: function(_) {
      var safeString = P.Error_safeToString(this.unsupportedObject);
      return (this.cause != null ? "Converting object to an encodable object failed:" : "Converting object did not return an encodable object:") + " " + safeString;
    }
  };
  P.JsonCyclicError.prototype = {
    toString$0: function(_) {
      return "Cyclic error in JSON stringify";
    }
  };
  P.JsonCodec.prototype = {
    decode$2$reviver: function(_, source, reviver) {
      var t1 = P._parseJson(source, this.get$decoder()._reviver);
      return t1;
    },
    encode$2$toEncodable: function(value, toEncodable) {
      var t1 = P._JsonStringStringifier_stringify(value, this.get$encoder()._toEncodable, null);
      return t1;
    },
    get$encoder: function() {
      return C.JsonEncoder_null;
    },
    get$decoder: function() {
      return C.JsonDecoder_null;
    }
  };
  P.JsonEncoder.prototype = {
    $asConverter: function() {
      return [P.Object, P.String];
    }
  };
  P.JsonDecoder.prototype = {
    $asConverter: function() {
      return [P.String, P.Object];
    }
  };
  P._JsonStringifier.prototype = {
    writeStringContent$1: function(s) {
      var t1, t2, offset, i, charCode, t3,
        $length = s.length;
      for (t1 = J.getInterceptor$s(s), t2 = this._sink, offset = 0, i = 0; i < $length; ++i) {
        charCode = t1._codeUnitAt$1(s, i);
        if (charCode > 92)
          continue;
        if (charCode < 32) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2._contents += H.Primitives_stringFromCharCode(92);
          switch (charCode) {
            case 8:
              t2._contents += H.Primitives_stringFromCharCode(98);
              break;
            case 9:
              t2._contents += H.Primitives_stringFromCharCode(116);
              break;
            case 10:
              t2._contents += H.Primitives_stringFromCharCode(110);
              break;
            case 12:
              t2._contents += H.Primitives_stringFromCharCode(102);
              break;
            case 13:
              t2._contents += H.Primitives_stringFromCharCode(114);
              break;
            default:
              t2._contents += H.Primitives_stringFromCharCode(117);
              t2._contents += H.Primitives_stringFromCharCode(48);
              t2._contents += H.Primitives_stringFromCharCode(48);
              t3 = charCode >>> 4 & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              t3 = charCode & 15;
              t2._contents += H.Primitives_stringFromCharCode(t3 < 10 ? 48 + t3 : 87 + t3);
              break;
          }
        } else if (charCode === 34 || charCode === 92) {
          if (i > offset)
            t2._contents += C.JSString_methods.substring$2(s, offset, i);
          offset = i + 1;
          t2._contents += H.Primitives_stringFromCharCode(92);
          t2._contents += H.Primitives_stringFromCharCode(charCode);
        }
      }
      if (offset === 0)
        t2._contents += H.S(s);
      else if (offset < $length)
        t2._contents += t1.substring$2(s, offset, $length);
    },
    _checkCycle$1: function(object) {
      var t1, t2, i, t3;
      for (t1 = this._seen, t2 = t1.length, i = 0; i < t2; ++i) {
        t3 = t1[i];
        if (object == null ? t3 == null : object === t3)
          throw H.wrapException(new P.JsonCyclicError(object, null));
      }
      C.JSArray_methods.add$1(t1, object);
    },
    writeObject$1: function(object) {
      var customJson, e, t1, exception, _this = this;
      if (_this.writeJsonValue$1(object))
        return;
      _this._checkCycle$1(object);
      try {
        customJson = _this._toEncodable.call$1(object);
        if (!_this.writeJsonValue$1(customJson)) {
          t1 = P.JsonUnsupportedObjectError$(object, null, _this.get$_partialResult());
          throw H.wrapException(t1);
        }
        t1 = _this._seen;
        if (0 >= t1.length)
          return H.ioore(t1, -1);
        t1.pop();
      } catch (exception) {
        e = H.unwrapException(exception);
        t1 = P.JsonUnsupportedObjectError$(object, e, _this.get$_partialResult());
        throw H.wrapException(t1);
      }
    },
    writeJsonValue$1: function(object) {
      var t1, success, _this = this;
      if (typeof object === "number") {
        if (!isFinite(object))
          return false;
        _this._sink._contents += C.JSNumber_methods.toString$0(object);
        return true;
      } else if (object === true) {
        _this._sink._contents += "true";
        return true;
      } else if (object === false) {
        _this._sink._contents += "false";
        return true;
      } else if (object == null) {
        _this._sink._contents += "null";
        return true;
      } else if (typeof object === "string") {
        t1 = _this._sink;
        t1._contents += '"';
        _this.writeStringContent$1(object);
        t1._contents += '"';
        return true;
      } else {
        t1 = J.getInterceptor$(object);
        if (!!t1.$isList) {
          _this._checkCycle$1(object);
          _this.writeList$1(object);
          t1 = _this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          return true;
        } else if (!!t1.$isMap) {
          _this._checkCycle$1(object);
          success = _this.writeMap$1(object);
          t1 = _this._seen;
          if (0 >= t1.length)
            return H.ioore(t1, -1);
          t1.pop();
          return success;
        } else
          return false;
      }
    },
    writeList$1: function(list) {
      var t2, i,
        t1 = this._sink;
      t1._contents += "[";
      t2 = J.getInterceptor$asx(list);
      if (t2.get$isNotEmpty(list)) {
        this.writeObject$1(t2.$index(list, 0));
        for (i = 1; i < t2.get$length(list); ++i) {
          t1._contents += ",";
          this.writeObject$1(t2.$index(list, i));
        }
      }
      t1._contents += "]";
    },
    writeMap$1: function(map) {
      var t2, keyValueList, i, separator, t3, _this = this, _box_0 = {},
        t1 = J.getInterceptor$asx(map);
      if (t1.get$isEmpty(map)) {
        _this._sink._contents += "{}";
        return true;
      }
      t2 = t1.get$length(map);
      if (typeof t2 !== "number")
        return t2.$mul();
      t2 *= 2;
      keyValueList = new Array(t2);
      keyValueList.fixed$length = Array;
      i = _box_0.i = 0;
      _box_0.allStringKeys = true;
      t1.forEach$1(map, new P._JsonStringifier_writeMap_closure(_box_0, keyValueList));
      if (!_box_0.allStringKeys)
        return false;
      t1 = _this._sink;
      t1._contents += "{";
      for (separator = '"'; i < t2; i += 2, separator = ',"') {
        t1._contents += separator;
        _this.writeStringContent$1(H.stringTypeCheck(keyValueList[i]));
        t1._contents += '":';
        t3 = i + 1;
        if (t3 >= t2)
          return H.ioore(keyValueList, t3);
        _this.writeObject$1(keyValueList[t3]);
      }
      t1._contents += "}";
      return true;
    }
  };
  P._JsonStringifier_writeMap_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2;
      if (typeof key !== "string")
        this._box_0.allStringKeys = false;
      t1 = this.keyValueList;
      t2 = this._box_0;
      C.JSArray_methods.$indexSet(t1, t2.i++, key);
      C.JSArray_methods.$indexSet(t1, t2.i++, value);
    },
    $signature: 5
  };
  P._JsonStringStringifier.prototype = {
    get$_partialResult: function() {
      var t1 = this._sink._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    }
  };
  P.NoSuchMethodError_toString_closure.prototype = {
    call$2: function(key, value) {
      var t1, t2, t3;
      H.interceptedTypeCheck(key, "$isSymbol0");
      t1 = this.sb;
      t2 = this._box_0;
      t1._contents += t2.comma;
      t3 = t1._contents += H.S(key._name);
      t1._contents = t3 + ": ";
      t1._contents += P.Error_safeToString(value);
      t2.comma = ", ";
    },
    $signature: 75
  };
  P.bool.prototype = {};
  P.Comparable.prototype = {};
  P.DateTime.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.DateTime && this._value === other._value && this.isUtc === other.isUtc;
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._value, H.interceptedTypeCheck(other, "$isDateTime")._value);
    },
    DateTime$_withValue$2$isUtc: function(_value, isUtc) {
      var t2,
        t1 = this._value;
      if (Math.abs(t1) <= 864e13)
        t2 = false;
      else
        t2 = true;
      if (t2)
        throw H.wrapException(P.ArgumentError$("DateTime is outside valid range: " + t1));
    },
    get$hashCode: function(_) {
      var t1 = this._value;
      return (t1 ^ C.JSInt_methods._shrOtherPositive$1(t1, 30)) & 1073741823;
    },
    toString$0: function(_) {
      var _this = this,
        y = P.DateTime__fourDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this));
      if (_this.isUtc)
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + " " + h + ":" + min + ":" + sec + "." + ms;
    },
    toIso8601String$0: function() {
      var _this = this,
        y = H.Primitives_getYear(_this) >= -9999 && H.Primitives_getYear(_this) <= 9999 ? P.DateTime__fourDigits(H.Primitives_getYear(_this)) : P.DateTime__sixDigits(H.Primitives_getYear(_this)),
        m = P.DateTime__twoDigits(H.Primitives_getMonth(_this)),
        d = P.DateTime__twoDigits(H.Primitives_getDay(_this)),
        h = P.DateTime__twoDigits(H.Primitives_getHours(_this)),
        min = P.DateTime__twoDigits(H.Primitives_getMinutes(_this)),
        sec = P.DateTime__twoDigits(H.Primitives_getSeconds(_this)),
        ms = P.DateTime__threeDigits(H.Primitives_getMilliseconds(_this));
      if (_this.isUtc)
        return y + "-" + m + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms + "Z";
      else
        return y + "-" + m + "-" + d + "T" + h + ":" + min + ":" + sec + "." + ms;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.DateTime];
    }
  };
  P.double.prototype = {};
  P.Duration.prototype = {
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.Duration && this._duration === other._duration;
    },
    get$hashCode: function(_) {
      return C.JSInt_methods.get$hashCode(this._duration);
    },
    compareTo$1: function(_, other) {
      return C.JSInt_methods.compareTo$1(this._duration, H.interceptedTypeCheck(other, "$isDuration")._duration);
    },
    toString$0: function(_) {
      var twoDigitMinutes, twoDigitSeconds, sixDigitUs,
        t1 = new P.Duration_toString_twoDigits(),
        t2 = this._duration;
      if (t2 < 0)
        return "-" + new P.Duration(0 - t2).toString$0(0);
      twoDigitMinutes = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 60000000) % 60);
      twoDigitSeconds = t1.call$1(C.JSInt_methods._tdivFast$1(t2, 1000000) % 60);
      sixDigitUs = new P.Duration_toString_sixDigits().call$1(t2 % 1000000);
      return "" + C.JSInt_methods._tdivFast$1(t2, 3600000000) + ":" + H.S(twoDigitMinutes) + ":" + H.S(twoDigitSeconds) + "." + H.S(sixDigitUs);
    },
    $isComparable: 1,
    $asComparable: function() {
      return [P.Duration];
    }
  };
  P.Duration_toString_sixDigits.prototype = {
    call$1: function(n) {
      if (n >= 100000)
        return "" + n;
      if (n >= 10000)
        return "0" + n;
      if (n >= 1000)
        return "00" + n;
      if (n >= 100)
        return "000" + n;
      if (n >= 10)
        return "0000" + n;
      return "00000" + n;
    },
    $signature: 39
  };
  P.Duration_toString_twoDigits.prototype = {
    call$1: function(n) {
      if (n >= 10)
        return "" + n;
      return "0" + n;
    },
    $signature: 39
  };
  P.Error.prototype = {};
  P.AssertionError.prototype = {
    toString$0: function(_) {
      return "Assertion failed";
    }
  };
  P.NullThrownError.prototype = {
    toString$0: function(_) {
      return "Throw of null.";
    }
  };
  P.ArgumentError.prototype = {
    get$_errorName: function() {
      return "Invalid argument" + (!this._hasValue ? "(s)" : "");
    },
    get$_errorExplanation: function() {
      return "";
    },
    toString$0: function(_) {
      var message, prefix, explanation, errorValue, _this = this,
        t1 = _this.name,
        nameString = t1 != null ? " (" + t1 + ")" : "";
      t1 = _this.message;
      message = t1 == null ? "" : ": " + H.S(t1);
      prefix = _this.get$_errorName() + nameString + message;
      if (!_this._hasValue)
        return prefix;
      explanation = _this.get$_errorExplanation();
      errorValue = P.Error_safeToString(_this.invalidValue);
      return prefix + explanation + ": " + errorValue;
    }
  };
  P.RangeError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var explanation, t2,
        t1 = this.start;
      if (t1 == null) {
        t1 = this.end;
        explanation = t1 != null ? ": Not less than or equal to " + H.S(t1) : "";
      } else {
        t2 = this.end;
        if (t2 == null)
          explanation = ": Not greater than or equal to " + H.S(t1);
        else if (t2 > t1)
          explanation = ": Not in range " + H.S(t1) + ".." + H.S(t2) + ", inclusive";
        else
          explanation = t2 < t1 ? ": Valid value range is empty" : ": Only valid value is " + H.S(t1);
      }
      return explanation;
    }
  };
  P.IndexError.prototype = {
    get$_errorName: function() {
      return "RangeError";
    },
    get$_errorExplanation: function() {
      var t1,
        invalidValue = H.intTypeCheck(this.invalidValue);
      if (typeof invalidValue !== "number")
        return invalidValue.$lt();
      if (invalidValue < 0)
        return ": index must not be negative";
      t1 = this.length;
      if (t1 === 0)
        return ": no indices are valid";
      return ": index should be less than " + H.S(t1);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.NoSuchMethodError.prototype = {
    toString$0: function(_) {
      var t1, t2, _i, t3, t4, argument, memberName, receiverText, actualParameters, _this = this, _box_0 = {},
        sb = new P.StringBuffer("");
      _box_0.comma = "";
      for (t1 = _this._core$_arguments, t2 = t1.length, _i = 0, t3 = "", t4 = ""; _i < t2; ++_i, t4 = ", ") {
        argument = t1[_i];
        sb._contents = t3 + t4;
        t3 = sb._contents += P.Error_safeToString(argument);
        _box_0.comma = ", ";
      }
      _this._namedArguments.forEach$1(0, new P.NoSuchMethodError_toString_closure(_box_0, sb));
      memberName = _this._core$_memberName._name;
      receiverText = P.Error_safeToString(_this._receiver);
      actualParameters = sb.toString$0(0);
      t1 = "NoSuchMethodError: method not found: '" + H.S(memberName) + "'\nReceiver: " + receiverText + "\nArguments: [" + actualParameters + "]";
      return t1;
    }
  };
  P.UnsupportedError.prototype = {
    toString$0: function(_) {
      return "Unsupported operation: " + this.message;
    }
  };
  P.UnimplementedError.prototype = {
    toString$0: function(_) {
      var t1 = this.message;
      return t1 != null ? "UnimplementedError: " + t1 : "UnimplementedError";
    }
  };
  P.StateError.prototype = {
    toString$0: function(_) {
      return "Bad state: " + this.message;
    }
  };
  P.ConcurrentModificationError.prototype = {
    toString$0: function(_) {
      var t1 = this.modifiedObject;
      if (t1 == null)
        return "Concurrent modification during iteration.";
      return "Concurrent modification during iteration: " + P.Error_safeToString(t1) + ".";
    }
  };
  P.StackOverflowError.prototype = {
    toString$0: function(_) {
      return "Stack Overflow";
    },
    $isError: 1
  };
  P.CyclicInitializationError.prototype = {
    toString$0: function(_) {
      var t1 = this.variableName;
      return t1 == null ? "Reading static variable during its initialization" : "Reading static variable '" + t1 + "' during its initialization";
    }
  };
  P._Exception.prototype = {
    toString$0: function(_) {
      return "Exception: " + this.message;
    }
  };
  P.FormatException.prototype = {
    toString$0: function(_) {
      var source,
        t1 = this.message,
        report = t1 != null && "" !== t1 ? "FormatException: " + H.S(t1) : "FormatException",
        objectSource = this.source;
      if (typeof objectSource === "string") {
        source = objectSource.length > 78 ? C.JSString_methods.substring$2(objectSource, 0, 75) + "..." : objectSource;
        return report + "\n" + source;
      } else
        return report;
    }
  };
  P.Expando.prototype = {
    $index: function(_, object) {
      var values,
        t1 = this._jsWeakMapOrKey;
      if (typeof t1 !== "string") {
        if (object == null || typeof object === "boolean" || typeof object === "number" || typeof object === "string")
          H.throwExpression(P.ArgumentError$value(object, "Expandos are not allowed on strings, numbers, booleans or null", null));
        return t1.get(object);
      }
      values = H.Primitives_getProperty(object, "expando$values");
      t1 = values == null ? null : H.Primitives_getProperty(values, t1);
      return H.assertSubtypeOfRuntimeType(t1, H.getTypeArgumentByIndex(this, 0));
    },
    $indexSet: function(_, object, value) {
      var t1, values,
        _s14_ = "expando$values";
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      t1 = this._jsWeakMapOrKey;
      if (typeof t1 !== "string")
        t1.set(object, value);
      else {
        values = H.Primitives_getProperty(object, _s14_);
        if (values == null) {
          values = new P.Object();
          H.Primitives_setProperty(object, _s14_, values);
        }
        H.Primitives_setProperty(values, t1, value);
      }
    },
    toString$0: function(_) {
      return "Expando:" + H.S(this.name);
    }
  };
  P.Function.prototype = {};
  P.int.prototype = {};
  P.Iterable.prototype = {
    map$1$1: function(_, f, $T) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return H.MappedIterable_MappedIterable(this, H.functionTypeCheck(f, {func: 1, ret: $T, args: [t1]}), t1, $T);
    },
    where$1: function(_, test) {
      var t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      return new H.WhereIterable(this, H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]}), [t1]);
    },
    contains$1: function(_, element) {
      var t1;
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (J.$eq$(t1.get$current(t1), element))
          return true;
      return false;
    },
    forEach$1: function(_, f) {
      var t1;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        f.call$1(t1.get$current(t1));
    },
    join$1: function(_, separator) {
      var t1,
        iterator = this.get$iterator(this);
      if (!iterator.moveNext$0())
        return "";
      if (separator === "") {
        t1 = "";
        do
          t1 += H.S(iterator.get$current(iterator));
        while (iterator.moveNext$0());
      } else {
        t1 = H.S(iterator.get$current(iterator));
        for (; iterator.moveNext$0();)
          t1 = t1 + separator + H.S(iterator.get$current(iterator));
      }
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    any$1: function(_, test) {
      var t1;
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [H.getRuntimeTypeArgument(this, "Iterable", 0)]});
      for (t1 = this.get$iterator(this); t1.moveNext$0();)
        if (H.boolConversionCheck(test.call$1(t1.get$current(t1))))
          return true;
      return false;
    },
    toList$1$growable: function(_, growable) {
      return P.List_List$from(this, growable, H.getRuntimeTypeArgument(this, "Iterable", 0));
    },
    toList$0: function($receiver) {
      return this.toList$1$growable($receiver, true);
    },
    get$length: function(_) {
      var count,
        it = this.get$iterator(this);
      for (count = 0; it.moveNext$0();)
        ++count;
      return count;
    },
    get$isEmpty: function(_) {
      return !this.get$iterator(this).moveNext$0();
    },
    get$isNotEmpty: function(_) {
      return !this.get$isEmpty(this);
    },
    get$first: function(_) {
      var it = this.get$iterator(this);
      if (!it.moveNext$0())
        throw H.wrapException(H.IterableElementError_noElement());
      return it.get$current(it);
    },
    lastWhere$2$orElse: function(_, test, orElse) {
      var result, foundMatching, element,
        t1 = H.getRuntimeTypeArgument(this, "Iterable", 0);
      H.functionTypeCheck(test, {func: 1, ret: P.bool, args: [t1]});
      H.functionTypeCheck(orElse, {func: 1, ret: t1});
      for (t1 = this.get$iterator(this), result = null, foundMatching = false; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (H.boolConversionCheck(test.call$1(element))) {
          result = element;
          foundMatching = true;
        }
      }
      if (foundMatching)
        return result;
      return orElse.call$0();
    },
    elementAt$1: function(_, index) {
      var t1, elementIndex, element;
      P.RangeError_checkNotNegative(index, "index");
      for (t1 = this.get$iterator(this), elementIndex = 0; t1.moveNext$0();) {
        element = t1.get$current(t1);
        if (index === elementIndex)
          return element;
        ++elementIndex;
      }
      throw H.wrapException(P.IndexError$(index, this, "index", null, elementIndex));
    },
    toString$0: function(_) {
      return P.IterableBase_iterableToShortString(this, "(", ")");
    }
  };
  P._GeneratorIterable.prototype = {
    elementAt$1: function(_, index) {
      var $length = this.length;
      if (0 > index || index >= $length)
        H.throwExpression(P.IndexError$(index, this, "index", null, $length));
      return this._generator.call$1(index);
    },
    get$length: function(receiver) {
      return this.length;
    }
  };
  P.Iterator.prototype = {};
  P.List.prototype = {$isEfficientLengthIterable: 1, $isIterable: 1};
  P.Map.prototype = {};
  P.Null.prototype = {
    get$hashCode: function(_) {
      return P.Object.prototype.get$hashCode.call(this, this);
    },
    toString$0: function(_) {
      return "null";
    }
  };
  P.num.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.num];
    }
  };
  P.Object.prototype = {constructor: P.Object, $isObject: 1,
    $eq: function(_, other) {
      return this === other;
    },
    get$hashCode: function(_) {
      return H.Primitives_objectHashCode(this);
    },
    toString$0: function(_) {
      return "Instance of '" + H.S(H.Primitives_objectTypeName(this)) + "'";
    },
    noSuchMethod$1: function(_, invocation) {
      H.interceptedTypeCheck(invocation, "$isInvocation");
      throw H.wrapException(P.NoSuchMethodError$(this, invocation.get$memberName(), invocation.get$positionalArguments(), invocation.get$namedArguments()));
    },
    toString: function() {
      return this.toString$0(this);
    },
    call$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$0", 0, [], [], 0));
    },
    call$2: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2", 0, [$0, $1], [], 0));
    },
    call$1: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1", 0, [$0], [], 0));
    },
    call$3: function($0, $1, $2) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$3", 0, [$0, $1, $2], [], 0));
    },
    call$1$1: function($0, $T1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1$1", 0, [$0, $T1], [], 1));
    },
    call$4: function($0, $1, $2, $3) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$4", 0, [$0, $1, $2, $3], [], 0));
    },
    call$1$growable: function($0) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$1$growable", 0, [$0], ["growable"], 0));
    },
    call$9: function($0, $1, $2, $3, $4, $5, $6, $7, $8) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$9", 0, [$0, $1, $2, $3, $4, $5, $6, $7, $8], [], 0));
    },
    call$6: function($0, $1, $2, $3, $4, $5) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$6", 0, [$0, $1, $2, $3, $4, $5], [], 0));
    },
    call$2$direction: function($0, $1) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$2$direction", 0, [$0, $1], ["direction"], 0));
    },
    call$5: function($0, $1, $2, $3, $4) {
      return this.noSuchMethod$1(this, H.createInvocationMirror("call", "call$5", 0, [$0, $1, $2, $3, $4], [], 0));
    },
    compareTo$1: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("compareTo", "compareTo$1", 0, [$0], [], 0));
    },
    setState$1: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("setState", "setState$1", 0, [$0], [], 0));
    },
    dispose$0: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("dispose", "dispose$0", 0, [], [], 0));
    },
    toJson$0: function() {
      return this.noSuchMethod$1(this, H.createInvocationMirror("toJson", "toJson$0", 0, [], [], 0));
    },
    get$props: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("props", "get$props", 1, [], [], 0));
    },
    get$length: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("length", "get$length", 1, [], [], 0));
    },
    get$dartDefaultProps: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("dartDefaultProps", "get$dartDefaultProps", 1, [], [], 0));
    },
    get$dartComponent: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("dartComponent", "get$dartComponent", 1, [], [], 0));
    },
    get$value: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("value", "get$value", 1, [], [], 0));
    },
    get$type: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("type", "get$type", 1, [], [], 0));
    },
    get$internal: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("internal", "get$internal", 1, [], [], 0));
    },
    get$bubbles: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("bubbles", "get$bubbles", 1, [], [], 0));
    },
    get$cancelable: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("cancelable", "get$cancelable", 1, [], [], 0));
    },
    get$currentTarget: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("currentTarget", "get$currentTarget", 1, [], [], 0));
    },
    get$defaultPrevented: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("defaultPrevented", "get$defaultPrevented", 1, [], [], 0));
    },
    get$eventPhase: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("eventPhase", "get$eventPhase", 1, [], [], 0));
    },
    get$isTrusted: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("isTrusted", "get$isTrusted", 1, [], [], 0));
    },
    get$nativeEvent: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("nativeEvent", "get$nativeEvent", 1, [], [], 0));
    },
    get$target: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("target", "get$target", 1, [], [], 0));
    },
    get$timeStamp: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("timeStamp", "get$timeStamp", 1, [], [], 0));
    },
    get$deltaX: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("deltaX", "get$deltaX", 1, [], [], 0));
    },
    get$deltaMode: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("deltaMode", "get$deltaMode", 1, [], [], 0));
    },
    get$deltaY: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("deltaY", "get$deltaY", 1, [], [], 0));
    },
    get$deltaZ: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("deltaZ", "get$deltaZ", 1, [], [], 0));
    },
    get$detail: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("detail", "get$detail", 1, [], [], 0));
    },
    get$view: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("view", "get$view", 1, [], [], 0));
    },
    get$animationName: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("animationName", "get$animationName", 1, [], [], 0));
    },
    get$elapsedTime: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("elapsedTime", "get$elapsedTime", 1, [], [], 0));
    },
    get$pseudoElement: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("pseudoElement", "get$pseudoElement", 1, [], [], 0));
    },
    get$propertyName: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("propertyName", "get$propertyName", 1, [], [], 0));
    },
    get$altKey: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("altKey", "get$altKey", 1, [], [], 0));
    },
    get$changedTouches: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("changedTouches", "get$changedTouches", 1, [], [], 0));
    },
    get$ctrlKey: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("ctrlKey", "get$ctrlKey", 1, [], [], 0));
    },
    get$metaKey: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("metaKey", "get$metaKey", 1, [], [], 0));
    },
    get$shiftKey: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("shiftKey", "get$shiftKey", 1, [], [], 0));
    },
    get$targetTouches: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("targetTouches", "get$targetTouches", 1, [], [], 0));
    },
    get$touches: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("touches", "get$touches", 1, [], [], 0));
    },
    get$dataTransfer: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("dataTransfer", "get$dataTransfer", 1, [], [], 0));
    },
    get$button: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("button", "get$button", 1, [], [], 0));
    },
    get$buttons: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("buttons", "get$buttons", 1, [], [], 0));
    },
    get$clientX: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("clientX", "get$clientX", 1, [], [], 0));
    },
    get$clientY: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("clientY", "get$clientY", 1, [], [], 0));
    },
    get$pageX: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("pageX", "get$pageX", 1, [], [], 0));
    },
    get$pageY: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("pageY", "get$pageY", 1, [], [], 0));
    },
    get$relatedTarget: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("relatedTarget", "get$relatedTarget", 1, [], [], 0));
    },
    get$screenX: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("screenX", "get$screenX", 1, [], [], 0));
    },
    get$screenY: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("screenY", "get$screenY", 1, [], [], 0));
    },
    get$files: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("files", "get$files", 1, [], [], 0));
    },
    get$types: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("types", "get$types", 1, [], [], 0));
    },
    get$effectAllowed: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("effectAllowed", "get$effectAllowed", 1, [], [], 0));
    },
    get$dropEffect: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("dropEffect", "get$dropEffect", 1, [], [], 0));
    },
    get$char: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("char", "get$char", 1, [], [], 0));
    },
    get$charCode: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("charCode", "get$charCode", 1, [], [], 0));
    },
    get$locale: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("locale", "get$locale", 1, [], [], 0));
    },
    get$location: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("location", "get$location", 1, [], [], 0));
    },
    get$key: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("key", "get$key", 1, [], [], 0));
    },
    get$keyCode: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("keyCode", "get$keyCode", 1, [], [], 0));
    },
    get$repeat: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("repeat", "get$repeat", 1, [], [], 0));
    },
    get$clipboardData: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("clipboardData", "get$clipboardData", 1, [], [], 0));
    },
    get$refs: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("refs", "get$refs", 1, [], [], 0));
    },
    get$attributes: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("attributes", "get$attributes", 1, [], [], 0));
    },
    get$checked: function($receiver) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("checked", "get$checked", 1, [], [], 0));
    },
    set$displayName: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("displayName=", "set$displayName", 2, [$0], [], 0));
    },
    set$dartDefaultProps: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("dartDefaultProps=", "set$dartDefaultProps", 2, [$0], [], 0));
    },
    set$key: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("key=", "set$key", 2, [$0], [], 0));
    },
    set$ref: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("ref=", "set$ref", 2, [$0], [], 0));
    },
    set$value: function($receiver, $0) {
      return this.noSuchMethod$1($receiver, H.createInvocationMirror("value=", "set$value", 2, [$0], [], 0));
    }
  };
  P.RegExpMatch.prototype = {};
  P.StackTrace.prototype = {};
  P.String.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [P.String];
    },
    $isPattern: 1
  };
  P.StringBuffer.prototype = {
    get$length: function(_) {
      return this._contents.length;
    },
    toString$0: function(_) {
      var t1 = this._contents;
      return t1.charCodeAt(0) == 0 ? t1 : t1;
    },
    $isStringSink: 1
  };
  P.Symbol0.prototype = {};
  W.HtmlElement.prototype = {};
  W.AccessibleNode.prototype = {
    get$checked: function(receiver) {
      return receiver.checked;
    }
  };
  W.AccessibleNodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.AnchorElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$target: function(receiver) {
      return receiver.target;
    },
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.AreaElement.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    },
    get$target: function(receiver) {
      return receiver.target;
    }
  };
  W.BaseElement.prototype = {
    get$target: function(receiver) {
      return receiver.target;
    }
  };
  W.Blob.prototype = {$isBlob: 1,
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.BluetoothRemoteGattDescriptor.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.ButtonElement.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.stringTypeCheck(value);
    },
    get$type: function(receiver) {
      return receiver.type;
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.CanvasElement.prototype = {
    getContext$1: function(receiver, contextId) {
      return receiver.getContext(contextId);
    },
    $isCanvasElement: 1
  };
  W.CanvasRenderingContext2D.prototype = {$isCanvasRenderingContext2D: 1};
  W.CharacterData.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Client.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.Credential.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.CryptoKey.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.CssKeywordValue.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.stringTypeCheck(value);
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.CssNumericValue.prototype = {$isCssNumericValue: 1};
  W.CssPerspective.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssRule.prototype = {$isCssRule: 1,
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.CssStyleDeclaration.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssStyleDeclarationBase.prototype = {};
  W.CssStyleValue.prototype = {};
  W.CssTransformComponent.prototype = {};
  W.CssTransformValue.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.CssUnitValue.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.numTypeCheck(value);
    },
    get$type: function(receiver) {
      return receiver.type;
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.CssUnparsedValue.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.DataElement.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.stringTypeCheck(value);
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.DataTransfer.prototype = {$isDataTransfer: 1,
    get$files: function(receiver) {
      return receiver.files;
    }
  };
  W.DataTransferItem.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.DataTransferItemList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.DomException.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.DomRectList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.assertSubtype(value, "$isRectangle", [P.num], "$asRectangle");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [[P.Rectangle, P.num]];
    },
    $asListMixin: function() {
      return [[P.Rectangle, P.num]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Rectangle, P.num]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Rectangle, P.num]];
    },
    $asImmutableListMixin: function() {
      return [[P.Rectangle, P.num]];
    }
  };
  W.DomRectReadOnly.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(this.get$width(receiver)) + " x " + H.S(this.get$height(receiver));
    },
    $eq: function(receiver, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor$(other);
      return !!t1.$isRectangle && receiver.left === other.left && receiver.top === other.top && this.get$width(receiver) === t1.get$width(other) && this.get$height(receiver) === t1.get$height(other);
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(C.JSNumber_methods.get$hashCode(receiver.left), C.JSNumber_methods.get$hashCode(receiver.top), C.JSNumber_methods.get$hashCode(this.get$width(receiver)), C.JSNumber_methods.get$hashCode(this.get$height(receiver)));
    },
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    },
    $isRectangle: 1,
    $asRectangle: function() {
      return [P.num];
    }
  };
  W.DomStringList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.stringTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [P.String];
    },
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  W.DomTokenList.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.stringTypeCheck(value);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.Element.prototype = {
    get$attributes: function(receiver) {
      return new W._ElementAttributeMap(receiver);
    },
    toString$0: function(receiver) {
      return receiver.localName;
    },
    $isElement: 1
  };
  W.EmbedElement.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.Event.prototype = {
    get$target: function(receiver) {
      return W._convertNativeToDart_EventTarget(receiver.target);
    },
    $isEvent: 1,
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.EventTarget.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      if (listener != null)
        this._addEventListener$3(receiver, type, listener, useCapture);
    },
    addEventListener$2: function($receiver, type, listener) {
      return this.addEventListener$3($receiver, type, listener, null);
    },
    _addEventListener$3: function(receiver, type, listener, options) {
      return receiver.addEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), options);
    },
    _removeEventListener$3: function(receiver, type, listener, options) {
      return receiver.removeEventListener(type, H.convertDartClosureToJS(H.functionTypeCheck(listener, {func: 1, args: [W.Event]}), 1), false);
    },
    $isEventTarget: 1
  };
  W.FieldSetElement.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.File.prototype = {$isFile: 1};
  W.FileList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isFile");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.File];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.File];
    },
    $asListMixin: function() {
      return [W.File];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.File];
    },
    $isList: 1,
    $asList: function() {
      return [W.File];
    },
    $isFileList: 1,
    $asImmutableListMixin: function() {
      return [W.File];
    }
  };
  W.FileReader.prototype = {
    get$result: function(receiver) {
      var t1,
        res = receiver.result;
      if (!!J.getInterceptor$(res).$isByteBuffer) {
        t1 = new Uint8Array(res, 0);
        return t1;
      }
      return res;
    }
  };
  W.FileWriter.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.FormElement.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    get$target: function(receiver) {
      return receiver.target;
    }
  };
  W.Gamepad.prototype = {$isGamepad: 1};
  W.GamepadButton.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.History.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.HtmlCollection.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.ImageData.prototype = {$isImageData: 1,
    get$data: function(receiver) {
      return receiver.data;
    }
  };
  W.InputElement.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.stringTypeCheck(value);
    },
    get$checked: function(receiver) {
      return receiver.checked;
    },
    get$files: function(receiver) {
      return receiver.files;
    },
    get$type: function(receiver) {
      return receiver.type;
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.IntersectionObserverEntry.prototype = {
    get$target: function(receiver) {
      return receiver.target;
    }
  };
  W.KeyboardEvent.prototype = {$isKeyboardEvent: 1};
  W.LIElement.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.intTypeCheck(value);
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.LinkElement.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.Location.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.MediaList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.MessageEvent.prototype = {$isMessageEvent: 1};
  W.MessagePort.prototype = {
    addEventListener$3: function(receiver, type, listener, useCapture) {
      H.functionTypeCheck(listener, {func: 1, args: [W.Event]});
      if (type === "message")
        receiver.start();
      this.super$EventTarget$addEventListener(receiver, type, listener, false);
    },
    $isMessagePort: 1
  };
  W.MeterElement.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.numTypeCheck(value);
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.MidiInputMap.prototype = {
    addAll$1: function(receiver, other) {
      H.assertSubtype(other, "$isMap", [P.String, null], "$asMap");
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.MidiInputMap_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], [[P.Map,,,]]);
      this.forEach$1(receiver, new W.MidiInputMap_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $indexSet: function(receiver, key, value) {
      H.stringTypeCheck(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    putIfAbsent$2: function(receiver, key, ifAbsent) {
      H.functionTypeCheck(ifAbsent, {func: 1});
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    remove$1: function(receiver, key) {
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W.MidiInputMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 6
  };
  W.MidiInputMap_values_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.values, v);
    },
    $signature: 6
  };
  W.MidiOutputMap.prototype = {
    addAll$1: function(receiver, other) {
      H.assertSubtype(other, "$isMap", [P.String, null], "$asMap");
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.MidiOutputMap_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], [[P.Map,,,]]);
      this.forEach$1(receiver, new W.MidiOutputMap_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $indexSet: function(receiver, key, value) {
      H.stringTypeCheck(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    putIfAbsent$2: function(receiver, key, ifAbsent) {
      H.functionTypeCheck(ifAbsent, {func: 1});
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    remove$1: function(receiver, key) {
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W.MidiOutputMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 6
  };
  W.MidiOutputMap_values_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.values, v);
    },
    $signature: 6
  };
  W.MidiPort.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.MimeType.prototype = {$isMimeType: 1,
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.MimeTypeArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isMimeType");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.MimeType];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.MimeType];
    },
    $asListMixin: function() {
      return [W.MimeType];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.MimeType];
    },
    $isList: 1,
    $asList: function() {
      return [W.MimeType];
    },
    $asImmutableListMixin: function() {
      return [W.MimeType];
    }
  };
  W.MouseEvent.prototype = {$isMouseEvent: 1};
  W.MutationRecord.prototype = {
    get$target: function(receiver) {
      return receiver.target;
    },
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.NetworkInformation.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.Node.prototype = {
    toString$0: function(receiver) {
      var value = receiver.nodeValue;
      return value == null ? this.super$Interceptor$toString(receiver) : value;
    },
    $isNode: 1
  };
  W.NodeList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W.OListElement.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.ObjectElement.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.OptionElement.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.stringTypeCheck(value);
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.OutputElement.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.stringTypeCheck(value);
    },
    get$type: function(receiver) {
      return receiver.type;
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.ParamElement.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.stringTypeCheck(value);
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.PerformanceEntry.prototype = {};
  W.PerformanceNavigation.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.PerformanceNavigationTiming.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.PerformanceResourceTiming.prototype = {};
  W.Plugin.prototype = {$isPlugin: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.PluginArray.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isPlugin");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Plugin];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Plugin];
    },
    $asListMixin: function() {
      return [W.Plugin];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Plugin];
    },
    $isList: 1,
    $asList: function() {
      return [W.Plugin];
    },
    $asImmutableListMixin: function() {
      return [W.Plugin];
    }
  };
  W.PresentationAvailability.prototype = {
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.ProcessingInstruction.prototype = {
    get$target: function(receiver) {
      return receiver.target;
    }
  };
  W.ProgressElement.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.numTypeCheck(value);
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.ProgressEvent.prototype = {$isProgressEvent: 1};
  W.ResizeObserverEntry.prototype = {
    get$target: function(receiver) {
      return receiver.target;
    }
  };
  W.RtcLegacyStatsReport.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.RtcSessionDescription.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.RtcStatsReport.prototype = {
    addAll$1: function(receiver, other) {
      H.assertSubtype(other, "$isMap", [P.String, null], "$asMap");
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.RtcStatsReport_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], [[P.Map,,,]]);
      this.forEach$1(receiver, new W.RtcStatsReport_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $indexSet: function(receiver, key, value) {
      H.stringTypeCheck(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    putIfAbsent$2: function(receiver, key, ifAbsent) {
      H.functionTypeCheck(ifAbsent, {func: 1});
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    remove$1: function(receiver, key) {
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  W.RtcStatsReport_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 6
  };
  W.RtcStatsReport_values_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.values, v);
    },
    $signature: 6
  };
  W.ScreenOrientation.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.ScriptElement.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.SelectElement.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.stringTypeCheck(value);
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    get$type: function(receiver) {
      return receiver.type;
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.Selection.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.SourceBuffer.prototype = {$isSourceBuffer: 1};
  W.SourceBufferList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isSourceBuffer");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SourceBuffer];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SourceBuffer];
    },
    $asListMixin: function() {
      return [W.SourceBuffer];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SourceBuffer];
    },
    $isList: 1,
    $asList: function() {
      return [W.SourceBuffer];
    },
    $asImmutableListMixin: function() {
      return [W.SourceBuffer];
    }
  };
  W.SourceElement.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.SpeechGrammar.prototype = {$isSpeechGrammar: 1};
  W.SpeechGrammarList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isSpeechGrammar");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechGrammar];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SpeechGrammar];
    },
    $asListMixin: function() {
      return [W.SpeechGrammar];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechGrammar];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechGrammar];
    },
    $asImmutableListMixin: function() {
      return [W.SpeechGrammar];
    }
  };
  W.SpeechRecognitionResult.prototype = {$isSpeechRecognitionResult: 1,
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Storage.prototype = {
    addAll$1: function(receiver, other) {
      var t1 = P.String;
      J.forEach$1$ax(H.assertSubtype(other, "$isMap", [t1, t1], "$asMap"), new W.Storage_addAll_closure(receiver));
    },
    containsKey$1: function(receiver, key) {
      return receiver.getItem(key) != null;
    },
    $index: function(receiver, key) {
      return receiver.getItem(H.stringTypeCheck(key));
    },
    $indexSet: function(receiver, key, value) {
      receiver.setItem(H.stringTypeCheck(key), H.stringTypeCheck(value));
    },
    putIfAbsent$2: function(receiver, key, ifAbsent) {
      H.functionTypeCheck(ifAbsent, {func: 1, ret: P.String});
      if (receiver.getItem(key) == null)
        receiver.setItem(key, H.stringTypeCheck(ifAbsent.call$0()));
      return receiver.getItem(key);
    },
    remove$1: function(receiver, key) {
      var value = receiver.getItem(key);
      receiver.removeItem(key);
      return value;
    },
    forEach$1: function(receiver, f) {
      var i, key;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
      for (i = 0; true; ++i) {
        key = receiver.key(i);
        if (key == null)
          return;
        f.call$2(key, receiver.getItem(key));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.Storage_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new W.Storage_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.length;
    },
    get$isEmpty: function(receiver) {
      return receiver.key(0) == null;
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W.Storage_addAll_closure.prototype = {
    call$2: function(k, v) {
      this.$this.setItem(H.stringTypeCheck(k), H.stringTypeCheck(v));
    },
    $signature: 43
  };
  W.Storage_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 32
  };
  W.Storage_values_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.values, v);
    },
    $signature: 32
  };
  W.StyleElement.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.StyleMedia.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.StyleSheet.prototype = {$isStyleSheet: 1,
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.TextAreaElement.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.stringTypeCheck(value);
    },
    get$type: function(receiver) {
      return receiver.type;
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W.TextTrack.prototype = {$isTextTrack: 1};
  W.TextTrackCue.prototype = {$isTextTrackCue: 1};
  W.TextTrackCueList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTextTrackCue");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrackCue];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.TextTrackCue];
    },
    $asListMixin: function() {
      return [W.TextTrackCue];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrackCue];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrackCue];
    },
    $asImmutableListMixin: function() {
      return [W.TextTrackCue];
    }
  };
  W.TextTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTextTrack");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.TextTrack];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.TextTrack];
    },
    $asListMixin: function() {
      return [W.TextTrack];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.TextTrack];
    },
    $isList: 1,
    $asList: function() {
      return [W.TextTrack];
    },
    $asImmutableListMixin: function() {
      return [W.TextTrack];
    }
  };
  W.TimeRanges.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Touch.prototype = {
    get$target: function(receiver) {
      return W._convertNativeToDart_EventTarget(receiver.target);
    },
    $isTouch: 1
  };
  W.TouchList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTouch");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Touch];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Touch];
    },
    $asListMixin: function() {
      return [W.Touch];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Touch];
    },
    $isList: 1,
    $asList: function() {
      return [W.Touch];
    },
    $asImmutableListMixin: function() {
      return [W.Touch];
    }
  };
  W.TrackDefault.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W.TrackDefaultList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.UIEvent.prototype = {};
  W.Url.prototype = {
    toString$0: function(receiver) {
      return String(receiver);
    }
  };
  W.VideoTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  W.Window.prototype = {
    cancelAnimationFrame$1: function(receiver, id) {
      H.intTypeCheck(id);
      this._ensureRequestAnimationFrame$0(receiver);
      receiver.cancelAnimationFrame(id);
    },
    _requestAnimationFrame$1: function(receiver, callback) {
      return receiver.requestAnimationFrame(H.convertDartClosureToJS(H.functionTypeCheck(callback, {func: 1, ret: -1, args: [P.num]}), 1));
    },
    _ensureRequestAnimationFrame$0: function(receiver) {
      if (!!(receiver.requestAnimationFrame && receiver.cancelAnimationFrame))
        return;
      (function($this) {
        var vendors = ['ms', 'moz', 'webkit', 'o'];
        for (var i = 0; i < vendors.length && !$this.requestAnimationFrame; ++i) {
          $this.requestAnimationFrame = $this[vendors[i] + 'RequestAnimationFrame'];
          $this.cancelAnimationFrame = $this[vendors[i] + 'CancelAnimationFrame'] || $this[vendors[i] + 'CancelRequestAnimationFrame'];
        }
        if ($this.requestAnimationFrame && $this.cancelAnimationFrame)
          return;
        $this.requestAnimationFrame = function(callback) {
          return window.setTimeout(function() {
            callback(Date.now());
          }, 16);
        };
        $this.cancelAnimationFrame = function(id) {
          clearTimeout(id);
        };
      })(receiver);
    },
    $isWindow: 1,
    $isWindowBase: 1
  };
  W.Worker.prototype = {
    postMessage$2: function(receiver, message, transfer) {
      H.assertSubtype(transfer, "$isList", [P.Object], "$asList");
      if (transfer != null) {
        this._postMessage_1$2(receiver, new P._StructuredCloneDart2Js([], []).walk$1(message), transfer);
        return;
      }
      receiver.postMessage(new P._StructuredCloneDart2Js([], []).walk$1(message));
      return;
    },
    postMessage$1: function($receiver, message) {
      return this.postMessage$2($receiver, message, null);
    },
    _postMessage_1$2: function(receiver, message, transfer) {
      return receiver.postMessage(message, H.assertSubtype(transfer, "$isList", [P.Object], "$asList"));
    }
  };
  W.WorkerGlobalScope.prototype = {$isWorkerGlobalScope: 1};
  W._Attr.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.stringTypeCheck(value);
    },
    $is_Attr: 1,
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  W._CssRuleList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isCssRule");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.CssRule];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.CssRule];
    },
    $asListMixin: function() {
      return [W.CssRule];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.CssRule];
    },
    $isList: 1,
    $asList: function() {
      return [W.CssRule];
    },
    $asImmutableListMixin: function() {
      return [W.CssRule];
    }
  };
  W._DomRect.prototype = {
    toString$0: function(receiver) {
      return "Rectangle (" + H.S(receiver.left) + ", " + H.S(receiver.top) + ") " + H.S(receiver.width) + " x " + H.S(receiver.height);
    },
    $eq: function(receiver, other) {
      var t1;
      if (other == null)
        return false;
      t1 = J.getInterceptor$(other);
      return !!t1.$isRectangle && receiver.left === other.left && receiver.top === other.top && receiver.width === t1.get$width(other) && receiver.height === t1.get$height(other);
    },
    get$hashCode: function(receiver) {
      return W._JenkinsSmiHash_hash4(C.JSNumber_methods.get$hashCode(receiver.left), C.JSNumber_methods.get$hashCode(receiver.top), C.JSNumber_methods.get$hashCode(receiver.width), C.JSNumber_methods.get$hashCode(receiver.height));
    },
    get$height: function(receiver) {
      return receiver.height;
    },
    get$width: function(receiver) {
      return receiver.width;
    }
  };
  W._GamepadList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isGamepad");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Gamepad];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Gamepad];
    },
    $asListMixin: function() {
      return [W.Gamepad];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Gamepad];
    },
    $isList: 1,
    $asList: function() {
      return [W.Gamepad];
    },
    $asImmutableListMixin: function() {
      return [W.Gamepad];
    }
  };
  W._NamedNodeMap.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNode");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.Node];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.Node];
    },
    $asListMixin: function() {
      return [W.Node];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.Node];
    },
    $isList: 1,
    $asList: function() {
      return [W.Node];
    },
    $asImmutableListMixin: function() {
      return [W.Node];
    }
  };
  W._Report.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  W._SpeechRecognitionResultList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isSpeechRecognitionResult");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.SpeechRecognitionResult];
    },
    $asListMixin: function() {
      return [W.SpeechRecognitionResult];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.SpeechRecognitionResult];
    },
    $isList: 1,
    $asList: function() {
      return [W.SpeechRecognitionResult];
    },
    $asImmutableListMixin: function() {
      return [W.SpeechRecognitionResult];
    }
  };
  W._StyleSheetList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver[index];
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isStyleSheet");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      if (index < 0 || index >= receiver.length)
        return H.ioore(receiver, index);
      return receiver[index];
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [W.StyleSheet];
    },
    $isJavaScriptIndexingBehavior: 1,
    $asJavaScriptIndexingBehavior: function() {
      return [W.StyleSheet];
    },
    $asListMixin: function() {
      return [W.StyleSheet];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [W.StyleSheet];
    },
    $isList: 1,
    $asList: function() {
      return [W.StyleSheet];
    },
    $asImmutableListMixin: function() {
      return [W.StyleSheet];
    }
  };
  W._AttributeMap.prototype = {
    addAll$1: function(_, other) {
      var t1 = P.String;
      J.forEach$1$ax(H.assertSubtype(other, "$isMap", [t1, t1], "$asMap"), new W._AttributeMap_addAll_closure(this));
    },
    putIfAbsent$2: function(_, key, ifAbsent) {
      var t1;
      H.functionTypeCheck(ifAbsent, {func: 1, ret: P.String});
      t1 = this._html$_element;
      if (!H.boolConversionCheck(t1.hasAttribute(key)))
        t1.setAttribute(key, H.stringTypeCheck(ifAbsent.call$0()));
      return t1.getAttribute(key);
    },
    forEach$1: function(_, f) {
      var t1, t2, t3, _i, key;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String, P.String]});
      for (t1 = this.get$keys(this), t2 = t1.length, t3 = this._html$_element, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        f.call$2(key, t3.getAttribute(key));
      }
    },
    get$keys: function(_) {
      var len, i, attr,
        attributes = this._html$_element.attributes,
        keys = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        attr = H.interceptedTypeCheck(attributes[i], "$is_Attr");
        if (attr.namespaceURI == null)
          C.JSArray_methods.add$1(keys, attr.name);
      }
      return keys;
    },
    get$values: function(_) {
      var len, i, attr,
        attributes = this._html$_element.attributes,
        values = H.setRuntimeTypeInfo([], [P.String]);
      for (len = attributes.length, i = 0; i < len; ++i) {
        if (i >= attributes.length)
          return H.ioore(attributes, i);
        attr = H.interceptedTypeCheck(attributes[i], "$is_Attr");
        if (attr.namespaceURI == null)
          C.JSArray_methods.add$1(values, attr.value);
      }
      return values;
    },
    get$isEmpty: function(_) {
      return this.get$keys(this).length === 0;
    },
    $asMapMixin: function() {
      return [P.String, P.String];
    },
    $asMap: function() {
      return [P.String, P.String];
    }
  };
  W._AttributeMap_addAll_closure.prototype = {
    call$2: function(k, v) {
      this.$this._html$_element.setAttribute(H.stringTypeCheck(k), H.stringTypeCheck(v));
    },
    $signature: 43
  };
  W._ElementAttributeMap.prototype = {
    containsKey$1: function(_, key) {
      return this._html$_element.hasAttribute(key);
    },
    $index: function(_, key) {
      return this._html$_element.getAttribute(H.stringTypeCheck(key));
    },
    $indexSet: function(_, key, value) {
      this._html$_element.setAttribute(H.stringTypeCheck(key), H.stringTypeCheck(value));
    },
    remove$1: function(_, key) {
      var t1 = this._html$_element,
        value = t1.getAttribute(key);
      t1.removeAttribute(key);
      return value;
    },
    get$length: function(_) {
      return this.get$keys(this).length;
    }
  };
  W._EventStream.prototype = {};
  W._ElementEventStreamImpl.prototype = {};
  W._EventStreamSubscription.prototype = {
    cancel$0: function(_) {
      var t2, t3, _this = this,
        t1 = _this._html$_target;
      if (t1 == null)
        return;
      t2 = _this._onData;
      t3 = t2 != null;
      if (t3) {
        H.functionTypeCheck(t2, {func: 1, args: [W.Event]});
        if (t3)
          J._removeEventListener$3$x(t1, _this._eventType, t2, false);
      }
      _this._html$_target = null;
      _this.set$_onData(null);
      return;
    },
    set$_onData: function(_onData) {
      this._onData = H.functionTypeCheck(_onData, {func: 1, args: [W.Event]});
    }
  };
  W._EventStreamSubscription_closure.prototype = {
    call$1: function(e) {
      return this.onData.call$1(H.interceptedTypeCheck(e, "$isEvent"));
    },
    $signature: 86
  };
  W.ImmutableListMixin.prototype = {
    get$iterator: function(receiver) {
      return new W.FixedSizeListIterator(receiver, this.get$length(receiver), [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)]);
    },
    add$1: function(receiver, value) {
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0));
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    addAll$1: function(receiver, iterable) {
      H.assertSubtype(iterable, "$isIterable", [H.getRuntimeTypeArgumentIntercepted(this, receiver, "ImmutableListMixin", 0)], "$asIterable");
      throw H.wrapException(P.UnsupportedError$("Cannot add to immutable List."));
    },
    removeLast$0: function(receiver) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    },
    remove$1: function(receiver, object) {
      throw H.wrapException(P.UnsupportedError$("Cannot remove from immutable List."));
    }
  };
  W.FixedSizeListIterator.prototype = {
    moveNext$0: function() {
      var _this = this,
        nextPosition = _this._position + 1,
        t1 = _this._length;
      if (nextPosition < t1) {
        _this.set$_current(J.$index$asx(_this._array, nextPosition));
        _this._position = nextPosition;
        return true;
      }
      _this.set$_current(null);
      _this._position = t1;
      return false;
    },
    get$current: function(_) {
      return this._current;
    },
    set$_current: function(_current) {
      this._current = H.assertSubtypeOfRuntimeType(_current, H.getTypeArgumentByIndex(this, 0));
    },
    $isIterator: 1
  };
  W._DOMWindowCrossFrame.prototype = {$isEventTarget: 1, $isWindowBase: 1};
  W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase.prototype = {};
  W._DomRectList_Interceptor_ListMixin.prototype = {};
  W._DomRectList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._DomStringList_Interceptor_ListMixin.prototype = {};
  W._DomStringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._FileList_Interceptor_ListMixin.prototype = {};
  W._FileList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin.prototype = {};
  W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._MidiInputMap_Interceptor_MapMixin.prototype = {};
  W._MidiOutputMap_Interceptor_MapMixin.prototype = {};
  W._MimeTypeArray_Interceptor_ListMixin.prototype = {};
  W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin.prototype = {};
  W._NodeList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._PluginArray_Interceptor_ListMixin.prototype = {};
  W._PluginArray_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._RtcStatsReport_Interceptor_MapMixin.prototype = {};
  W._SourceBufferList_EventTarget_ListMixin.prototype = {};
  W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  W._SpeechGrammarList_Interceptor_ListMixin.prototype = {};
  W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._Storage_Interceptor_MapMixin.prototype = {};
  W._TextTrackCueList_Interceptor_ListMixin.prototype = {};
  W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W._TextTrackList_EventTarget_ListMixin.prototype = {};
  W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.prototype = {};
  W._TouchList_Interceptor_ListMixin.prototype = {};
  W._TouchList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__CssRuleList_Interceptor_ListMixin.prototype = {};
  W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__GamepadList_Interceptor_ListMixin.prototype = {};
  W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin.prototype = {};
  W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__SpeechRecognitionResultList_Interceptor_ListMixin.prototype = {};
  W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  W.__StyleSheetList_Interceptor_ListMixin.prototype = {};
  W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._StructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var t2, slot, t3, copy, _this = this, t1 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      t2 = J.getInterceptor$(e);
      if (!!t2.$isDateTime)
        return new Date(e._value);
      if (!!t2.$isRegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (!!t2.$isFile)
        return e;
      if (!!t2.$isBlob)
        return e;
      if (!!t2.$isFileList)
        return e;
      if (!!t2.$isImageData)
        return e;
      if (!!t2.$isNativeByteBuffer || !!t2.$isNativeTypedData || !!t2.$isMessagePort)
        return e;
      if (!!t2.$isMap) {
        slot = _this.findSlot$1(e);
        t3 = _this.copies;
        if (slot >= t3.length)
          return H.ioore(t3, slot);
        copy = t1.copy = t3[slot];
        if (copy != null)
          return copy;
        copy = {};
        t1.copy = copy;
        C.JSArray_methods.$indexSet(t3, slot, copy);
        t2.forEach$1(e, new P._StructuredClone_walk_closure(t1, _this));
        return t1.copy;
      }
      if (!!t2.$isList) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        return _this.copyList$2(e, slot);
      }
      if (!!t2.$isJSObject) {
        slot = _this.findSlot$1(e);
        t2 = _this.copies;
        if (slot >= t2.length)
          return H.ioore(t2, slot);
        copy = t1.copy = t2[slot];
        if (copy != null)
          return copy;
        copy = {};
        t1.copy = copy;
        C.JSArray_methods.$indexSet(t2, slot, copy);
        _this.forEachObjectKey$2(e, new P._StructuredClone_walk_closure0(t1, _this));
        return t1.copy;
      }
      throw H.wrapException(P.UnimplementedError$("structured clone of other type"));
    },
    copyList$2: function(e, slot) {
      var i,
        t1 = J.getInterceptor$asx(e),
        $length = t1.get$length(e),
        copy = new Array($length);
      C.JSArray_methods.$indexSet(this.copies, slot, copy);
      for (i = 0; i < $length; ++i)
        C.JSArray_methods.$indexSet(copy, i, this.walk$1(t1.$index(e, i)));
      return copy;
    }
  };
  P._StructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 5
  };
  P._StructuredClone_walk_closure0.prototype = {
    call$2: function(key, value) {
      this._box_0.copy[key] = this.$this.walk$1(value);
    },
    $signature: 5
  };
  P._AcceptStructuredClone.prototype = {
    findSlot$1: function(value) {
      var i,
        t1 = this.values,
        $length = t1.length;
      for (i = 0; i < $length; ++i)
        if (t1[i] === value)
          return i;
      C.JSArray_methods.add$1(t1, value);
      C.JSArray_methods.add$1(this.copies, null);
      return $length;
    },
    walk$1: function(e) {
      var millisSinceEpoch, t1, proto, slot, copy, l, t2, $length, i, _this = this, _box_0 = {};
      if (e == null)
        return e;
      if (typeof e === "boolean")
        return e;
      if (typeof e === "number")
        return e;
      if (typeof e === "string")
        return e;
      if (e instanceof Date) {
        millisSinceEpoch = e.getTime();
        t1 = new P.DateTime(millisSinceEpoch, true);
        t1.DateTime$_withValue$2$isUtc(millisSinceEpoch, true);
        return t1;
      }
      if (e instanceof RegExp)
        throw H.wrapException(P.UnimplementedError$("structured clone of RegExp"));
      if (typeof Promise != "undefined" && e instanceof Promise)
        return P.promiseToFuture(e, null);
      proto = Object.getPrototypeOf(e);
      if (proto === Object.prototype || proto === null) {
        slot = _this.findSlot$1(e);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = _box_0.copy = t1[slot];
        if (copy != null)
          return copy;
        copy = P.LinkedHashMap__makeEmpty();
        _box_0.copy = copy;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        _this.forEachJsField$2(e, new P._AcceptStructuredClone_walk_closure(_box_0, _this));
        return _box_0.copy;
      }
      if (e instanceof Array) {
        l = e;
        slot = _this.findSlot$1(l);
        t1 = _this.copies;
        if (slot >= t1.length)
          return H.ioore(t1, slot);
        copy = t1[slot];
        if (copy != null)
          return copy;
        t2 = J.getInterceptor$asx(l);
        $length = t2.get$length(l);
        copy = _this.mustCopy ? new Array($length) : l;
        C.JSArray_methods.$indexSet(t1, slot, copy);
        for (t1 = J.getInterceptor$ax(copy), i = 0; i < $length; ++i)
          t1.$indexSet(copy, i, _this.walk$1(t2.$index(l, i)));
        return copy;
      }
      return e;
    },
    convertNativeToDart_AcceptStructuredClone$2$mustCopy: function(object, mustCopy) {
      this.mustCopy = mustCopy;
      return this.walk$1(object);
    }
  };
  P._AcceptStructuredClone_walk_closure.prototype = {
    call$2: function(key, value) {
      var t1 = this._box_0.copy,
        t2 = this.$this.walk$1(value);
      J.$indexSet$ax(t1, key, t2);
      return t2;
    },
    $signature: 96
  };
  P._TypedImageData.prototype = {$isImageData: 1,
    get$data: function(receiver) {
      return this.data;
    }
  };
  P._StructuredCloneDart2Js.prototype = {
    forEachObjectKey$2: function(object, action) {
      var t1, t2, _i, key;
      H.functionTypeCheck(action, {func: 1, args: [,,]});
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t2; ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  P._AcceptStructuredCloneDart2Js.prototype = {
    forEachJsField$2: function(object, action) {
      var t1, t2, _i, key;
      H.functionTypeCheck(action, {func: 1, args: [,,]});
      for (t1 = Object.keys(object), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        action.call$2(key, object[key]);
      }
    }
  };
  P.Cursor.prototype = {};
  P.CursorWithValue.prototype = {
    get$value: function(receiver) {
      return new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(receiver.value, false);
    }
  };
  P.KeyRange.prototype = {$isKeyRange: 1};
  P.Observation.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  P.OpenDBRequest.prototype = {$isOpenDBRequest: 1};
  P.Request.prototype = {};
  P.VersionChangeEvent.prototype = {
    get$target: function(receiver) {
      return receiver.target;
    }
  };
  P.JsObject.prototype = {
    $index: function(_, property) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      return P._convertToDart(this._js$_jsObject[property]);
    },
    $indexSet: function(_, property, value) {
      if (typeof property !== "string" && typeof property !== "number")
        throw H.wrapException(P.ArgumentError$("property is not a String or num"));
      this._js$_jsObject[property] = P._convertToJS(value);
    },
    get$hashCode: function(_) {
      return 0;
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof P.JsObject && this._js$_jsObject === other._js$_jsObject;
    },
    toString$0: function(_) {
      var t1, exception;
      try {
        t1 = String(this._js$_jsObject);
        return t1;
      } catch (exception) {
        H.unwrapException(exception);
        t1 = this.super$Object$toString(0);
        return t1;
      }
    },
    callMethod$2: function(method, args) {
      var t2,
        t1 = this._js$_jsObject;
      if (args == null)
        t2 = null;
      else {
        t2 = H.getTypeArgumentByIndex(args, 0);
        t2 = P.List_List$from(new H.MappedListIterable(args, H.functionTypeCheck(P.js___convertToJS$closure(), {func: 1, ret: null, args: [t2]}), [t2, null]), true, null);
      }
      return P._convertToDart(t1[method].apply(t1, t2));
    }
  };
  P.JsFunction.prototype = {};
  P.JsArray.prototype = {
    _checkIndex$1: function(index) {
      var _this = this,
        t1 = index < 0 || index >= _this.get$length(_this);
      if (t1)
        throw H.wrapException(P.RangeError$range(index, 0, _this.get$length(_this), null, null));
    },
    $index: function(_, index) {
      if (typeof index === "number" && index === C.JSInt_methods.toInt$0(index))
        this._checkIndex$1(H.intTypeCheck(index));
      return H.assertSubtypeOfRuntimeType(this.super$JsObject$$index(0, index), H.getTypeArgumentByIndex(this, 0));
    },
    $indexSet: function(_, index, value) {
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0));
      if (typeof index === "number" && index === C.JSNumber_methods.toInt$0(index))
        this._checkIndex$1(H.intTypeCheck(index));
      this.super$JsObject$$indexSet(0, index, value);
    },
    get$length: function(_) {
      var len = this._js$_jsObject.length;
      if (typeof len === "number" && len >>> 0 === len)
        return len;
      throw H.wrapException(P.StateError$("Bad JsArray length"));
    },
    set$length: function(_, $length) {
      this.super$JsObject$$indexSet(0, "length", $length);
    },
    add$1: function(_, value) {
      this.callMethod$2("push", [H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(this, 0))]);
    },
    addAll$1: function(_, iterable) {
      H.assertSubtype(iterable, "$isIterable", this.$ti, "$asIterable");
      this.callMethod$2("push", H.listTypeCheck(iterable instanceof Array ? iterable : P.List_List$from(iterable, true, null)));
    },
    $isEfficientLengthIterable: 1,
    $isIterable: 1,
    $isList: 1
  };
  P._convertToJS_closure.prototype = {
    call$1: function(o) {
      var jsFunction;
      H.interceptedTypeCheck(o, "$isFunction");
      jsFunction = function(_call, f, captureThis) {
        return function() {
          return _call(f, captureThis, this, Array.prototype.slice.apply(arguments));
        };
      }(P._callDartFunction, o, false);
      P._defineProperty(jsFunction, $.$get$DART_CLOSURE_PROPERTY_NAME(), o);
      return jsFunction;
    },
    $signature: 3
  };
  P._convertToJS_closure0.prototype = {
    call$1: function(o) {
      return new this.ctor(o);
    },
    $signature: 3
  };
  P._wrapToDart_closure.prototype = {
    call$1: function(o) {
      return new P.JsFunction(o);
    },
    $signature: 98
  };
  P._wrapToDart_closure0.prototype = {
    call$1: function(o) {
      return new P.JsArray(o, [null]);
    },
    $signature: 143
  };
  P._wrapToDart_closure1.prototype = {
    call$1: function(o) {
      return new P.JsObject(o);
    },
    $signature: 150
  };
  P._JsArray_JsObject_ListMixin.prototype = {};
  P.promiseToFuture_closure.prototype = {
    call$1: function(r) {
      var t1 = this.completer;
      r = H.futureOrCheck(H.futureOrCheck(r, {futureOr: 1, type: this.T}), {futureOr: 1, type: H.getTypeArgumentByIndex(t1, 0)});
      t1 = t1.future;
      if (t1._async$_state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncComplete$1(r);
      return;
    },
    $signature: 33
  };
  P.promiseToFuture_closure0.prototype = {
    call$1: function(e) {
      var error = e == null ? new P.NullThrownError() : e,
        t1 = this.completer.future;
      if (t1._async$_state !== 0)
        H.throwExpression(P.StateError$("Future already completed"));
      t1._asyncCompleteError$2(error, null);
      return;
    },
    $signature: 33
  };
  P._RectangleBase.prototype = {};
  P.Rectangle.prototype = {};
  P.AElement.prototype = {
    get$target: function(receiver) {
      return receiver.target;
    }
  };
  P.Angle.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.numTypeCheck(value);
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  P.AnimatedEnumeration.prototype = {$isAnimatedEnumeration: 1};
  P.AnimatedString.prototype = {$isAnimatedString: 1};
  P.FEColorMatrixElement.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  P.FETurbulenceElement.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  P.GraphicsElement.prototype = {};
  P.Length.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.numTypeCheck(value);
    },
    $isLength: 1,
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  P.LengthList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isLength");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Length];
    },
    $asListMixin: function() {
      return [P.Length];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Length];
    },
    $isList: 1,
    $asList: function() {
      return [P.Length];
    },
    $asImmutableListMixin: function() {
      return [P.Length];
    }
  };
  P.Number.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.numTypeCheck(value);
    },
    $isNumber: 1,
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  P.NumberList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isNumber");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Number];
    },
    $asListMixin: function() {
      return [P.Number];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Number];
    },
    $isList: 1,
    $asList: function() {
      return [P.Number];
    },
    $asImmutableListMixin: function() {
      return [P.Number];
    }
  };
  P.PointList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.ScriptElement0.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  P.StringList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.stringTypeCheck(value);
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.String];
    },
    $asListMixin: function() {
      return [P.String];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.String];
    },
    $isList: 1,
    $asList: function() {
      return [P.String];
    },
    $asImmutableListMixin: function() {
      return [P.String];
    }
  };
  P.StyleElement0.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  P.SvgElement.prototype = {};
  P.Transform.prototype = {$isTransform: 1,
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  P.TransformList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return receiver.getItem(index);
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isTransform");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [P.Transform];
    },
    $asListMixin: function() {
      return [P.Transform];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [P.Transform];
    },
    $isList: 1,
    $asList: function() {
      return [P.Transform];
    },
    $asImmutableListMixin: function() {
      return [P.Transform];
    }
  };
  P._LengthList_Interceptor_ListMixin.prototype = {};
  P._LengthList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._NumberList_Interceptor_ListMixin.prototype = {};
  P._NumberList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._StringList_Interceptor_ListMixin.prototype = {};
  P._StringList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P._TransformList_Interceptor_ListMixin.prototype = {};
  P._TransformList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  P.AudioBuffer.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.AudioNode.prototype = {};
  P.AudioParam.prototype = {
    set$value: function(receiver, value) {
      receiver.value = H.numTypeCheck(value);
    },
    get$value: function(receiver) {
      return receiver.value;
    }
  };
  P.AudioParamMap.prototype = {
    addAll$1: function(receiver, other) {
      H.assertSubtype(other, "$isMap", [P.String, null], "$asMap");
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    containsKey$1: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(key)) != null;
    },
    $index: function(receiver, key) {
      return P.convertNativeToDart_Dictionary(receiver.get(H.stringTypeCheck(key)));
    },
    forEach$1: function(receiver, f) {
      var entries, entry;
      H.functionTypeCheck(f, {func: 1, ret: -1, args: [P.String,,]});
      entries = receiver.entries();
      for (; true;) {
        entry = entries.next();
        if (entry.done)
          return;
        f.call$2(entry.value[0], P.convertNativeToDart_Dictionary(entry.value[1]));
      }
    },
    get$keys: function(receiver) {
      var keys = H.setRuntimeTypeInfo([], [P.String]);
      this.forEach$1(receiver, new P.AudioParamMap_keys_closure(keys));
      return keys;
    },
    get$values: function(receiver) {
      var values = H.setRuntimeTypeInfo([], [[P.Map,,,]]);
      this.forEach$1(receiver, new P.AudioParamMap_values_closure(values));
      return values;
    },
    get$length: function(receiver) {
      return receiver.size;
    },
    get$isEmpty: function(receiver) {
      return receiver.size === 0;
    },
    $indexSet: function(receiver, key, value) {
      H.stringTypeCheck(key);
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    putIfAbsent$2: function(receiver, key, ifAbsent) {
      H.functionTypeCheck(ifAbsent, {func: 1});
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    remove$1: function(receiver, key) {
      throw H.wrapException(P.UnsupportedError$("Not supported"));
    },
    $asMapMixin: function() {
      return [P.String, null];
    },
    $isMap: 1,
    $asMap: function() {
      return [P.String, null];
    }
  };
  P.AudioParamMap_keys_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.keys, k);
    },
    $signature: 6
  };
  P.AudioParamMap_values_closure.prototype = {
    call$2: function(k, v) {
      return C.JSArray_methods.add$1(this.values, v);
    },
    $signature: 6
  };
  P.AudioScheduledSourceNode.prototype = {};
  P.AudioTrackList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.BaseAudioContext.prototype = {};
  P.BiquadFilterNode.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  P.OfflineAudioContext.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    }
  };
  P.OscillatorNode.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  P._AudioParamMap_Interceptor_MapMixin.prototype = {};
  P.ActiveInfo.prototype = {
    get$type: function(receiver) {
      return receiver.type;
    }
  };
  P.SqlResultSetRowList.prototype = {
    get$length: function(receiver) {
      return receiver.length;
    },
    $index: function(receiver, index) {
      if (index >>> 0 !== index || index >= receiver.length)
        throw H.wrapException(P.IndexError$(index, receiver, null, null, null));
      return P.convertNativeToDart_Dictionary(receiver.item(index));
    },
    $indexSet: function(receiver, index, value) {
      H.intTypeCheck(index);
      H.interceptedTypeCheck(value, "$isMap");
      throw H.wrapException(P.UnsupportedError$("Cannot assign element of immutable List."));
    },
    set$length: function(receiver, value) {
      throw H.wrapException(P.UnsupportedError$("Cannot resize immutable List."));
    },
    get$first: function(receiver) {
      if (receiver.length > 0)
        return receiver[0];
      throw H.wrapException(P.StateError$("No elements"));
    },
    get$last: function(receiver) {
      var len = receiver.length;
      if (len > 0)
        return receiver[len - 1];
      throw H.wrapException(P.StateError$("No elements"));
    },
    elementAt$1: function(receiver, index) {
      return this.$index(receiver, index);
    },
    $isEfficientLengthIterable: 1,
    $asEfficientLengthIterable: function() {
      return [[P.Map,,,]];
    },
    $asListMixin: function() {
      return [[P.Map,,,]];
    },
    $isIterable: 1,
    $asIterable: function() {
      return [[P.Map,,,]];
    },
    $isList: 1,
    $asList: function() {
      return [[P.Map,,,]];
    },
    $asImmutableListMixin: function() {
      return [[P.Map,,,]];
    }
  };
  P._SqlResultSetRowList_Interceptor_ListMixin.prototype = {};
  P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin.prototype = {};
  U.DefaultEquality.prototype = {};
  U.IterableEquality.prototype = {
    equals$2: function(elements1, elements2) {
      var it1, it2, hasNext,
        t1 = this.$ti;
      H.assertSubtype(elements1, "$isIterable", t1, "$asIterable");
      H.assertSubtype(elements2, "$isIterable", t1, "$asIterable");
      if (elements1 === elements2)
        return true;
      it1 = new J.ArrayIterator(elements1, elements1.length, [H.getTypeArgumentByIndex(elements1, 0)]);
      it2 = new J.ArrayIterator(elements2, elements2.length, [H.getTypeArgumentByIndex(elements2, 0)]);
      for (; true;) {
        hasNext = it1.moveNext$0();
        if (hasNext !== it2.moveNext$0())
          return false;
        if (!hasNext)
          return true;
        if (!J.$eq$(it1.__interceptors$_current, it2.__interceptors$_current))
          return false;
      }
    },
    hash$1: function(_, elements) {
      var t1, hash, _i;
      H.assertSubtype(elements, "$isIterable", this.$ti, "$asIterable");
      for (t1 = elements.length, hash = 0, _i = 0; _i < elements.length; elements.length === t1 || (0, H.throwConcurrentModificationError)(elements), ++_i) {
        hash = hash + J.get$hashCode$(elements[_i]) & 2147483647;
        hash = hash + (hash << 10 >>> 0) & 2147483647;
        hash ^= hash >>> 6;
      }
      hash = hash + (hash << 3 >>> 0) & 2147483647;
      hash ^= hash >>> 11;
      return hash + (hash << 15 >>> 0) & 2147483647;
    }
  };
  A.DomProps.prototype = {
    get$componentFactory: function() {
      return this.componentFactory;
    },
    get$props: function(receiver) {
      return this.props;
    }
  };
  A.SvgProps.prototype = {$isDomProps: 1,
    get$componentFactory: function() {
      return this.componentFactory;
    },
    get$props: function(receiver) {
      return this.props;
    }
  };
  A._DomProps_UiProps_DomPropsMixin.prototype = {};
  A._DomProps_UiProps_DomPropsMixin_GeneratedClass.prototype = {};
  A._SvgProps_UiProps_DomPropsMixin.prototype = {};
  A._SvgProps_UiProps_DomPropsMixin_SvgPropsMixin.prototype = {};
  A._SvgProps_UiProps_DomPropsMixin_SvgPropsMixin_GeneratedClass.prototype = {};
  Q.ReactPropsMixin.prototype = {
    set$key: function(_, value) {
      var t1 = this.get$props(this);
      J.$indexSet$ax(t1, "key", value == null ? null : J.toString$0$(value));
    },
    get$children: function(_) {
      var t1 = J.$index$asx(this.get$props(this), "children");
      return H.listTypeCheck(t1 == null ? null : t1);
    },
    set$ref: function(_, value) {
      J.$indexSet$ax(this.get$props(this), "ref", value);
    }
  };
  Q.DomPropsMixin.prototype = {
    get$checked: function(_) {
      var t1 = this.get$props(this).$index(0, "checked");
      return H.boolTypeCheck(t1 == null ? null : t1);
    },
    set$style: function(_, value) {
      H.assertSubtype(value, "$isMap", [P.String, null], "$asMap");
      this.get$props(this).$indexSet(0, "style", value);
    },
    set$className: function(_, value) {
      this.get$props(this).$indexSet(0, "className", value);
    },
    set$id: function(_, value) {
      this.get$props(this).$indexSet(0, "id", value);
    },
    get$target: function(_) {
      var t1 = this.get$props(this).$index(0, "target");
      return t1 == null ? null : t1;
    },
    get$type: function(_) {
      var t1 = this.get$props(this).$index(0, "type");
      return t1 == null ? null : t1;
    },
    get$value: function(_) {
      var t1 = this.get$props(this).$index(0, "value");
      return t1 == null ? null : t1;
    },
    set$value: function(_, value) {
      this.get$props(this).$indexSet(0, "value", value);
    },
    set$onClick: function(_, value) {
      H.functionTypeCheck(value, {func: 1, args: [V.SyntheticMouseEvent]});
      this.get$props(this).$indexSet(0, "onClick", value);
    },
    set$onMouseDown: function(_, value) {
      H.functionTypeCheck(value, {func: 1, args: [V.SyntheticMouseEvent]});
      this.get$props(this).$indexSet(0, "onMouseDown", value);
    },
    set$onMouseEnter: function(_, value) {
      H.functionTypeCheck(value, {func: 1, args: [V.SyntheticMouseEvent]});
      this.get$props(this).$indexSet(0, "onMouseEnter", value);
    },
    set$onMouseLeave: function(_, value) {
      H.functionTypeCheck(value, {func: 1, args: [V.SyntheticMouseEvent]});
      this.get$props(this).$indexSet(0, "onMouseLeave", value);
    },
    set$onScroll: function(_, value) {
      H.functionTypeCheck(value, {func: 1, args: [V.SyntheticUIEvent]});
      this.get$props(this).$indexSet(0, "onScroll", value);
    }
  };
  Q.SvgPropsMixin.prototype = {
    set$points: function(_, value) {
      this.props.$indexSet(0, "points", value);
    },
    set$viewBox: function(_, value) {
      this.props.$indexSet(0, "viewBox", value);
    }
  };
  Q.UbiquitousDomPropsMixin.prototype = {
    set$id: function(_, value) {
      J.$indexSet$ax(this.get$props(this), "id", value);
    },
    set$style: function(_, value) {
      H.assertSubtype(value, "$isMap", [P.String, null], "$asMap");
      J.$indexSet$ax(this.get$props(this), "style", value);
    },
    set$onClick: function(_, value) {
      H.functionTypeCheck(value, {func: 1, args: [V.SyntheticMouseEvent]});
      J.$indexSet$ax(this.get$props(this), "onClick", value);
    },
    set$onMouseDown: function(_, value) {
      H.functionTypeCheck(value, {func: 1, args: [V.SyntheticMouseEvent]});
      J.$indexSet$ax(this.get$props(this), "onMouseDown", value);
    },
    set$onMouseEnter: function(_, value) {
      H.functionTypeCheck(value, {func: 1, args: [V.SyntheticMouseEvent]});
      J.$indexSet$ax(this.get$props(this), "onMouseEnter", value);
    },
    set$onMouseLeave: function(_, value) {
      H.functionTypeCheck(value, {func: 1, args: [V.SyntheticMouseEvent]});
      J.$indexSet$ax(this.get$props(this), "onMouseLeave", value);
    },
    set$onScroll: function(_, value) {
      H.functionTypeCheck(value, {func: 1, args: [V.SyntheticUIEvent]});
      J.$indexSet$ax(this.get$props(this), "onScroll", value);
    }
  };
  S._$ResizeSensorProps.prototype = {};
  S.ResizeSensorComponent.prototype = {
    getDefaultProps$0: function() {
      var t1 = this.typedPropsFactory$1(P.LinkedHashMap__makeEmpty());
      t1.addProps$1($.$get$ResizeSensorPropsMixin_defaultProps());
      return t1;
    },
    componentWillUnmount$0: function() {
      this.super$UiComponent$componentWillUnmount();
      C.JSArray_methods.forEach$1(this._SafeAnimationFrameMixin__animationFrameIds, C.Window_methods.get$cancelAnimationFrame(window));
    },
    componentDidMount$0: function() {
      var t1, _this = this;
      _this._checkForDetachedMount$0();
      t1 = J.$index$asx(J.get$props$x(_this.get$props(_this)), "ResizeSensorPropsMixin.quickMount");
      if (H.boolConversionCheck(H.boolTypeCheck(t1 == null ? null : t1)))
        _this.requestAnimationFrame$1(0, new S.ResizeSensorComponent_componentDidMount_closure(_this));
      else {
        _this._reset$0();
        if (_this.get$props(_this).get$onInitialize() != null) {
          t1 = _this._lastWidth;
          _this.get$props(_this).onInitialize$1(new S.ResizeSensorEvent(t1));
        }
      }
    },
    render$0: function(_) {
      var t2, t3, expandSensor, collapseSensor, resizeSensor, wrapperStyles, mergedStyle, mergedStyle0, _this = this, _null = null,
        t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t1.set$className(0, "resize-sensor-expand");
      t2 = _this.get$_handleSensorScroll();
      t1.set$onScroll(0, t2);
      t1.set$style(0, H.boolConversionCheck(_this.get$props(_this).get$shrink()) ? C.Map_GRi8C : C.Map_GRpSQ);
      t1.set$ref(0, new S.ResizeSensorComponent_render_closure(_this));
      t3 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t3.set$style(0, C.Map_vdwMy);
      expandSensor = t1.call$1(t3.call$0());
      t3 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t3.set$className(0, "resize-sensor-collapse");
      t3.set$onScroll(0, t2);
      t3.set$style(0, H.boolConversionCheck(_this.get$props(_this).get$shrink()) ? C.Map_GRi8C : C.Map_GRpSQ);
      t3.set$ref(0, new S.ResizeSensorComponent_render_closure0(_this));
      t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t1.set$style(0, C.Map_OvssO);
      collapseSensor = t3.call$1(t1.call$0());
      t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t1.set$className(0, "resize-sensor");
      t1.set$style(0, H.boolConversionCheck(_this.get$props(_this).get$shrink()) ? C.Map_GRi8C : C.Map_GRpSQ);
      t1.set$key(0, "resizeSensor");
      resizeSensor = t1.call$2(expandSensor, collapseSensor);
      t1 = J.$index$asx(J.get$props$x(_this.get$props(_this)), "ResizeSensorPropsMixin.isFlexChild");
      if (H.boolConversionCheck(H.boolTypeCheck(t1 == null ? _null : t1)))
        wrapperStyles = C.Map_ivZZu;
      else {
        t1 = J.$index$asx(J.get$props$x(_this.get$props(_this)), "ResizeSensorPropsMixin.isFlexContainer");
        wrapperStyles = H.boolConversionCheck(H.boolTypeCheck(t1 == null ? _null : t1)) ? $.$get$_wrapperStylesFlexContainer() : C.Map_sBqpm;
      }
      mergedStyle = R.newStyleFromProps(_this.get$props(_this));
      mergedStyle0 = P.LinkedHashMap_LinkedHashMap$_empty(P.String, _null);
      mergedStyle0.addAll$1(0, wrapperStyles);
      mergedStyle0.addAll$1(0, mergedStyle);
      t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t1.addProps$1(_this.copyUnconsumedDomProps$0());
      t2 = new S.ClassNameBuilder(new P.StringBuffer(""));
      t2.addFromProps$1(_this.get$props(_this));
      t1.set$className(0, t2.toClassName$0());
      t1.set$style(0, mergedStyle0);
      return t1.call$2(J.get$children$z(_this.get$props(_this)), resizeSensor);
    },
    _handleSensorScroll$1: function(_) {
      var t1, sensor, newWidth, newHeight, _this = this;
      H.interceptedTypeCheck(_, "$isSyntheticEvent");
      t1 = _this._scrollEventsToIgnore;
      if (t1 > 0) {
        _this._scrollEventsToIgnore = t1 - 1;
        return;
      }
      sensor = H.interceptedTypeCheck($.findDOMNode.call$1(_this), "$isElement");
      newWidth = C.JSNumber_methods.round$0(sensor.offsetWidth);
      newHeight = C.JSNumber_methods.round$0(sensor.offsetHeight);
      if (newWidth !== _this._lastWidth || newHeight !== _this._lastHeight) {
        if (J.get$onResize$z(_this.get$props(_this)) != null)
          J.onResize$1$z(_this.get$props(_this), new S.ResizeSensorEvent(newWidth));
        _this._reset$0();
      }
    },
    _reset$1$updateLastDimensions: function(updateLastDimensions) {
      var sensor, t1, _this = this;
      if (updateLastDimensions) {
        sensor = H.interceptedTypeCheck($.findDOMNode.call$1(_this), "$isElement");
        _this._lastWidth = C.JSNumber_methods.round$0(sensor.offsetWidth);
        _this._lastHeight = C.JSNumber_methods.round$0(sensor.offsetHeight);
      }
      t1 = _this._expandSensorRef;
      t1.toString;
      t1.scrollLeft = 100000;
      t1.scrollTop = 100000;
      t1 = _this._collapseSensorRef;
      t1.toString;
      t1.scrollLeft = 100000;
      t1.scrollTop = 100000;
      if (_this.get$props(_this).get$onDidReset() != null)
        _this.get$props(_this).onDidReset$0();
    },
    _reset$0: function() {
      return this._reset$1$updateLastDimensions(true);
    },
    _isAttachedToDocument$0: function() {
      var current = H.interceptedTypeCheck($.findDOMNode.call$1(this), "$isElement");
      for (; current != null;) {
        if (current === document.body)
          return true;
        current = current.parentNode;
      }
      return false;
    },
    _checkForDetachedMount$0: function() {
      var t1, _this = this;
      if (_this.get$props(_this).get$onDetachedMountCheck() == null)
        return;
      t1 = _this._isAttachedToDocument$0();
      _this.get$props(_this).onDetachedMountCheck$1(!t1);
    },
    $asUiComponent: function() {
      return [S.ResizeSensorProps];
    }
  };
  S.ResizeSensorComponent_componentDidMount_closure.prototype = {
    call$0: function() {
      var t1 = this.$this;
      t1._scrollEventsToIgnore = 2;
      t1._reset$1$updateLastDimensions(false);
    },
    $signature: 0
  };
  S.ResizeSensorComponent_render_closure.prototype = {
    call$1: function(ref) {
      this.$this._expandSensorRef = H.interceptedTypeCheck(ref, "$isElement");
    },
    $signature: 4
  };
  S.ResizeSensorComponent_render_closure0.prototype = {
    call$1: function(ref) {
      this.$this._collapseSensorRef = H.interceptedTypeCheck(ref, "$isElement");
    },
    $signature: 4
  };
  S.closure8.prototype = {
    call$0: function() {
      var t2,
        t1 = G.browser();
      t1.toString;
      if (t1 == $.$get$internetExplorer()) {
        t1 = G.browser();
        t2 = t1._version;
        if (t2 == null) {
          t2 = t1._parseVersion;
          if (t2 != null) {
            t2 = H.interceptedTypeCheck(t2.call$1($.Browser_navigator), "$isVersion");
            t1._version = t2;
            t1 = t2;
          } else {
            t2 = T.Version_Version(0, 0, 0, null);
            t1._version = t2;
            t1 = t2;
          }
        } else
          t1 = t2;
        t1 = t1.major;
        if (typeof t1 !== "number")
          return t1.$le();
        t1 = t1 <= 10;
      } else
        t1 = false;
      if (t1)
        return "-ms-flexbox";
      return "flex";
    },
    $signature: 64
  };
  S.ResizeSensorEvent.prototype = {};
  S.ResizeSensorPropsMixinMapView.prototype = {
    get$props: function(_) {
      return this;
    },
    $asMapView: function() {
    },
    $asMap: function() {
    }
  };
  S._SafeAnimationFrameMixin.prototype = {
    requestAnimationFrame$1: function(_, callback) {
      var t2, t3, queuedId, t1 = {};
      H.functionTypeCheck(callback, {func: 1});
      t1.queuedId = null;
      t2 = window;
      t3 = H.functionTypeCheck(new S._SafeAnimationFrameMixin_requestAnimationFrame_closure(t1, this, callback), {func: 1, ret: -1, args: [P.num]});
      C.Window_methods._ensureRequestAnimationFrame$0(t2);
      queuedId = C.Window_methods._requestAnimationFrame$1(t2, W._wrapZone(t3, P.num));
      t1.queuedId = queuedId;
      C.JSArray_methods.add$1(this._SafeAnimationFrameMixin__animationFrameIds, queuedId);
    }
  };
  S._SafeAnimationFrameMixin_requestAnimationFrame_closure.prototype = {
    call$1: function(_) {
      H.numTypeCheck(_);
      this.callback.call$0();
      C.JSArray_methods.remove$1(this.$this._SafeAnimationFrameMixin__animationFrameIds, this._box_0.queuedId);
    },
    $signature: 65
  };
  S.closure7.prototype = {
    call$0: function() {
      var t1 = new S._$ResizeSensorComponent(H.setRuntimeTypeInfo([], [P.int]), P.Expando$(null, S.ResizeSensorProps), P.LinkedHashMap__makeEmpty(), H.setRuntimeTypeInfo([], [{func: 1}]), H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Map,,,], args: [[P.Map,,,], [P.Map,,,]]}]));
      t1.get$$$isClassGenerated();
      return t1;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 69
  };
  S._$ResizeSensorPropsAccessorsMixin.prototype = {};
  S.ResizeSensorProps.prototype = {};
  S._$$ResizeSensorProps.prototype = {
    get$props: function(_) {
      return this._resize_sensor$_props;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$componentFactory: function() {
      return $.$get$$ResizeSensorComponentFactory();
    },
    $isResizeSensorProps: 1
  };
  S._$ResizeSensorComponent.prototype = {
    typedPropsFactory$1: function(backingMap) {
      return S._$$ResizeSensorProps$(backingMap);
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$$$defaultConsumedProps: function() {
      return C.List_qx4;
    }
  };
  S.ResizeSensorPropsMixin.prototype = {
    get$onInitialize: function() {
      var t1 = J.$index$asx(this.get$props(this), "ResizeSensorPropsMixin.onInitialize");
      if (t1 == null)
        t1 = null;
      return H.functionTypeCheck(t1, {func: 1, ret: -1, args: [S.ResizeSensorEvent]});
    },
    get$onResize: function(_) {
      var t1 = J.$index$asx(this.get$props(this), "ResizeSensorPropsMixin.onResize");
      if (t1 == null)
        t1 = null;
      return H.functionTypeCheck(t1, {func: 1, ret: -1, args: [S.ResizeSensorEvent]});
    },
    set$isFlexChild: function(value) {
      J.$indexSet$ax(this.get$props(this), "ResizeSensorPropsMixin.isFlexChild", value);
    },
    get$shrink: function() {
      var t1 = J.$index$asx(this.get$props(this), "ResizeSensorPropsMixin.shrink");
      return H.boolTypeCheck(t1 == null ? null : t1);
    },
    get$onDetachedMountCheck: function() {
      var t1 = J.$index$asx(this.get$props(this), "ResizeSensorPropsMixin.onDetachedMountCheck");
      if (t1 == null)
        t1 = null;
      return H.functionTypeCheck(t1, {func: 1, args: [P.bool]});
    },
    get$onDidReset: function() {
      var t1 = J.$index$asx(this.get$props(this), "ResizeSensorPropsMixin.onDidReset");
      if (t1 == null)
        t1 = null;
      return H.functionTypeCheck(t1, {func: 1});
    },
    onInitialize$1: function(arg0) {
      return this.get$onInitialize().call$1(arg0);
    },
    onResize$1: function($receiver, arg0) {
      return this.get$onResize(this).call$1(arg0);
    },
    onDetachedMountCheck$1: function(arg0) {
      return this.get$onDetachedMountCheck().call$1(arg0);
    },
    onDidReset$0: function() {
      return this.get$onDidReset().call$0();
    }
  };
  S._ResizeSensorComponent_UiComponent__SafeAnimationFrameMixin.prototype = {};
  S._ResizeSensorProps__$ResizeSensorProps__$ResizeSensorPropsAccessorsMixin.prototype = {};
  S._ResizeSensorPropsMixinMapView_MapView_ResizeSensorPropsMixin.prototype = {};
  S.__$$ResizeSensorProps__$ResizeSensorProps__$ResizeSensorPropsAccessorsMixin.prototype = {};
  S.__$ResizeSensorProps_UiProps_ResizeSensorPropsMixin.prototype = {};
  B.GeneratedClass.prototype = {};
  B.UiComponent0.prototype = {
    get$$$defaultConsumedProps: function() {
      return H.throwExpression(B.UngeneratedError$(C.Symbol_$defaultConsumedProps, null));
    },
    get$consumedProps: function() {
      return this.get$$$defaultConsumedProps();
    },
    typedPropsFactory$1: function(propsMap) {
      return H.throwExpression(B.UngeneratedError$(C.Symbol_typedPropsFactory, null));
    }
  };
  B.UiStatefulComponent0.prototype = {
    get$$$defaultConsumedProps: function() {
      return H.throwExpression(B.UngeneratedError$(C.Symbol_$defaultConsumedProps, null));
    },
    get$consumedProps: function() {
      return this.get$$$defaultConsumedProps();
    },
    typedPropsFactory$1: function(propsMap) {
      return H.throwExpression(B.UngeneratedError$(C.Symbol_typedPropsFactory, null));
    },
    typedStateFactory$1: function(stateMap) {
      return H.throwExpression(B.UngeneratedError$(C.Symbol_typedStateFactory, C.Symbol_typedStateFactory.toString$0(0) + "` should be implemented by code generation.\n\nThis error may be due to your `UiState` class not being annotated with `@State()`,\nor because you are extending a stateful component without redeclaring your own `@State()`, like so:\n\n    @State()\n    class MyState extends SuperState {}\n"));
    }
  };
  B.UiProps.prototype = {
    get$props: function(_) {
      return H.throwExpression(B.UngeneratedError$(C.Symbol_props, null));
    },
    get$componentFactory: function() {
      return H.throwExpression(B.UngeneratedError$(C.Symbol_componentFactory, null));
    }
  };
  B.UiState.prototype = {
    get$state: function(_) {
      return H.throwExpression(B.UngeneratedError$(C.Symbol_state, null));
    }
  };
  B.UngeneratedError.prototype = {
    toString$0: function(_) {
      return "UngeneratedError: " + this.message + ".\n\nEnsure that you're running a build via build_runner.";
    }
  };
  B._UiComponent_UiComponent_GeneratedClass.prototype = {};
  B._UiProps_UiProps_GeneratedClass.prototype = {};
  B._UiState_UiState_GeneratedClass.prototype = {};
  B._UiStatefulComponent_UiStatefulComponent_GeneratedClass.prototype = {};
  S.UiComponent.prototype = {
    get$consumedProps: function() {
      return;
    },
    copyUnconsumedDomProps$0: function() {
      var consumedPropKeys, t2, t3,
        t1 = this.get$consumedProps();
      if (t1 == null)
        consumedPropKeys = null;
      else {
        t2 = [P.List, P.String];
        t3 = H.getTypeArgumentByIndex(t1, 0);
        t2 = new H.MappedListIterable(t1, H.functionTypeCheck(new S.UiComponent_copyUnconsumedDomProps_closure(), {func: 1, ret: t2, args: [t3]}), [t3, t2]);
        consumedPropKeys = t2;
      }
      if (consumedPropKeys == null)
        consumedPropKeys = C.List_empty1;
      H.assertSubtype(consumedPropKeys, "$isIterable", [[P.Iterable,,]], "$asIterable");
      return R.getPropsToForward(this.get$props(this), consumedPropKeys, null, true, true);
    },
    validateRequiredProps$1: function(appliedProps) {
      var t1 = this.get$consumedProps();
      if (t1 != null)
        C.JSArray_methods.forEach$1(t1, new S.UiComponent_validateRequiredProps_closure(appliedProps));
    },
    componentWillMount$0: function() {
      if (H.boolConversionCheck(self.React.__isDevelopment))
        this.validateRequiredProps$1(H.interceptedTypeCheck(this.get$props(this), "$isMap"));
    },
    componentWillUnmount$0: function() {
    },
    get$props: function(_) {
      var _this = this,
        unwrappedProps = V.Component.prototype.get$props.call(_this, _this),
        t1 = _this._typedPropsCache,
        typedProps = t1.$index(0, unwrappedProps);
      if (typedProps == null) {
        typedProps = _this.typedPropsFactory$1(H.boolConversionCheck(self.React.__isDevelopment) ? new S._WarnOnModify(true, unwrappedProps, [null, null]) : unwrappedProps);
        t1.$indexSet(0, unwrappedProps, typedProps);
      }
      return typedProps;
    }
  };
  S.UiComponent_copyUnconsumedDomProps_closure.prototype = {
    call$1: function(consumedProps) {
      return H.interceptedTypeCheck(consumedProps, "$isConsumedProps").keys;
    },
    $signature: 70
  };
  S.UiComponent_validateRequiredProps_closure.prototype = {
    call$1: function(consumedProps) {
      C.JSArray_methods.forEach$1(H.interceptedTypeCheck(consumedProps, "$isConsumedProps").fields, new S.UiComponent_validateRequiredProps__closure(this.appliedProps));
    },
    $signature: 73
  };
  S.UiComponent_validateRequiredProps__closure.prototype = {
    call$1: function(prop) {
      H.interceptedTypeCheck(prop, "$isPropDescriptor").toString;
      return;
    },
    $signature: 74
  };
  S.UiStatefulComponent.prototype = {
    get$state: function(_) {
      var _this = this,
        unwrappedState = V.Component.prototype.get$state.call(_this, _this),
        t1 = _this._typedStateCache,
        typedState = t1.$index(0, unwrappedState);
      if (typedState == null) {
        typedState = _this.typedStateFactory$1(H.boolConversionCheck(self.React.__isDevelopment) ? new S._WarnOnModify(false, unwrappedState, [null, null]) : unwrappedState);
        t1.$indexSet(0, unwrappedState, typedState);
      }
      return typedState;
    },
    set$state: function(_, value) {
      this.super$Component$state(0, value);
    },
    $asUiComponent: function(TProps, TState) {
      return [TProps];
    }
  };
  S._WarnOnModify.prototype = {
    $indexSet: function(_, key, value) {
      var _this = this;
      H.assertSubtypeOfRuntimeType(key, H.getTypeArgumentByIndex(_this, 0));
      H.assertSubtypeOfRuntimeType(value, H.getTypeArgumentByIndex(_this, 1));
      if (_this.isProps)
        _this.message = '          props["' + H.S(key) + '"] was updated incorrectly. Never mutate this.props directly, as it can cause unexpected behavior; \n          props must be updated only by passing in new values when re-rendering this component.\n\n          This will throw in UiComponentV2 (to be released as part of the React 16 upgrade).\n        ';
      else
        _this.message = '          state["' + H.S(key) + '"] was updated incorrectly. Never mutate this.state directly, as it can cause unexpected behavior; \n          state must be updated only via setState.\n\n          This will throw in UiComponentV2 (to be released as part of the React 16 upgrade).\n        ';
      _this.super$MapView$$indexSet(0, key, value);
      S.ValidationUtil_warn(R.unindent(_this.message), null);
    }
  };
  S.UiState0.prototype = {$isMap: 1,
    $asMap: function() {
    },
    $asMapViewMixin: function() {
    }
  };
  S.UiProps0.prototype = {
    addProps$1: function(propMap) {
      if (propMap == null)
        return;
      H.assertSubtype(propMap, "$isMap", [H.getRuntimeTypeArgument(this, "MapViewMixin", 0), H.getRuntimeTypeArgument(this, "MapViewMixin", 1)], "$asMap");
      J.addAll$1$ax(this.get$_map(), propMap);
    },
    call$9: function(c1, c2, c3, c4, c5, c6, c7, c8, c9) {
      var childArguments, t1, t2, factory, parameters, _this = this;
      if (c1 === C.C_NotSpecified)
        childArguments = [];
      else if (c2 === C.C_NotSpecified)
        childArguments = [c1];
      else if (c3 === C.C_NotSpecified)
        childArguments = [c1, c2];
      else if (c4 === C.C_NotSpecified)
        childArguments = [c1, c2, c3];
      else if (c5 === C.C_NotSpecified)
        childArguments = [c1, c2, c3, c4];
      else if (c6 === C.C_NotSpecified)
        childArguments = [c1, c2, c3, c4, c5];
      else if (c7 === C.C_NotSpecified)
        childArguments = [c1, c2, c3, c4, c5, c6];
      else {
        t1 = [c1, c2, c3, c4, c5, c6, c7, c8, c9, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified];
        t2 = H.getTypeArgumentByIndex(t1, 0);
        childArguments = P.List_List$from(new H.TakeWhileIterable(t1, H.functionTypeCheck(new S.UiProps_call_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2);
      }
      factory = _this.get$componentFactory();
      if (factory instanceof V.ReactComponentFactoryProxy)
        return factory.build$2(_this.get$props(_this), childArguments);
      else {
        parameters = [];
        parameters.push(_this.get$props(_this));
        C.JSArray_methods.addAll$1(parameters, childArguments);
        return H.interceptedTypeCheck(P.Function_apply(factory, parameters), "$isReactElement");
      }
    },
    call$0: function() {
      return this.call$9(C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified);
    },
    call$2: function(c1, c2) {
      return this.call$9(c1, c2, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified);
    },
    call$1: function(c1) {
      return this.call$9(c1, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified);
    },
    call$3: function(c1, c2, c3) {
      return this.call$9(c1, c2, c3, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified);
    },
    call$4: function(c1, c2, c3, c4) {
      return this.call$9(c1, c2, c3, c4, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified);
    },
    call$6: function(c1, c2, c3, c4, c5, c6) {
      return this.call$9(c1, c2, c3, c4, c5, c6, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified);
    },
    call$5: function(c1, c2, c3, c4, c5) {
      return this.call$9(c1, c2, c3, c4, c5, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified, C.C_NotSpecified);
    },
    $asMapMixin: function() {
    },
    $asMap: function() {
    },
    $asMapViewMixin: function() {
    }
  };
  S.UiProps_call_closure.prototype = {
    call$1: function(child) {
      return child !== C.C_NotSpecified;
    },
    $signature: 15
  };
  S.PropsMapViewMixin.prototype = {
    get$_map: function() {
      return this.get$props(this);
    },
    toString$0: function(_) {
      return H.getRuntimeType(this).toString$0(0) + ": " + H.S(M._prettyObj(this.get$props(this)));
    }
  };
  S.StateMapViewMixin.prototype = {
    get$_map: function() {
      return this.get$state(this);
    },
    toString$0: function(_) {
      return H.getRuntimeType(this).toString$0(0) + ": " + H.S(M._prettyObj(this.get$state(this)));
    }
  };
  S.MapViewMixin.prototype = {
    $index: function(_, key) {
      return J.$index$asx(this.get$_map(), key);
    },
    $indexSet: function(_, key, value) {
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(this, "MapViewMixin", 0));
      H.assertSubtypeOfRuntimeType(value, H.getRuntimeTypeArgument(this, "MapViewMixin", 1));
      J.$indexSet$ax(this.get$_map(), key, value);
    },
    addAll$1: function(_, other) {
      H.assertSubtype(other, "$isMap", [H.getRuntimeTypeArgument(this, "MapViewMixin", 0), H.getRuntimeTypeArgument(this, "MapViewMixin", 1)], "$asMap");
      J.addAll$1$ax(this.get$_map(), other);
    },
    putIfAbsent$2: function(_, key, ifAbsent) {
      H.assertSubtypeOfRuntimeType(key, H.getRuntimeTypeArgument(this, "MapViewMixin", 0));
      H.functionTypeCheck(ifAbsent, {func: 1, ret: H.getRuntimeTypeArgument(this, "MapViewMixin", 1)});
      return J.putIfAbsent$2$x(this.get$_map(), key, ifAbsent);
    },
    containsKey$1: function(_, key) {
      return J.containsKey$1$x(this.get$_map(), key);
    },
    forEach$1: function(_, action) {
      H.functionTypeCheck(action, {func: 1, ret: -1, args: [H.getRuntimeTypeArgument(this, "MapViewMixin", 0), H.getRuntimeTypeArgument(this, "MapViewMixin", 1)]});
      J.forEach$1$ax(this.get$_map(), action);
    },
    get$isEmpty: function(_) {
      return J.get$isEmpty$asx(this.get$_map());
    },
    get$length: function(_) {
      return J.get$length$asx(this.get$_map());
    },
    get$keys: function(_) {
      return J.get$keys$x(this.get$_map());
    },
    remove$1: function(_, key) {
      return J.remove$1$ax(this.get$_map(), key);
    },
    get$values: function(_) {
      return J.get$values$x(this.get$_map());
    }
  };
  S.PropDescriptor.prototype = {};
  S.ConsumedProps.prototype = {};
  S.PropsMeta.prototype = {
    get$props: function(_) {
      return this.fields;
    },
    $isConsumedProps: 1
  };
  S._UiProps_MapBase_MapViewMixin.prototype = {};
  S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin.prototype = {};
  S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin.prototype = {};
  S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin_UbiquitousDomPropsMixin.prototype = {};
  S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin_UbiquitousDomPropsMixin_CssClassPropsMixin.prototype = {};
  S._UiState_Object_MapViewMixin.prototype = {};
  S._UiState_Object_MapViewMixin_StateMapViewMixin.prototype = {};
  B.ComponentTypeMeta.prototype = {};
  M.NotSpecified.prototype = {};
  S.CssClassPropsMapView.prototype = {
    get$props: function(_) {
      return this;
    },
    $asMapView: function() {
    },
    $asMap: function() {
    }
  };
  S.ClassNameBuilder.prototype = {
    addFromProps$1: function(props) {
      var t1,
        cssClassProps = new S.CssClassPropsMapView(props);
      this.add$1(0, cssClassProps.get$className(cssClassProps));
      t1 = cssClassProps.get$props(cssClassProps).$index(0, "classNameBlacklist");
      this.blacklist$1(H.stringTypeCheck(t1 == null ? null : t1));
    },
    add$1: function(_, className) {
      var t2,
        t1 = className == null || className === "";
      if (t1)
        return;
      t1 = this._classNamesBuffer;
      t2 = t1._contents;
      if (t2.length !== 0)
        t1._contents = t2 + " ";
      t1._contents += H.S(className);
    },
    blacklist$1: function(className) {
      var t2,
        t1 = className == null || className === "";
      if (t1)
        return;
      t1 = this._blacklistBuffer;
      if (t1 == null)
        t1 = this._blacklistBuffer = new P.StringBuffer("");
      else {
        t2 = t1._contents;
        if (t2.length !== 0)
          t1._contents = t2 + " ";
      }
      t1._contents += H.S(className);
    },
    toClassName$0: function() {
      var blacklistedClasses, t2,
        t1 = this._classNamesBuffer._contents,
        className = t1.charCodeAt(0) == 0 ? t1 : t1;
      t1 = this._blacklistBuffer;
      if (t1 != null && t1._contents.length !== 0) {
        blacklistedClasses = S.splitSpaceDelimitedString(J.toString$0$(t1));
        t1 = S.splitSpaceDelimitedString(className);
        t2 = H.getTypeArgumentByIndex(t1, 0);
        className = new H.WhereIterable(t1, H.functionTypeCheck(new S.ClassNameBuilder_toClassName_closure(blacklistedClasses), {func: 1, ret: P.bool, args: [t2]}), [t2]).join$1(0, " ");
      }
      return className;
    },
    toString$0: function(_) {
      var _this = this;
      return H.getRuntimeType(_this).toString$0(0) + " _classNamesBuffer: " + _this._classNamesBuffer.toString$0(0) + ", _blacklistBuffer: " + H.S(_this._blacklistBuffer) + ", toClassName(): " + _this.toClassName$0();
    }
  };
  S.ClassNameBuilder_toClassName_closure.prototype = {
    call$1: function(cssClass) {
      return !C.JSArray_methods.contains$1(this.blacklistedClasses, H.stringTypeCheck(cssClass));
    },
    $signature: 16
  };
  S.CssClassPropsMixin.prototype = {
    get$className: function(_) {
      var t1 = J.$index$asx(this.get$props(this), "className");
      return H.stringTypeCheck(t1 == null ? null : t1);
    },
    set$className: function(_, value) {
      J.$indexSet$ax(this.get$props(this), "className", value);
    }
  };
  S._CssClassPropsMapView_MapView_CssClassPropsMixin.prototype = {};
  R.getPropsToForward_closure.prototype = {
    call$1: function(keySet) {
      J.forEach$1$ax(H.listSuperNativeTypeCheck(keySet, "$isIterable"), new R.getPropsToForward__closure(this.propsToForward));
    },
    $signature: 55
  };
  R.getPropsToForward__closure.prototype = {
    call$1: function(key) {
      this.propsToForward.remove$1(0, key);
    },
    $signature: 4
  };
  R.getPropsToForward_closure0.prototype = {
    call$1: function(key) {
      H.stringTypeCheck(key);
      if (J.getInterceptor$s(key).startsWith$1(key, "aria-"))
        return;
      if (C.JSString_methods.startsWith$1(key, "data-"))
        return;
      if ($.$get$_validDomProps().contains$1(0, key))
        return;
      this.propsToForward.remove$1(0, key);
    },
    $signature: 46
  };
  M._indentString_closure.prototype = {
    call$1: function(line) {
      return C.JSString_methods.trimRight$0(C.JSString_methods.$add("  ", H.stringTypeCheck(line)));
    },
    $signature: 20
  };
  M._prettyObj_closure.prototype = {
    call$1: function(items) {
      return J.contains$1$asx(H.stringTypeCheck(items), "\n");
    },
    $signature: 16
  };
  M._prettyObj_closure0.prototype = {
    call$1: function(key) {
      var t1, index, namespace, subkey;
      if (typeof key === "string" && C.JSString_methods.contains$1(key, ".")) {
        t1 = J.getInterceptor$s(key);
        index = t1.indexOf$1(key, ".");
        namespace = t1.substring$2(key, 0, index);
        subkey = t1.substring$1(key, index);
        t1 = this.namespacedKeys;
        if (t1.$index(0, namespace) == null)
          t1.$indexSet(0, namespace, H.setRuntimeTypeInfo([], [P.String]));
        t1 = t1.$index(0, namespace);
        (t1 && C.JSArray_methods).add$1(t1, subkey);
      } else
        C.JSArray_methods.add$1(this.otherKeys, key);
    },
    $signature: 4
  };
  M._prettyObj_closure1.prototype = {
    call$1: function(namespace) {
      var subkeys, t1, t2, t3;
      H.stringTypeCheck(namespace);
      subkeys = this.namespacedKeys.$index(0, namespace);
      t1 = H.S(namespace) + "\u2026\n";
      t2 = P.String;
      subkeys.toString;
      t3 = H.getTypeArgumentByIndex(subkeys, 0);
      return t1 + M._indentString(new H.MappedListIterable(new H.MappedListIterable(subkeys, H.functionTypeCheck(new M._prettyObj_closure_renderSubKey(namespace, this.obj), {func: 1, ret: t2, args: [t3]}), [t3, t2]), H.functionTypeCheck(new M._prettyObj__closure(), {func: 1, ret: t2, args: [t2]}), [t2, t2]).join$0(0));
    },
    $signature: 20
  };
  M._prettyObj_closure_renderSubKey.prototype = {
    call$1: function(subkey) {
      var value;
      H.stringTypeCheck(subkey);
      value = J.$index$asx(this.obj, H.S(this.namespace) + H.S(subkey));
      return C.JSString_methods.$add(H.S(subkey) + ": ", M._prettyObj(value));
    },
    $signature: 20
  };
  M._prettyObj__closure.prototype = {
    call$1: function(pair) {
      return J.$add$ansx(H.stringTypeCheck(pair), ",\n");
    },
    $signature: 20
  };
  M._prettyObj_closure2.prototype = {
    call$1: function(key) {
      return C.JSString_methods.$add(H.S(key) + ": ", M._prettyObj(J.$index$asx(this.obj, key))) + ",";
    },
    $signature: 7
  };
  M._prettyObj_closure3.prototype = {
    call$1: function(pair) {
      return J.contains$1$asx(H.stringTypeCheck(pair), "\n");
    },
    $signature: 16
  };
  F.closure11.prototype = {
    call$0: function() {
      var exception,
        expando = P.Expando$("_canUseExpandoOnReactElement test", P.bool),
        reactElement = $.div.call$1(P.LinkedHashMap__makeEmpty());
      try {
        J.$indexSet$ax(expando, reactElement, true);
      } catch (exception) {
        H.unwrapException(exception);
        return false;
      }
      return true;
    },
    $signature: 29
  };
  L.Browser.prototype = {};
  L.Browser_getCurrentBrowser_closure.prototype = {
    call$1: function(browser) {
      var t1;
      H.interceptedTypeCheck(browser, "$isBrowser");
      t1 = $.Browser_navigator;
      return H.boolTypeCheck(browser._matchesNavigator.call$1(t1));
    },
    $signature: 104
  };
  L.Browser_getCurrentBrowser_closure0.prototype = {
    call$0: function() {
      return $.$get$Browser_UnknownBrowser();
    },
    $signature: 106
  };
  L._Chrome.prototype = {};
  L._Firefox.prototype = {};
  L._Safari.prototype = {};
  L._WKWebView.prototype = {};
  L._InternetExplorer.prototype = {};
  G._HtmlNavigator.prototype = {$isNavigatorProvider: 1};
  G.NavigatorProvider.prototype = {};
  T.Version.prototype = {
    $eq: function(_, other) {
      var _this = this;
      if (other == null)
        return false;
      if (!(other instanceof T.Version))
        return false;
      return _this.major == other.major && _this.minor == other.minor && _this.patch == other.patch && H.boolConversionCheck(C.C_IterableEquality.equals$2(_this.preRelease, other.preRelease)) && H.boolConversionCheck(C.C_IterableEquality.equals$2(_this.build, other.build));
    },
    get$hashCode: function(_) {
      var t3, _this = this,
        t1 = _this.major,
        t2 = _this.minor;
      if (typeof t1 !== "number")
        return t1.$xor();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = _this.patch;
      if (typeof t3 !== "number")
        return H.iae(t3);
      return (t1 ^ t2 ^ t3 ^ C.C_IterableEquality.hash$1(0, _this.preRelease) ^ C.C_IterableEquality.hash$1(0, _this.build)) >>> 0;
    },
    compareTo$1: function(_, other) {
      var t1, t2, t3, comparison, _this = this;
      H.interceptedTypeCheck(other, "$isVersionRange");
      if (other instanceof T.Version) {
        t1 = _this.major;
        t2 = other.major;
        if (t1 != t2)
          return J.compareTo$1$ns(t1, t2);
        t1 = _this.minor;
        t2 = other.minor;
        if (t1 != t2)
          return J.compareTo$1$ns(t1, t2);
        t1 = _this.patch;
        t2 = other.patch;
        if (t1 != t2)
          return J.compareTo$1$ns(t1, t2);
        t1 = _this.preRelease;
        t2 = t1.length === 0;
        if (t2 && other.preRelease.length !== 0)
          return 1;
        t3 = other.preRelease;
        if (t3.length === 0 && !t2)
          return -1;
        comparison = _this._compareLists$2(t1, t3);
        if (comparison !== 0)
          return comparison;
        t1 = _this.build;
        t2 = t1.length === 0;
        if (t2 && other.build.length !== 0)
          return -1;
        t3 = other.build;
        if (t3.length === 0 && !t2)
          return 1;
        return _this._compareLists$2(t1, t3);
      } else {
        t1 = other.compareTo$1(0, _this);
        if (typeof t1 !== "number")
          return t1.$negate();
        return -t1;
      }
    },
    toString$0: function(_) {
      return this._text;
    },
    _compareLists$2: function(a, b) {
      var i, t1, t2, aPart, bPart;
      for (i = 0; t1 = a.length, t2 = b.length, i < Math.max(t1, t2); ++i) {
        aPart = i < t1 ? a[i] : null;
        bPart = i < t2 ? b[i] : null;
        t1 = J.getInterceptor$(aPart);
        if (t1.$eq(aPart, bPart))
          continue;
        if (aPart == null)
          return -1;
        if (bPart == null)
          return 1;
        if (typeof aPart === "number")
          if (typeof bPart === "number")
            return C.JSNumber_methods.compareTo$1(aPart, bPart);
          else
            return -1;
        else if (typeof bPart === "number")
          return 1;
        else
          return t1.compareTo$1(aPart, bPart);
      }
      return 0;
    },
    $isComparable: 1,
    $asComparable: function() {
      return [X.VersionRange];
    },
    $isVersionRange: 1
  };
  T.Version__splitParts_closure.prototype = {
    call$1: function(part) {
      var t1, exception;
      H.stringTypeCheck(part);
      try {
        t1 = P.int_parse(part);
        return t1;
      } catch (exception) {
        if (H.unwrapException(exception) instanceof P.FormatException)
          return part;
        else
          throw exception;
      }
    },
    $signature: 107
  };
  X.VersionRange.prototype = {$isComparable: 1,
    $asComparable: function() {
      return [X.VersionRange];
    }
  };
  X.Optional.prototype = {
    get$value: function(_) {
      var t1 = this._core0$_value;
      if (t1 == null)
        throw H.wrapException(P.StateError$("value called on absent Optional."));
      return t1;
    },
    get$iterator: function(_) {
      var t1 = this._core0$_value;
      if (t1 != null) {
        t1 = H.setRuntimeTypeInfo([t1], this.$ti);
        t1 = new J.ArrayIterator(t1, 1, [H.getTypeArgumentByIndex(t1, 0)]);
      } else
        t1 = C.C_EmptyIterator;
      return t1;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._core0$_value);
    },
    $eq: function(_, o) {
      if (o == null)
        return false;
      return H.checkSubtype(o, "$isOptional", this.$ti, null) && J.$eq$(o._core0$_value, this._core0$_value);
    },
    toString$0: function(_) {
      var t1 = this._core0$_value;
      return t1 == null ? "Optional { absent }" : "Optional { value: " + H.S(t1) + " }";
    }
  };
  V.Component.prototype = {
    get$props: function(_) {
      return this._react$_props;
    },
    set$props: function(_, value) {
      this._react$_props = value;
    },
    get$state: function(_) {
      return this._state;
    },
    set$state: function(_, value) {
      this._state = value;
    },
    get$nextState: function() {
      var t1 = this._nextState;
      return t1 == null ? this.get$state(this) : t1;
    },
    transferComponentState$0: function() {
      var t1, _this = this;
      _this.prevState = H.interceptedTypeCheck(_this.get$state(_this), "$isMap");
      t1 = _this._nextState;
      if (t1 != null)
        _this.set$state(0, t1);
      _this._nextState = P.LinkedHashMap_LinkedHashMap$from(_this.get$state(_this), null, null);
    },
    setState$2: function(_, newState, callback) {
      this._nextState.addAll$1(0, newState);
      this._jsRedraw.call$0();
    },
    setState$1: function($receiver, newState) {
      return this.setState$2($receiver, newState, null);
    },
    componentDidMount$0: function() {
    },
    componentWillUpdate$2: function(nextProps, nextState) {
    },
    componentDidUpdate$2: function(prevProps, prevState) {
    },
    getInitialState$0: function() {
      return P.LinkedHashMap__makeEmpty();
    },
    getDefaultProps$0: function() {
      return P.LinkedHashMap__makeEmpty();
    },
    set$_ref: function(_ref) {
      H.functionTypeCheck(_ref, {func: 1, args: [P.String]});
    }
  };
  V.ReactComponentFactoryProxy.prototype = {
    call$5: function(props, c1, c2, c3, c4) {
      var childArguments;
      H.interceptedTypeCheck(props, "$isMap");
      if (c1 === C.C_NotSpecified0)
        childArguments = [];
      else if (c2 === C.C_NotSpecified0)
        childArguments = [c1];
      else if (c3 === C.C_NotSpecified0)
        childArguments = [c1, c2];
      else if (c4 === C.C_NotSpecified0)
        childArguments = [c1, c2, c3];
      else
        childArguments = [c1, c2, c3, c4];
      return this.build$2(props, childArguments);
    },
    call$2: function(props, c1) {
      return this.call$5(props, c1, C.C_NotSpecified0, C.C_NotSpecified0, C.C_NotSpecified0);
    },
    call$1: function(props) {
      return this.call$5(props, C.C_NotSpecified0, C.C_NotSpecified0, C.C_NotSpecified0, C.C_NotSpecified0);
    },
    call$3: function(props, c1, c2) {
      return this.call$5(props, c1, c2, C.C_NotSpecified0, C.C_NotSpecified0);
    },
    call$4: function(props, c1, c2, c3) {
      return this.call$5(props, c1, c2, c3, C.C_NotSpecified0);
    },
    $isFunction: 1
  };
  V.NotSpecified0.prototype = {};
  V.SyntheticEvent.prototype = {
    get$target: function(receiver) {
      return this.target;
    },
    get$type: function(receiver) {
      return this.type;
    }
  };
  V.SyntheticClipboardEvent0.prototype = {};
  V.SyntheticKeyboardEvent0.prototype = {};
  V.SyntheticFocusEvent0.prototype = {};
  V.SyntheticFormEvent0.prototype = {};
  V.SyntheticDataTransfer.prototype = {
    get$files: function(receiver) {
      return this.files;
    }
  };
  V.SyntheticMouseEvent.prototype = {};
  V.SyntheticTouchEvent0.prototype = {};
  V.SyntheticTransitionEvent0.prototype = {};
  V.SyntheticAnimationEvent0.prototype = {};
  V.SyntheticUIEvent.prototype = {};
  V.SyntheticWheelEvent0.prototype = {};
  V.closure0.prototype = {
    call$2: function(componentFactory, skipMethods) {
      throw H.wrapException(P.Exception_Exception("setClientConfiguration must be called before registerComponent."));
    },
    call$1: function(componentFactory) {
      return this.call$2(componentFactory, null);
    },
    $signature: 108
  };
  A.ReactDartComponentFactoryProxy.prototype = {
    get$type: function(_) {
      return this.reactClass;
    },
    build$2: function(props, childrenArgs) {
      var children = A.listifyChildren(A._convertArgsToChildren(childrenArgs));
      return this.reactComponentFactory.call$2(A.ReactDartComponentFactoryProxy_generateExtendedJsProps(props, children, this.defaultProps), children);
    }
  };
  A.ReactDartComponentFactoryProxy_generateExtendedJsProps_closure.prototype = {
    call$1: function(instance) {
      var t1;
      H.interceptedTypeCheck(instance, "$isReactComponent");
      t1 = instance == null ? null : J.get$dartComponent$x(instance);
      return this.ref.call$1(t1);
    },
    $signature: 112
  };
  A._jsifyContext_closure.prototype = {
    call$2: function(key, value) {
      H.stringTypeCheck(key);
      $.$get$setProperty().call$3(this.interopContext, key, new K.ReactDartContextInternal(value));
    },
    $signature: 26
  };
  A._unjsifyContext_closure.prototype = {
    call$1: function(key) {
      var internal = H.interceptedTypeCheck($.$get$getProperty().call$2(this.interopContext, H.stringTypeCheck(key)), "$isReactDartContextInternal");
      return internal == null ? null : internal.value;
    },
    $signature: 3
  };
  A.closure2.prototype = {
    call$0: function() {
      var zone = $.Zone__current,
        t1 = new A.closure__afterPropsChange(),
        t2 = new A.closure__clearPrevState(),
        t3 = new A.closure__callSetStateCallbacks(),
        t4 = {func: 1, ret: -1, args: [V.Component]};
      return {initComponent: P.allowInterop(new A.closure_initComponent(zone), {func: 1, ret: V.Component, args: [K.ReactComponent, K.ReactDartComponentInternal, K.InteropContextValue, K.ComponentStatics]}), handleGetChildContext: P.allowInterop(new A.closure_handleGetChildContext(zone), {func: 1, ret: K.InteropContextValue, args: [V.Component]}), handleComponentWillMount: P.allowInterop(new A.closure_handleComponentWillMount(zone), t4), handleComponentDidMount: P.allowInterop(new A.closure_handleComponentDidMount(zone), t4), handleComponentWillReceiveProps: P.allowInterop(new A.closure_handleComponentWillReceiveProps(zone, new A.closure__getNextProps()), {func: 1, ret: -1, args: [V.Component, K.ReactDartComponentInternal, K.InteropContextValue]}), handleShouldComponentUpdate: P.allowInterop(new A.closure_handleShouldComponentUpdate(zone, new A.closure__callSetStateTransactionalCallbacks(), t1, t3, t2), {func: 1, ret: P.bool, args: [V.Component, K.InteropContextValue]}), handleComponentWillUpdate: P.allowInterop(new A.closure_handleComponentWillUpdate(zone, t1), {func: 1, ret: -1, args: [V.Component, K.InteropContextValue]}), handleComponentDidUpdate: P.allowInterop(new A.closure_handleComponentDidUpdate(zone, t3, t2), {func: 1, ret: -1, args: [V.Component, K.ReactDartComponentInternal]}), handleComponentWillUnmount: P.allowInterop(new A.closure_handleComponentWillUnmount(zone), t4), handleRender: P.allowInterop(new A.closure_handleRender(zone), {func: 1, args: [V.Component]})};
    },
    $signature: 114
  };
  A.closure_initComponent.prototype = {
    call$4: function(jsThis, internal, context, componentStatics) {
      H.interceptedTypeCheck(jsThis, "$isReactComponent");
      H.interceptedTypeCheck(internal, "$isReactDartComponentInternal");
      H.interceptedTypeCheck(context, "$isInteropContextValue");
      return this.zone.run$1$1(new A._initComponent_closure(jsThis, H.interceptedTypeCheck(componentStatics, "$isComponentStatics"), internal, context), V.Component);
    },
    "call*": "call$4",
    $requiredArgCount: 4,
    $signature: 119
  };
  A._initComponent_closure.prototype = {
    call$0: function() {
      var getRef, _this = this, _null = null,
        t1 = _this.jsThis,
        component = _this.componentStatics.componentFactory.call$0(),
        t2 = _this.internal.props,
        t3 = A._unjsifyContext(_this.context);
      component.toString;
      getRef = H.functionTypeCheck(new A._initComponent__closure(t1), {func: 1, args: [P.String]});
      component._jsRedraw = new A._initComponent_closure_jsRedraw(t1);
      component.set$_ref(getRef);
      component._jsThis = t1;
      component.nextContext = component._context = P.LinkedHashMap_LinkedHashMap$from(t3, _null, _null);
      t1 = J.getInterceptor$x(component);
      t1.super$Component$props(component, P.LinkedHashMap_LinkedHashMap$from(t2, _null, _null));
      component.nextProps = H.interceptedTypeCheck(t1.get$props(component), "$isMap");
      t1.set$state(component, P.LinkedHashMap_LinkedHashMap$from(component.getInitialState$0(), _null, _null));
      component.transferComponentState$0();
      return component;
    },
    $signature: 121
  };
  A._initComponent_closure_jsRedraw.prototype = {
    call$0: function() {
      J.setState$1$x(this.jsThis, $.$get$emptyJsMap());
    },
    $signature: 1
  };
  A._initComponent__closure.prototype = {
    call$1: function($name) {
      var t1,
        ref = $.$get$getProperty().call$2(J.get$refs$x(this.jsThis), $name);
      if (ref == null)
        return;
      t1 = J.getInterceptor$(ref);
      if (!!t1.$isElement)
        return ref;
      H.interceptedTypeCast(ref, "$isReactComponent");
      t1 = t1.get$dartComponent(ref);
      return t1 == null ? ref : t1;
    },
    $signature: 34
  };
  A.closure_handleGetChildContext.prototype = {
    call$1: function(component) {
      return this.zone.run$1$1(new A._handleGetChildContext_closure(H.interceptedTypeCheck(component, "$isComponent")), K.InteropContextValue);
    },
    $signature: 124
  };
  A._handleGetChildContext_closure.prototype = {
    call$0: function() {
      this.component.toString;
      return A._jsifyContext(C.Map_empty0);
    },
    $signature: 141
  };
  A.closure_handleComponentWillMount.prototype = {
    call$1: function(component) {
      return this.zone.run$1$1(new A._handleComponentWillMount_closure(H.interceptedTypeCheck(component, "$isComponent")), -1);
    },
    $signature: 13
  };
  A._handleComponentWillMount_closure.prototype = {
    call$0: function() {
      var t1 = this.component;
      t1.componentWillMount$0();
      t1.transferComponentState$0();
    },
    $signature: 0
  };
  A.closure_handleComponentDidMount.prototype = {
    call$1: function(component) {
      return this.zone.run$1$1(new A._handleComponentDidMount_closure(H.interceptedTypeCheck(component, "$isComponent")), -1);
    },
    $signature: 13
  };
  A._handleComponentDidMount_closure.prototype = {
    call$0: function() {
      this.component.componentDidMount$0();
    },
    $signature: 0
  };
  A.closure__getNextProps.prototype = {
    call$2: function(component, nextInternal) {
      var newProps = nextInternal.props;
      return newProps != null ? P.LinkedHashMap_LinkedHashMap$from(newProps, null, null) : P.LinkedHashMap__makeEmpty();
    },
    $signature: 145
  };
  A.closure__afterPropsChange.prototype = {
    call$2: function(component, nextContext) {
      component.super$Component$props(0, component.nextProps);
      component._context = component.nextContext;
      component.transferComponentState$0();
    },
    $signature: 48
  };
  A.closure__clearPrevState.prototype = {
    call$1: function(component) {
      component.prevState = null;
    },
    $signature: 13
  };
  A.closure__callSetStateCallbacks.prototype = {
    call$1: function(component) {
      var t1 = component._setStateCallbacks,
        t2 = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      C.JSArray_methods.set$length(t1, 0);
      C.JSArray_methods.forEach$1(t2, new A.__callSetStateCallbacks_closure());
    },
    $signature: 13
  };
  A.__callSetStateCallbacks_closure.prototype = {
    call$1: function(callback) {
      callback.call$0();
    },
    $signature: 4
  };
  A.closure__callSetStateTransactionalCallbacks.prototype = {
    call$1: function(component) {
      var nextState = component.get$nextState(),
        t1 = component.get$props(component),
        t2 = component._transactionalSetStateCallbacks;
      C.JSArray_methods.forEach$1(t2, new A.__callSetStateTransactionalCallbacks_closure(nextState, new P.UnmodifiableMapView(t1, [null, null])));
      C.JSArray_methods.set$length(t2, 0);
    },
    $signature: 13
  };
  A.__callSetStateTransactionalCallbacks_closure.prototype = {
    call$1: function(callback) {
      var t1 = this.nextState;
      J.addAll$1$ax(t1, H.interceptedTypeCheck(callback.call$2(t1, this.props), "$isMap"));
    },
    $signature: 4
  };
  A.closure_handleComponentWillReceiveProps.prototype = {
    call$3: function(component, nextInternal, nextContext) {
      return this.zone.run$1$1(new A._handleComponentWillReceiveProps_closure(this._getNextProps, H.interceptedTypeCheck(component, "$isComponent"), H.interceptedTypeCheck(nextInternal, "$isReactDartComponentInternal"), H.interceptedTypeCheck(nextContext, "$isInteropContextValue")), -1);
    },
    "call*": "call$3",
    $requiredArgCount: 3,
    $signature: 152
  };
  A._handleComponentWillReceiveProps_closure.prototype = {
    call$0: function() {
      var _this = this,
        t1 = _this.component,
        nextProps = _this._getNextProps.call$2(t1, _this.nextInternal),
        newContext = A._unjsifyContext(_this.nextContext);
      t1.nextProps = nextProps;
      t1.nextContext = newContext;
      if (H.boolConversionCheck(self.React.__isDevelopment))
        t1.validateRequiredProps$1(nextProps);
    },
    $signature: 0
  };
  A.closure_handleShouldComponentUpdate.prototype = {
    call$2: function(component, nextContext) {
      var _this = this;
      return _this.zone.run$1$1(new A._handleShouldComponentUpdate_closure(_this._callSetStateTransactionalCallbacks, H.interceptedTypeCheck(component, "$isComponent"), _this._afterPropsChange, H.interceptedTypeCheck(nextContext, "$isInteropContextValue"), _this._callSetStateCallbacks, _this._clearPrevState), P.bool);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 160
  };
  A._handleShouldComponentUpdate_closure.prototype = {
    call$0: function() {
      var t1 = this.component;
      this._callSetStateTransactionalCallbacks.call$1(t1);
      t1.get$nextState();
      t1.get$nextState();
      return true;
    },
    $signature: 29
  };
  A.closure_handleComponentWillUpdate.prototype = {
    call$2: function(component, nextContext) {
      return this.zone.run$1$1(new A._handleComponentWillUpdate_closure(H.interceptedTypeCheck(component, "$isComponent"), this._afterPropsChange, H.interceptedTypeCheck(nextContext, "$isInteropContextValue")), -1);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 48
  };
  A._handleComponentWillUpdate_closure.prototype = {
    call$0: function() {
      var t1 = this.component;
      t1.componentWillUpdate$2(t1.nextProps, t1.get$nextState());
      t1.get$nextState();
      this._afterPropsChange.call$2(t1, this.nextContext);
    },
    $signature: 0
  };
  A.closure_handleComponentDidUpdate.prototype = {
    call$2: function(component, prevInternal) {
      H.interceptedTypeCheck(component, "$isComponent");
      return this.zone.run$1$1(new A._handleComponentDidUpdate_closure(H.interceptedTypeCheck(prevInternal, "$isReactDartComponentInternal"), component, this._callSetStateCallbacks, this._clearPrevState), -1);
    },
    "call*": "call$2",
    $requiredArgCount: 2,
    $signature: 170
  };
  A._handleComponentDidUpdate_closure.prototype = {
    call$0: function() {
      var _this = this,
        t1 = _this.component;
      t1.componentDidUpdate$2(_this.prevInternal.props, t1.prevState);
      _this._callSetStateCallbacks.call$1(t1);
      _this._clearPrevState.call$1(t1);
    },
    $signature: 0
  };
  A.closure_handleComponentWillUnmount.prototype = {
    call$1: function(component) {
      return this.zone.run$1$1(new A._handleComponentWillUnmount_closure(H.interceptedTypeCheck(component, "$isComponent")), -1);
    },
    $signature: 13
  };
  A._handleComponentWillUnmount_closure.prototype = {
    call$0: function() {
      var t1 = this.component;
      t1.componentWillUnmount$0();
      C.JSArray_methods.set$length(t1._setStateCallbacks, 0);
      C.JSArray_methods.set$length(t1._transactionalSetStateCallbacks, 0);
    },
    $signature: 0
  };
  A.closure_handleRender.prototype = {
    call$1: function(component) {
      return this.zone.run$1$1(new A._handleRender_closure(H.interceptedTypeCheck(component, "$isComponent")), null);
    },
    $signature: 176
  };
  A._handleRender_closure.prototype = {
    call$0: function() {
      return this.component.render$0(0);
    },
    $signature: 177
  };
  A.ReactDomComponentFactoryProxy.prototype = {
    get$type: function(_) {
      return this.name;
    },
    build$2: function(props, childrenArgs) {
      var children = A.listifyChildren(A._convertArgsToChildren(childrenArgs)),
        convertibleProps = P.LinkedHashMap__makeEmpty();
      convertibleProps.addAll$1(0, props);
      A._convertBoundValues(convertibleProps);
      A._convertEventHandlers(convertibleProps);
      return H.interceptedTypeCheck(this.factory.call$2(R.jsify(convertibleProps), children), "$isReactElement");
    }
  };
  A._convertBoundValues_closure.prototype = {
    call$1: function($event) {
      var t1;
      J.$index$asx(this.boundValue, 1).call$1(A._getValueFromDom(J.get$target$x($event)));
      t1 = this.onChange;
      if (t1 != null)
        return t1.call$1($event);
    },
    $signature: 3
  };
  A.unconvertJsProps_closure.prototype = {
    call$1: function(key) {
      var t1, t2;
      H.stringTypeCheck(key);
      t1 = this.props;
      if (t1.containsKey$1(0, key)) {
        t2 = A.unconvertJsEventHandler(H.interceptedTypeCheck(t1.$index(0, key), "$isFunction"));
        t1.$indexSet(0, key, t2 == null ? t1.$index(0, key) : t2);
      }
    },
    $signature: 46
  };
  A._convertEventHandlers_closure.prototype = {
    call$2: function(propKey, value) {
      var reactDartConvertedEventHandler,
        eventFactory = J.$index$asx($.$get$eventPropKeyToEventFactory(), propKey);
      if (eventFactory != null && value != null) {
        reactDartConvertedEventHandler = P.allowInterop(new A._convertEventHandlers__closure(value, eventFactory), {func: 1, ret: P.Null, args: [Q.SyntheticEvent0], opt: [,,]});
        this.args.$indexSet(0, propKey, reactDartConvertedEventHandler);
        $.$get$_originalEventHandlers().$indexSet(0, reactDartConvertedEventHandler, H.interceptedTypeCheck(value, "$isFunction"));
      }
    },
    $signature: 5
  };
  A._convertEventHandlers__closure.prototype = {
    call$3: function(e, _, __) {
      this.value.call$1(this.eventFactory.call$1(H.interceptedTypeCheck(e, "$isSyntheticEvent0")));
    },
    call$2: function(e, _) {
      return this.call$3(e, _, null);
    },
    call$1: function(e) {
      return this.call$3(e, null, null);
    },
    "call*": "call$3",
    $defaultValues: function() {
      return [null, null];
    },
    $signature: 56
  };
  A._dartifyJsMap_closure.prototype = {
    call$1: function(key) {
      return H.assertSubtypeOfRuntimeType($.$get$getProperty().call$2(this.jsMap, H.stringTypeCheck(key)), this.V);
    },
    $signature: function() {
      return {func: 1, ret: this.V, args: [,]};
    }
  };
  R._MissingJsMemberError.prototype = {
    toString$0: function(_) {
      return "_MissingJsMemberError: The JS member `" + this.name + "` is missing and thus cannot be used as expected. " + this.message;
    }
  };
  R.closure10.prototype = {
    call$0: function() {
      var t1, exception;
      try {
        t1 = {};
        self._getProperty(t1, null);
      } catch (exception) {
        H.unwrapException(exception);
        t1 = R._MissingJsMemberError$("_getProperty", "Be sure to include React JS files included in this package (which has this and other JS interop helper functions included) or, alternatively, define the function yourself:\n    function _getProperty(obj, key) { return obj[key]; }");
        throw H.wrapException(t1);
      }
      return R.js_interop_helpers___getProperty$closure();
    },
    $signature: 57
  };
  R.closure19.prototype = {
    call$0: function() {
      var t1, exception;
      try {
        t1 = {};
        self._setProperty(t1, null, null);
      } catch (exception) {
        H.unwrapException(exception);
        t1 = R._MissingJsMemberError$("_setProperty", "Be sure to include React JS files included in this package (which has this and other JS interop helper functions included) or, alternatively, define the function yourself:\n    function _setProperty(obj, key, value) { return obj[key] = value; }");
        throw H.wrapException(t1);
      }
      return R.js_interop_helpers___setProperty$closure();
    },
    $signature: 58
  };
  R.EmptyObject.prototype = {};
  R.jsify_closure.prototype = {
    call$2: function(key, value) {
      var jsValue,
        t1 = J.getInterceptor$(value);
      if (!!t1.$isMap)
        jsValue = R.jsify(value);
      else
        jsValue = !!t1.$isFunction ? P.allowInterop(value, P.Function) : value;
      $.$get$setProperty().call$3(this.jsMap, H.stringTypeCheck(key), jsValue);
    },
    $signature: 5
  };
  K.React.prototype = {};
  K.ReactDomServer.prototype = {};
  K.ReactClass.prototype = {};
  K.ReactClassConfig.prototype = {};
  K.ReactElementStore.prototype = {};
  K.ReactElement.prototype = {};
  K.ReactComponent.prototype = {};
  K.InteropContextValue.prototype = {};
  K.InteropProps.prototype = {};
  K.ReactDartComponentInternal.prototype = {
    get$props: function(receiver) {
      return this.props;
    }
  };
  K.ReactDartContextInternal.prototype = {
    get$value: function(receiver) {
      return this.value;
    }
  };
  K.markChildrenValidated_closure.prototype = {
    call$1: function(child) {
      if (H.boolConversionCheck(self.React.isValidElement(child)))
        self._markChildValidated(child);
    },
    $signature: 4
  };
  K.ReactDartInteropStatics.prototype = {};
  K.ComponentStatics.prototype = {};
  K.JsComponentConfig.prototype = {};
  R.closure1.prototype = {
    call$2: function(component, container) {
      throw H.wrapException(P.Exception_Exception("setClientConfiguration must be called before render."));
    },
    $signature: 5
  };
  Z._NsmEmulatedFunctionWithNameProperty.prototype = {
    call$0: function() {
      return;
    },
    noSuchMethod$1: function(_, i) {
      H.interceptedTypeCheck(i, "$isInvocation");
    },
    $isFunction: 1
  };
  Z.closure20.prototype = {
    call$0: function() {
      var exception, t1,
        testObject = new Z._NsmEmulatedFunctionWithNameProperty();
      try {
        testObject._ddc_emulated_function_name_bug$_name = "test value";
      } catch (exception) {
        H.unwrapException(exception);
        return true;
      }
      try {
        t1 = testObject._ddc_emulated_function_name_bug$_name;
        return t1 !== "test value";
      } catch (exception) {
        H.unwrapException(exception);
        return true;
      }
    },
    $signature: 29
  };
  Z._PropertyDescriptor.prototype = {};
  K.ReactDOM.prototype = {};
  T.closure9.prototype = {
    call$0: function() {
      var t1, t2, _i, key,
        _eventPropKeyToEventFactory = P.LinkedHashMap_LinkedHashMap$_literal(["onCopy", A.react_client__syntheticClipboardEventFactory$closure(), "onCut", A.react_client__syntheticClipboardEventFactory$closure(), "onPaste", A.react_client__syntheticClipboardEventFactory$closure(), "onKeyDown", A.react_client__syntheticKeyboardEventFactory$closure(), "onKeyPress", A.react_client__syntheticKeyboardEventFactory$closure(), "onKeyUp", A.react_client__syntheticKeyboardEventFactory$closure(), "onFocus", A.react_client__syntheticFocusEventFactory$closure(), "onBlur", A.react_client__syntheticFocusEventFactory$closure(), "onChange", A.react_client__syntheticFormEventFactory$closure(), "onInput", A.react_client__syntheticFormEventFactory$closure(), "onSubmit", A.react_client__syntheticFormEventFactory$closure(), "onReset", A.react_client__syntheticFormEventFactory$closure(), "onClick", A.react_client__syntheticMouseEventFactory$closure(), "onContextMenu", A.react_client__syntheticMouseEventFactory$closure(), "onDoubleClick", A.react_client__syntheticMouseEventFactory$closure(), "onDrag", A.react_client__syntheticMouseEventFactory$closure(), "onDragEnd", A.react_client__syntheticMouseEventFactory$closure(), "onDragEnter", A.react_client__syntheticMouseEventFactory$closure(), "onDragExit", A.react_client__syntheticMouseEventFactory$closure(), "onDragLeave", A.react_client__syntheticMouseEventFactory$closure(), "onDragOver", A.react_client__syntheticMouseEventFactory$closure(), "onDragStart", A.react_client__syntheticMouseEventFactory$closure(), "onDrop", A.react_client__syntheticMouseEventFactory$closure(), "onMouseDown", A.react_client__syntheticMouseEventFactory$closure(), "onMouseEnter", A.react_client__syntheticMouseEventFactory$closure(), "onMouseLeave", A.react_client__syntheticMouseEventFactory$closure(), "onMouseMove", A.react_client__syntheticMouseEventFactory$closure(), "onMouseOut", A.react_client__syntheticMouseEventFactory$closure(), "onMouseOver", A.react_client__syntheticMouseEventFactory$closure(), "onMouseUp", A.react_client__syntheticMouseEventFactory$closure(), "onTouchCancel", A.react_client__syntheticTouchEventFactory$closure(), "onTouchEnd", A.react_client__syntheticTouchEventFactory$closure(), "onTouchMove", A.react_client__syntheticTouchEventFactory$closure(), "onTouchStart", A.react_client__syntheticTouchEventFactory$closure(), "onTransitionEnd", A.react_client__syntheticTransitionEventFactory$closure(), "onAnimationEnd", A.react_client__syntheticAnimationEventFactory$closure(), "onAnimationIteration", A.react_client__syntheticAnimationEventFactory$closure(), "onAnimationStart", A.react_client__syntheticAnimationEventFactory$closure(), "onScroll", A.react_client__syntheticUIEventFactory$closure(), "onWheel", A.react_client__syntheticWheelEventFactory$closure()], P.String, P.Function);
      for (t1 = _eventPropKeyToEventFactory.get$keys(_eventPropKeyToEventFactory), t1 = P.List_List$from(t1, true, H.getRuntimeTypeArgument(t1, "Iterable", 0)), t2 = t1.length, _i = 0; _i < t1.length; t1.length === t2 || (0, H.throwConcurrentModificationError)(t1), ++_i) {
        key = t1[_i];
        _eventPropKeyToEventFactory.$indexSet(0, J.$add$ansx(key, "Capture"), _eventPropKeyToEventFactory.$index(0, key));
      }
      return _eventPropKeyToEventFactory;
    },
    $signature: 59
  };
  Q.SyntheticEvent0.prototype = {};
  Q.SyntheticClipboardEvent.prototype = {};
  Q.SyntheticKeyboardEvent.prototype = {};
  Q.SyntheticFocusEvent.prototype = {};
  Q.SyntheticFormEvent.prototype = {};
  Q.NonNativeDataTransfer.prototype = {};
  Q.SyntheticMouseEvent0.prototype = {};
  Q.SyntheticTouchEvent.prototype = {};
  Q.SyntheticTransitionEvent.prototype = {};
  Q.SyntheticAnimationEvent.prototype = {};
  Q.SyntheticUIEvent0.prototype = {};
  Q.SyntheticWheelEvent.prototype = {};
  S.Tuple2.prototype = {
    toString$0: function(_) {
      return "[" + H.S(this.item1) + ", " + H.S(this.item2) + "]";
    },
    $eq: function(_, other) {
      if (other == null)
        return false;
      return other instanceof S.Tuple2 && J.$eq$(other.item1, this.item1) && J.$eq$(other.item2, this.item2);
    },
    get$hashCode: function(_) {
      var hash,
        t1 = J.get$hashCode$(this.item1),
        t2 = J.get$hashCode$(this.item2);
      t2 = X._combine(X._combine(0, C.JSInt_methods.get$hashCode(t1)), C.JSInt_methods.get$hashCode(t2));
      hash = 536870911 & t2 + ((67108863 & t2) << 3);
      hash ^= hash >>> 11;
      return 536870911 & hash + ((16383 & hash) << 15);
    }
  };
  A.hashObjects_closure.prototype = {
    call$2: function(h, i) {
      var t1, hash;
      H.intTypeCheck(h);
      t1 = J.get$hashCode$(i);
      if (typeof h !== "number")
        return h.$add();
      hash = 536870911 & h + t1;
      hash = 536870911 & hash + ((524287 & hash) << 10);
      return hash ^ hash >>> 6;
    },
    $signature: 60
  };
  T.Vector2.prototype = {
    setValues$2: function(x_, y_) {
      var t1 = this._v2storage;
      t1[0] = x_;
      t1[1] = y_;
    },
    setFrom$1: function(other) {
      var otherStorage = other._v2storage,
        t1 = this._v2storage;
      t1[1] = otherStorage[1];
      t1[0] = otherStorage[0];
    },
    toString$0: function(_) {
      var t1 = this._v2storage;
      return "[" + H.S(t1[0]) + "," + H.S(t1[1]) + "]";
    },
    $eq: function(_, other) {
      var t1, t2, t3;
      if (other == null)
        return false;
      if (other instanceof T.Vector2) {
        t1 = this._v2storage;
        t2 = t1[0];
        t3 = other._v2storage;
        t1 = t2 === t3[0] && t1[1] === t3[1];
      } else
        t1 = false;
      return t1;
    },
    get$hashCode: function(_) {
      return A.hashObjects(this._v2storage);
    },
    $sub: function(_, other) {
      var argStorage,
        t1 = new Float32Array(2),
        t2 = new T.Vector2(t1);
      t2.setFrom$1(this);
      argStorage = other._v2storage;
      t1[0] = t1[0] - argStorage[0];
      t1[1] = t1[1] - argStorage[1];
      return t2;
    },
    $add: function(_, other) {
      var t1 = new T.Vector2(new Float32Array(2));
      t1.setFrom$1(this);
      t1.add$1(0, other);
      return t1;
    },
    $mul: function(_, scale) {
      var t1 = new T.Vector2(new Float32Array(2));
      t1.setFrom$1(this);
      t1.scale$1(0, scale);
      return t1;
    },
    get$length: function(_) {
      var t1 = this._v2storage,
        t2 = t1[0];
      t1 = t1[1];
      return Math.sqrt(t2 * t2 + t1 * t1);
    },
    get$length2: function() {
      var t1 = this._v2storage,
        t2 = t1[0];
      t1 = t1[1];
      return t2 * t2 + t1 * t1;
    },
    normalize$0: function(_) {
      var d, t1,
        l = Math.sqrt(this.get$length2());
      if (l === 0)
        return 0;
      d = 1 / l;
      t1 = this._v2storage;
      t1[0] = t1[0] * d;
      t1[1] = t1[1] * d;
      return l;
    },
    normalized$0: function() {
      var t1 = new T.Vector2(new Float32Array(2));
      t1.setFrom$1(this);
      t1.normalize$0(0);
      return t1;
    },
    add$1: function(_, arg) {
      var argStorage = arg._v2storage,
        t1 = this._v2storage;
      t1[0] = t1[0] + argStorage[0];
      t1[1] = t1[1] + argStorage[1];
    },
    scale$1: function(_, arg) {
      var t1 = this._v2storage,
        t2 = t1[1];
      if (typeof arg !== "number")
        return H.iae(arg);
      t1[1] = t2 * arg;
      t1[0] = t1[0] * arg;
    }
  };
  M.AStar.prototype = {
    findNextActiveNode$0: function() {
      var t1, t2, t3, pathsOfOpen, pathsOfOpenHeuristic, t4, t5, t6, t7, t8, t9, t10, t11, _this = this, _s5_ = "green",
        _s14_ = "pleaseSetStyle",
        _s6_ = "yellow",
        nStar = _this.open.reduce$1(0, new M.AStar_findNextActiveNode_closure(_this));
      if (_this.nextTurn - 1 === _this._turnOfHistory) {
        t1 = _this.open;
        t2 = K.PathHighlight;
        t3 = H.getTypeArgumentByIndex(t1, 0);
        pathsOfOpen = P.List_List$from(new H.EfficientLengthMappedIterable(t1, H.functionTypeCheck(new M.AStar_findNextActiveNode_closure0(_this), {func: 1, ret: t2, args: [t3]}), [t3, t2]), true, t2);
        t3 = _this.open;
        t1 = H.getTypeArgumentByIndex(t3, 0);
        pathsOfOpenHeuristic = P.List_List$from(new H.EfficientLengthMappedIterable(t3, H.functionTypeCheck(new M.AStar_findNextActiveNode_closure1(_this), {func: 1, ret: t2, args: [t1]}), [t1, t2]), true, t2);
        t2 = _this.searchHistory;
        C.JSArray_methods.add$1(t2._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
        t1 = K.Highlight;
        t3 = [t1];
        t4 = E.Position;
        t5 = [t4];
        t2.addEMM$4("First we look at all nodes which are ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t4 = H.assertSubtype(_this.open, "$isIterable", [t4], "$asIterable");
        t2.addEMM$4("marked open", _s5_, H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t3), t4);
        t2.addEMM$4(". From all these nodes we know a ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("path", _s5_, H.assertSubtype(pathsOfOpen, "$isIterable", [t1], "$asIterable"), H.setRuntimeTypeInfo([null], t5));
        t2.addEMM$4(" from the source node to them. ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("Therefore we also know the ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t1 = [[P.Iterable, K.Highlight], [P.Iterable, E.Position]];
        t4 = [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]];
        t6 = [t4];
        t7 = H.setRuntimeTypeInfo([new S.Tuple2(pathsOfOpen, H.setRuntimeTypeInfo([null], t5), t1)], t6);
        t8 = _this.open;
        t9 = H.getTypeArgumentByIndex(t8, 0);
        C.JSArray_methods.addAll$1(t7, new H.EfficientLengthMappedIterable(t8, H.functionTypeCheck(new M.AStar_findNextActiveNode_closure2(_this), {func: 1, ret: t4, args: [t9]}), [t9, t4]));
        t2.addEM_$3("distance", _s5_, t7);
        t2.addEMM$4(" between them. ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("And when we also use the ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t7 = _this.heuristic;
        t9 = H.S(t7);
        t8 = H.setRuntimeTypeInfo([new S.Tuple2(pathsOfOpenHeuristic, H.setRuntimeTypeInfo([null], t5), t1)], t6);
        t10 = _this.open;
        t11 = H.getTypeArgumentByIndex(t10, 0);
        C.JSArray_methods.addAll$1(t8, new H.EfficientLengthMappedIterable(t10, H.functionTypeCheck(new M.AStar_findNextActiveNode_closure3(_this), {func: 1, ret: t4, args: [t11]}), [t11, t4]));
        t2.addEM_$3(t9, _s6_, t8);
        t2.addEMM$4(" as our heuristic, we can approximate the distance of the nodes to the target node. ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("When we now add both distances, we can ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t8 = H.setRuntimeTypeInfo([new S.Tuple2(pathsOfOpen, H.setRuntimeTypeInfo([null], t5), t1)], t6);
        C.JSArray_methods.add$1(t8, new S.Tuple2(pathsOfOpenHeuristic, H.setRuntimeTypeInfo([null], t5), t1));
        t9 = _this.open;
        t11 = H.getTypeArgumentByIndex(t9, 0);
        C.JSArray_methods.addAll$1(t8, new H.EfficientLengthMappedIterable(t9, H.functionTypeCheck(new M.AStar_findNextActiveNode_closure4(_this), {func: 1, ret: t4, args: [t11]}), [t11, t4]));
        t2.addEM_$3("approximate the total distance", _s6_, t8);
        t2.addEMM$4(" from the source node to our target node over the open marked nodes. ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("We will now take the node of them, which has the ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t8 = _this.getPath$1(nStar);
        t4 = H.setRuntimeTypeInfo(t8.slice(0), [H.getTypeArgumentByIndex(t8, 0)]);
        t8 = _this.target;
        t2.addEM_$3("shortest approximated total distance", _s5_, H.setRuntimeTypeInfo([new S.Tuple2(H.setRuntimeTypeInfo([K.PathHighlight$(t4, true), K.PathHighlight$styled("yellow dotted", t7.getPath$2(nStar, t8), null, true, null)], t3), H.setRuntimeTypeInfo([null], t5), t1), new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(t7.calc$2(nStar, t8) + _this.getDistance$1(nStar).length$0(0), 3), _s14_)], t3), H.setRuntimeTypeInfo([nStar], t5), t1)], t6));
        t2.addEMM$4(" to the target node and make him to the ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("current selected node", _s6_, H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t3), H.setRuntimeTypeInfo([nStar], t5));
        t2.addEMM$4(" of this iteration. We will also mark him closed, so we can say for sure, that we have found the shortest way from the source node to him. ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t5));
      }
      return nStar;
    }
  };
  M.AStar_closure.prototype = {
    call$5: function(grid, startPosition, targetPosition, heuristic, turnOfHistory) {
      var t1 = new M.AStar("A*", grid, startPosition, targetPosition, heuristic, turnOfHistory, Y.SearchHistory$(F.Size$fromMap(H.interceptedTypeCast(grid._GridCache$_store._StoreTransferAble$_store.$index(0, "size"), "$isMap"))));
      t1.searched = false;
      t1.BasicSearchAlgorithm$6("A*", grid, startPosition, targetPosition, heuristic, turnOfHistory);
      return t1;
    },
    $signature: 61
  };
  M.AStar_findNextActiveNode_closure.prototype = {
    call$2: function(n1, n2) {
      var t1, t2, t3;
      H.interceptedTypeCheck(n1, "$isPosition");
      H.interceptedTypeCheck(n2, "$isPosition");
      t1 = this.$this;
      t2 = t1.heuristic;
      t3 = t1.target;
      return t1.getDistance$1(n1).length$0(0) + t2.calc$2(n1, t3) < t1.getDistance$1(n2).length$0(0) + t2.calc$2(n2, t3) ? n1 : n2;
    },
    $signature: 31
  };
  M.AStar_findNextActiveNode_closure0.prototype = {
    call$1: function(on) {
      var t1 = this.$this.getPath$1(H.interceptedTypeCheck(on, "$isPosition"));
      t1 = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      return K.PathHighlight$styled("green", t1, null, true, null);
    },
    $signature: 8
  };
  M.AStar_findNextActiveNode_closure1.prototype = {
    call$1: function(on) {
      var t1 = this.$this;
      return K.PathHighlight$styled("yellow dotted", t1.heuristic.getPath$2(H.interceptedTypeCheck(on, "$isPosition"), t1.target), null, true, null);
    },
    $signature: 8
  };
  M.AStar_findNextActiveNode_closure2.prototype = {
    call$1: function(on) {
      H.interceptedTypeCheck(on, "$isPosition");
      return new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(this.$this.getDistance$1(on).length$0(0), 3), "pleaseSetStyle")], [K.Highlight]), H.setRuntimeTypeInfo([on], [E.Position]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    },
    $signature: 9
  };
  M.AStar_findNextActiveNode_closure3.prototype = {
    call$1: function(on) {
      var t1;
      H.interceptedTypeCheck(on, "$isPosition");
      t1 = this.$this;
      return new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(t1.heuristic.calc$2(on, t1.target), 3), "pleaseSetStyle")], [K.Highlight]), H.setRuntimeTypeInfo([on], [E.Position]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    },
    $signature: 9
  };
  M.AStar_findNextActiveNode_closure4.prototype = {
    call$1: function(on) {
      var t1;
      H.interceptedTypeCheck(on, "$isPosition");
      t1 = this.$this;
      return new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(t1.heuristic.calc$2(on, t1.target) + t1.getDistance$1(on).length$0(0), 3), "pleaseSetStyle")], [K.Highlight]), H.setRuntimeTypeInfo([on], [E.Position]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    },
    $signature: 9
  };
  S.Algorithm.prototype = {
    run$0: function() {
      if (!this.searched) {
        this.searched = true;
        this.runInner$0();
      } else
        throw H.wrapException(P.Exception_Exception("Already run"));
    },
    get$target: function(receiver) {
      return this.target;
    }
  };
  K.Array2D.prototype = {
    Array2D$2: function(size, _producer, $T) {
      this.set$_Array2D$_array(P.List_List$generate(size.width, new K.Array2D_closure(this, size, $T), [P.List, $T]));
    },
    set$_Array2D$_array: function(_array) {
      this._Array2D$_array = H.assertSubtype(_array, "$isList", [[P.List, H.getRuntimeTypeArgument(this, "Array2D", 0)]], "$asList");
    }
  };
  K.Array2D_closure.prototype = {
    call$1: function(x) {
      var t1 = this.T;
      return P.List_List$generate(this.size.height, new K.Array2D__closure(this.$this, x, t1), t1);
    },
    $signature: function() {
      return {func: 1, ret: [P.List, this.T], args: [P.int]};
    }
  };
  K.Array2D__closure.prototype = {
    call$1: function(y) {
      return this.$this._producer.call$1(new E.Position(this.x, y));
    },
    $signature: function() {
      return {func: 1, ret: this.T, args: [P.int]};
    }
  };
  D.Barrier.prototype = {
    isAnyBlocked$0: function() {
      var t1 = this._blocked;
      return t1.get$values(t1).any$1(0, new D.Barrier_isAnyBlocked_closure());
    },
    toMap$0: function() {
      var t1 = this._blocked,
        t2 = t1.get$keys(t1),
        t3 = P.String,
        t4 = H.getRuntimeTypeArgument(t2, "Iterable", 0);
      return P.LinkedHashMap_LinkedHashMap$fromIterables(H.MappedIterable_MappedIterable(t2, H.functionTypeCheck(new D.Barrier_toMap_closure(), {func: 1, ret: t3, args: [t4]}), t4, t3), t1.get$values(t1), t3, P.bool);
    }
  };
  D.Barrier$fromMap_closure.prototype = {
    call$1: function(d) {
      return C.JSArray_methods.$index(C.List_4j7, P.int_parse(H.stringTypeCast(d)));
    },
    $signature: 54
  };
  D.Barrier$fromMap_closure0.prototype = {
    call$1: function(d) {
      return H.boolTypeCast(d);
    },
    $signature: 15
  };
  D.Barrier_isAnyBlocked_closure.prototype = {
    call$1: function(blocked) {
      return H.boolTypeCheck(blocked);
    },
    $signature: 66
  };
  D.Barrier_toMap_closure.prototype = {
    call$1: function(d) {
      return "" + H.interceptedTypeCheck(d, "$isDirection").index;
    },
    $signature: 67
  };
  E.BarrierManager.prototype = {
    _setDirect$3: function(position, direction, shouldBecomeBlocked) {
      var t1 = this._BarrierManager$_store,
        t2 = t1.getBarrier$1(position);
      t2._blocked.$indexSet(0, direction, shouldBecomeBlocked);
      t1.$set$2(0, "barrier_" + H.S(position), t2.toMap$0());
    },
    somethingToDisplay$1: function(position) {
      var interestingDirections,
        directionMode = C.JSArray_methods.$index(C.List_Ql0, H.intTypeCast(this._BarrierManager$_store._StoreTransferAble$_store.$index(0, "directionMode")));
      if (directionMode === C.DirectionMode_1)
        interestingDirections = C.List_9Ef;
      else
        interestingDirections = directionMode === C.DirectionMode_2 ? C.List_O1c : C.List_4j7;
      return C.JSArray_methods.every$1(interestingDirections, new E.BarrierManager_somethingToDisplay_closure(this, position));
    },
    leaveAble$2: function(position, direction) {
      var isDirectlyBlocked, _this = this,
        t1 = _this._BarrierManager$_store._StoreTransferAble$_store,
        gridMode = C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(t1.$index(0, "gridMode"))),
        directionMode = C.JSArray_methods.$index(C.List_Ql0, H.intTypeCast(t1.$index(0, "directionMode"))),
        cornerMode = C.JSArray_methods.$index(C.List_CornerMode_0_CornerMode_1, H.intTypeCast(t1.$index(0, "cornerMode"))),
        directionalMode = C.JSArray_methods.$index(C.List_WPn, H.intTypeCast(t1.$index(0, "directionalMode")));
      if (!position.legal$1(F.Size$fromMap(H.interceptedTypeCast(t1.$index(0, "size"), "$isMap"))))
        return false;
      if (gridMode === C.GridMode_0)
        isDirectlyBlocked = _this._leaveBlockedDirectly$2(position, direction) || _this._enterBlockedDirectly$2(position, direction);
      else
        isDirectlyBlocked = _this._leaveBlockedDirectly$2(position, direction);
      if (isDirectlyBlocked)
        return false;
      if (directionMode === C.DirectionMode_1) {
        if (C.JSArray_methods.contains$1(C.List_O1c, direction))
          return false;
      } else if (directionMode === C.DirectionMode_2)
        if (C.JSArray_methods.contains$1(C.List_9Ef, direction))
          return false;
      if (directionalMode === C.DirectionalMode_1)
        if (_this._enterBlockedDirectly$2(position, direction))
          return false;
      if (C.JSArray_methods.contains$1(C.List_O1c, direction) && cornerMode === C.CornerMode_1)
        if (_this._enterBlockedDirectly$2(position, direction) || _this._leaveBlockedDirectly$2(position.goMulti$2(O.Directions_turn(direction, 45), 1), O.Directions_turn(direction, -90)) || _this._enterBlockedDirectly$2(position.goMulti$2(O.Directions_turn(direction, 45), 1), O.Directions_turn(direction, -90)))
          return false;
      return true;
    },
    _leaveBlockedDirectly$2: function(position, direction) {
      var t1 = this._BarrierManager$_store,
        t2 = t1._StoreTransferAble$_store,
        gridMode = C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(t2.$index(0, "gridMode"))),
        targetPosition = position.goMulti$2(direction, 1);
      if (targetPosition.legal$1(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, "size"), "$isMap"))))
        if (position.legal$1(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, "size"), "$isMap"))))
          t1 = H.boolConversionCheck(gridMode === C.GridMode_0 ? t1.getBarrier$1(targetPosition).isAnyBlocked$0() : t1.getBarrier$1(targetPosition)._blocked.$index(0, O.Directions_turn(direction, 180)));
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    },
    _enterBlockedDirectly$2: function(position, direction) {
      var t1 = this._BarrierManager$_store,
        t2 = t1._StoreTransferAble$_store,
        gridMode = C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(t2.$index(0, "gridMode")));
      if (position.goMulti$2(direction, 1).legal$1(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, "size"), "$isMap"))))
        if (position.legal$1(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, "size"), "$isMap"))))
          t1 = H.boolConversionCheck(gridMode === C.GridMode_0 ? t1.getBarrier$1(position).isAnyBlocked$0() : t1.getBarrier$1(position)._blocked.$index(0, direction));
        else
          t1 = true;
      else
        t1 = true;
      return t1;
    }
  };
  E.BarrierManager_somethingToDisplay_closure.prototype = {
    call$1: function(direction) {
      H.interceptedTypeCheck(direction, "$isDirection");
      return this.$this.leaveAble$2(this.position.goMulti$2(direction, 1), O.Directions_turn(direction, 180));
    },
    $signature: 12
  };
  D.BasicSearchAlgorithm.prototype = {
    BasicSearchAlgorithm$6: function($name, grid, startPosition, targetPosition, heuristic, turnOfHistory) {
      var _this = this,
        t1 = E.Position;
      _this.set$distance(new H.JsLinkedHashMap([t1, X.Distance]));
      _this.set$parent(0, new H.JsLinkedHashMap([t1, t1]));
      _this.set$open(0, P.LinkedHashSet_LinkedHashSet(t1));
      _this.set$closed(0, P.LinkedHashSet_LinkedHashSet(t1));
    },
    getDistance$1: function(n) {
      return this.distance.containsKey$1(0, n) ? this.distance.$index(0, n) : $.$get$Distance_INFINITY();
    },
    getPath$1: function(n) {
      var path, t1, intermediateNode;
      if (this.parent.$index(0, n) == null)
        return H.setRuntimeTypeInfo([], [E.Position]);
      path = H.setRuntimeTypeInfo([], [E.Position]);
      C.JSArray_methods.add$1(path, n);
      for (t1 = this.start, intermediateNode = n; !J.$eq$(intermediateNode, t1);) {
        intermediateNode = this.parent.$index(0, intermediateNode);
        C.JSArray_methods.add$1(path, intermediateNode);
      }
      return new H.ReversedListIterable(path, [H.getTypeArgumentByIndex(path, 0)]).toList$0(0);
    },
    runInner$0: function() {
      var t1, t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, turn, nStar, t16, t17, updatedNodes, optimalPath, neighbours, neighboursMarkedClosed, neighboursMarkedOpen, neighboursUnmarked, pathsOfClosed, __s, is_are, a__, it_them, t18, pathsOfOpen, maybeNewPathsOfOpen, t19, t20, neighboursMarkedOpenBetterPath, has_have, newPathsOfOpen, pathsOfUnmarked, _this = this, _null = null,
        _s11_ = "enumeration",
        _s10_ = "start node",
        _s5_ = "green",
        _s14_ = "pleaseSetStyle",
        _s10_0 = "background",
        _s4_ = "grey",
        _s11_0 = "target node",
        _s4_0 = "blue",
        _s10_1 = "foreground",
        _s6_ = "yellow", _s4_1 = "them",
        _s25_ = " from the source node to ",
        _s16_ = " Algorithm took ";
      ++_this.nextTurn;
      t1 = _this.start;
      _this.distance.$indexSet(0, t1, new X.Distance(0, 0));
      _this.open.add$1(0, t1);
      t2 = _this._turnOfHistory;
      if (_this.nextTurn - 1 === t2) {
        t3 = _this.searchHistory;
        t3.stepTitle = "Setup";
        t4 = [M.ExplanationPart];
        t5 = t3._stepDescription;
        C.JSArray_methods.add$1(t5, new M.Explanation("", H.setRuntimeTypeInfo([], t4)));
        t6 = [K.Highlight];
        t7 = [E.Position];
        t3.addEMM$4("For the setup we: ", "", H.setRuntimeTypeInfo([], t6), H.setRuntimeTypeInfo([], t7));
        C.JSArray_methods.add$1(t5, new M.Explanation(_s11_, H.setRuntimeTypeInfo([], t4)));
        t3.addEMM$4("Set all nodes unmarked.", "", H.setRuntimeTypeInfo([], t6), H.setRuntimeTypeInfo([], t7));
        C.JSArray_methods.add$1(t5, new M.Explanation(_s11_, H.setRuntimeTypeInfo([], t4)));
        t3.addEMM$4("Set the distance from our ", "", H.setRuntimeTypeInfo([], t6), H.setRuntimeTypeInfo([], t7));
        t3.addEMM$4(_s10_, _s5_, H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t6), H.setRuntimeTypeInfo([t1], t7));
        t3.addEMM$4(" to our ", "", H.setRuntimeTypeInfo([], t6), H.setRuntimeTypeInfo([], t7));
        t3.addEMM$4(_s10_, _s5_, H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t6), H.setRuntimeTypeInfo([t1], t7));
        t3.addEMM$4(" to 0.0.", "", H.setRuntimeTypeInfo([], t6), H.setRuntimeTypeInfo([], t7));
        C.JSArray_methods.add$1(t5, new M.Explanation(_s11_, H.setRuntimeTypeInfo([], t4)));
        t3.addEMM$4("Mark our ", "", H.setRuntimeTypeInfo([], t6), H.setRuntimeTypeInfo([], t7));
        t3.addEMM$4("start node open", _s5_, H.setRuntimeTypeInfo([new K.BoxHighlight(_s14_)], t6), H.setRuntimeTypeInfo([t1], t7));
        t3.addEMM$4(".", "", H.setRuntimeTypeInfo([], t6), H.setRuntimeTypeInfo([], t7));
      }
      for (t3 = _this.target, t4 = E.Position, t5 = _this.searchHistory, t6 = K.Highlight, t7 = [t6], t6 = [t6], t8 = [t4], t9 = [[P.Iterable, K.Highlight], [P.Iterable, E.Position]], t10 = [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]], t11 = [t10], t12 = [t4], t13 = [M.ExplanationPart], t14 = t5._stepDescription, t15 = K.PathHighlight, turn = 1; _this.open._collection$_length !== 0; ++turn) {
        if (++_this.nextTurn - 1 === t2)
          t5.stepTitle = "Iteration " + turn;
        nStar = _this.findNextActiveNode$0();
        if (_this.nextTurn - 1 === t2) {
          t16 = new K.BoxHighlight(_s14_);
          t16.style = _s5_;
          t16 = H.setRuntimeTypeInfo([t16], t7);
          t17 = _this.open;
          t5.addHM$2(_s10_0, H.setRuntimeTypeInfo([new S.Tuple2(H.assertSubtype(t16, "$isIterable", t6, "$asIterable"), H.assertSubtype(t17, "$isIterable", t8, "$asIterable"), t9)], t11));
          t17 = new K.BoxHighlight(_s14_);
          t17.style = _s4_;
          t17 = H.setRuntimeTypeInfo([t17], t7);
          t16 = _this.closed;
          t5.addHM$2(_s10_0, H.setRuntimeTypeInfo([new S.Tuple2(H.assertSubtype(t17, "$isIterable", t6, "$asIterable"), H.assertSubtype(t16, "$isIterable", t8, "$asIterable"), t9)], t11));
        }
        updatedNodes = P.LinkedHashSet_LinkedHashSet(t4);
        if (J.$eq$(nStar, t3)) {
          if (_this.nextTurn - 1 === t2) {
            t2 = _this.getPath$1(t3);
            t2 = H.setRuntimeTypeInfo(t2.slice(0), [H.getTypeArgumentByIndex(t2, 0)]);
            optimalPath = K.PathHighlight$styled("blue blinking", t2, _null, true, _null);
            C.JSArray_methods.add$1(t14, new M.Explanation("", H.setRuntimeTypeInfo([], t13)));
            t2 = H.setRuntimeTypeInfo([], t7);
            t4 = H.setRuntimeTypeInfo([], t12);
            H.assertSubtype(t2, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t4, "$isIterable", t8, "$asIterable");
            t5.addEM_$3("As our current selected node is our ", "", C.JSArray_methods.get$isNotEmpty(t2) ? H.setRuntimeTypeInfo([new S.Tuple2(t2, t4, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t2 = H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t7);
            t4 = H.setRuntimeTypeInfo([t3], t12);
            H.assertSubtype(t2, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t4, "$isIterable", t8, "$asIterable");
            t5.addEM_$3(_s11_0, "red", C.JSArray_methods.get$isNotEmpty(t2) ? H.setRuntimeTypeInfo([new S.Tuple2(t2, t4, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t2 = H.setRuntimeTypeInfo([], t7);
            t4 = H.setRuntimeTypeInfo([], t12);
            H.assertSubtype(t2, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t4, "$isIterable", t8, "$asIterable");
            t5.addEM_$3(", the algorithm can finish and we have found an ", "", C.JSArray_methods.get$isNotEmpty(t2) ? H.setRuntimeTypeInfo([new S.Tuple2(t2, t4, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t2 = H.setRuntimeTypeInfo([optimalPath], t7);
            t4 = H.setRuntimeTypeInfo([null], t12);
            H.assertSubtype(t2, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t4, "$isIterable", t8, "$asIterable");
            t5.addEM_$3("optimal path", _s4_0, C.JSArray_methods.get$isNotEmpty(t2) ? H.setRuntimeTypeInfo([new S.Tuple2(t2, t4, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t2 = H.setRuntimeTypeInfo([], t7);
            t4 = H.setRuntimeTypeInfo([], t12);
            H.assertSubtype(t2, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t4, "$isIterable", t8, "$asIterable");
            t5.addEM_$3(" from the ", "", C.JSArray_methods.get$isNotEmpty(t2) ? H.setRuntimeTypeInfo([new S.Tuple2(t2, t4, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t2 = H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t7);
            t4 = H.setRuntimeTypeInfo([t1], t12);
            H.assertSubtype(t2, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t4, "$isIterable", t8, "$asIterable");
            t5.addEM_$3("source node", _s5_, C.JSArray_methods.get$isNotEmpty(t2) ? H.setRuntimeTypeInfo([new S.Tuple2(t2, t4, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t1 = H.setRuntimeTypeInfo([], t7);
            t2 = H.setRuntimeTypeInfo([], t12);
            H.assertSubtype(t1, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t2, "$isIterable", t8, "$asIterable");
            t5.addEM_$3(" to the ", "", C.JSArray_methods.get$isNotEmpty(t1) ? H.setRuntimeTypeInfo([new S.Tuple2(t1, t2, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t1 = H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t7);
            t2 = H.setRuntimeTypeInfo([t3], t12);
            H.assertSubtype(t1, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t2, "$isIterable", t8, "$asIterable");
            t5.addEM_$3(_s11_0, "red", C.JSArray_methods.get$isNotEmpty(t1) ? H.setRuntimeTypeInfo([new S.Tuple2(t1, t2, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t1 = H.setRuntimeTypeInfo([], t7);
            t2 = H.setRuntimeTypeInfo([], t12);
            H.assertSubtype(t1, "$isIterable", t6, "$asIterable");
            H.assertSubtype(t2, "$isIterable", t8, "$asIterable");
            t5.addEM_$3(".", "", C.JSArray_methods.get$isNotEmpty(t1) ? H.setRuntimeTypeInfo([new S.Tuple2(t1, t2, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            t1 = H.setRuntimeTypeInfo([optimalPath], t7);
            t2 = H.setRuntimeTypeInfo([null], t12);
            t5.addHM$2(_s10_1, H.setRuntimeTypeInfo([new S.Tuple2(H.assertSubtype(t1, "$isIterable", t6, "$asIterable"), H.assertSubtype(t2, "$isIterable", t8, "$asIterable"), t9)], t11));
            t2 = new K.DotHighlight(_s14_);
            t2.style = _s6_;
            t2 = H.setRuntimeTypeInfo([t2], t7);
            t1 = H.setRuntimeTypeInfo([nStar], t12);
            t5.addHM$2(_s10_1, H.setRuntimeTypeInfo([new S.Tuple2(H.assertSubtype(t2, "$isIterable", t6, "$asIterable"), H.assertSubtype(t1, "$isIterable", t8, "$asIterable"), t9)], t11));
          }
          t5.foundPath = true;
          break;
        } else {
          neighbours = _this.findNeighbourNodes$1(nStar);
          t16 = J.getInterceptor$ax(neighbours);
          t17 = t16.where$1(neighbours, new D.BasicSearchAlgorithm_runInner_closure(_this));
          neighboursMarkedClosed = P.List_List$from(t17, true, H.getTypeArgumentByIndex(t17, 0));
          t17 = t16.where$1(neighbours, new D.BasicSearchAlgorithm_runInner_closure0(_this));
          neighboursMarkedOpen = P.List_List$from(t17, true, H.getTypeArgumentByIndex(t17, 0));
          t16 = t16.where$1(neighbours, new D.BasicSearchAlgorithm_runInner_closure1(_this));
          neighboursUnmarked = P.List_List$from(t16, true, H.getTypeArgumentByIndex(t16, 0));
          if (neighboursMarkedClosed.length !== 0)
            if (_this.nextTurn - 1 === t2) {
              t16 = H.getTypeArgumentByIndex(neighboursMarkedClosed, 0);
              pathsOfClosed = new H.MappedListIterable(neighboursMarkedClosed, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure2(_this), {func: 1, ret: t15, args: [t16]}), [t16, t15]).toList$0(0);
              t16 = neighboursMarkedClosed.length === 1;
              __s = t16 ? "" : "s";
              is_are = t16 ? "is" : "are";
              a__ = t16 ? "a " : "";
              it_them = t16 ? "it" : _s4_1;
              C.JSArray_methods.add$1(t14, new M.Explanation(_s11_, H.setRuntimeTypeInfo([], t13)));
              t16 = "" + neighboursMarkedClosed.length + " neighbour node" + __s + " which " + is_are + " ";
              t17 = H.setRuntimeTypeInfo([], t7);
              t18 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t17, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t18, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t16, "", C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, t18, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              H.assertSubtype(neighboursMarkedClosed, "$isIterable", t8, "$asIterable");
              t16 = H.assertSubtype(H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t7), "$isIterable", t6, "$asIterable");
              t5.addEM_$3("marked closed", _s4_, C.JSArray_methods.get$isNotEmpty(t16) ? H.setRuntimeTypeInfo([new S.Tuple2(t16, neighboursMarkedClosed, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t16 = " " + is_are + " ignored as we have already found " + a__;
              t17 = H.setRuntimeTypeInfo([], t7);
              t18 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t17, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t18, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t16, "", C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, t18, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t16 = "optimal path" + __s;
              H.assertSubtype(pathsOfClosed, "$isIterable", t6, "$asIterable");
              t17 = H.assertSubtype(H.setRuntimeTypeInfo([null], t12), "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t16, _s4_, C.JSArray_methods.get$isNotEmpty(pathsOfClosed) ? H.setRuntimeTypeInfo([new S.Tuple2(pathsOfClosed, t17, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t16 = _s25_ + it_them + ". ";
              t17 = H.setRuntimeTypeInfo([], t7);
              t18 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t17, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t18, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t16, "", C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, t18, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            }
          if (neighboursMarkedOpen.length !== 0) {
            if (_this.nextTurn - 1 === t2) {
              t16 = H.getTypeArgumentByIndex(neighboursMarkedOpen, 0);
              t17 = {func: 1, ret: t15, args: [t16]};
              t18 = [t16, t15];
              pathsOfOpen = new H.MappedListIterable(neighboursMarkedOpen, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure3(_this), t17), t18).toList$0(0);
              maybeNewPathsOfOpen = new H.MappedListIterable(neighboursMarkedOpen, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure4(_this, nStar), t17), t18).toList$0(0);
              t17 = neighboursMarkedOpen.length === 1;
              __s = t17 ? "" : "s";
              is_are = t17 ? "is" : "are";
              it_them = t17 ? "it" : _s4_1;
              C.JSArray_methods.add$1(t14, new M.Explanation(_s11_, H.setRuntimeTypeInfo([], t13)));
              t17 = "" + neighboursMarkedOpen.length + " neighbour node" + __s + " which " + is_are + " ";
              t18 = H.setRuntimeTypeInfo([], t7);
              t19 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t18, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t19, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t17, "", C.JSArray_methods.get$isNotEmpty(t18) ? H.setRuntimeTypeInfo([new S.Tuple2(t18, t19, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              H.assertSubtype(neighboursMarkedOpen, "$isIterable", t8, "$asIterable");
              t17 = H.assertSubtype(H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t7), "$isIterable", t6, "$asIterable");
              t5.addEM_$3("marked open", _s5_, C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, neighboursMarkedOpen, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t17 = " " + is_are + " checked, if we can have an maybe more optimal ";
              t18 = H.setRuntimeTypeInfo([], t7);
              t19 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t18, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t19, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t17, "", C.JSArray_methods.get$isNotEmpty(t18) ? H.setRuntimeTypeInfo([new S.Tuple2(t18, t19, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t17 = H.setRuntimeTypeInfo([new S.Tuple2(maybeNewPathsOfOpen, H.setRuntimeTypeInfo([null], t12), t9)], t11);
              t18 = {func: 1, ret: t10, args: [t16]};
              t16 = [t16, t10];
              C.JSArray_methods.addAll$1(t17, new H.MappedListIterable(neighboursMarkedOpen, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure5(_this, nStar), t18), t16));
              t5.addEM_$3("new path", _s4_0, t17);
              t17 = " from our source node to " + it_them + " over the current selected node than the ";
              t19 = H.setRuntimeTypeInfo([], t7);
              t20 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t19, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t20, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t17, "", C.JSArray_methods.get$isNotEmpty(t19) ? H.setRuntimeTypeInfo([new S.Tuple2(t19, t20, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t17 = H.setRuntimeTypeInfo([new S.Tuple2(pathsOfOpen, H.setRuntimeTypeInfo([null], t12), t9)], t11);
              C.JSArray_methods.addAll$1(t17, new H.MappedListIterable(neighboursMarkedOpen, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure6(_this), t18), t16));
              t5.addEM_$3("current path", _s5_, t17);
              t17 = " which we have already found for " + it_them + ". ";
              t16 = H.setRuntimeTypeInfo([], t7);
              t18 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t16, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t18, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t17, "", C.JSArray_methods.get$isNotEmpty(t16) ? H.setRuntimeTypeInfo([new S.Tuple2(t16, t18, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            }
            t16 = H.getTypeArgumentByIndex(neighboursMarkedOpen, 0);
            neighboursMarkedOpenBetterPath = P.List_List$from(new H.WhereIterable(neighboursMarkedOpen, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure7(_this, nStar), {func: 1, ret: P.bool, args: [t16]}), [t16]), true, t16);
            if (neighboursMarkedOpenBetterPath.length === 0) {
              if (_this.nextTurn - 1 === t2) {
                t16 = neighboursMarkedOpen.length;
                t17 = t16 === 1;
                __s = t17 ? "" : "s";
                has_have = t17 ? "has" : "have";
                t16 = "But " + (t17 ? "this" : "all " + t16) + " node" + __s + " already " + has_have + " a good path. ";
                t18 = H.setRuntimeTypeInfo([], t7);
                t19 = H.setRuntimeTypeInfo([], t12);
                H.assertSubtype(t18, "$isIterable", t6, "$asIterable");
                H.assertSubtype(t19, "$isIterable", t8, "$asIterable");
                t5.addEM_$3(t16, "", C.JSArray_methods.get$isNotEmpty(t18) ? H.setRuntimeTypeInfo([new S.Tuple2(t18, t19, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              }
            } else {
              C.JSArray_methods.forEach$1(neighboursMarkedOpenBetterPath, new D.BasicSearchAlgorithm_runInner_closure8(_this, nStar, updatedNodes));
              if (_this.nextTurn - 1 === t2) {
                t16 = H.getTypeArgumentByIndex(neighboursMarkedOpenBetterPath, 0);
                newPathsOfOpen = new H.MappedListIterable(neighboursMarkedOpenBetterPath, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure9(_this), {func: 1, ret: t15, args: [t16]}), [t16, t15]).toList$0(0);
                t16 = neighboursMarkedOpenBetterPath.length === 1;
                __s = t16 ? "" : "s";
                t17 = "And we also found " + (t16 ? "a " : "");
                t18 = H.setRuntimeTypeInfo([], t7);
                t19 = H.setRuntimeTypeInfo([], t12);
                H.assertSubtype(t18, "$isIterable", t6, "$asIterable");
                H.assertSubtype(t19, "$isIterable", t8, "$asIterable");
                t5.addEM_$3(t17, "", C.JSArray_methods.get$isNotEmpty(t18) ? H.setRuntimeTypeInfo([new S.Tuple2(t18, t19, t9)], t11) : H.setRuntimeTypeInfo([], t11));
                t16 = "better path" + __s;
                H.assertSubtype(newPathsOfOpen, "$isIterable", t6, "$asIterable");
                t17 = H.assertSubtype(H.setRuntimeTypeInfo([null], t12), "$isIterable", t8, "$asIterable");
                t5.addEM_$3(t16, _s4_0, C.JSArray_methods.get$isNotEmpty(newPathsOfOpen) ? H.setRuntimeTypeInfo([new S.Tuple2(newPathsOfOpen, t17, t9)], t11) : H.setRuntimeTypeInfo([], t11));
                t16 = H.setRuntimeTypeInfo([], t7);
                t17 = H.setRuntimeTypeInfo([], t12);
                H.assertSubtype(t16, "$isIterable", t6, "$asIterable");
                H.assertSubtype(t17, "$isIterable", t8, "$asIterable");
                t5.addEM_$3(" for ", "", C.JSArray_methods.get$isNotEmpty(t16) ? H.setRuntimeTypeInfo([new S.Tuple2(t16, t17, t9)], t11) : H.setRuntimeTypeInfo([], t11));
                t16 = "" + neighboursMarkedOpenBetterPath.length + " node" + __s;
                H.assertSubtype(neighboursMarkedOpenBetterPath, "$isIterable", t8, "$asIterable");
                t17 = H.assertSubtype(H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t7), "$isIterable", t6, "$asIterable");
                t5.addEM_$3(t16, _s5_, C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, neighboursMarkedOpenBetterPath, t9)], t11) : H.setRuntimeTypeInfo([], t11));
                t16 = H.setRuntimeTypeInfo([], t7);
                t17 = H.setRuntimeTypeInfo([], t12);
                H.assertSubtype(t16, "$isIterable", t6, "$asIterable");
                H.assertSubtype(t17, "$isIterable", t8, "$asIterable");
                t5.addEM_$3(". ", "", C.JSArray_methods.get$isNotEmpty(t16) ? H.setRuntimeTypeInfo([new S.Tuple2(t16, t17, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              }
            }
          }
          t16 = neighboursUnmarked.length;
          if (t16 !== 0) {
            if (_this.nextTurn - 1 === t2) {
              t16 = t16 === 1;
              __s = t16 ? "" : "s";
              is_are = t16 ? "is" : "are";
              C.JSArray_methods.add$1(t14, new M.Explanation(_s11_, H.setRuntimeTypeInfo([], t13)));
              t16 = "" + neighboursUnmarked.length + " neighbour node" + __s + " which " + is_are + " ";
              t17 = H.setRuntimeTypeInfo([], t7);
              t18 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t17, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t18, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t16, "", C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, t18, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              H.assertSubtype(neighboursUnmarked, "$isIterable", t8, "$asIterable");
              t16 = H.assertSubtype(H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t7), "$isIterable", t6, "$asIterable");
              t5.addEM_$3("unmarked", _s4_0, C.JSArray_methods.get$isNotEmpty(t16) ? H.setRuntimeTypeInfo([new S.Tuple2(t16, neighboursUnmarked, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t16 = " " + is_are + " marked as open ";
              t17 = H.setRuntimeTypeInfo([], t7);
              t18 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t17, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t18, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t16, "", C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, t18, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            }
            C.JSArray_methods.forEach$1(neighboursUnmarked, new D.BasicSearchAlgorithm_runInner_closure10(_this, nStar, updatedNodes));
            if (_this.nextTurn - 1 === t2) {
              t16 = H.getTypeArgumentByIndex(neighboursUnmarked, 0);
              pathsOfUnmarked = new H.MappedListIterable(neighboursUnmarked, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure11(_this), {func: 1, ret: t15, args: [t16]}), [t16, t15]).toList$0(0);
              it_them = neighboursUnmarked.length === 1 ? "it" : _s4_1;
              t16 = H.setRuntimeTypeInfo([], t7);
              t17 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t16, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t17, "$isIterable", t8, "$asIterable");
              t5.addEM_$3("and we set the new ", "", C.JSArray_methods.get$isNotEmpty(t16) ? H.setRuntimeTypeInfo([new S.Tuple2(t16, t17, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              H.assertSubtype(pathsOfUnmarked, "$isIterable", t6, "$asIterable");
              t16 = H.assertSubtype(H.setRuntimeTypeInfo([null], t12), "$isIterable", t8, "$asIterable");
              t5.addEM_$3("best path", _s4_0, C.JSArray_methods.get$isNotEmpty(pathsOfUnmarked) ? H.setRuntimeTypeInfo([new S.Tuple2(pathsOfUnmarked, t16, t9)], t11) : H.setRuntimeTypeInfo([], t11));
              t16 = _s25_ + it_them + " over our current selected node. ";
              t17 = H.setRuntimeTypeInfo([], t7);
              t18 = H.setRuntimeTypeInfo([], t12);
              H.assertSubtype(t17, "$isIterable", t6, "$asIterable");
              H.assertSubtype(t18, "$isIterable", t8, "$asIterable");
              t5.addEM_$3(t16, "", C.JSArray_methods.get$isNotEmpty(t17) ? H.setRuntimeTypeInfo([new S.Tuple2(t17, t18, t9)], t11) : H.setRuntimeTypeInfo([], t11));
            }
          }
        }
        _this.open.remove$1(0, nStar);
        _this.closed.add$1(0, nStar);
        if (_this.nextTurn - 1 === t2) {
          t16 = H.getTypeArgumentByIndex(updatedNodes, 0);
          t5.addHM$2(_s10_1, new H.EfficientLengthMappedIterable(updatedNodes, H.functionTypeCheck(new D.BasicSearchAlgorithm_runInner_closure12(nStar), {func: 1, ret: t10, args: [t16]}), [t16, t10]));
          t16 = new K.DotHighlight(_s14_);
          t16.style = _s6_;
          t16 = H.setRuntimeTypeInfo([t16], t7);
          t17 = H.setRuntimeTypeInfo([nStar], t12);
          t5.addHM$2(_s10_1, H.setRuntimeTypeInfo([new S.Tuple2(H.assertSubtype(t16, "$isIterable", t6, "$asIterable"), H.assertSubtype(t17, "$isIterable", t8, "$asIterable"), t9)], t11));
          t17 = H.setRuntimeTypeInfo([K.PathHighlight$styled(_s6_, _this.getPath$1(nStar), _null, true, _null)], t7);
          t16 = H.setRuntimeTypeInfo([null], t12);
          t5.addHM$2(_s10_1, H.setRuntimeTypeInfo([new S.Tuple2(H.assertSubtype(t17, "$isIterable", t6, "$asIterable"), H.assertSubtype(t16, "$isIterable", t8, "$asIterable"), t9)], t11));
        }
      }
      t5.stepCount = _this.nextTurn;
      t1 = _this.name;
      if (t5.foundPath)
        t5.title = "The " + t1 + _s16_ + turn + " iterations to find a " + C.JSNumber_methods.toStringAsPrecision$1(_this.getDistance$1(t3).length$0(0), 3) + " long path";
      else
        t5.title = "The " + t1 + _s16_ + turn + " iterations to find no path";
    },
    set$distance: function(distance) {
      this.distance = H.assertSubtype(distance, "$isMap", [E.Position, X.Distance], "$asMap");
    },
    set$parent: function(_, $parent) {
      var t1 = E.Position;
      this.parent = H.assertSubtype($parent, "$isMap", [t1, t1], "$asMap");
    },
    set$open: function(_, $open) {
      this.open = H.assertSubtype($open, "$isSet", [E.Position], "$asSet");
    },
    set$closed: function(_, $closed) {
      this.closed = H.assertSubtype($closed, "$isSet", [E.Position], "$asSet");
    }
  };
  D.BasicSearchAlgorithm_runInner_closure.prototype = {
    call$1: function(n) {
      H.interceptedTypeCheck(n, "$isPosition");
      return this.$this.closed.contains$1(0, n);
    },
    $signature: 10
  };
  D.BasicSearchAlgorithm_runInner_closure0.prototype = {
    call$1: function(n) {
      H.interceptedTypeCheck(n, "$isPosition");
      return this.$this.open.contains$1(0, n);
    },
    $signature: 10
  };
  D.BasicSearchAlgorithm_runInner_closure1.prototype = {
    call$1: function(n) {
      var t1;
      H.interceptedTypeCheck(n, "$isPosition");
      t1 = this.$this;
      return !t1.closed.contains$1(0, n) && !t1.open.contains$1(0, n);
    },
    $signature: 10
  };
  D.BasicSearchAlgorithm_runInner_closure2.prototype = {
    call$1: function(on) {
      var t1 = this.$this.getPath$1(H.interceptedTypeCheck(on, "$isPosition"));
      t1 = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      return K.PathHighlight$(t1, true);
    },
    $signature: 8
  };
  D.BasicSearchAlgorithm_runInner_closure3.prototype = {
    call$1: function(on) {
      var t1 = this.$this.getPath$1(H.interceptedTypeCheck(on, "$isPosition"));
      t1 = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      return K.PathHighlight$(t1, true);
    },
    $signature: 8
  };
  D.BasicSearchAlgorithm_runInner_closure4.prototype = {
    call$1: function(on) {
      var t1;
      H.interceptedTypeCheck(on, "$isPosition");
      t1 = H.setRuntimeTypeInfo([], [E.Position]);
      C.JSArray_methods.addAll$1(t1, this.$this.getPath$1(this.nStar));
      C.JSArray_methods.add$1(t1, on);
      return K.PathHighlight$(t1, true);
    },
    $signature: 8
  };
  D.BasicSearchAlgorithm_runInner_closure5.prototype = {
    call$1: function(on) {
      var t1;
      H.interceptedTypeCheck(on, "$isPosition");
      t1 = this.nStar;
      return new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(this.$this.getDistance$1(t1).$add(0, X.Distance$calc(t1, on)).length$0(0), 3), "pleaseSetStyle")], [K.Highlight]), H.setRuntimeTypeInfo([on], [E.Position]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    },
    $signature: 9
  };
  D.BasicSearchAlgorithm_runInner_closure6.prototype = {
    call$1: function(on) {
      H.interceptedTypeCheck(on, "$isPosition");
      return new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(this.$this.getDistance$1(on).length$0(0), 3), "pleaseSetStyle")], [K.Highlight]), H.setRuntimeTypeInfo([on], [E.Position]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    },
    $signature: 9
  };
  D.BasicSearchAlgorithm_runInner_closure7.prototype = {
    call$1: function(n) {
      var t1, t2;
      H.interceptedTypeCheck(n, "$isPosition");
      t1 = this.$this;
      t2 = this.nStar;
      return t1.getDistance$1(t2).$add(0, X.Distance$calc(t2, n)).$lt(0, t1.getDistance$1(n));
    },
    $signature: 10
  };
  D.BasicSearchAlgorithm_runInner_closure8.prototype = {
    call$1: function(n) {
      var t1, t2;
      H.interceptedTypeCheck(n, "$isPosition");
      t1 = this.$this;
      t2 = this.nStar;
      t1.parent.$indexSet(0, n, t2);
      t1.distance.$indexSet(0, n, t1.getDistance$1(t2).$add(0, X.Distance$calc(t2, n)));
      this.updatedNodes.add$1(0, n);
    },
    $signature: 35
  };
  D.BasicSearchAlgorithm_runInner_closure9.prototype = {
    call$1: function(on) {
      var t1 = this.$this.getPath$1(H.interceptedTypeCheck(on, "$isPosition"));
      t1 = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      return K.PathHighlight$(t1, true);
    },
    $signature: 8
  };
  D.BasicSearchAlgorithm_runInner_closure10.prototype = {
    call$1: function(n) {
      var t1, t2;
      H.interceptedTypeCheck(n, "$isPosition");
      t1 = this.$this;
      t1.open.add$1(0, n);
      t2 = this.nStar;
      t1.distance.$indexSet(0, n, t1.getDistance$1(t2).$add(0, X.Distance$calc(t2, n)));
      t1.parent.$indexSet(0, n, t2);
      this.updatedNodes.add$1(0, n);
    },
    $signature: 35
  };
  D.BasicSearchAlgorithm_runInner_closure11.prototype = {
    call$1: function(on) {
      var t1 = this.$this.getPath$1(H.interceptedTypeCheck(on, "$isPosition"));
      t1 = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      return K.PathHighlight$(t1, true);
    },
    $signature: 8
  };
  D.BasicSearchAlgorithm_runInner_closure12.prototype = {
    call$1: function(un) {
      var t1 = [E.Position];
      return new S.Tuple2(H.setRuntimeTypeInfo([K.PathHighlight$styled("green", H.setRuntimeTypeInfo([this.nStar, H.interceptedTypeCheck(un, "$isPosition")], t1), null, true, null)], [K.Highlight]), H.setRuntimeTypeInfo([null], t1), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    },
    $signature: 9
  };
  F.Chebyshev.prototype = {
    calc$2: function(p1, p2) {
      var t3, t4,
        t1 = p1.x,
        t2 = p2.x;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = p1.y;
      t4 = p2.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return Math.max(Math.abs(t1 - t2), Math.abs(t3 - t4));
    },
    getPath$2: function(source, target) {
      var t3, t4, t5,
        t1 = source.x,
        t2 = target.x;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = source.y;
      t4 = target.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t5 = [E.Position];
      if (Math.abs(t1 - t2) >= Math.abs(t3 - t4))
        return H.setRuntimeTypeInfo([source, new E.Position(t2, t3)], t5);
      else
        return H.setRuntimeTypeInfo([source, new E.Position(t1, t4)], t5);
    }
  };
  Z.Dijkstra.prototype = {
    findNextActiveNode$0: function() {
      var t1, t2, t3, pathsOfOpen, t4, t5, t6, t7, t8, t9, _this = this, _s5_ = "green",
        _s14_ = "pleaseSetStyle",
        nStar = _this.open.reduce$1(0, new Z.Dijkstra_findNextActiveNode_closure(_this));
      if (_this.nextTurn - 1 === _this._turnOfHistory) {
        t1 = _this.open;
        t2 = K.PathHighlight;
        t3 = H.getTypeArgumentByIndex(t1, 0);
        pathsOfOpen = P.List_List$from(new H.EfficientLengthMappedIterable(t1, H.functionTypeCheck(new Z.Dijkstra_findNextActiveNode_closure0(_this), {func: 1, ret: t2, args: [t3]}), [t3, t2]), true, t2);
        t2 = _this.searchHistory;
        C.JSArray_methods.add$1(t2._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
        t3 = K.Highlight;
        t1 = [t3];
        t4 = E.Position;
        t5 = [t4];
        t2.addEMM$4("First we look at all nodes which are ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
        t4 = H.assertSubtype(_this.open, "$isIterable", [t4], "$asIterable");
        t2.addEMM$4("marked open", _s5_, H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t1), t4);
        t2.addEMM$4(". From all these nodes we know a ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("path", _s5_, H.assertSubtype(pathsOfOpen, "$isIterable", [t3], "$asIterable"), H.setRuntimeTypeInfo([null], t5));
        t2.addEMM$4(" from the source node to them. ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("Therefore we also know the ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
        t3 = [[P.Iterable, K.Highlight], [P.Iterable, E.Position]];
        t4 = [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]];
        t6 = [t4];
        t7 = H.setRuntimeTypeInfo([new S.Tuple2(pathsOfOpen, H.setRuntimeTypeInfo([null], t5), t3)], t6);
        t8 = _this.open;
        t9 = H.getTypeArgumentByIndex(t8, 0);
        C.JSArray_methods.addAll$1(t7, new H.EfficientLengthMappedIterable(t8, H.functionTypeCheck(new Z.Dijkstra_findNextActiveNode_closure1(_this), {func: 1, ret: t4, args: [t9]}), [t9, t4]));
        t2.addEM_$3("distance", _s5_, t7);
        t2.addEMM$4(" between them. ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("We will now take the node of them, which has the ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
        t7 = _this.getPath$1(nStar);
        t4 = H.setRuntimeTypeInfo(t7.slice(0), [H.getTypeArgumentByIndex(t7, 0)]);
        t2.addEM_$3("shortest path", _s5_, H.setRuntimeTypeInfo([new S.Tuple2(H.setRuntimeTypeInfo([K.PathHighlight$(t4, true)], t1), H.setRuntimeTypeInfo([null], t5), t3), new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(_this.getDistance$1(nStar).length$0(0), 3), _s14_)], t1), H.setRuntimeTypeInfo([nStar], t5), t3)], t6));
        t2.addEMM$4(" to the source node and make him to the ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("current selected node", "yellow", H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t1), H.setRuntimeTypeInfo([nStar], t5));
        t2.addEMM$4(" of this iteration. We will also mark him closed, so we can say for sure, that we have found the shortest way from the source node to him. ", "", H.setRuntimeTypeInfo([], t1), H.setRuntimeTypeInfo([], t5));
      }
      return nStar;
    },
    findNeighbourNodes$1: function(node) {
      var __s, t1, t2, t3, t4, t5, _this = this,
        neighbours = _this.grid.accessibleNeighbours$1(node);
      if (_this.nextTurn - 1 === _this._turnOfHistory) {
        __s = neighbours.get$length(neighbours) === 1 ? "" : "s";
        t1 = _this.searchHistory;
        C.JSArray_methods.add$1(t1._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
        t2 = [K.Highlight];
        t3 = E.Position;
        t4 = [t3];
        t1.addEMM$4("After we have choosen our current selected node, we will take a look at his ", "", H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([], t4));
        t5 = "" + neighbours.get$length(neighbours) + " neighbour node" + __s;
        H.assertSubtype(neighbours, "$isIterable", [t3], "$asIterable");
        t1.addEMM$4(t5, "blue", H.setRuntimeTypeInfo([new K.CircleHighlight("pleaseSetStyle")], t2), neighbours);
        t1.addEMM$4(": ", "", H.setRuntimeTypeInfo([], t2), H.setRuntimeTypeInfo([], t4));
      }
      return neighbours;
    }
  };
  Z.Dijkstra_closure.prototype = {
    call$5: function(grid, startPosition, targetPosition, heuristic, turnOfHistory) {
      var _s8_ = "Dijkstra",
        t1 = new Z.Dijkstra(_s8_, grid, startPosition, targetPosition, heuristic, turnOfHistory, Y.SearchHistory$(F.Size$fromMap(H.interceptedTypeCast(grid._GridCache$_store._StoreTransferAble$_store.$index(0, "size"), "$isMap"))));
      t1.searched = false;
      t1.BasicSearchAlgorithm$6(_s8_, grid, startPosition, targetPosition, heuristic, turnOfHistory);
      return t1;
    },
    $signature: 71
  };
  Z.Dijkstra_findNextActiveNode_closure.prototype = {
    call$2: function(n1, n2) {
      var t1;
      H.interceptedTypeCheck(n1, "$isPosition");
      H.interceptedTypeCheck(n2, "$isPosition");
      t1 = this.$this;
      return t1.getDistance$1(n1).length$0(0) <= t1.getDistance$1(n2).length$0(0) ? n1 : n2;
    },
    $signature: 31
  };
  Z.Dijkstra_findNextActiveNode_closure0.prototype = {
    call$1: function(on) {
      var t1 = this.$this.getPath$1(H.interceptedTypeCheck(on, "$isPosition"));
      t1 = H.setRuntimeTypeInfo(t1.slice(0), [H.getTypeArgumentByIndex(t1, 0)]);
      return K.PathHighlight$(t1, true);
    },
    $signature: 8
  };
  Z.Dijkstra_findNextActiveNode_closure1.prototype = {
    call$1: function(on) {
      H.interceptedTypeCheck(on, "$isPosition");
      return new S.Tuple2(H.setRuntimeTypeInfo([new K.TextHighlight(C.JSNumber_methods.toStringAsPrecision$1(this.$this.getDistance$1(on).length$0(0), 3), "pleaseSetStyle")], [K.Highlight]), H.setRuntimeTypeInfo([on], [E.Position]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    },
    $signature: 9
  };
  E.DirectedJumpPointSearch.prototype = {
    runInner$0: function() {
      this.super$BasicSearchAlgorithm$runInner();
    },
    findNeighbourNodes$1: function(node) {
      var relevantDirections, t2, t3, t4, t5, lastDirection, jumpDirections, parentPath, t6, t7, t8, neighbours, allNextJumpPointHighlights, t9, t10, t11, t12, t13, t14, jumpPoint, t15, t16, t17, t18, t19, _this = this, _s5_ = "green", _s4_ = "blue",
        _s14_ = "pleaseSetStyle",
        t1 = O.Direction;
      if (J.$eq$(node, _this.start)) {
        relevantDirections = P.LinkedHashSet_LinkedHashSet$from(C.List_4j7, t1);
        t1 = _this._turnOfHistory;
        if (_this.nextTurn - 1 === t1) {
          t2 = _this.searchHistory;
          C.JSArray_methods.add$1(t2._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
          t3 = K.Highlight;
          t4 = [t3];
          t5 = [E.Position];
          t2.addEMM$4("In the first iteration, the DJPS Algorithm will search in ", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
          t2.addEMM$4("every direction", _s5_, H.assertSubtype(E.DirectedJumpPointSearchHighlights_forcedDirections(node, relevantDirections), "$isIterable", [t3], "$asIterable"), H.setRuntimeTypeInfo([null], t5));
          t2.addEMM$4(":", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
        }
      } else {
        lastDirection = _this.parent.$index(0, node)._directionTo$2(node, true);
        jumpDirections = X.DirectedJumpPointSearchJumpPoints_jumpDirections(_this.grid, node, lastDirection, new E.DirectedJumpPointSearch_findNeighbourNodes_closure(_this), false);
        relevantDirections = P.LinkedHashSet_LinkedHashSet$from(jumpDirections, t1);
        relevantDirections.add$1(0, lastDirection);
        t2 = _this._turnOfHistory;
        if (_this.nextTurn - 1 === t2) {
          t3 = [E.Position];
          t4 = K.Highlight;
          t5 = [t4];
          parentPath = H.setRuntimeTypeInfo([K.PathHighlight$styled("yellow", H.setRuntimeTypeInfo([_this.parent.$index(0, node), node], t3), null, true, null)], t5);
          t6 = _this.searchHistory;
          C.JSArray_methods.add$1(t6._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
          t6.addEMM$4("The DJPS Algorithm will search in every ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          t4 = [t4];
          t6.addEMM$4("relevant direction", _s5_, H.assertSubtype(E.DirectedJumpPointSearchHighlights_forcedDirections(node, relevantDirections), "$isIterable", t4, "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(", which includes ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          t7 = [H.getTypeArgumentByIndex(parentPath, 0)];
          t8 = H.setRuntimeTypeInfo(parentPath.slice(0), t7);
          C.JSArray_methods.addAll$1(t8, E.DirectedJumpPointSearchHighlights_forcedDirections(node, jumpDirections));
          t6.addEMM$4("all forced directions", _s5_, H.assertSubtype(t8, "$isIterable", t4, "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(" of the current selected node in the direction from its parent to it and the ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          t7 = H.setRuntimeTypeInfo(parentPath.slice(0), t7);
          C.JSArray_methods.addAll$1(t7, E.DirectedJumpPointSearchHighlights_forcedDirections(node, H.setRuntimeTypeInfo([lastDirection], [t1])));
          t6.addEMM$4("direction from its parent", _s5_, H.assertSubtype(t7, "$isIterable", t4, "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(":", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
        }
        t1 = t2;
      }
      t2 = E.Position;
      t3 = [t2];
      neighbours = H.setRuntimeTypeInfo([], t3);
      t4 = _this.nextJumpPointHighlights;
      C.JSArray_methods.set$length(t4, 0);
      t5 = [H.getTypeArgumentByIndex(t4, 0)];
      allNextJumpPointHighlights = H.setRuntimeTypeInfo(t4.slice(0), t5);
      for (t6 = P._LinkedHashSetIterator$(relevantDirections, relevantDirections._collection$_modifications, H.getTypeArgumentByIndex(relevantDirections, 0)), t7 = [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], t8 = _this.searchHistory, t9 = K.Highlight, t10 = [t9], t9 = [t9], t2 = [t2], t11 = [[P.Iterable, K.Highlight], [P.Iterable, E.Position]], t12 = [M.ExplanationPart], t13 = t8._stepDescription; t6.moveNext$0();) {
        t14 = t6._collection$_current;
        jumpPoint = _this.getNextJumpPoint$2(node, t14);
        t15 = H.functionTypeCheck(new E.DirectedJumpPointSearch_findNeighbourNodes_closure0(neighbours), {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(jumpPoint, 0)]});
        t16 = jumpPoint._core0$_value;
        t17 = t16 == null;
        t18 = !t17;
        if (t18)
          t15.call$1(t16);
        if (_this.nextTurn - 1 === t1) {
          t15 = new K.DotHighlight(_s14_);
          t15.style = _s4_;
          C.JSArray_methods.add$1(t4, new S.Tuple2(H.setRuntimeTypeInfo([t15], t10), jumpPoint, t11));
          C.JSArray_methods.add$1(t13, new M.Explanation("", H.setRuntimeTypeInfo([], t12)));
          t15 = H.setRuntimeTypeInfo([], t10);
          t19 = H.setRuntimeTypeInfo([], t3);
          H.assertSubtype(t15, "$isIterable", t9, "$asIterable");
          H.assertSubtype(t19, "$isIterable", t2, "$asIterable");
          t8.addEM_$3(" - We ", "", C.JSArray_methods.get$isNotEmpty(t15) ? H.setRuntimeTypeInfo([new S.Tuple2(t15, t19, t11)], t7) : H.setRuntimeTypeInfo([], t7));
          t15 = t18 ? _s5_ : "red";
          t18 = H.setRuntimeTypeInfo(t4.slice(0), t5);
          t8.addEM_$3("search", t15, t18);
          t14 = " in to the " + O.Directions_getName(t14) + " direction and find ";
          t15 = H.setRuntimeTypeInfo([], t10);
          t18 = H.setRuntimeTypeInfo([], t3);
          H.assertSubtype(t15, "$isIterable", t9, "$asIterable");
          H.assertSubtype(t18, "$isIterable", t2, "$asIterable");
          t8.addEM_$3(t14, "", C.JSArray_methods.get$isNotEmpty(t15) ? H.setRuntimeTypeInfo([new S.Tuple2(t15, t18, t11)], t7) : H.setRuntimeTypeInfo([], t7));
          if (!jumpPoint.get$iterator(jumpPoint).moveNext$0()) {
            t14 = H.setRuntimeTypeInfo([], t10);
            t15 = H.setRuntimeTypeInfo([], t3);
            H.assertSubtype(t14, "$isIterable", t9, "$asIterable");
            H.assertSubtype(t15, "$isIterable", t2, "$asIterable");
            t8.addEM_$3("no jump point", "", C.JSArray_methods.get$isNotEmpty(t14) ? H.setRuntimeTypeInfo([new S.Tuple2(t14, t15, t11)], t7) : H.setRuntimeTypeInfo([], t7));
          } else {
            if (t17)
              H.throwExpression(P.StateError$("value called on absent Optional."));
            H.interceptedTypeCheck(t16, "$isPosition");
            t14 = H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t10);
            t16 = H.setRuntimeTypeInfo([t16], t3);
            H.assertSubtype(t14, "$isIterable", t9, "$asIterable");
            H.assertSubtype(t16, "$isIterable", t2, "$asIterable");
            t8.addEM_$3("a jump point", _s4_, C.JSArray_methods.get$isNotEmpty(t14) ? H.setRuntimeTypeInfo([new S.Tuple2(t14, t16, t11)], t7) : H.setRuntimeTypeInfo([], t7));
          }
          t14 = H.setRuntimeTypeInfo([], t10);
          t15 = H.setRuntimeTypeInfo([], t3);
          H.assertSubtype(t14, "$isIterable", t9, "$asIterable");
          H.assertSubtype(t15, "$isIterable", t2, "$asIterable");
          t8.addEM_$3(".", "", C.JSArray_methods.get$isNotEmpty(t14) ? H.setRuntimeTypeInfo([new S.Tuple2(t14, t15, t11)], t7) : H.setRuntimeTypeInfo([], t7));
        }
        C.JSArray_methods.addAll$1(allNextJumpPointHighlights, t4);
        C.JSArray_methods.set$length(t4, 0);
      }
      if (_this.nextTurn - 1 === t1) {
        C.JSArray_methods.add$1(t13, new M.Explanation("", H.setRuntimeTypeInfo([], t12)));
        t8.addEMM$4("So ", "", H.setRuntimeTypeInfo([], t10), H.setRuntimeTypeInfo([], t3));
        t8.addEM_$3("totally", _s5_, allNextJumpPointHighlights);
        t8.addEMM$4(" we found ", "", H.setRuntimeTypeInfo([], t10), H.setRuntimeTypeInfo([], t3));
        t1 = "" + neighbours.length + " neighbour";
        t1 += neighbours.length === 1 ? "" : "s";
        H.assertSubtype(neighbours, "$isIterable", t2, "$asIterable");
        t8.addEMM$4(t1, _s4_, H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t10), neighbours);
        t8.addEMM$4(":", "", H.setRuntimeTypeInfo([], t10), H.setRuntimeTypeInfo([], t3));
      }
      return neighbours;
    },
    getNextJumpPoint$2: function(node, direction) {
      var positionAfter, result, jumpDirections, _this = this,
        t1 = _this.grid,
        t2 = t1._grid._Array2D$_array;
      if (!H.boolConversionCheck(J.$index$asx(J.$index$asx((t2 && C.JSArray_methods).$index(t2, node.x), node.y), direction)))
        return C.Optional_null3;
      else {
        positionAfter = node.goMulti$2(direction, 1);
        if (positionAfter.$eq(0, _this.target))
          result = X.Optional$of(positionAfter, E.Position);
        else {
          jumpDirections = X.DirectedJumpPointSearchJumpPoints_jumpDirections(t1, positionAfter, direction, new E.DirectedJumpPointSearch_getNextJumpPoint_closure(_this), false);
          if (jumpDirections._collection$_length > 0) {
            t1 = E.Position;
            result = X.Optional$of(positionAfter, t1);
            if (_this.nextTurn - 1 === _this._turnOfHistory)
              C.JSArray_methods.add$1(_this.nextJumpPointHighlights, new S.Tuple2(E.DirectedJumpPointSearchHighlights_forcedDirections(positionAfter, jumpDirections), H.setRuntimeTypeInfo([null], [t1]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]));
          } else
            result = _this.getNextJumpPoint$2(positionAfter, direction);
        }
        if (_this.nextTurn - 1 === _this._turnOfHistory) {
          t1 = result._core0$_value != null ? "green" : "red";
          t2 = [E.Position];
          C.JSArray_methods.add$1(_this.nextJumpPointHighlights, new S.Tuple2(H.setRuntimeTypeInfo([K.PathHighlight$styled(t1, H.setRuntimeTypeInfo([node, node.goMulti$2(direction, 1)], t2), null, true, null)], [K.Highlight]), H.setRuntimeTypeInfo([null], t2), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]));
        }
        return result;
      }
    }
  };
  E.DirectedJumpPointSearch_closure.prototype = {
    call$5: function(grid, startPosition, targetPosition, heuristic, turnOfHistory) {
      var t1 = new E.DirectedJumpPointSearch(H.setRuntimeTypeInfo([], [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]]), "DJPS", grid, startPosition, targetPosition, heuristic, turnOfHistory, Y.SearchHistory$(F.Size$fromMap(H.interceptedTypeCast(grid._GridCache$_store._StoreTransferAble$_store.$index(0, "size"), "$isMap"))));
      t1.searched = false;
      t1.BasicSearchAlgorithm$6("DJPS", grid, startPosition, targetPosition, heuristic, turnOfHistory);
      return t1;
    },
    $signature: 72
  };
  E.DirectedJumpPointSearch_findNeighbourNodes_closure.prototype = {
    call$2: function(position, direction) {
      var t1 = this.$this.getNextJumpPoint$2(position, direction);
      return !t1.get$isEmpty(t1);
    },
    $signature: 25
  };
  E.DirectedJumpPointSearch_findNeighbourNodes_closure0.prototype = {
    call$1: function(p) {
      return C.JSArray_methods.add$1(this.neighbours, H.interceptedTypeCheck(p, "$isPosition"));
    },
    $signature: 14
  };
  E.DirectedJumpPointSearch_getNextJumpPoint_closure.prototype = {
    call$2: function(position, direction) {
      var t1 = this.$this.getNextJumpPoint$2(position, direction);
      return !t1.get$isEmpty(t1);
    },
    $signature: 25
  };
  N.DirectedJumpPointSearchLookUp.prototype = {
    runInner$0: function() {
      var _this = this,
        t1 = _this.grid,
        t2 = t1._GridCache$_store._StoreTransferAble$_store,
        t3 = E.DirectedJumpPointSearchData$(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, "size"), "$isMap"))),
        dataGenerator = new E.DirectedJumpPointSearchPreCalculator(t3, t1, _this.start, _this.target, _this.heuristic, -1, Y.SearchHistory$(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, "size"), "$isMap"))));
      dataGenerator.searched = false;
      dataGenerator.run$0();
      _this._data = t3;
      _this.super$BasicSearchAlgorithm$runInner();
    },
    findNeighbourNodes$1: function(node) {
      var lastDirection, relevantDirections, t2, t3, t4, t5, directionAdviser, parentPath, t6, t7, t8, neighbours, reachAble, position, directionData, t9, t10, pathsOfRelevantDirectionsSuccess, pathsOfRelevantDirectionsFail, openDirectionAdviser, __s, was_were, a__, _this = this, _s5_ = "green",
        _s14_ = "pleaseSetStyle",
        _s10_ = "foreground",
        t1 = O.Direction;
      if (J.$eq$(node, _this.start)) {
        lastDirection = new X.Optional(null, [t1]);
        relevantDirections = P.LinkedHashSet_LinkedHashSet$from(C.List_4j7, t1);
        t1 = _this._turnOfHistory;
        if (_this.nextTurn - 1 === t1) {
          t2 = _this.searchHistory;
          C.JSArray_methods.add$1(t2._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
          t3 = K.Highlight;
          t4 = [t3];
          t5 = [E.Position];
          t2.addEMM$4("In the first iteration, the DJPS Algorithm will search in ", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
          t2.addEMM$4("every direction", _s5_, H.assertSubtype(E.DirectedJumpPointSearchHighlights_forcedDirections(node, relevantDirections), "$isIterable", [t3], "$asIterable"), H.setRuntimeTypeInfo([null], t5));
          t2.addEMM$4(". ", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
        }
      } else {
        lastDirection = X.Optional$of(_this.parent.$index(0, node)._directionTo$2(node, true), t1);
        t2 = _this._data._Array2D$_array;
        directionAdviser = J.$index$asx((t2 && C.JSArray_methods).$index(t2, node.x), node.y).directionAdvisers.$index(0, lastDirection.get$value(lastDirection));
        relevantDirections = P.LinkedHashSet_LinkedHashSet$from(directionAdviser.jumpDirections, t1);
        relevantDirections.add$1(0, lastDirection.get$value(lastDirection));
        t2 = _this._turnOfHistory;
        if (_this.nextTurn - 1 === t2) {
          t3 = [E.Position];
          t4 = K.Highlight;
          t5 = [t4];
          parentPath = H.setRuntimeTypeInfo([K.PathHighlight$styled("yellow", H.setRuntimeTypeInfo([_this.parent.$index(0, node), node], t3), null, true, null)], t5);
          t6 = _this.searchHistory;
          C.JSArray_methods.add$1(t6._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
          t6.addEMM$4("The DJPS Algorithm will search in every ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          t4 = [t4];
          t6.addEMM$4("relevant direction", _s5_, H.assertSubtype(E.DirectedJumpPointSearchHighlights_forcedDirections(node, relevantDirections), "$isIterable", t4, "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(", which includes ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          t7 = [H.getTypeArgumentByIndex(parentPath, 0)];
          t8 = H.setRuntimeTypeInfo(parentPath.slice(0), t7);
          C.JSArray_methods.addAll$1(t8, E.DirectedJumpPointSearchHighlights_forcedDirections(node, directionAdviser.jumpDirections));
          t6.addEMM$4("all forced directions", _s5_, H.assertSubtype(t8, "$isIterable", t4, "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(" of the current selected node in the direction from its parent to it and the ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          t7 = H.setRuntimeTypeInfo(parentPath.slice(0), t7);
          C.JSArray_methods.addAll$1(t7, E.DirectedJumpPointSearchHighlights_forcedDirections(node, H.setRuntimeTypeInfo([lastDirection.get$value(lastDirection)], [t1])));
          t6.addEMM$4("direction from its parent", _s5_, H.assertSubtype(t7, "$isIterable", t4, "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(". Note: The forced directions do not have to be calculated but are looked up. ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
        }
        t1 = t2;
      }
      t2 = E.Position;
      t3 = [t2];
      neighbours = H.setRuntimeTypeInfo([], t3);
      if (_this.nextTurn - 1 === t1) {
        t4 = _this.searchHistory;
        C.JSArray_methods.add$1(t4._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
        t5 = [K.Highlight];
        t4.addEMM$4("Before we start exploring every relevant direction, we try to reach the target node via the ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
        t4.addEMM$4("octile path", _s5_, H.setRuntimeTypeInfo([K.PathHighlight$(new T.Octile("Octile distance").getPath$2(node, _this.target), true)], t5), H.setRuntimeTypeInfo([null], t3));
        t4.addEMM$4(" from the current selected node to it. ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
      }
      reachAble = _this.canReachTarget$2(node, lastDirection);
      if (reachAble._core0$_value != null) {
        if (_this.nextTurn - 1 === t1) {
          t4 = _this.searchHistory;
          t5 = [K.Highlight];
          t4.addEMM$4("Because the octile path is valid, we have found our ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          t6 = H.interceptedTypeCheck(reachAble.get$value(reachAble).item1, "$isPosition");
          t4.addEMM$4("first neighbour", "blue", H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t5), H.setRuntimeTypeInfo([t6], t3));
          t4.addEMM$4(". ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
          if (relevantDirections.contains$1(0, reachAble.get$value(reachAble).item2))
            t4.addEMM$4("Note: We will not jump into the " + O.Directions_getName(reachAble.get$value(reachAble).item2) + " direction, because we already did so and reached to the target node.", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t3));
        }
        C.JSArray_methods.add$1(neighbours, reachAble.get$value(reachAble).item1);
        relevantDirections.remove$1(0, reachAble.get$value(reachAble).item2);
      } else if (_this.nextTurn - 1 === t1)
        _this.searchHistory.addEMM$4("But the octile path is blocked.", "", H.setRuntimeTypeInfo([], [K.Highlight]), H.setRuntimeTypeInfo([], t3));
      for (t4 = P._LinkedHashSetIterator$(relevantDirections, relevantDirections._collection$_modifications, H.getTypeArgumentByIndex(relevantDirections, 0)); t4.moveNext$0();) {
        t5 = t4._collection$_current;
        position = node;
        do {
          t6 = _this._data._Array2D$_array;
          t7 = position.x;
          t6 = (t6 && C.JSArray_methods).$index(t6, t7);
          t8 = position.y;
          directionData = J.$index$asx(t6, t8).signposts.$index(0, t5);
          t6 = directionData.distance;
          t9 = O.Directions_getDx(t5);
          if (typeof t7 !== "number")
            return t7.$add();
          t10 = O.Directions_getDy(t5);
          if (typeof t8 !== "number")
            return t8.$add();
          position = new E.Position(t7 + t9 * t6, t8 + t10 * t6);
        } while (t6 = directionData.type, t7 = t6 === C.DirectedJumpPointSearchDataPointDirectionType_2, t7);
        if (t6 === C.DirectedJumpPointSearchDataPointDirectionType_1 || t7)
          C.JSArray_methods.add$1(neighbours, position);
      }
      if (_this.nextTurn - 1 === t1) {
        t1 = H.getTypeArgumentByIndex(relevantDirections, 0);
        t4 = {func: 1, ret: P.bool, args: [t1]};
        t5 = [t1];
        t6 = K.PathHighlight;
        t7 = {func: 1, ret: t6, args: [t1]};
        t1 = [t1, t6];
        pathsOfRelevantDirectionsSuccess = P.List_List$from(new H.MappedIterable(new H.WhereIterable(relevantDirections, H.functionTypeCheck(new N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure(_this, node), t4), t5), H.functionTypeCheck(new N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure0(_this, node), t7), t1), true, t6);
        pathsOfRelevantDirectionsFail = P.List_List$from(new H.MappedIterable(new H.WhereIterable(relevantDirections, H.functionTypeCheck(new N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure1(_this, node), t4), t5), H.functionTypeCheck(new N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure2(_this, node), t7), t1), true, t6);
        t1 = _this.open;
        t7 = H.getTypeArgumentByIndex(t1, 0);
        openDirectionAdviser = P.List_List$from(new H.ExpandIterable(new H.WhereIterable(t1, H.functionTypeCheck(new N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure3(node), {func: 1, ret: P.bool, args: [t7]}), [t7]), H.functionTypeCheck(_this.get$visualiseDirectionAdviser(), {func: 1, ret: [P.Iterable, t6], args: [t7]}), [t7, t6]), true, t6);
        t6 = _this.searchHistory;
        t1 = H.setRuntimeTypeInfo(pathsOfRelevantDirectionsSuccess.slice(0), [H.getTypeArgumentByIndex(pathsOfRelevantDirectionsSuccess, 0)]);
        C.JSArray_methods.addAll$1(t1, pathsOfRelevantDirectionsFail);
        t6.addH_$3(_s10_, t1, H.setRuntimeTypeInfo([null], t3));
        t6.addH_$3(_s10_, openDirectionAdviser, H.setRuntimeTypeInfo([null], t3));
        t1 = [M.ExplanationPart];
        t4 = t6._stepDescription;
        C.JSArray_methods.add$1(t4, new M.Explanation("", H.setRuntimeTypeInfo([], t1)));
        t5 = K.Highlight;
        t7 = [t5];
        t6.addEMM$4("Using the lookup data, we check each relevant direction. ", "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
        t8 = pathsOfRelevantDirectionsFail.length;
        if (t8 !== 0) {
          t8 = t8 === 1;
          __s = t8 ? "" : "s";
          t6.addEMM$4("There " + (t8 ? "was" : "were") + " no next jump point" + __s + " pre-calculated for ", "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
          t6.addEMM$4("" + pathsOfRelevantDirectionsFail.length + " direction" + __s, "red", H.assertSubtype(pathsOfRelevantDirectionsFail, "$isIterable", [t5], "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(". Hence we found no neighbour for this direction" + __s + ". ", "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
        }
        t8 = pathsOfRelevantDirectionsSuccess.length;
        if (t8 !== 0) {
          t8 = t8 === 1;
          __s = t8 ? "" : "s";
          was_were = t8 ? "was" : "were";
          a__ = t8 ? "a " : "";
          t6.addEMM$4("For ", "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
          t6.addEMM$4("" + pathsOfRelevantDirectionsSuccess.length + " direction" + __s, _s5_, H.assertSubtype(pathsOfRelevantDirectionsSuccess, "$isIterable", [t5], "$asIterable"), H.setRuntimeTypeInfo([null], t3));
          t6.addEMM$4(" there " + was_were + " pre-calculated " + a__ + "next jump point" + __s + ". We therefore found here " + pathsOfRelevantDirectionsSuccess.length + " neighbour" + __s, "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
          t6.addEMM$4(". ", "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
        }
        __s = neighbours.length === 1 ? "" : "s";
        C.JSArray_methods.add$1(t4, new M.Explanation("", H.setRuntimeTypeInfo([], t1)));
        t6.addEMM$4("In total, we found ", "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
        t1 = "" + neighbours.length + " neighbour" + __s;
        H.assertSubtype(neighbours, "$isIterable", [t2], "$asIterable");
        t6.addEMM$4(t1, "blue", H.setRuntimeTypeInfo([new K.CircleHighlight(_s14_)], t7), neighbours);
        t6.addEMM$4(". We now check each one of them: ", "", H.setRuntimeTypeInfo([], t7), H.setRuntimeTypeInfo([], t3));
      }
      return new H.ReversedListIterable(neighbours, [H.getTypeArgumentByIndex(neighbours, 0)]);
    },
    canReachTarget$2: function(node, lastDirection) {
      var t2, directionToTarget, t3, directionToTargetData, distanceToTarget, t4, intermediate,
        t1 = O.Direction;
      H.assertSubtype(lastDirection, "$isOptional", [t1], "$asOptional");
      t2 = this.target;
      if (J.$eq$(node, t2))
        return X.Optional$of(new S.Tuple2(t2, lastDirection.get$value(lastDirection), [E.Position, t1]), [S.Tuple2, E.Position, O.Direction]);
      directionToTarget = node._directionTo$2(t2, false);
      if (!lastDirection.get$iterator(lastDirection).moveNext$0() || directionToTarget !== O.Directions_turn(lastDirection.get$value(lastDirection), 180)) {
        t3 = this._data._Array2D$_array;
        directionToTargetData = J.$index$asx((t3 && C.JSArray_methods).$index(t3, node.x), node.y).signposts.$index(0, directionToTarget);
        distanceToTarget = X.Distance$calc(node, t2);
        if (C.JSArray_methods.contains$1(C.List_9Ef, directionToTarget)) {
          t3 = distanceToTarget._cardinal;
          t4 = directionToTargetData.distance;
          if (typeof t3 !== "number")
            return t3.$le();
          if (t3 <= t4)
            return X.Optional$of(new S.Tuple2(t2, directionToTarget, [E.Position, t1]), [S.Tuple2, E.Position, O.Direction]);
        } else {
          t2 = distanceToTarget._diagonal;
          t3 = directionToTargetData.distance;
          if (typeof t2 !== "number")
            return t2.$le();
          if (t2 <= t3) {
            intermediate = node.goMulti$2(directionToTarget, t2);
            t2 = this.canReachTarget$2(intermediate, X.Optional$of(directionToTarget, t1));
            if (!t2.get$isEmpty(t2))
              return X.Optional$of(new S.Tuple2(intermediate, directionToTarget, [E.Position, t1]), [S.Tuple2, E.Position, O.Direction]);
          }
        }
      }
      return C.Optional_null2;
    },
    visualiseDirectionAdviser$1: function(node) {
      H.interceptedTypeCheck(node, "$isPosition");
      return this.parent.$index(0, node) == null ? H.setRuntimeTypeInfo([], [K.PathHighlight]) : this.visualiseDirectionAdviserDirect$2(node, this.parent.$index(0, node)._directionTo$2(node, true));
    },
    visualiseDirectionAdviserDirect$2: function(newNeighbourNode, relevantDirection) {
      var t2, t3,
        t1 = this._data._Array2D$_array;
      t1 = J.$index$asx((t1 && C.JSArray_methods).$index(t1, newNeighbourNode.x), newNeighbourNode.y).directionAdvisers.$index(0, relevantDirection).jumpDirections;
      t2 = K.PathHighlight;
      t3 = H.getTypeArgumentByIndex(t1, 0);
      return new H.EfficientLengthMappedIterable(t1, H.functionTypeCheck(new N.DirectedJumpPointSearchLookUp_visualiseDirectionAdviserDirect_closure(newNeighbourNode), {func: 1, ret: t2, args: [t3]}), [t3, t2]);
    }
  };
  N.DirectedJumpPointSearchLookUp_closure.prototype = {
    call$5: function(grid, startPosition, targetPosition, heuristic, turnOfHistory) {
      var _s11_ = "DJPS Lookup",
        t1 = new N.DirectedJumpPointSearchLookUp(_s11_, grid, startPosition, targetPosition, heuristic, turnOfHistory, Y.SearchHistory$(F.Size$fromMap(H.interceptedTypeCast(grid._GridCache$_store._StoreTransferAble$_store.$index(0, "size"), "$isMap"))));
      t1.searched = false;
      t1.BasicSearchAlgorithm$6(_s11_, grid, startPosition, targetPosition, heuristic, turnOfHistory);
      return t1;
    },
    $signature: 76
  };
  N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure.prototype = {
    call$1: function(relevantDirection) {
      var t1, t2;
      H.interceptedTypeCheck(relevantDirection, "$isDirection");
      t1 = this.node;
      t2 = this.$this._data._Array2D$_array;
      return J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y).signposts.$index(0, relevantDirection).get$isJumpPointAhead();
    },
    $signature: 12
  };
  N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure0.prototype = {
    call$1: function(relevantDirection) {
      var t1, t2;
      H.interceptedTypeCheck(relevantDirection, "$isDirection");
      t1 = this.node;
      t2 = this.$this._data._Array2D$_array;
      return K.PathHighlight$styled("green", H.setRuntimeTypeInfo([t1, t1.goMulti$2(relevantDirection, J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y).signposts.$index(0, relevantDirection).distance)], [E.Position]), null, true, null);
    },
    $signature: 21
  };
  N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure1.prototype = {
    call$1: function(relevantDirection) {
      var t1, t2;
      H.interceptedTypeCheck(relevantDirection, "$isDirection");
      t1 = this.node;
      t2 = this.$this._data._Array2D$_array;
      return !J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y).signposts.$index(0, relevantDirection).get$isJumpPointAhead();
    },
    $signature: 12
  };
  N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure2.prototype = {
    call$1: function(relevantDirection) {
      var t1, t2;
      H.interceptedTypeCheck(relevantDirection, "$isDirection");
      t1 = this.node;
      t2 = this.$this._data._Array2D$_array;
      return K.PathHighlight$styled("red", H.setRuntimeTypeInfo([t1, t1.goMulti$2(relevantDirection, J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y).signposts.$index(0, relevantDirection).distance)], [E.Position]), null, true, null);
    },
    $signature: 21
  };
  N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure3.prototype = {
    call$1: function(o) {
      return !J.$eq$(H.interceptedTypeCheck(o, "$isPosition"), this.node);
    },
    $signature: 10
  };
  N.DirectedJumpPointSearchLookUp_visualiseDirectionAdviserDirect_closure.prototype = {
    call$1: function(newNeighbourRelevantDirection) {
      var t1 = this.newNeighbourNode;
      return K.PathHighlight$styled("green dotted", H.setRuntimeTypeInfo([t1, t1.goMulti$2(H.interceptedTypeCheck(newNeighbourRelevantDirection, "$isDirection"), 1)], [E.Position]), null, true, null);
    },
    $signature: 21
  };
  E.DirectedJumpPointSearchPreCalculator.prototype = {
    runInner$0: function() {
      var t1, t2, t3, t4, t5, getForcedDirectionsHighlights, t6, t7, t8, t9, t10, _i, direction, t11, t12, t13, _this = this,
        _s68_ = "Here one can view the pre-calculated next jump points of each node. ",
        _s10_ = "foreground";
      _this.computeBoxes$3(C.CountDirection_0, C.CountDirection_2, C.Direction_6);
      _this.computeBoxes$3(C.CountDirection_1, C.CountDirection_2, C.Direction_2);
      _this.computeBoxes$3(C.CountDirection_2, C.CountDirection_0, C.Direction_0);
      _this.computeBoxes$3(C.CountDirection_2, C.CountDirection_1, C.Direction_4);
      _this.computeBoxes$3(C.CountDirection_0, C.CountDirection_0, C.Direction_7);
      _this.computeBoxes$3(C.CountDirection_1, C.CountDirection_0, C.Direction_1);
      _this.computeBoxes$3(C.CountDirection_1, C.CountDirection_1, C.Direction_3);
      _this.computeBoxes$3(C.CountDirection_0, C.CountDirection_1, C.Direction_5);
      t1 = _this._turnOfHistory;
      if (++_this.nextTurn - 1 === t1) {
        t2 = _this.searchHistory;
        t2.stepTitle = "Lookup Data - Next Points of Interest - Interaktive Arrow Visualisation";
        C.JSArray_methods.add$1(t2._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
        t3 = [K.Highlight];
        t4 = [E.Position];
        t2.addEMM$4(_s68_, "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t4));
        t2.addEMM$4("By hovering with the mouse over a node, green arrows will point to the next jump point of each direction. ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t4));
        t2.addEMM$4("Red arrows are shown, when there is no next jump point but only a obstacle. ", "", H.setRuntimeTypeInfo([], t3), H.setRuntimeTypeInfo([], t4));
        t4 = F.Size$fromMap(H.interceptedTypeCast(_this.grid._GridCache$_store._StoreTransferAble$_store.$index(0, "size"), "$isMap")).positions$0();
        t3 = [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]];
        t5 = H.getRuntimeTypeArgument(t4, "Iterable", 0);
        t2.addHM$2("background", P.List_List$from(new H.ExpandIterable(t4, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_closure(new E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator(_this, new E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator(_this))), {func: 1, ret: [P.Iterable, t3], args: [t5]}), [t5, t3]), true, t3));
      }
      if (++_this.nextTurn - 1 === t1) {
        t2 = _this.searchHistory;
        t2.stepTitle = "Lookup Data - Next Points of Interest - Number Visualisation";
        t3 = new E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights(_this);
        C.JSArray_methods.add$1(t2._stepDescription, new M.Explanation("", H.setRuntimeTypeInfo([], [M.ExplanationPart])));
        t4 = [K.Highlight];
        t5 = [E.Position];
        t2.addEMM$4(_s68_, "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
        t2.addEM_$3("Green numbers", "green", t3.call$1(new E.DirectedJumpPointSearchPreCalculator_runInner_closure0()));
        t2.addEMM$4(" show the distance of the next jump point in a direction. ", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
        t2.addEM_$3("Red numbers", "red", t3.call$1(new E.DirectedJumpPointSearchPreCalculator_runInner_closure1()));
        t2.addEMM$4(" are shown, when there is no next jump point in that direction but only a obstacle. ", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("The direction of a number is relative to its position such that for instance a number in the bottom center of a node points south. ", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
        t2.addEMM$4("In my thesis and in the implementation, the green and red numbers were not distingished by colors but by making the red numbers negative. ", "", H.setRuntimeTypeInfo([], t4), H.setRuntimeTypeInfo([], t5));
        t2.addHM$2(_s10_, t3.call$1(new E.DirectedJumpPointSearchPreCalculator_runInner_closure2()));
      }
      if (++_this.nextTurn - 1 === t1) {
        t1 = _this.searchHistory;
        t1.stepTitle = "Lookup Data - Forced Directions - Arrow Visualisation";
        getForcedDirectionsHighlights = new E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights(_this);
        t2 = [M.ExplanationPart];
        t3 = t1._stepDescription;
        C.JSArray_methods.add$1(t3, new M.Explanation("", H.setRuntimeTypeInfo([], t2)));
        t4 = K.Highlight;
        t5 = [t4];
        t6 = E.Position;
        t7 = [t6];
        t1.addEMM$4("At this view you can view the pre-calculated forced directions of each node. ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t7));
        t1.addEMM$4("Forced directions are shown as green dotted arrows with black arrows as their source direction. ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t7));
        t1.addEMM$4("Because the arrows tend to overlap each other, one can also only display the forced direction of one source direction: ", "", H.setRuntimeTypeInfo([], t5), H.setRuntimeTypeInfo([], t7));
        for (t8 = [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], t4 = [t4], t6 = [t6], t9 = [O.Direction], t10 = [[P.Iterable, K.Highlight], [P.Iterable, E.Position]], _i = 0; _i < 8; ++_i) {
          direction = C.List_4j7[_i];
          C.JSArray_methods.add$1(t3, new M.Explanation("", H.setRuntimeTypeInfo([], t2)));
          t11 = H.setRuntimeTypeInfo([], t5);
          t12 = H.setRuntimeTypeInfo([], t7);
          H.assertSubtype(t11, "$isIterable", t4, "$asIterable");
          H.assertSubtype(t12, "$isIterable", t6, "$asIterable");
          t1.addEM_$3("For the ", "", C.JSArray_methods.get$isNotEmpty(t11) ? H.setRuntimeTypeInfo([new S.Tuple2(t11, t12, t10)], t8) : H.setRuntimeTypeInfo([], t8));
          t11 = O.Directions_getName(direction) + " direction";
          t12 = H.assertSubtype(getForcedDirectionsHighlights.call$1(H.setRuntimeTypeInfo([direction], t9)), "$isIterable", t4, "$asIterable");
          t13 = H.assertSubtype(H.setRuntimeTypeInfo([null], t7), "$isIterable", t6, "$asIterable");
          t1.addEM_$3(t11, "green", J.get$isNotEmpty$asx(t12) ? H.setRuntimeTypeInfo([new S.Tuple2(t12, t13, t10)], t8) : H.setRuntimeTypeInfo([], t8));
          t11 = H.setRuntimeTypeInfo([], t5);
          t12 = H.setRuntimeTypeInfo([], t7);
          H.assertSubtype(t11, "$isIterable", t4, "$asIterable");
          H.assertSubtype(t12, "$isIterable", t6, "$asIterable");
          t1.addEM_$3(".", "", C.JSArray_methods.get$isNotEmpty(t11) ? H.setRuntimeTypeInfo([new S.Tuple2(t11, t12, t10)], t8) : H.setRuntimeTypeInfo([], t8));
        }
        t1.addH_$3(_s10_, getForcedDirectionsHighlights.call$1(C.List_4j7), H.setRuntimeTypeInfo([null], t7));
      }
      t1 = _this.searchHistory;
      t1.stepCount = _this.nextTurn;
      t1.title = "Pre-Calculated DJPS Lookup Data";
    },
    computeBoxes$3: function(countDirectionX, countDirectionY, direction) {
      var startX, t3, startY, y, t4, t5, x, t6, _this = this, _s4_ = "size",
        t1 = countDirectionX === C.CountDirection_0,
        deltaX = t1 ? 1 : -1,
        t2 = countDirectionY === C.CountDirection_0,
        deltaY = t2 ? 1 : -1;
      if (t1)
        startX = 0;
      else {
        t3 = F.Size$fromMap(H.interceptedTypeCast(_this.grid._GridCache$_store._StoreTransferAble$_store.$index(0, _s4_), "$isMap")).width;
        if (typeof t3 !== "number")
          return t3.$sub();
        startX = t3 - 1;
      }
      if (t2)
        startY = 0;
      else {
        t3 = F.Size$fromMap(H.interceptedTypeCast(_this.grid._GridCache$_store._StoreTransferAble$_store.$index(0, _s4_), "$isMap")).height;
        if (typeof t3 !== "number")
          return t3.$sub();
        startY = t3 - 1;
      }
      t3 = _this.grid;
      y = startY;
      while (true) {
        if (t2) {
          t4 = H.interceptedTypeCast(t3._GridCache$_store._StoreTransferAble$_store.$index(0, _s4_), "$isMap");
          t5 = J.getInterceptor$asx(t4);
          H.intTypeCast(t5.$index(t4, "width"));
          t4 = H.intTypeCast(t5.$index(t4, "height"));
          if (typeof t4 !== "number")
            return H.iae(t4);
          t4 = y < t4;
        } else
          t4 = y >= 0;
        if (!t4)
          break;
        x = startX;
        while (true) {
          if (t1) {
            t4 = H.interceptedTypeCast(t3._GridCache$_store._StoreTransferAble$_store.$index(0, _s4_), "$isMap");
            t5 = J.getInterceptor$asx(t4);
            t6 = H.intTypeCast(t5.$index(t4, "width"));
            H.intTypeCast(t5.$index(t4, "height"));
            if (typeof t6 !== "number")
              return H.iae(t6);
            t6 = x < t6;
            t4 = t6;
          } else
            t4 = x >= 0;
          if (!t4)
            break;
          _this.recomputeBox$2(new E.Position(x, y), direction);
          x += deltaX;
        }
        y += deltaY;
      }
    },
    recomputeBox$2: function(position, direction) {
      var jumpDirectionsAhead, t5, t6, t7, preJump, _this = this,
        prePosition = position.goMulti$2(direction, 1),
        t1 = _this.grid,
        t2 = t1._grid._Array2D$_array,
        t3 = position.x,
        t4 = position.y;
      if (!H.boolConversionCheck(J.$index$asx(J.$index$asx((t2 && C.JSArray_methods).$index(t2, t3), t4), direction))) {
        t1 = _this.data;
        t2 = t1._Array2D$_array;
        J.$index$asx((t2 && C.JSArray_methods).$index(t2, t3), t4).signposts.$index(0, direction).type = C.DirectedJumpPointSearchDataPointDirectionType_0;
        t2 = t1._Array2D$_array;
        J.$index$asx((t2 && C.JSArray_methods).$index(t2, t3), t4).signposts.$index(0, direction).distance = 0;
      } else {
        jumpDirectionsAhead = X.DirectedJumpPointSearchJumpPoints_jumpDirections(t1, prePosition, direction, new E.DirectedJumpPointSearchPreCalculator_recomputeBox_closure(_this), true);
        t1 = jumpDirectionsAhead._collection$_length;
        t2 = _this.data;
        t5 = prePosition.x;
        t6 = prePosition.y;
        t7 = t2._Array2D$_array;
        if (t1 > 0) {
          J.$index$asx((t7 && C.JSArray_methods).$index(t7, t3), t4).signposts.$index(0, direction).type = C.DirectedJumpPointSearchDataPointDirectionType_1;
          t1 = t2._Array2D$_array;
          J.$index$asx((t1 && C.JSArray_methods).$index(t1, t5), t6).directionAdvisers.$index(0, direction).set$jumpDirections(jumpDirectionsAhead);
          t6 = t2._Array2D$_array;
          J.$index$asx((t6 && C.JSArray_methods).$index(t6, t3), t4).signposts.$index(0, direction).distance = 1;
        } else {
          preJump = J.$index$asx((t7 && C.JSArray_methods).$index(t7, t5), t6).signposts.$index(0, direction);
          t1 = t2._Array2D$_array;
          J.$index$asx((t1 && C.JSArray_methods).$index(t1, t3), t4).signposts.$index(0, direction).type = preJump.type;
          t1 = t2._Array2D$_array;
          J.$index$asx((t1 && C.JSArray_methods).$index(t1, t3), t4).signposts.$index(0, direction).distance = preJump.distance + 1;
        }
        t1 = t2;
      }
      t1 = t1._Array2D$_array;
      J.$index$asx((t1 && C.JSArray_methods).$index(t1, t3), t4).signposts.$index(0, direction);
    }
  };
  E.DirectedJumpPointSearchPreCalculator_closure.prototype = {
    call$5: function(grid, startPosition, targetPosition, heuristic, turnOfHistory) {
      var t1 = grid._GridCache$_store._StoreTransferAble$_store;
      t1 = new E.DirectedJumpPointSearchPreCalculator(E.DirectedJumpPointSearchData$(F.Size$fromMap(H.interceptedTypeCast(t1.$index(0, "size"), "$isMap"))), grid, startPosition, targetPosition, heuristic, turnOfHistory, Y.SearchHistory$(F.Size$fromMap(H.interceptedTypeCast(t1.$index(0, "size"), "$isMap"))));
      t1.searched = false;
      return t1;
    },
    $signature: 78
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator.prototype = {
    call$3: function(origin, position, direction) {
      var path,
        t1 = this.$this.data._Array2D$_array,
        signpost = J.$index$asx((t1 && C.JSArray_methods).$index(t1, position.x), position.y).signposts.$index(0, direction);
      t1 = E.Position;
      path = P.List_List$generate(signpost.distance + 1, new E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator_closure(position, direction), t1);
      return new S.Tuple2(H.setRuntimeTypeInfo([K.PathHighlight$styled(signpost.type === C.DirectedJumpPointSearchDataPointDirectionType_0 ? "red" : "green", path, null, true, null)], [K.Highlight]), H.setRuntimeTypeInfo([origin], [t1]), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]]);
    }
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator_closure.prototype = {
    call$1: function(d) {
      return this.position.goMulti$2(this.direction, d);
    },
    $signature: 38
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator.prototype = {
    call$4: function(origin, position, jumpDirections, depth) {
      var t1, t2, highlights;
      H.assertSubtype(jumpDirections, "$isIterable", [O.Direction], "$asIterable");
      t1 = [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]];
      t2 = H.getTypeArgumentByIndex(jumpDirections, 0);
      highlights = new H.MappedListIterable(jumpDirections, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure(this.pathHighlightGenerator, origin, position), {func: 1, ret: t1, args: [t2]}), [t2, t1]).toList$0(0);
      if (depth > 1)
        C.JSArray_methods.addAll$1(highlights, new H.ExpandIterable(jumpDirections, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure0(this.$this, position, this, origin, depth), {func: 1, ret: [P.Iterable, t1], args: [t2]}), [t2, t1]));
      return highlights;
    }
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure.prototype = {
    call$1: function(directionInJumpTarget) {
      return this.pathHighlightGenerator.call$3(this.origin, this.position, H.interceptedTypeCheck(directionInJumpTarget, "$isDirection"));
    },
    $signature: 80
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure0.prototype = {
    call$1: function(direction) {
      var t1, t2, t3, jumpTarget, directionsInJumpTarget, _this = this;
      H.interceptedTypeCheck(direction, "$isDirection");
      t1 = _this.position;
      t2 = _this.$this.data;
      t3 = t2._Array2D$_array;
      jumpTarget = t1.goMulti$2(direction, J.$index$asx((t3 && C.JSArray_methods).$index(t3, t1.x), t1.y).signposts.$index(0, direction).distance);
      directionsInJumpTarget = H.setRuntimeTypeInfo([direction], [O.Direction]);
      t2 = t2._Array2D$_array;
      C.JSArray_methods.addAll$1(directionsInJumpTarget, J.$index$asx((t2 && C.JSArray_methods).$index(t2, jumpTarget.x), jumpTarget.y).directionAdvisers.$index(0, direction).jumpDirections);
      return _this.pathHighlightsGenerator.call$4(_this.origin, jumpTarget, directionsInJumpTarget, _this.depth - 1);
    },
    $signature: 81
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_closure.prototype = {
    call$1: function(position) {
      H.interceptedTypeCheck(position, "$isPosition");
      return this.pathHighlightsGenerator.call$4(position, position, C.List_4j7, 1);
    },
    $signature: 82
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights.prototype = {
    call$1: function(where) {
      var t1, t2, t3, t4;
      H.functionTypeCheck(where, {func: 1, ret: P.bool, args: [E.DirectedJumpPointSearchDataSignpost]});
      t1 = this.$this;
      t2 = F.Size$fromMap(H.interceptedTypeCast(t1.grid._GridCache$_store._StoreTransferAble$_store.$index(0, "size"), "$isMap")).positions$0();
      t3 = [S.Tuple2, [P.List, K.DirectionTextHighlight], [P.List, E.Position]];
      t4 = H.getRuntimeTypeArgument(t2, "Iterable", 0);
      return P.List_List$from(new H.ExpandIterable(t2, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights_closure(t1, where), {func: 1, ret: [P.Iterable, t3], args: [t4]}), [t4, t3]), true, t3);
    },
    $signature: 83
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights_closure.prototype = {
    call$1: function(position) {
      var t1, t2, t3;
      H.interceptedTypeCheck(position, "$isPosition");
      t1 = this.$this;
      t2 = H.getTypeArgumentByIndex(C.List_4j7, 0);
      t3 = [S.Tuple2, [P.List, K.DirectionTextHighlight], [P.List, E.Position]];
      return new H.MappedIterable(new H.WhereIterable(C.List_4j7, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure(t1, this.where, position), {func: 1, ret: P.bool, args: [t2]}), [t2]), H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure0(t1, position), {func: 1, ret: t3, args: [t2]}), [t2, t3]);
    },
    $signature: 84
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure.prototype = {
    call$1: function(direction) {
      var t1, t2;
      H.interceptedTypeCheck(direction, "$isDirection");
      t1 = this.position;
      t2 = this.$this.data._Array2D$_array;
      return this.where.call$1(J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y).signposts.$index(0, direction));
    },
    $signature: 12
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure0.prototype = {
    call$1: function(direction) {
      var t1, t2, dataPointDirection, t3;
      H.interceptedTypeCheck(direction, "$isDirection");
      t1 = this.position;
      t2 = this.$this.data._Array2D$_array;
      dataPointDirection = J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y).signposts.$index(0, direction);
      t2 = dataPointDirection.type;
      if (t2 === C.DirectedJumpPointSearchDataPointDirectionType_0)
        t2 = "red";
      else
        t2 = t2 === C.DirectedJumpPointSearchDataPointDirectionType_2 ? "yellow" : "green";
      t3 = new K.DirectionTextHighlight(direction, "" + dataPointDirection.distance, "pleaseSetStyle");
      t3.style = t2;
      return new S.Tuple2(H.setRuntimeTypeInfo([t3], [K.DirectionTextHighlight]), H.setRuntimeTypeInfo([t1], [E.Position]), [[P.List, K.DirectionTextHighlight], [P.List, E.Position]]);
    },
    $signature: 85
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_closure0.prototype = {
    call$1: function(dataPointDirection) {
      return dataPointDirection.type !== C.DirectedJumpPointSearchDataPointDirectionType_0;
    },
    $signature: 27
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_closure1.prototype = {
    call$1: function(dataPointDirection) {
      return dataPointDirection.type === C.DirectedJumpPointSearchDataPointDirectionType_0;
    },
    $signature: 27
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_closure2.prototype = {
    call$1: function(d) {
      return true;
    },
    $signature: 27
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights.prototype = {
    call$1: function(sourceDirections) {
      var t1, t2, t3, t4;
      H.assertSubtype(sourceDirections, "$isList", [O.Direction], "$asList");
      t1 = this.$this;
      t2 = F.Size$fromMap(H.interceptedTypeCast(t1.grid._GridCache$_store._StoreTransferAble$_store.$index(0, "size"), "$isMap")).positions$0();
      t3 = K.PathHighlight;
      t4 = H.getRuntimeTypeArgument(t2, "Iterable", 0);
      return P.List_List$from(new H.ExpandIterable(t2, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights_closure(t1, sourceDirections), {func: 1, ret: [P.Iterable, t3], args: [t4]}), [t4, t3]), true, t3);
    },
    $signature: 87
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights_closure.prototype = {
    call$1: function(position) {
      var t1 = this.sourceDirections,
        t2 = K.PathHighlight,
        t3 = H.getTypeArgumentByIndex(t1, 0);
      return new H.ExpandIterable(t1, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights__closure(this.$this, H.interceptedTypeCheck(position, "$isPosition")), {func: 1, ret: [P.Iterable, t2], args: [t3]}), [t3, t2]);
    },
    $signature: 36
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights__closure.prototype = {
    call$1: function(direction) {
      var t1, t2, t3, t4, forcedDirections;
      H.interceptedTypeCheck(direction, "$isDirection");
      t1 = this.position;
      t2 = this.$this.data._Array2D$_array;
      t2 = J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y).directionAdvisers.$index(0, direction).jumpDirections;
      if (t2._collection$_length === 0)
        return C.List_empty2;
      t3 = K.PathHighlight;
      t4 = H.getTypeArgumentByIndex(t2, 0);
      forcedDirections = P.List_List$from(new H.EfficientLengthMappedIterable(t2, H.functionTypeCheck(new E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights___closure(t1), {func: 1, ret: t3, args: [t4]}), [t4, t3]), true, t3);
      t1 = H.setRuntimeTypeInfo([t1.goMulti$2(O.Directions_turn(direction, 180), 1), t1], [E.Position]);
      t1 = H.setRuntimeTypeInfo([K.PathHighlight$styled("black", t1, 0, true, C.JSArray_methods.contains$1(C.List_O1c, direction) ? 3 : 2)], [t3]);
      C.JSArray_methods.addAll$1(t1, forcedDirections);
      return t1;
    },
    $signature: 88
  };
  E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights___closure.prototype = {
    call$1: function(d) {
      var t1;
      H.interceptedTypeCheck(d, "$isDirection");
      t1 = this.position;
      t1 = H.setRuntimeTypeInfo([t1, t1.goMulti$2(d, 1)], [E.Position]);
      return K.PathHighlight$styled("green dotted", t1, C.JSArray_methods.contains$1(C.List_O1c, d) ? 3 : 2, true, 0);
    },
    $signature: 21
  };
  E.DirectedJumpPointSearchPreCalculator_recomputeBox_closure.prototype = {
    call$2: function(position, direction) {
      var t1 = this.$this.data._Array2D$_array;
      return J.$index$asx((t1 && C.JSArray_methods).$index(t1, position.x), position.y).signposts.$index(0, direction).get$isJumpPointAhead();
    },
    $signature: 25
  };
  E.DirectedJumpPointSearchData.prototype = {
    $asArray2D: function() {
      return [E.DirectedJumpPointSearchDataPoint];
    }
  };
  E.DirectedJumpPointSearchData_closure.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isPosition");
      return E.DirectedJumpPointSearchDataPoint$();
    },
    $signature: 89
  };
  E.DirectedJumpPointSearchDataPoint.prototype = {};
  E.DirectedJumpPointSearchDataPoint_closure.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isDirection");
      return new E.DirectedJumpPointSearchDataSignpost(C.DirectedJumpPointSearchDataPointDirectionType_0);
    },
    $signature: 90
  };
  E.DirectedJumpPointSearchDataPoint_closure0.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isDirection");
      return new E.DirectedJumpPointSearchDataDirectionAdviser(P.LinkedHashSet_LinkedHashSet(O.Direction));
    },
    $signature: 91
  };
  E.DirectedJumpPointSearchDataSignpost.prototype = {
    get$isJumpPointAhead: function() {
      var t1 = this.type;
      return t1 === C.DirectedJumpPointSearchDataPointDirectionType_1 || t1 === C.DirectedJumpPointSearchDataPointDirectionType_2;
    },
    get$type: function(receiver) {
      return this.type;
    }
  };
  E.DirectedJumpPointSearchDataDirectionAdviser.prototype = {
    set$jumpDirections: function(jumpDirections) {
      this.jumpDirections = H.assertSubtype(jumpDirections, "$isSet", [O.Direction], "$asSet");
    }
  };
  E.DirectedJumpPointSearchDataPointDirectionType.prototype = {
    toString$0: function(_) {
      return this._DirectedJumpPointSearchPreCalculator$_name;
    }
  };
  E.CountDirection.prototype = {
    toString$0: function(_) {
      return this._DirectedJumpPointSearchPreCalculator$_name;
    }
  };
  O.Direction.prototype = {
    toString$0: function(_) {
      return this._Direction$_name;
    }
  };
  X.Distance.prototype = {
    $add: function(_, other) {
      var t3, t4,
        t1 = this._cardinal,
        t2 = other._cardinal;
      if (typeof t1 !== "number")
        return t1.$add();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = this._diagonal;
      t4 = other._diagonal;
      if (typeof t3 !== "number")
        return t3.$add();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return new X.Distance(t1 + t2, t3 + t4);
    },
    $lt: function(_, other) {
      if (other._cardinal != this._cardinal || other._diagonal != this._diagonal)
        return this.length$0(0) < other.length$0(0);
      else
        return false;
    },
    length$0: function(_) {
      var t1 = this._cardinal,
        t2 = this._diagonal,
        t3 = Math.sqrt(2);
      if (typeof t2 !== "number")
        return t2.$mul();
      if (typeof t1 !== "number")
        return t1.$add();
      return t1 + t2 * t3;
    },
    $eq: function(_, other) {
      var t1;
      if (other == null)
        return false;
      if (this !== other)
        t1 = other instanceof X.Distance && this._cardinal == other._cardinal && this._diagonal == other._diagonal;
      else
        t1 = true;
      return t1;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this._cardinal) ^ J.get$hashCode$(this._diagonal);
    }
  };
  N.EditBarrierMouseMode.prototype = {
    get$name: function(_) {
      return "EditBarrierMouseMode";
    },
    evaluateNode$1: function(position) {
      var t2, maybeNewEasyFillMode, easyFillMode,
        t1 = this._reactGrid,
        barrier = J.get$store$z(t1.get$props(t1)).getBarrier$1(position),
        structureNodeType = this.getStructureNodeType$1(position);
      if (C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(J.get$store$z(t1.get$props(t1))._StoreTransferAble$_store.$index(0, "gridMode"))) === C.GridMode_0)
        t2 = structureNodeType === C.StructureNodeType_2 || barrier.isAnyBlocked$0();
      else
        t2 = false;
      if (t2) {
        maybeNewEasyFillMode = !barrier.isAnyBlocked$0();
        easyFillMode = this._getAndUpdateEasyFillMode$1(maybeNewEasyFillMode);
        if (maybeNewEasyFillMode === easyFillMode) {
          t1 = J.get$store$z(t1.get$props(t1))._gridBarrierManager;
          t1.toString;
          barrier = H.boolConversionCheck(easyFillMode) ? D.Barrier_totalBlocked() : D.Barrier_totalUnblocked();
          t1._BarrierManager$_store.$set$2(0, "barrier_" + H.S(position), barrier.toMap$0());
        }
      }
    },
    evaluateNodePart$2$direction: function(position, direction) {
      var t1, t2, maybeNewEasyFillModus, easyFillModus, cornerMode, directionalMode, otherPosition, positionPlus45, positionMinus45, positionPlus0, _s4_ = "size";
      if (direction != null) {
        t1 = this._reactGrid;
        if (C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(J.get$store$z(t1.get$props(t1))._StoreTransferAble$_store.$index(0, "gridMode"))) === C.GridMode_1) {
          t2 = J.get$store$z(t1.get$props(t1))._gridBarrierManager;
          t2.toString;
          maybeNewEasyFillModus = t2.leaveAble$2(position.goMulti$2(direction, 1), O.Directions_turn(direction, 180));
          easyFillModus = this._getAndUpdateEasyFillMode$1(maybeNewEasyFillModus);
          if (maybeNewEasyFillModus === easyFillModus) {
            t1 = J.get$store$z(t1.get$props(t1))._gridBarrierManager;
            t2 = t1._BarrierManager$_store._StoreTransferAble$_store;
            cornerMode = C.JSArray_methods.$index(C.List_CornerMode_0_CornerMode_1, H.intTypeCast(t2.$index(0, "cornerMode")));
            directionalMode = C.JSArray_methods.$index(C.List_WPn, H.intTypeCast(t2.$index(0, "directionalMode")));
            t1._setDirect$3(position, direction, easyFillModus);
            if (directionalMode === C.DirectionalMode_1) {
              otherPosition = position.goMulti$2(direction, 1);
              if (otherPosition.legal$1(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, _s4_), "$isMap"))))
                t1._setDirect$3(otherPosition, O.Directions_turn(direction, 180), easyFillModus);
            }
            if (cornerMode === C.CornerMode_1 && C.JSArray_methods.contains$1(C.List_O1c, direction)) {
              positionPlus45 = position.goMulti$2(O.Directions_turn(direction, 45), 1);
              if (positionPlus45.legal$1(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, _s4_), "$isMap"))))
                t1._setDirect$3(positionPlus45, O.Directions_turn(direction, -90), easyFillModus);
              positionMinus45 = position.goMulti$2(O.Directions_turn(direction, -45), 1);
              if (positionMinus45.legal$1(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, _s4_), "$isMap"))))
                t1._setDirect$3(positionMinus45, O.Directions_turn(direction, 90), easyFillModus);
              positionPlus0 = position.goMulti$2(O.Directions_turn(direction, 0), 1);
              if (positionPlus0.legal$1(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, _s4_), "$isMap"))))
                t1._setDirect$3(positionPlus0, O.Directions_turn(direction, 180), easyFillModus);
            }
          }
        }
      }
    },
    _getAndUpdateEasyFillMode$1: function(maybeNewValue) {
      var t1 = this._easyFillMode,
        t2 = H.functionTypeCheck(new N.EditBarrierMouseMode__getAndUpdateEasyFillMode_closure(this, maybeNewValue), {func: 1, ret: -1});
      if (t1._core0$_value == null)
        t2.call$0();
      t1 = this._easyFillMode;
      return t1.get$value(t1);
    },
    set$_easyFillMode: function(_easyFillMode) {
      this._easyFillMode = H.assertSubtype(_easyFillMode, "$isOptional", [P.bool], "$asOptional");
    }
  };
  N.EditBarrierMouseMode__getAndUpdateEasyFillMode_closure.prototype = {
    call$0: function() {
      var t1 = X.Optional$of(this.maybeNewValue, P.bool);
      this.$this.set$_easyFillMode(t1);
      return t1;
    },
    $signature: 93
  };
  B.EditNodeTypeMouseMode.prototype = {
    get$name: function(_) {
      return "EditNodeTypeMouseMode";
    },
    evaluateNode$1: function(position) {
      var t2, _this = this,
        t1 = _this._reactGrid,
        barrier = J.get$store$z(t1.get$props(t1)).getBarrier$1(position);
      if (_this.getStructureNodeType$1(position) === C.StructureNodeType_2)
        t2 = !barrier.isAnyBlocked$0() || C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(J.get$store$z(t1.get$props(t1))._StoreTransferAble$_store.$index(0, "gridMode"))) !== C.GridMode_0;
      else
        t2 = false;
      if (t2) {
        if (_this._structureTypeChanging === C.StructureNodeType_0)
          J.get$store$z(t1.get$props(t1))._gridManager.setStartPosition$1(position);
        if (_this._structureTypeChanging === C.StructureNodeType_1)
          J.get$store$z(t1.get$props(t1))._gridManager.setTargetPosition$1(position);
      }
    },
    evaluateNodePart$2$direction: function(position, direction) {
      this.evaluateNode$1(position);
    }
  };
  G.AlgorithmType.prototype = {
    toString$0: function(_) {
      return this._Enums$_name;
    }
  };
  G.HeuristicType.prototype = {
    toString$0: function(_) {
      return this._Enums$_name;
    }
  };
  G.AlgorithmUpdateMode.prototype = {
    toString$0: function(_) {
      return this._Enums$_name;
    }
  };
  G.GridMode.prototype = {
    toString$0: function(_) {
      return this._Enums$_name;
    }
  };
  G.DirectionMode.prototype = {
    toString$0: function(_) {
      return this._Enums$_name;
    }
  };
  G.DirectionalMode.prototype = {
    toString$0: function(_) {
      return this._Enums$_name;
    }
  };
  G.CornerMode.prototype = {
    toString$0: function(_) {
      return this._Enums$_name;
    }
  };
  Z.Euclidean.prototype = {
    calc$2: function(p1, p2) {
      var t3,
        t1 = p1.x,
        t2 = p2.x;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t2 = Math.pow(t1 - t2, 2);
      t1 = p1.y;
      t3 = p2.y;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      return Math.sqrt(t2 + Math.pow(t1 - t3, 2));
    },
    getPath$2: function(source, target) {
      return H.setRuntimeTypeInfo([source, target], [E.Position]);
    }
  };
  M.Explanation.prototype = {
    toMap$0: function() {
      var t2, t3, t4,
        t1 = new H.JsLinkedHashMap([null, null]);
      t1.$indexSet(0, "style", this.style);
      t2 = this._explanation;
      t3 = [P.Map,,,];
      t4 = H.getTypeArgumentByIndex(t2, 0);
      t1.$indexSet(0, "explanation", new H.MappedListIterable(t2, H.functionTypeCheck(new M.Explanation_toMap_closure(), {func: 1, ret: t3, args: [t4]}), [t4, t3]).toList$0(0));
      return t1;
    }
  };
  M.Explanation$fromMap_closure.prototype = {
    call$1: function(map) {
      var t1;
      H.interceptedTypeCast(map, "$isMap");
      t1 = J.getInterceptor$asx(map);
      return new M.ExplanationPart(H.stringTypeCast(t1.$index(map, "id")), H.stringTypeCast(t1.$index(map, "text")), H.stringTypeCast(t1.$index(map, "style")));
    },
    $signature: 94
  };
  M.Explanation_toMap_closure.prototype = {
    call$1: function(e) {
      var t1;
      H.interceptedTypeCheck(e, "$isExplanationPart");
      t1 = new H.JsLinkedHashMap([null, null]);
      t1.$indexSet(0, "id", e.id);
      t1.$indexSet(0, "text", e.text);
      t1.$indexSet(0, "style", e.style);
      return t1;
    },
    $signature: 95
  };
  M.ExplanationPart.prototype = {};
  S.GridCache.prototype = {
    GridCache$1: function(_store) {
      var t1, t2, _this = this;
      _this.rebuild$0();
      t1 = _this._GridCache$_store;
      t2 = [P.String];
      t1.addEqualListener$2(H.setRuntimeTypeInfo(["size", "gridMode", "directionMode", "cornerMode", "directionalMode"], t2), _this.get$rebuild());
      t2 = H.assertSubtype(H.setRuntimeTypeInfo(["barrier_"], t2), "$isList", t2, "$asList");
      t1._startsWithListener.$indexSet(0, H.functionTypeCheck(new S.GridCache_closure(_this), {func: 1, ret: -1, args: [[P.Iterable, P.String]]}), t2);
    },
    rebuild$0: function() {
      var t1 = this._GridCache$_store._StoreTransferAble$_store;
      this.set$_grid(K.Array2D$(F.Size$fromMap(H.interceptedTypeCast(t1.$index(0, "size"), "$isMap")), new S.GridCache_rebuild_closure(), [P.Map, O.Direction, P.bool]));
      for (t1 = F.Size$fromMap(H.interceptedTypeCast(t1.$index(0, "size"), "$isMap")).positions$0(), t1 = new H.ExpandIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, C.C_EmptyIterator, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]); t1.moveNext$0();)
        this._updateOne$1(t1.__internal$_current);
    },
    _updateOne$1: function(position) {
      var t1, _i, direction, t2;
      H.interceptedTypeCheck(position, "$isPosition");
      for (t1 = this._GridCache$_store, _i = 0; _i < 8; ++_i) {
        direction = C.List_4j7[_i];
        t2 = this._grid._Array2D$_array;
        J.$indexSet$ax(J.$index$asx((t2 && C.JSArray_methods).$index(t2, position.x), position.y), direction, t1._gridBarrierManager.leaveAble$2(position, direction));
      }
    },
    accessibleNeighbours$1: function(origin) {
      var t1 = H.getTypeArgumentByIndex(C.List_4j7, 0),
        t2 = E.Position;
      return new H.WhereIterable(new H.MappedIterable(new H.WhereIterable(C.List_4j7, H.functionTypeCheck(new S.GridCache_accessibleNeighbours_closure(this, origin), {func: 1, ret: P.bool, args: [t1]}), [t1]), H.functionTypeCheck(new S.GridCache_accessibleNeighbours_closure0(origin), {func: 1, ret: t2, args: [t1]}), [t1, t2]), H.functionTypeCheck(new S.GridCache_accessibleNeighbours_closure1(this), {func: 1, ret: P.bool, args: [t2]}), [t2]);
    },
    set$_grid: function(_grid) {
      this._grid = H.assertSubtype(_grid, "$isArray2D", [[P.Map, O.Direction, P.bool]], "$asArray2D");
    }
  };
  S.GridCache_closure.prototype = {
    call$1: function(ids) {
      var t1, t2, t3, t4, t5, t6, t7, position;
      for (t1 = J.get$iterator$ax(H.assertSubtype(ids, "$isIterable", [P.String], "$asIterable")), t2 = this.$this, t3 = t2._GridCache$_store._StoreTransferAble$_store, t4 = t2.get$_updateOne(); t1.moveNext$0();) {
        t5 = t1.get$current(t1);
        t5 = C.JSString_methods.substring$1(t5, J.getInterceptor$s(t5).indexOf$1(t5, "("));
        t6 = C.JSString_methods.indexOf$1(t5, "(");
        t7 = C.JSString_methods.indexOf$1(t5, ",");
        position = new E.Position(P.int_parse(C.JSString_methods.substring$2(t5, t6 + 1, t7)), P.int_parse(C.JSString_methods.substring$2(t5, t7 + 1, C.JSString_methods.indexOf$1(t5, ")"))));
        t5 = H.interceptedTypeCast(t3.$index(0, "size"), "$isMap");
        t6 = J.getInterceptor$asx(t5);
        if (position.legal$1(new F.Size(H.intTypeCast(t6.$index(t5, "width")), H.intTypeCast(t6.$index(t5, "height"))))) {
          t2._updateOne$1(position);
          t5 = H.interceptedTypeCast(t3.$index(0, "size"), "$isMap");
          t6 = J.getInterceptor$asx(t5);
          position.neighbours$1(new F.Size(H.intTypeCast(t6.$index(t5, "width")), H.intTypeCast(t6.$index(t5, "height")))).forEach$1(0, t4);
        }
      }
    },
    $signature: 24
  };
  S.GridCache_rebuild_closure.prototype = {
    call$1: function(p) {
      H.interceptedTypeCheck(p, "$isPosition");
      return P.LinkedHashMap_LinkedHashMap$fromIterable(C.List_4j7, null, new S.GridCache_rebuild__closure(), O.Direction, P.bool);
    },
    $signature: 97
  };
  S.GridCache_rebuild__closure.prototype = {
    call$1: function(d) {
      return false;
    },
    $signature: 15
  };
  S.GridCache_accessibleNeighbours_closure.prototype = {
    call$1: function(direction) {
      var t1, t2;
      H.interceptedTypeCheck(direction, "$isDirection");
      t1 = this.origin;
      t2 = this.$this._grid._Array2D$_array;
      return J.$index$asx(J.$index$asx((t2 && C.JSArray_methods).$index(t2, t1.x), t1.y), direction);
    },
    $signature: 12
  };
  S.GridCache_accessibleNeighbours_closure0.prototype = {
    call$1: function(direction) {
      return this.origin.goMulti$2(H.interceptedTypeCheck(direction, "$isDirection"), 1);
    },
    $signature: 40
  };
  S.GridCache_accessibleNeighbours_closure1.prototype = {
    call$1: function(position) {
      return H.interceptedTypeCheck(position, "$isPosition").legal$1(F.Size$fromMap(H.interceptedTypeCast(this.$this._GridCache$_store._StoreTransferAble$_store.$index(0, "size"), "$isMap")));
    },
    $signature: 10
  };
  N.GridManager.prototype = {
    setSize$1: function(_, newMaybeSize) {
      var newSize, t6, newStartPosition, newTargetPosition,
        _s13_ = "startPosition",
        _s14_ = "targetPosition",
        t1 = newMaybeSize.width,
        t2 = $.$get$Settings_minSize(),
        t3 = t2.width,
        t4 = $.$get$Settings_maxSize(),
        t5 = t4.width;
      if (typeof t1 !== "number")
        return t1.$lt();
      if (typeof t3 !== "number")
        return H.iae(t3);
      if (t1 < t3)
        t1 = t3;
      else {
        if (typeof t5 !== "number")
          return H.iae(t5);
        if (t1 > t5)
          t1 = t5;
      }
      t3 = newMaybeSize.height;
      t2 = t2.height;
      t4 = t4.height;
      if (typeof t3 !== "number")
        return t3.$lt();
      if (typeof t2 !== "number")
        return H.iae(t2);
      if (!(t3 < t2)) {
        if (typeof t4 !== "number")
          return H.iae(t4);
        if (t3 > t4)
          t2 = t4;
        else
          t2 = t3;
      }
      newSize = new F.Size(t1, t2);
      t3 = this._GridManager$_store;
      t4 = t3._StoreTransferAble$_store;
      t5 = E.Position$fromMap(H.interceptedTypeCast(t4.$index(0, _s13_), "$isMap")).x;
      --t1;
      if (typeof t5 !== "number")
        return t5.$lt();
      if (t5 < 0)
        t5 = 0;
      else if (t5 > t1)
        t5 = t1;
      t6 = E.Position$fromMap(H.interceptedTypeCast(t4.$index(0, _s13_), "$isMap")).y;
      --t2;
      if (typeof t6 !== "number")
        return t6.$lt();
      if (t6 < 0)
        t6 = 0;
      else if (t6 > t2)
        t6 = t2;
      newStartPosition = new E.Position(t5, t6);
      t6 = E.Position$fromMap(H.interceptedTypeCast(t4.$index(0, _s14_), "$isMap")).x;
      if (typeof t6 !== "number")
        return t6.$lt();
      if (t6 < 0)
        t1 = 0;
      else if (!(t6 > t1))
        t1 = t6;
      t4 = E.Position$fromMap(H.interceptedTypeCast(t4.$index(0, _s14_), "$isMap")).y;
      if (typeof t4 !== "number")
        return t4.$lt();
      if (t4 < 0)
        t2 = 0;
      else if (!(t4 > t2))
        t2 = t4;
      newTargetPosition = new E.Position(t1, t2);
      if (newStartPosition.$eq(0, newTargetPosition))
        newStartPosition = !newTargetPosition.$eq(0, new E.Position(0, 0)) ? new E.Position(0, 0) : new E.Position(1, 1);
      if (t3.autoTriggerListeners) {
        t3.autoTriggerListeners = false;
        t3.$set$2(0, "size", newSize.toMap$0());
        t3.$set$2(0, _s13_, newStartPosition.toMap$0());
        t3.$set$2(0, _s14_, newTargetPosition.toMap$0());
        t3.autoTriggerListeners = true;
        t3.triggerListeners$0();
      } else {
        t3.$set$2(0, "size", newSize.toMap$0());
        t3.$set$2(0, _s13_, newStartPosition.toMap$0());
        t3.$set$2(0, _s14_, newTargetPosition.toMap$0());
      }
    },
    setStartPosition$1: function(newStartPosition) {
      var oldStartPosition,
        _s13_ = "startPosition",
        t1 = this._GridManager$_store,
        t2 = t1._StoreTransferAble$_store;
      if (newStartPosition.legal$1(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, "size"), "$isMap"))) && !newStartPosition.$eq(0, E.Position$fromMap(H.interceptedTypeCast(t2.$index(0, "targetPosition"), "$isMap")))) {
        oldStartPosition = E.Position$fromMap(H.interceptedTypeCast(t2.$index(0, _s13_), "$isMap"));
        t1.$set$2(0, _s13_, newStartPosition.toMap$0());
        t1.addChange$2("position_" + newStartPosition.toString$0(0), false);
        t1.addChange$2("position_" + oldStartPosition.toString$0(0), false);
      }
    },
    setTargetPosition$1: function(newTargetPosition) {
      var oldTargetPosition,
        _s14_ = "targetPosition",
        t1 = this._GridManager$_store,
        t2 = t1._StoreTransferAble$_store;
      if (newTargetPosition.legal$1(F.Size$fromMap(H.interceptedTypeCast(t2.$index(0, "size"), "$isMap"))) && !newTargetPosition.$eq(0, E.Position$fromMap(H.interceptedTypeCast(t2.$index(0, "startPosition"), "$isMap")))) {
        oldTargetPosition = E.Position$fromMap(H.interceptedTypeCast(t2.$index(0, _s14_), "$isMap"));
        t1.$set$2(0, _s14_, newTargetPosition.toMap$0());
        t1.addChange$2("position_" + newTargetPosition.toString$0(0), false);
        t1.addChange$2("position_" + oldTargetPosition.toString$0(0), false);
      }
    },
    clear$0: function(_) {
      var t1 = this._GridManager$_store;
      if (t1.autoTriggerListeners) {
        t1.autoTriggerListeners = false;
        $.$get$Settings_maxSize().positions$0().forEach$1(0, new N.GridManager_clear_closure(this));
        t1.autoTriggerListeners = true;
        t1.triggerListeners$0();
      } else
        $.$get$Settings_maxSize().positions$0().forEach$1(0, new N.GridManager_clear_closure0(this));
    }
  };
  N.GridManager_clear_closure.prototype = {
    call$1: function(p) {
      var t1;
      H.interceptedTypeCheck(p, "$isPosition");
      t1 = D.Barrier_totalUnblocked();
      return this.$this._GridManager$_store.$set$2(0, "barrier_" + H.S(p), t1.toMap$0());
    },
    $signature: 14
  };
  N.GridManager_clear_closure0.prototype = {
    call$1: function(p) {
      var t1;
      H.interceptedTypeCheck(p, "$isPosition");
      t1 = D.Barrier_totalUnblocked();
      return this.$this._GridManager$_store.$set$2(0, "barrier_" + H.S(p), t1.toMap$0());
    },
    $signature: 14
  };
  R.Heuristic.prototype = {
    toString$0: function(_) {
      return this._Heuristic$_name;
    }
  };
  K.Highlights_toListMap_closure.prototype = {
    call$1: function(h) {
      return H.interceptedTypeCheck(h, "$isHighlight").toMap$0();
    },
    $signature: 99
  };
  K.Highlights_fromListMap_closure.prototype = {
    call$1: function(map) {
      return K.Highlights_fromMap(H.interceptedTypeCheck(map, "$isMap"));
    },
    $signature: 100
  };
  K.Highlight.prototype = {
    toMap$0: function() {
      var t1 = new H.JsLinkedHashMap([null, null]);
      t1.$indexSet(0, "style", this.style);
      return t1;
    }
  };
  K.BoxHighlight.prototype = {
    toMap$0: function() {
      var t1 = new H.JsLinkedHashMap([null, null]);
      t1.$indexSet(0, "highlight", "BoxHighlight");
      t1.$indexSet(0, "style", this.style);
      return t1;
    }
  };
  K.CircleHighlight.prototype = {
    toMap$0: function() {
      var t1 = this.super$Highlight$toMap();
      t1.$indexSet(0, "highlight", "CircleHighlight");
      return t1;
    }
  };
  K.DotHighlight.prototype = {
    toMap$0: function() {
      var t1 = this.super$Highlight$toMap();
      t1.$indexSet(0, "highlight", "DotHighlight");
      return t1;
    }
  };
  K.PathHighlight.prototype = {
    toMap$0: function() {
      var t2, t3, t4, _this = this,
        t1 = _this.super$Highlight$toMap();
      t1.$indexSet(0, "highlight", "PathHighlight");
      t2 = _this.path;
      t3 = [P.Map,,,];
      t4 = H.getTypeArgumentByIndex(t2, 0);
      t1.$indexSet(0, "path", new H.MappedListIterable(t2, H.functionTypeCheck(new K.PathHighlight_toMap_closure(), {func: 1, ret: t3, args: [t4]}), [t4, t3]).toList$0(0));
      t1.$indexSet(0, "showEnd", _this.showEnd);
      t1.$indexSet(0, "showStart", _this.showStart);
      t1.$indexSet(0, "startIntermediate", _this.startIntermediate);
      t1.$indexSet(0, "endIntermediate", _this.endIntermediate);
      return t1;
    }
  };
  K.PathHighlight$fromMap_closure.prototype = {
    call$1: function(map) {
      return E.Position$fromMap(H.interceptedTypeCast(map, "$isMap"));
    },
    $signature: 101
  };
  K.PathHighlight_toMap_closure.prototype = {
    call$1: function(p) {
      return H.interceptedTypeCheck(p, "$isPosition").toMap$0();
    },
    $signature: 102
  };
  K.TextHighlight.prototype = {
    toMap$0: function() {
      var t1 = this.super$Highlight$toMap();
      t1.$indexSet(0, "highlight", "TextHighlight");
      t1.$indexSet(0, "text", this.text);
      return t1;
    }
  };
  K.DirectionTextHighlight.prototype = {
    toMap$0: function() {
      var t1 = this.super$Highlight$toMap();
      t1.$indexSet(0, "highlight", "DirectionTextHighlight");
      t1.$indexSet(0, "direction", this.direction.index);
      t1.$indexSet(0, "text", this.text);
      return t1;
    }
  };
  E.DirectedJumpPointSearchHighlights_forcedDirections_closure.prototype = {
    call$1: function(direction) {
      var t1 = this.jumpPoint;
      return H.setRuntimeTypeInfo([K.PathHighlight$styled("green dotted", H.setRuntimeTypeInfo([t1, t1.goMulti$2(H.interceptedTypeCheck(direction, "$isDirection"), 1)], [E.Position]), null, true, null)], [K.Highlight]);
    },
    $signature: 103
  };
  M.Manhattan.prototype = {
    calc$2: function(p1, p2) {
      var t3, t4,
        t1 = p1.x,
        t2 = p2.x;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = p1.y;
      t4 = p2.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t4 !== "number")
        return H.iae(t4);
      return Math.abs(t1 - t2) + Math.abs(t3 - t4);
    },
    getPath$2: function(source, target) {
      var t1, t2, t3, t4,
        path = H.setRuntimeTypeInfo([source], [E.Position]);
      for (t1 = target.x; C.JSArray_methods.get$last(path).x != t1;) {
        t2 = C.JSArray_methods.get$last(path).x;
        t3 = C.JSArray_methods.get$last(path).x;
        if (typeof t3 !== "number")
          return t3.$gt();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t3 = t3 > t1 ? -1 : 1;
        if (typeof t2 !== "number")
          return t2.$add();
        C.JSArray_methods.add$1(path, new E.Position(t2 + t3, C.JSArray_methods.get$last(path).y));
      }
      for (t1 = target.y; C.JSArray_methods.get$last(path).y != t1;) {
        t2 = C.JSArray_methods.get$last(path).x;
        t3 = C.JSArray_methods.get$last(path).y;
        t4 = C.JSArray_methods.get$last(path).y;
        if (typeof t4 !== "number")
          return t4.$gt();
        if (typeof t1 !== "number")
          return H.iae(t1);
        t4 = t4 > t1 ? -1 : 1;
        if (typeof t3 !== "number")
          return t3.$add();
        C.JSArray_methods.add$1(path, new E.Position(t2, t3 + t4));
      }
      return path;
    }
  };
  N.MouseMode.prototype = {
    getStructureNodeType$1: function(position) {
      var t1 = this._reactGrid;
      if (E.Position$fromMap(H.interceptedTypeCast(J.get$store$z(t1.get$props(t1))._StoreTransferAble$_store.$index(0, "startPosition"), "$isMap")).$eq(0, position))
        return C.StructureNodeType_0;
      if (E.Position$fromMap(H.interceptedTypeCast(J.get$store$z(t1.get$props(t1))._StoreTransferAble$_store.$index(0, "targetPosition"), "$isMap")).$eq(0, position))
        return C.StructureNodeType_1;
      return C.StructureNodeType_2;
    }
  };
  N.StructureNodeType.prototype = {
    toString$0: function(_) {
      return this._MouseMode$_name;
    }
  };
  D.MouseTracker.prototype = {
    MouseTracker$0: function() {
      var t1, t2;
      this.lastMouseEvent = new P.DateTime(Date.now(), false);
      t1 = W.MouseEvent;
      t2 = {func: 1, ret: -1, args: [t1]};
      W._EventStreamSubscription$(window.document, "mousedown", H.functionTypeCheck(new D.MouseTracker_closure(this), t2), false, t1);
      W._EventStreamSubscription$(window.document, "mouseup", H.functionTypeCheck(new D.MouseTracker_closure0(this), t2), false, t1);
    }
  };
  D.MouseTracker_closure.prototype = {
    call$1: function($event) {
      var t1;
      H.interceptedTypeCheck($event, "$isMouseEvent");
      t1 = this.$this;
      t1._mouseIsDown = true;
      t1.lastMouseEvent = new P.DateTime(Date.now(), false);
    },
    $signature: 28
  };
  D.MouseTracker_closure0.prototype = {
    call$1: function($event) {
      var t1;
      H.interceptedTypeCheck($event, "$isMouseEvent");
      t1 = this.$this;
      t1._mouseIsDown = false;
      t1.lastMouseEvent = new P.DateTime(Date.now(), false);
    },
    $signature: 28
  };
  O.NoAlgorithm.prototype = {
    runInner$0: function() {
    }
  };
  O.NoAlgorithm_closure.prototype = {
    call$5: function(grid, startPosition, targetPosition, heuristic, turnOfHistory) {
      var t1 = new O.NoAlgorithm(grid, startPosition, targetPosition, heuristic, turnOfHistory, Y.SearchHistory$(F.Size$fromMap(H.interceptedTypeCast(grid._GridCache$_store._StoreTransferAble$_store.$index(0, "size"), "$isMap"))));
      t1.searched = false;
      return t1;
    },
    $signature: 105
  };
  O.ConstantZeroHeuristic.prototype = {
    calc$2: function(p1, p2) {
      return 0;
    },
    getPath$2: function(source, target) {
      return H.setRuntimeTypeInfo([], [E.Position]);
    }
  };
  T.Octile.prototype = {
    calc$2: function(p1, p2) {
      var dx, dy,
        t1 = p1.x,
        t2 = p2.x;
      if (typeof t1 !== "number")
        return t1.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      dx = Math.abs(t1 - t2);
      t2 = p1.y;
      t1 = p2.y;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t1 !== "number")
        return H.iae(t1);
      dy = Math.abs(t2 - t1);
      t1 = Math.max(dx, dy);
      t2 = Math.min(dx, dy);
      return t1 - t2 + Math.sqrt(2) * t2;
    },
    getPath$2: function(source, target) {
      var t3, t4, t5, t6,
        path = H.setRuntimeTypeInfo([source], [E.Position]),
        t1 = target.y,
        t2 = target.x;
      while (true) {
        if (!(C.JSArray_methods.get$last(path).x != t2 || C.JSArray_methods.get$last(path).y != t1))
          break;
        t3 = C.JSArray_methods.get$last(path).x;
        if (C.JSArray_methods.get$last(path).x != t2) {
          t4 = C.JSArray_methods.get$last(path).x;
          if (typeof t4 !== "number")
            return t4.$gt();
          if (typeof t2 !== "number")
            return H.iae(t2);
          t4 = t4 > t2 ? -1 : 1;
        } else
          t4 = 0;
        if (typeof t3 !== "number")
          return t3.$add();
        t5 = C.JSArray_methods.get$last(path).y;
        if (C.JSArray_methods.get$last(path).y != t1) {
          t6 = C.JSArray_methods.get$last(path).y;
          if (typeof t6 !== "number")
            return t6.$gt();
          if (typeof t1 !== "number")
            return H.iae(t1);
          t6 = t6 > t1 ? -1 : 1;
        } else
          t6 = 0;
        if (typeof t5 !== "number")
          return t5.$add();
        C.JSArray_methods.add$1(path, new E.Position(t3 + t4, t5 + t6));
      }
      return path;
    }
  };
  S.PathfinderWorker.prototype = {
    PathfinderWorker$noIsolate$1: function(other_store) {
      var _this = this;
      other_store.set$transferListener(new S.PathfinderWorker$noIsolate_closure(_this, other_store));
      _this._store.set$transferListener(new S.PathfinderWorker$noIsolate_closure0(_this, other_store));
      _this._setup$0();
    },
    _setup$0: function() {
      var t1 = [P.String];
      t1 = H.assertSubtype(H.setRuntimeTypeInfo(["size", "barrier_", "startPosition", "targetPosition", "algorithmType", "heuristicType", "gridMode", "directionMode", "cornerMode", "directionalMode", "currentStepId", "currentStepDescriptionHoverId"], t1), "$isList", t1, "$asList");
      this._store._startsWithListener.$indexSet(0, H.functionTypeCheck(new S.PathfinderWorker__setup_closure(this), {func: 1, ret: -1, args: [[P.Iterable, P.String]]}), t1);
      this._run$0();
    },
    _run$0: function() {
      var t1 = this._store;
      t1.autoTriggerListeners = false;
      this._runInner$1(H.intTypeCast(t1._StoreTransferAble$_store.$index(0, "currentStepId")));
      t1.autoTriggerListeners = true;
      t1.triggerListeners$0();
    },
    _runInner$1: function(currentStepId) {
      var t2, t3, startPosition, targetPosition, heuristic, algorithmFactory, algorithm, t4, t5, t6, t7, t8, t9, backgroundPathHighlights, foregroundPathHighlights, t10, backgroundHighlights, foregroundHighlights, t11, _null = null,
        _s9_ = "stepCount",
        _s10_ = "background",
        _s29_ = "currentStepDescriptionHoverId",
        t1 = "run algorithm with currentStepId = " + H.S(currentStepId);
      P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": " + t1);
      t1 = Date.now();
      t2 = this._store;
      t3 = t2._StoreTransferAble$_store;
      startPosition = E.Position$fromMap(H.interceptedTypeCast(t3.$index(0, "startPosition"), "$isMap"));
      targetPosition = E.Position$fromMap(H.interceptedTypeCast(t3.$index(0, "targetPosition"), "$isMap"));
      switch (C.JSArray_methods.$index(C.List_GRf, H.intTypeCast(t3.$index(0, "heuristicType")))) {
        case C.HeuristicType_1:
          heuristic = new F.Chebyshev("Chebyshev distance");
          break;
        case C.HeuristicType_0:
          heuristic = new O.ConstantZeroHeuristic("constant zero");
          break;
        case C.HeuristicType_2:
          heuristic = new Z.Euclidean("Euclidean distance");
          break;
        case C.HeuristicType_4:
          heuristic = new M.Manhattan("Manhattan distance");
          break;
        case C.HeuristicType_3:
          heuristic = new T.Octile("Octile distance");
          break;
        default:
          heuristic = _null;
      }
      switch (C.JSArray_methods.$index(C.List_MhI, H.intTypeCast(t3.$index(0, "algorithmType")))) {
        case C.AlgorithmType_0:
          algorithmFactory = $.$get$NoAlgorithm_factory();
          break;
        case C.AlgorithmType_1:
          algorithmFactory = $.$get$Dijkstra_factory();
          break;
        case C.AlgorithmType_2:
          algorithmFactory = $.$get$AStar_factory();
          break;
        case C.AlgorithmType_3:
          algorithmFactory = $.$get$DirectedJumpPointSearch_factory();
          break;
        case C.AlgorithmType_4:
          algorithmFactory = $.$get$DirectedJumpPointSearchLookUp_factory();
          break;
        case C.AlgorithmType_5:
          algorithmFactory = $.$get$DirectedJumpPointSearchPreCalculator_factory();
          break;
        default:
          algorithmFactory = _null;
      }
      algorithm = algorithmFactory.call$5(t2._gridCache, startPosition, targetPosition, heuristic, currentStepId);
      t4 = Date.now();
      algorithm.run$0();
      t5 = Date.now();
      t6 = H.intTypeCast(t3.$index(0, _s9_));
      if (typeof t6 !== "number")
        return t6.$sub();
      t7 = algorithm.searchHistory;
      t8 = t7.stepCount;
      t9 = t8 - 1;
      if (!(currentStepId === t6 - 1 && currentStepId !== t9)) {
        if (typeof currentStepId !== "number")
          return currentStepId.$ge();
        t6 = currentStepId >= t8;
      } else
        t6 = true;
      if (t6) {
        this._runInner$1(t9);
        return;
      }
      t2.$set$2(0, "title", t7.title);
      t2.$set$2(0, _s9_, t7.stepCount);
      t2.$set$2(0, "currentStepId", currentStepId);
      t2.$set$2(0, "currentStepTitle", t7.stepTitle);
      t2.set$currentStepDescription(t7._stepDescription);
      t6 = t7._stepHighlights;
      t7 = [P.List, K.Highlight];
      backgroundPathHighlights = O.Util_notNull(J.$index$asx(t6.$index(0, _null), _s10_), new S.PathfinderWorker__runInner_closure(), t7);
      foregroundPathHighlights = O.Util_notNull(J.$index$asx(t6.$index(0, _null), H.stringTypeCast(t3.$index(0, _s29_))), new S.PathfinderWorker__runInner_closure0(), t7);
      t7 = K.Highlight;
      t8 = P.List_List$from(backgroundPathHighlights, true, t7);
      C.JSArray_methods.addAll$1(t8, foregroundPathHighlights);
      t9 = [t7];
      t2.$set$2(0, "currentStepHighlights_null", K.Highlights_toListMap(H.assertSubtype(t8, "$isList", t9, "$asList")));
      for (t8 = F.Size$fromMap(H.interceptedTypeCast(t3.$index(0, "size"), "$isMap")).positions$0(), t8 = new H.ExpandIterator(J.get$iterator$ax(t8.__internal$_iterable), t8._f, C.C_EmptyIterator, [H.getTypeArgumentByIndex(t8, 0), H.getTypeArgumentByIndex(t8, 1)]); t8.moveNext$0();) {
        t10 = t8.__internal$_current;
        backgroundHighlights = J.$index$asx(t6.$index(0, t10), _s10_);
        backgroundHighlights = backgroundHighlights != null ? backgroundHighlights : new S.PathfinderWorker__runInner_closure1().call$0();
        foregroundHighlights = J.$index$asx(t6.$index(0, t10), H.stringTypeCast(t3.$index(0, _s29_)));
        foregroundHighlights = foregroundHighlights != null ? foregroundHighlights : new S.PathfinderWorker__runInner_closure2().call$0();
        t11 = P.List_List$from(backgroundHighlights, true, t7);
        C.JSArray_methods.addAll$1(t11, foregroundHighlights);
        H.assertSubtype(t11, "$isList", t9, "$asList");
        t2.$set$2(0, "currentStepHighlights_" + H.S(t10), K.Highlights_toListMap(t11));
      }
      t2 = Date.now();
      t4 = new P.DateTime(t4, false)._value;
      t1 = "setup took " + C.JSInt_methods._tdivFast$1(P.Duration$(0, t4 - new P.DateTime(t1, false)._value)._duration, 1000) + "ms";
      P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": " + t1);
      t5 = new P.DateTime(t5, false)._value;
      t4 = "run   took: " + C.JSInt_methods._tdivFast$1(P.Duration$(0, t5 - t4)._duration, 1000) + "ms";
      P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": " + t4);
      t5 = "store took: " + C.JSInt_methods._tdivFast$1(P.Duration$(0, t2 - t5)._duration, 1000) + "ms";
      P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": " + t5);
    }
  };
  S.PathfinderWorker_closure.prototype = {
    call$0: function() {
      return;
    },
    $signature: 0
  };
  S.PathfinderWorker$noIsolate_closure.prototype = {
    call$1: function(ids) {
      return H.assertSubtype(ids, "$isIterable", [P.String], "$asIterable").forEach$1(0, new S.PathfinderWorker$noIsolate__closure0(this.$this, this.other_store));
    },
    $signature: 41
  };
  S.PathfinderWorker$noIsolate__closure0.prototype = {
    call$1: function(id) {
      H.stringTypeCheck(id);
      return this.$this._store.$set$3$toTransfer(0, id, H.subtypeOfRuntimeTypeCast(this.other_store._StoreTransferAble$_store.$index(0, id), null), false);
    },
    $signature: 22
  };
  S.PathfinderWorker$noIsolate_closure0.prototype = {
    call$1: function(ids) {
      return H.assertSubtype(ids, "$isIterable", [P.String], "$asIterable").forEach$1(0, new S.PathfinderWorker$noIsolate__closure(this.$this, this.other_store));
    },
    $signature: 41
  };
  S.PathfinderWorker$noIsolate__closure.prototype = {
    call$1: function(id) {
      H.stringTypeCheck(id);
      return this.other_store.$set$3$toTransfer(0, id, H.subtypeOfRuntimeTypeCast(this.$this._store._StoreTransferAble$_store.$index(0, id), null), false);
    },
    $signature: 22
  };
  S.PathfinderWorker__setup_closure.prototype = {
    call$1: function(ids) {
      var t1;
      H.assertSubtype(ids, "$isIterable", [P.String], "$asIterable");
      t1 = this.$this;
      t1._timerToRun.cancel$0(0);
      t1._timerToRun = P.Timer_Timer(P.Duration$(0, 1), t1.get$_run());
    },
    $signature: 24
  };
  S.PathfinderWorker__runInner_closure.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [K.Highlight]);
    },
    $signature: 19
  };
  S.PathfinderWorker__runInner_closure0.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [K.Highlight]);
    },
    $signature: 19
  };
  S.PathfinderWorker__runInner_closure1.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [K.Highlight]);
    },
    $signature: 19
  };
  S.PathfinderWorker__runInner_closure2.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [K.Highlight]);
    },
    $signature: 19
  };
  E.Position.prototype = {
    toMap$0: function() {
      var t1 = new H.JsLinkedHashMap([null, null]);
      t1.$indexSet(0, "x", this.x);
      t1.$indexSet(0, "y", this.y);
      return t1;
    },
    legal$1: function(size) {
      var t2,
        t1 = this.x;
      if (typeof t1 !== "number")
        return t1.$ge();
      if (t1 >= 0) {
        t2 = size.width;
        if (typeof t2 !== "number")
          return H.iae(t2);
        if (t1 < t2) {
          t1 = this.y;
          if (typeof t1 !== "number")
            return t1.$ge();
          if (t1 >= 0) {
            t2 = size.height;
            if (typeof t2 !== "number")
              return H.iae(t2);
            t2 = t1 < t2;
            t1 = t2;
          } else
            t1 = false;
        } else
          t1 = false;
      } else
        t1 = false;
      return t1;
    },
    toString$0: function(_) {
      return "(" + H.S(this.x) + ", " + H.S(this.y) + ")";
    },
    $eq: function(_, other) {
      var t1, _this = this;
      if (other == null)
        return false;
      if (_this !== other)
        t1 = other instanceof E.Position && H.getRuntimeType(_this).$eq(0, H.getRuntimeType(other)) && _this.x == other.x && _this.y == other.y;
      else
        t1 = true;
      return t1;
    },
    get$hashCode: function(_) {
      return J.get$hashCode$(this.x) ^ J.get$hashCode$(this.y);
    },
    goMulti$2: function(direction, $length) {
      var t3, t4,
        t1 = this.x,
        t2 = O.Directions_getDx(direction);
      if (typeof $length !== "number")
        return H.iae($length);
      if (typeof t1 !== "number")
        return t1.$add();
      t3 = this.y;
      t4 = O.Directions_getDy(direction);
      if (typeof t3 !== "number")
        return t3.$add();
      return new E.Position(t1 + t2 * $length, t3 + t4 * $length);
    },
    _directionTo$2: function(targetPosition, last) {
      var dx, dy, t1 = {},
        t2 = targetPosition.x,
        t3 = this.x;
      if (typeof t2 !== "number")
        return t2.$sub();
      if (typeof t3 !== "number")
        return H.iae(t3);
      dx = t2 - t3;
      t3 = targetPosition.y;
      t2 = this.y;
      if (typeof t3 !== "number")
        return t3.$sub();
      if (typeof t2 !== "number")
        return H.iae(t2);
      dy = t3 - t2;
      t1.tdy = t1.tdx = null;
      if (last && Math.abs(dx) !== Math.abs(dy)) {
        t2 = Math.abs(dx);
        t3 = Math.abs(dy);
        t1.tdx = t2 > t3 ? C.JSInt_methods.get$sign(dx) : 0;
        t1.tdy = t2 < t3 ? C.JSInt_methods.get$sign(dy) : 0;
      } else {
        t1.tdx = C.JSInt_methods.get$sign(dx);
        t1.tdy = C.JSInt_methods.get$sign(dy);
      }
      t2 = H.getTypeArgumentByIndex(C.List_4j7, 0);
      t2 = new H.WhereIterable(C.List_4j7, H.functionTypeCheck(new E.Position__directionTo_closure(t1), {func: 1, ret: P.bool, args: [t2]}), [t2]);
      return t2.get$first(t2);
    },
    neighbours$1: function(size) {
      var t1 = E.Position,
        t2 = H.getTypeArgumentByIndex(C.List_4j7, 0);
      return new H.MappedListIterable(C.List_4j7, H.functionTypeCheck(new E.Position_neighbours_closure(this), {func: 1, ret: t1, args: [t2]}), [t2, t1]).super$Iterable$where(0, H.functionTypeCheck(new E.Position_neighbours_closure0(size), {func: 1, ret: P.bool, args: [t1]}));
    }
  };
  E.Position__directionTo_closure.prototype = {
    call$1: function(d) {
      var t1;
      H.interceptedTypeCheck(d, "$isDirection");
      t1 = this._box_0;
      return O.Directions_getDx(d) === t1.tdx && O.Directions_getDy(d) === t1.tdy;
    },
    $signature: 12
  };
  E.Position_neighbours_closure.prototype = {
    call$1: function(direction) {
      return this.$this.goMulti$2(H.interceptedTypeCheck(direction, "$isDirection"), 1);
    },
    $signature: 40
  };
  E.Position_neighbours_closure0.prototype = {
    call$1: function(position) {
      return H.interceptedTypeCheck(position, "$isPosition").legal$1(this.size);
    },
    $signature: 10
  };
  V._$ReactAlgorithmSettingsProps.prototype = {};
  V.ReactAlgorithmSettingsComponent.prototype = {
    componentWillMount$0: function() {
      var _this = this;
      _this.super$UiComponent$componentWillMount();
      _this.set$listener(0, new V.ReactAlgorithmSettingsComponent_componentWillMount_closure(_this));
      J.get$store$z(_this.get$props(_this)).addEqualListener$2(H.setRuntimeTypeInfo(["algorithmType", "heuristicType", "algorithmUpdateMode", "gridMode", "directionMode", "cornerMode", "directionalMode"], [P.String]), _this.listener);
    },
    render$0: function(_) {
      var t2, t3, t4, t5, t6, t7, t8, t9, _this = this, _null = null,
        _s13_ = "algorithmType",
        _s5_ = "title", _s6_ = "config",
        _s19_ = "algorithmUpdateMode",
        useHeuristic = C.JSArray_methods.$index(C.List_MhI, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s13_))) !== C.AlgorithmType_1 && C.JSArray_methods.$index(C.List_MhI, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s13_))) !== C.AlgorithmType_5 && C.JSArray_methods.$index(C.List_MhI, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s13_))) !== C.AlgorithmType_0,
        algorithmSelected = C.JSArray_methods.$index(C.List_MhI, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s13_))) !== C.AlgorithmType_0,
        t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t1.set$className(0, "menu");
      t2 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t2.set$className(0, _s5_);
      t2 = t2.call$1("Algorithm");
      t3 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t3.set$className(0, "configs");
      t4 = F.ReactPopover___$ReactPopover$closure().call$0();
      t5 = J.getInterceptor$z(t4);
      t5.set$className(t4, _s6_);
      t4.set$popover("            <div class=\"title\">Select the algorithm to run on the grid</div>\n            <div class=\"options\">\n              <div class='title'>None</div>\n              <div class='content'>\n                No algorithm will run on the grid.\n              </div>\n              <div class='title'>Dijkstra</div>\n              <div class='content'>\n                The Dijksra Pathfinding Algorithm.\n              </div>\n              <div class='title'>A*</div>\n              <div class='content'>\n                The A* Pathfinding Algorithm.\n              </div>\n              <div class='title'>DJPS</div>\n              <div class='content'>\n                The Directed Jump Point Search Algorithm.\n              </div>\n              <div class='title'>DJPS Lookup</div>\n              <div class='content'>\n                The Directed Jump Point Search Lookup Algorithm using pre-calculated lookup data.\n              </div>\n              <div class='title'>DJPS Pre-Calculation</div>\n              <div class='content'>\n                The Directed Jump Point Search Pre-Calculation Algorithm using backwards pre-calculation.\n              </div>\n            </div>\n            ");
      t5.set$html(t4, true);
      t5 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t5.set$className(0, _s5_);
      t5 = t5.call$1("Algorithm:");
      t6 = U.ReactDropDown___$ReactDropDown$closure().call$0();
      t7 = J.getInterceptor$x(t6);
      t7.set$value(t6, C.JSArray_methods.$index(C.List_MhI, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s13_))));
      t7.set$values(t6, C.List_MhI);
      t6.set$getTitle(new V.ReactAlgorithmSettingsComponent_render_closure());
      t6.set$selectListener(new V.ReactAlgorithmSettingsComponent_render_closure0(_this));
      t6 = t4.call$2(t5, t6.call$0());
      if (useHeuristic) {
        t4 = F.ReactPopover___$ReactPopover$closure().call$0();
        t5 = J.getInterceptor$z(t4);
        t5.set$className(t4, _s6_);
        t4.set$popover("            <div class=\"title\">Select the heuristic to be used by the algorithm</div>\n            <div class=\"options\">\n              <div class='title'>Constant Zero</div>\n              <div class='content'>\n                A heuristic which always returns 0.\n              </div>\n              <div class='title'>Chebyshev</div>\n              <div class='content'>\n                The Chebyshev distance is calculated by the moves a chess king would have to make.\n              </div>\n              <div class='title'>Euclidean</div>\n              <div class='content'>\n                The Euclidean distance is calculated by the length of the air line.\n              </div>\n              <div class='title'>Octile</div>\n              <div class='content'>\n                The octile distance is calculated by the length of the octile path.\n              </div>\n              <div class='title'>Manhattan</div>\n              <div class='content'>\n                The Manhattan distance is calculated by summing the difference of the x and the y coordinates.\n              </div>\n            </div>\n            ");
        t5.set$html(t4, true);
        t5 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
        t5.set$className(0, _s5_);
        t5 = t5.call$1("Heuristic:");
        t7 = U.ReactDropDown___$ReactDropDown$closure().call$0();
        t8 = J.getInterceptor$x(t7);
        t8.set$value(t7, C.JSArray_methods.$index(C.List_GRf, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "heuristicType"))));
        t8.set$values(t7, C.List_GRf);
        t7.set$getTitle(new V.ReactAlgorithmSettingsComponent_render_closure1());
        t7.set$selectListener(new V.ReactAlgorithmSettingsComponent_render_closure2(_this));
        t7 = t4.call$2(t5, t7.call$0());
        t4 = t7;
      } else {
        t4 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
        t4.set$className(0, _s6_);
        t4 = t4.call$0();
      }
      if (algorithmSelected) {
        t5 = F.ReactPopover___$ReactPopover$closure().call$0();
        t7 = J.getInterceptor$z(t5);
        t7.set$className(t5, _s6_);
        t5.set$popover("            <div class=\"title\">Select when the algorithm should run on the grid</div>\n            <div class=\"options\">\n              <div class='title'>During editing</div>\n              <div class='content'>\n                The algorithm runs while you change something in the grid.\n              </div>\n              <div class='title'>After editing</div>\n              <div class='content'>\n                The algorithm runs after you changed something in the grid.\n              </div>\n              <div class='title'>Manually</div>\n              <div class='content'>\n                The algorithm runs when you click on the play button.\n              </div>\n            </div>\n            ");
        t7.set$html(t5, true);
        t7 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
        t7.set$className(0, _s5_);
        t7 = t7.call$1("Run:");
        t8 = U.ReactDropDown___$ReactDropDown$closure().call$0();
        t9 = J.getInterceptor$x(t8);
        t9.set$value(t8, C.JSArray_methods.$index(C.List_ORa, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s19_))));
        t9.set$values(t8, C.List_ORa);
        t8.set$getTitle(new V.ReactAlgorithmSettingsComponent_render_closure3());
        t8.set$selectListener(new V.ReactAlgorithmSettingsComponent_render_closure4(_this));
        t8 = t5.call$2(t7, t8.call$0());
        t5 = t8;
      } else
        t5 = _null;
      if (C.JSArray_methods.$index(C.List_ORa, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s19_))) === C.AlgorithmUpdateMode_2 && algorithmSelected) {
        t7 = F.ReactPopover___$ReactPopover$closure().call$0();
        J.set$className$z(t7, "config small");
        t7.set$popover("Run the algorithm" + (useHeuristic ? " with the selected heuristic" : ""));
        t8 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
        t8.set$className(0, "button run");
        t8.set$onClick(0, new V.ReactAlgorithmSettingsComponent_render_closure5(_this));
        t8 = t7.call$1(t8.call$1("Run"));
        t7 = t8;
      } else
        t7 = _null;
      return t1.call$2(t2, t3.call$4(t6, t4, t5, t7));
    },
    componentWillUnmount$0: function() {
      var _this = this;
      _this.super$UiComponent$componentWillUnmount();
      J.get$store$z(_this.get$props(_this)).removeEqualListener$1(_this.listener);
    },
    set$listener: function(_, listener) {
      this.listener = H.functionTypeCheck(listener, {func: 1, ret: -1});
    },
    $asUiComponent: function() {
      return [V.ReactAlgorithmSettingsProps];
    }
  };
  V.ReactAlgorithmSettingsComponent_componentWillMount_closure.prototype = {
    call$0: function() {
      this.$this.setState$2(0, P.LinkedHashMap__makeEmpty(), null);
      return;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  V.ReactAlgorithmSettingsComponent_render_closure.prototype = {
    call$1: function(e) {
      return G.AlgorithmTypes_getTitle(H.interceptedTypeCast(e, "$isAlgorithmType"));
    },
    $signature: 7
  };
  V.ReactAlgorithmSettingsComponent_render_closure0.prototype = {
    call$1: function(newValue) {
      var t1 = this.$this;
      t1 = J.get$store$z(t1.get$props(t1));
      H.interceptedTypeCast(newValue, "$isAlgorithmType");
      t1.toString;
      t1.$set$2(0, "algorithmType", newValue.index);
      return newValue;
    },
    $signature: 109
  };
  V.ReactAlgorithmSettingsComponent_render_closure1.prototype = {
    call$1: function(e) {
      return G.HeuristicTypes_getTitle(H.interceptedTypeCast(e, "$isHeuristicType"));
    },
    $signature: 7
  };
  V.ReactAlgorithmSettingsComponent_render_closure2.prototype = {
    call$1: function(newValue) {
      var t1 = this.$this;
      t1 = J.get$store$z(t1.get$props(t1));
      H.interceptedTypeCast(newValue, "$isHeuristicType");
      t1.toString;
      t1.$set$2(0, "heuristicType", newValue.index);
      return newValue;
    },
    $signature: 110
  };
  V.ReactAlgorithmSettingsComponent_render_closure3.prototype = {
    call$1: function(e) {
      return G.AlgorithmUpdateModes_getTitle(H.interceptedTypeCast(e, "$isAlgorithmUpdateMode"));
    },
    $signature: 7
  };
  V.ReactAlgorithmSettingsComponent_render_closure4.prototype = {
    call$1: function(newValue) {
      var t1 = this.$this;
      t1 = J.get$store$z(t1.get$props(t1));
      H.interceptedTypeCast(newValue, "$isAlgorithmUpdateMode");
      t1.toString;
      t1.$set$2(0, "algorithmUpdateMode", newValue.index);
      return newValue;
    },
    $signature: 111
  };
  V.ReactAlgorithmSettingsComponent_render_closure5.prototype = {
    call$1: function(_) {
      var t1;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      return J.get$store$z(t1.get$props(t1)).triggerTransferListeners$0();
    },
    $signature: 2
  };
  V.closure5.prototype = {
    call$0: function() {
      var t1 = new V._$ReactAlgorithmSettingsComponent(P.Expando$(null, V.ReactAlgorithmSettingsProps), P.LinkedHashMap__makeEmpty(), H.setRuntimeTypeInfo([], [{func: 1}]), H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Map,,,], args: [[P.Map,,,], [P.Map,,,]]}]));
      t1.get$$$isClassGenerated();
      return t1;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 113
  };
  V._$ReactAlgorithmSettingsPropsAccessorsMixin.prototype = {
    get$store: function(_) {
      var t1 = J.$index$asx(this._ReactAlgorithmSettings$_props, "ReactAlgorithmSettingsProps.store");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isStore");
    }
  };
  V.ReactAlgorithmSettingsProps.prototype = {};
  V._$$ReactAlgorithmSettingsProps.prototype = {
    get$props: function(_) {
      return this._ReactAlgorithmSettings$_props;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$componentFactory: function() {
      return $.$get$$ReactAlgorithmSettingsComponentFactory();
    },
    $isReactAlgorithmSettingsProps: 1
  };
  V._$ReactAlgorithmSettingsComponent.prototype = {
    typedPropsFactory$1: function(backingMap) {
      return V._$$ReactAlgorithmSettingsProps$(backingMap);
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$$$defaultConsumedProps: function() {
      return C.List_uMI;
    }
  };
  V._ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsPropsAccessorsMixin.prototype = {};
  V.__$$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsPropsAccessorsMixin.prototype = {};
  B._$ReactArrowProps.prototype = {};
  B.ReactArrowComponent.prototype = {
    getDefaultProps$0: function() {
      var t1 = this.typedPropsFactory$1(P.LinkedHashMap__makeEmpty());
      t1.set$showStart(false);
      t1.set$showEnd(false);
      t1.set$startIntermediate(1);
      t1.set$endIntermediate(1);
      t1.set$wrap(0, true);
      return t1;
    },
    render$0: function(_) {
      var t1, t2, startOrg, startEndOrg, endOrg, endStartOrg, v, vP90, vM90, vB, vBP90, vBM90, start, startArrow, end, endArrow, intermediatePath, t3, t4, t5, t6, svgs, _this = this, _null = null;
      if (J.get$length$asx(J.get$path$z(_this.get$props(_this))) < 2)
        return;
      t1 = J.get$first$ax(J.get$path$z(_this.get$props(_this))).x;
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = J.get$first$ax(J.get$path$z(_this.get$props(_this))).y;
      if (typeof t2 !== "number")
        return t2.$add();
      startOrg = new T.Vector2(new Float32Array(2));
      startOrg.setValues$2(t1, t2);
      t1 = J.$index$asx(J.get$path$z(_this.get$props(_this)), 1).x;
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = J.$index$asx(J.get$path$z(_this.get$props(_this)), 1).y;
      if (typeof t2 !== "number")
        return t2.$add();
      startEndOrg = new T.Vector2(new Float32Array(2));
      startEndOrg.setValues$2(t1, t2);
      t1 = J.get$last$ax(J.get$path$z(_this.get$props(_this))).x;
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = J.get$last$ax(J.get$path$z(_this.get$props(_this))).y;
      if (typeof t2 !== "number")
        return t2.$add();
      endOrg = new T.Vector2(new Float32Array(2));
      endOrg.setValues$2(t1, t2);
      t1 = J.$index$asx(J.get$path$z(_this.get$props(_this)), J.get$length$asx(J.get$path$z(_this.get$props(_this))) - 2).x;
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = J.$index$asx(J.get$path$z(_this.get$props(_this)), J.get$length$asx(J.get$path$z(_this.get$props(_this))) - 2).y;
      if (typeof t2 !== "number")
        return t2.$add();
      endStartOrg = new T.Vector2(new Float32Array(2));
      endStartOrg.setValues$2(t1, t2);
      v = startEndOrg.$sub(0, startOrg).normalized$0();
      vP90 = _this.rotate$2(0, v, 35);
      vM90 = _this.rotate$2(0, v, -35);
      vB = endStartOrg.$sub(0, endOrg).normalized$0();
      vBP90 = _this.rotate$2(0, vB, 35);
      vBM90 = _this.rotate$2(0, vB, -35);
      vBP90 = vBP90.$add(0, vB.normalized$0()).$mul(0, 0.1);
      vBM90 = vBM90.$add(0, vB.normalized$0()).$mul(0, 0.1);
      vP90 = vP90.$add(0, v.normalized$0()).$mul(0, 0.1);
      vM90 = vM90.$add(0, v.normalized$0()).$mul(0, 0.1);
      start = startOrg.$add(0, v.$mul(0, 0.25 + (H.boolConversionCheck(_this.get$props(_this).get$showStart()) ? 0.05 : 0)).$mul(0, _this.get$props(_this).get$startIntermediate()));
      startArrow = startOrg.$add(0, v.$mul(0, 0.25).$mul(0, _this.get$props(_this).get$startIntermediate()));
      end = endOrg.$add(0, vB.$mul(0, 0.25 + (H.boolConversionCheck(_this.get$props(_this).get$showEnd()) ? 0.05 : 0)).$mul(0, _this.get$props(_this).get$endIntermediate()));
      endArrow = endOrg.$add(0, vB.$mul(0, 0.25).$mul(0, _this.get$props(_this).get$endIntermediate()));
      intermediatePath = J.sublist$1$ax(J.get$path$z(_this.get$props(_this)), 1);
      t1 = J.getInterceptor$ax(intermediatePath);
      t1.removeLast$0(intermediatePath);
      t2 = A.SvgProps$(H.interceptedTypeCheck($.polyline, "$isReactDomComponentFactoryProxy"));
      t2.set$key(0, "line");
      t3 = start._v2storage;
      t4 = end._v2storage;
      t2.set$points(0, " " + H.S(t3[0]) + "," + H.S(t3[1]) + " " + t1.map$1$1(intermediatePath, new B.ReactArrowComponent_render_closure(), P.String).join$1(0, " ") + " " + H.S(t4[0]) + "," + H.S(t4[1]));
      t2.set$className(0, "line");
      t2 = t2.call$0();
      if (H.boolConversionCheck(_this.get$props(_this).get$showEnd())) {
        t1 = A.SvgProps$(H.interceptedTypeCheck($.polygon, "$isReactDomComponentFactoryProxy"));
        t1.set$key(0, "arrowEnd");
        t3 = endArrow._v2storage;
        t4 = vBP90._v2storage;
        t5 = vBM90._v2storage;
        t1.set$points(0, " " + H.S(t3[0]) + "," + H.S(t3[1]) + " " + H.S(t3[0] + t4[0]) + "," + H.S(t3[1] + t4[1]) + " " + H.S(t3[0] + t5[0]) + "," + H.S(t3[1] + t5[1]));
        t1.set$className(0, "end");
        t1 = t1.call$0();
      } else
        t1 = _null;
      if (H.boolConversionCheck(_this.get$props(_this).get$showStart())) {
        t3 = A.SvgProps$(H.interceptedTypeCheck($.polygon, "$isReactDomComponentFactoryProxy"));
        t3.set$key(0, "arrowStart");
        t4 = startArrow._v2storage;
        t5 = vP90._v2storage;
        t6 = vM90._v2storage;
        t3.set$points(0, " " + H.S(t4[0]) + "," + H.S(t4[1]) + " " + H.S(t4[0] + t5[0]) + "," + H.S(t4[1] + t5[1]) + " " + H.S(t4[0] + t6[0]) + "," + H.S(t4[1] + t6[1]));
        t3.set$className(0, "end");
        t3 = t3.call$0();
      } else
        t3 = _null;
      svgs = H.setRuntimeTypeInfo([t2, t1, t3], [K.ReactElement]);
      t1 = J.$index$asx(_this.get$props(_this)._ReactArrow$_props, "ReactArrowProps.wrap");
      if (!H.boolConversionCheck(H.boolTypeCheck(t1 == null ? _null : t1))) {
        t1 = A.SvgProps$(H.interceptedTypeCheck($.g, "$isReactDomComponentFactoryProxy"));
        t1.set$className(0, J.get$className$z(_this.get$props(_this)));
        return t1.call$1(svgs);
      } else {
        t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
        t1.set$className(0, "nodeArrow");
        t2 = A.SvgProps$(H.interceptedTypeCheck($.svg, "$isReactDomComponentFactoryProxy"));
        t2.set$className(0, "svg");
        t2.set$viewBox(0, "-0.5 -0.5 " + H.S(J.get$size$z(_this.get$props(_this)).width) + " " + H.S(J.get$size$z(_this.get$props(_this)).height));
        t3 = A.SvgProps$(H.interceptedTypeCheck($.g, "$isReactDomComponentFactoryProxy"));
        t3.set$className(0, J.get$className$z(_this.get$props(_this)));
        return t1.call$1(t2.call$1(t3.call$1(svgs)));
      }
    },
    rotate$2: function(_, vec, angle) {
      var t3,
        theta = angle * 57.29577951308232,
        cs = Math.cos(theta),
        sn = Math.sin(theta),
        t1 = vec._v2storage,
        t2 = t1[0];
      t1 = t1[1];
      t3 = new T.Vector2(new Float32Array(2));
      t3.setValues$2(t2 * cs - t1 * sn, t2 * sn + t1 * cs);
      return t3;
    },
    $asUiComponent: function() {
      return [B.ReactArrowProps];
    }
  };
  B.ReactArrowComponent_render_closure.prototype = {
    call$1: function(p) {
      H.interceptedTypeCheck(p, "$isPosition");
      return H.S(p.x) + "," + H.S(p.y);
    },
    $signature: 44
  };
  B.closure15.prototype = {
    call$0: function() {
      var t1 = new B._$ReactArrowComponent(P.Expando$(null, B.ReactArrowProps), P.LinkedHashMap__makeEmpty(), H.setRuntimeTypeInfo([], [{func: 1}]), H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Map,,,], args: [[P.Map,,,], [P.Map,,,]]}]));
      t1.get$$$isClassGenerated();
      return t1;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 115
  };
  B._$ReactArrowPropsAccessorsMixin.prototype = {
    get$size: function(_) {
      var t1 = J.$index$asx(this._ReactArrow$_props, "ReactArrowProps.size");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isSize");
    },
    set$size: function(_, value) {
      J.$indexSet$ax(this._ReactArrow$_props, "ReactArrowProps.size", value);
    },
    get$path: function(_) {
      var t1 = J.$index$asx(this._ReactArrow$_props, "ReactArrowProps.path");
      if (t1 == null)
        t1 = null;
      return H.assertSubtype(t1, "$isList", [E.Position], "$asList");
    },
    set$path: function(_, value) {
      H.assertSubtype(value, "$isList", [E.Position], "$asList");
      J.$indexSet$ax(this._ReactArrow$_props, "ReactArrowProps.path", value);
    },
    get$showStart: function() {
      var t1 = J.$index$asx(this._ReactArrow$_props, "ReactArrowProps.showStart");
      return H.boolTypeCheck(t1 == null ? null : t1);
    },
    set$showStart: function(value) {
      J.$indexSet$ax(this._ReactArrow$_props, "ReactArrowProps.showStart", value);
    },
    get$showEnd: function() {
      var t1 = J.$index$asx(this._ReactArrow$_props, "ReactArrowProps.showEnd");
      return H.boolTypeCheck(t1 == null ? null : t1);
    },
    set$showEnd: function(value) {
      J.$indexSet$ax(this._ReactArrow$_props, "ReactArrowProps.showEnd", value);
    },
    get$startIntermediate: function() {
      var t1 = J.$index$asx(this._ReactArrow$_props, "ReactArrowProps.startIntermediate");
      return H.doubleTypeCheck(t1 == null ? null : t1);
    },
    set$startIntermediate: function(value) {
      J.$indexSet$ax(this._ReactArrow$_props, "ReactArrowProps.startIntermediate", value);
    },
    get$endIntermediate: function() {
      var t1 = J.$index$asx(this._ReactArrow$_props, "ReactArrowProps.endIntermediate");
      return H.doubleTypeCheck(t1 == null ? null : t1);
    },
    set$endIntermediate: function(value) {
      J.$indexSet$ax(this._ReactArrow$_props, "ReactArrowProps.endIntermediate", value);
    },
    set$wrap: function(_, value) {
      J.$indexSet$ax(this._ReactArrow$_props, "ReactArrowProps.wrap", value);
    }
  };
  B.ReactArrowProps.prototype = {};
  B._$$ReactArrowProps.prototype = {
    get$props: function(_) {
      return this._ReactArrow$_props;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$componentFactory: function() {
      return $.$get$$ReactArrowComponentFactory();
    },
    $isReactArrowProps: 1
  };
  B._$ReactArrowComponent.prototype = {
    typedPropsFactory$1: function(backingMap) {
      return B._$$ReactArrowProps$(backingMap);
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$$$defaultConsumedProps: function() {
      return C.List_3CF;
    }
  };
  B._ReactArrowProps__$ReactArrowProps__$ReactArrowPropsAccessorsMixin.prototype = {};
  B.__$$ReactArrowProps__$ReactArrowProps__$ReactArrowPropsAccessorsMixin.prototype = {};
  U._$ReactDropDownProps.prototype = {
    get$value: function(receiver) {
      return this.value;
    },
    get$values: function(receiver) {
      return this.values;
    },
    set$value: function(receiver, val) {
      return this.value = val;
    }
  };
  U._$ReactDropDownState.prototype = {};
  U.ReactDropDownComponent.prototype = {
    getInitialState$0: function() {
      var t1 = this.typedStateFactory$1(P.LinkedHashMap__makeEmpty());
      t1.set$isOpen(false);
      t1.set$width(0, 50);
      return t1;
    },
    render$0: function(_) {
      var t2, t3, t4, t5, t6, _this = this, _null = null,
        t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t1.set$className(0, "dropDown " + (H.boolConversionCheck(_this.get$state(_this).get$isOpen()) ? "open" : ""));
      t1.set$onMouseLeave(0, new U.ReactDropDownComponent_render_closure(_this));
      t2 = S.resize_sensor___$ResizeSensor$closure().call$0();
      t2.toString;
      t3 = H.functionTypeCheck(_this.get$_resized(), {func: 1, ret: -1, args: [S.ResizeSensorEvent]});
      t4 = J.getInterceptor$x(t2);
      J.$indexSet$ax(t4.get$props(t2), "ResizeSensorPropsMixin.onResize", t3);
      J.$indexSet$ax(t4.get$props(t2), "ResizeSensorPropsMixin.onInitialize", t3);
      t2.set$isFlexChild(true);
      t3 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t3.set$className(0, "value current");
      t3.set$onClick(0, new U.ReactDropDownComponent_render_closure0(_this));
      t3 = t3.call$1(_this.get$props(_this).getTitle$1(J.get$value$x(_this.get$props(_this))));
      t4 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t4.set$className(0, "drop");
      t5 = _this.get$state(_this)._ReactDropDown$_state.$index(0, "ReactDropDownState.width");
      t6 = P.String;
      t4.set$style(0, P.LinkedHashMap_LinkedHashMap$_literal(["width", H.S(H.intTypeCheck(t5 == null ? _null : t5)) + "px"], t6, t6));
      t6 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t6.set$className(0, "arrowLine");
      t6 = t6.call$0();
      t5 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t5.set$className(0, "values");
      return t1.call$1(t2.call$2(t3, t4.call$2(t6, t5.call$1(J.map$1$1$ax(J.get$values$x(_this.get$props(_this)), new U.ReactDropDownComponent_render_closure1(_this), K.ReactElement).toList$0(0)))));
    },
    _resized$1: function($event) {
      var t1;
      H.interceptedTypeCheck($event, "$isResizeSensorEvent");
      t1 = this.typedStateFactory$1(P.LinkedHashMap__makeEmpty());
      t1.set$width(0, $event.newWidth);
      this.setState$1(0, t1);
    },
    _setClosed$0: function() {
      var t1 = this.typedStateFactory$1(P.LinkedHashMap__makeEmpty());
      t1.set$isOpen(false);
      this.setState$1(0, t1);
    },
    $asUiComponent: function() {
      return [U.ReactDropDownProps];
    },
    $asUiStatefulComponent: function() {
      return [U.ReactDropDownProps, U.ReactDropDownState];
    }
  };
  U.ReactDropDownComponent_render_closure.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      return this.$this._setClosed$0();
    },
    $signature: 2
  };
  U.ReactDropDownComponent_render_closure0.prototype = {
    call$1: function(_) {
      var t1, t2;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      t2 = t1.typedStateFactory$1(P.LinkedHashMap__makeEmpty());
      t2.set$isOpen(!H.boolConversionCheck(t1.get$state(t1).get$isOpen()));
      t1.setState$1(0, t2);
      return;
    },
    $signature: 2
  };
  U.ReactDropDownComponent_render_closure1.prototype = {
    call$1: function(value) {
      var t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null),
        t2 = this.$this;
      t1.set$className(0, "value " + (J.$eq$(J.get$value$x(t2.get$props(t2)), value) ? "selected" : ""));
      t1.set$key(0, value);
      t1.set$onClick(0, new U.ReactDropDownComponent_render__closure(t2, value));
      return t1.call$1(t2.get$props(t2).getTitle$1(value));
    },
    $signature: 117
  };
  U.ReactDropDownComponent_render__closure.prototype = {
    call$1: function(_) {
      var t1, t2;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      t2 = this.value;
      t1._setClosed$0();
      if (!J.$eq$(t2, J.get$value$x(t1.get$props(t1))))
        t1.get$props(t1).selectListener$1(t2);
      return;
    },
    $signature: 2
  };
  U.closure6.prototype = {
    call$0: function() {
      var t1 = new U._$ReactDropDownComponent(P.Expando$(null, U.ReactDropDownState), P.Expando$(null, U.ReactDropDownProps), P.LinkedHashMap__makeEmpty(), H.setRuntimeTypeInfo([], [{func: 1}]), H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Map,,,], args: [[P.Map,,,], [P.Map,,,]]}]));
      t1.get$$$isClassGenerated();
      return t1;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 118
  };
  U._$ReactDropDownPropsAccessorsMixin.prototype = {
    get$value: function(_) {
      var t1 = J.$index$asx(this._ReactDropDown$_props, "ReactDropDownProps.value");
      return t1 == null ? null : t1;
    },
    set$value: function(_, value) {
      J.$indexSet$ax(this._ReactDropDown$_props, "ReactDropDownProps.value", value);
    },
    get$values: function(_) {
      var t1 = J.$index$asx(this._ReactDropDown$_props, "ReactDropDownProps.values");
      return H.listTypeCheck(t1 == null ? null : t1);
    },
    set$values: function(_, value) {
      J.$indexSet$ax(this._ReactDropDown$_props, "ReactDropDownProps.values", value);
    },
    get$selectListener: function() {
      var t1 = J.$index$asx(this._ReactDropDown$_props, "ReactDropDownProps.selectListener");
      if (t1 == null)
        t1 = null;
      return H.functionTypeCheck(t1, {func: 1, ret: -1, args: [,]});
    },
    set$selectListener: function(value) {
      H.functionTypeCheck(value, {func: 1, ret: -1, args: [,]});
      J.$indexSet$ax(this._ReactDropDown$_props, "ReactDropDownProps.selectListener", value);
    },
    get$getTitle: function() {
      var t1 = J.$index$asx(this._ReactDropDown$_props, "ReactDropDownProps.getTitle");
      if (t1 == null)
        t1 = null;
      return H.functionTypeCheck(t1, {func: 1, ret: P.String, args: [,]});
    },
    set$getTitle: function(value) {
      H.functionTypeCheck(value, {func: 1, ret: P.String, args: [,]});
      J.$indexSet$ax(this._ReactDropDown$_props, "ReactDropDownProps.getTitle", value);
    },
    selectListener$1: function(arg0) {
      return this.get$selectListener().call$1(arg0);
    },
    getTitle$1: function(arg0) {
      return this.get$getTitle().call$1(arg0);
    }
  };
  U.ReactDropDownProps.prototype = {};
  U._$$ReactDropDownProps.prototype = {
    get$props: function(_) {
      return this._ReactDropDown$_props;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$componentFactory: function() {
      return $.$get$$ReactDropDownComponentFactory();
    },
    $isReactDropDownProps: 1
  };
  U._$ReactDropDownStateAccessorsMixin.prototype = {
    get$isOpen: function() {
      var t1 = this._ReactDropDown$_state.$index(0, "ReactDropDownState.isOpen");
      return H.boolTypeCheck(t1 == null ? null : t1);
    },
    set$isOpen: function(value) {
      this._ReactDropDown$_state.$indexSet(0, "ReactDropDownState.isOpen", value);
    },
    set$width: function(_, value) {
      this._ReactDropDown$_state.$indexSet(0, "ReactDropDownState.width", value);
    }
  };
  U.ReactDropDownState.prototype = {};
  U._$$ReactDropDownState.prototype = {
    get$state: function(_) {
      return this._ReactDropDown$_state;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    $isReactDropDownState: 1
  };
  U._$ReactDropDownComponent.prototype = {
    typedPropsFactory$1: function(backingMap) {
      return U._$$ReactDropDownProps$(backingMap);
    },
    typedStateFactory$1: function(backingMap) {
      var t1 = new U._$$ReactDropDownState(P.LinkedHashMap__makeEmpty());
      t1.get$$$isClassGenerated();
      t1._ReactDropDown$_state = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$$$defaultConsumedProps: function() {
      return C.List_xw8;
    }
  };
  U._ReactDropDownProps__$ReactDropDownProps__$ReactDropDownPropsAccessorsMixin.prototype = {};
  U._ReactDropDownState__$ReactDropDownState__$ReactDropDownStateAccessorsMixin.prototype = {};
  U.__$$ReactDropDownProps__$ReactDropDownProps__$ReactDropDownPropsAccessorsMixin.prototype = {};
  U.__$$ReactDropDownState__$ReactDropDownState__$ReactDropDownStateAccessorsMixin.prototype = {};
  Y._$ReactExplanationPartProps.prototype = {};
  Y.ReactExplanationPartComponent.prototype = {
    render$0: function(_) {
      var t2, _this = this,
        t1 = J.$index$asx(_this.get$props(_this)._ReactExplanationPart$_props, "ReactExplanationPartProps.explanationPart"),
        explanationPart = H.interceptedTypeCheck(t1 == null ? null : t1, "$isExplanationPart");
      t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t2 = explanationPart.style;
      t1.set$className(0, "explanationPart " + (t2 !== "" ? "styled highlight_" + H.S(t2) : "unstyled"));
      t1.props.$indexSet(0, "onMouseOver", H.functionTypeCheck(new Y.ReactExplanationPartComponent_render_closure(_this, explanationPart), {func: 1, args: [V.SyntheticMouseEvent]}));
      t1.set$onMouseLeave(0, new Y.ReactExplanationPartComponent_render_closure0(_this, explanationPart));
      return t1.call$1(explanationPart.text);
    },
    $asUiComponent: function() {
      return [Y.ReactExplanationPartProps];
    }
  };
  Y.ReactExplanationPartComponent_render_closure.prototype = {
    call$1: function(_) {
      var t1, t2;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.explanationPart.id;
      t2 = "currentStepDescriptionHoverId = " + H.S(t1);
      P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": " + t2);
      t2 = this.$this;
      J.get$store$z(t2.get$props(t2)).$set$2(0, "currentStepDescriptionHoverId", t1);
      J.get$store$z(t2.get$props(t2)).triggerTransferListeners$0();
    },
    $signature: 45
  };
  Y.ReactExplanationPartComponent_render_closure0.prototype = {
    call$1: function(_) {
      var t1,
        _s29_ = "currentStepDescriptionHoverId";
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      if (H.stringTypeCast(J.get$store$z(t1.get$props(t1))._StoreTransferAble$_store.$index(0, _s29_)) == this.explanationPart.id) {
        P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": currentStepDescriptionHoverId = foreground");
        J.get$store$z(t1.get$props(t1)).$set$2(0, _s29_, "foreground");
        J.get$store$z(t1.get$props(t1)).triggerTransferListeners$0();
      }
    },
    $signature: 45
  };
  Y.closure4.prototype = {
    call$0: function() {
      var t1 = new Y._$ReactExplanationPartComponent(P.Expando$(null, Y.ReactExplanationPartProps), P.LinkedHashMap__makeEmpty(), H.setRuntimeTypeInfo([], [{func: 1}]), H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Map,,,], args: [[P.Map,,,], [P.Map,,,]]}]));
      t1.get$$$isClassGenerated();
      return t1;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 120
  };
  Y._$ReactExplanationPartPropsAccessorsMixin.prototype = {
    get$store: function(_) {
      var t1 = J.$index$asx(this._ReactExplanationPart$_props, "ReactExplanationPartProps.store");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isStore");
    }
  };
  Y.ReactExplanationPartProps.prototype = {};
  Y._$$ReactExplanationPartProps.prototype = {
    get$props: function(_) {
      return this._ReactExplanationPart$_props;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$componentFactory: function() {
      return $.$get$$ReactExplanationPartComponentFactory();
    },
    $isReactExplanationPartProps: 1
  };
  Y._$ReactExplanationPartComponent.prototype = {
    typedPropsFactory$1: function(backingMap) {
      return Y._$$ReactExplanationPartProps$(backingMap);
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$$$defaultConsumedProps: function() {
      return C.List_ato;
    }
  };
  Y._ReactExplanationPartProps__$ReactExplanationPartProps__$ReactExplanationPartPropsAccessorsMixin.prototype = {};
  Y.__$$ReactExplanationPartProps__$ReactExplanationPartProps__$ReactExplanationPartPropsAccessorsMixin.prototype = {};
  D._$ReactGridProps.prototype = {};
  D.ReactGridComponent.prototype = {
    componentWillMount$0: function() {
      var t1, _this = this;
      _this.super$UiComponent$componentWillMount();
      _this.set$_mouseMode(C.Optional_null1);
      t1 = W.MouseEvent;
      _this._onDocumentMouseUpListener = W._EventStreamSubscription$(window.document, "mouseup", H.functionTypeCheck(new D.ReactGridComponent_componentWillMount_closure(_this), {func: 1, ret: -1, args: [t1]}), false, t1);
      C.Window_methods.addEventListener$2(window, "resize", new D.ReactGridComponent_componentWillMount_closure0(_this));
      _this.set$listener(0, new D.ReactGridComponent_componentWillMount_closure1(_this));
      J.get$store$z(_this.get$props(_this)).addEqualListener$2(H.setRuntimeTypeInfo(["size", "gridMode", "directionMode", "cornerMode", "directionalMode"], [P.String]), _this.listener);
    },
    render$0: function(_) {
      var t1, t2, _this = this;
      _this._updateCSSVariables$0();
      t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t1.set$className(0, "grid GRID_MODE_" + G.Enums_toName(C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "gridMode")))) + " DIRECTION_MODE_" + G.Enums_toName(C.JSArray_methods.$index(C.List_Ql0, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "directionMode")))) + " CROSS_CORNER_" + G.Enums_toName(C.JSArray_methods.$index(C.List_CornerMode_0_CornerMode_1, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "cornerMode")))) + " WAY_MODE_" + G.Enums_toName(C.JSArray_methods.$index(C.List_WPn, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "directionalMode")))));
      t2 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t2.set$className(0, "nodes");
      return t1.call$1(t2.call$1(P.List_List$generate(F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "size"), "$isMap")).height, _this.get$_renderRow(), K.ReactElement)));
    },
    _updateCSSVariables$0: function() {
      var t3, t4, nodeSize, _this = this, _s4_ = "size", _s4_0 = "eval",
        t1 = window.innerHeight,
        t2 = window.innerWidth;
      if (typeof t1 !== "number")
        return t1.$div();
      if (typeof t2 !== "number")
        return H.iae(t2);
      t3 = F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s4_), "$isMap")).width;
      if (typeof t3 !== "number")
        return H.iae(t3);
      t4 = F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s4_), "$isMap")).height;
      if (typeof t4 !== "number")
        return H.iae(t4);
      nodeSize = Math.min(60 / t3, 100 * (t1 / t2) / t4);
      t4 = F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s4_), "$isMap")).width;
      if (typeof t4 !== "number")
        return H.iae(t4);
      t2 = F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s4_), "$isMap")).height;
      if (typeof t2 !== "number")
        return H.iae(t2);
      t4 = H.S(nodeSize * t4) + "vw";
      t1 = $.$get$context();
      t3 = [P.String];
      t1.callMethod$2(_s4_0, H.setRuntimeTypeInfo(["document.documentElement.style.setProperty('--grid-width', '" + t4 + "');"], t3));
      t1.callMethod$2(_s4_0, H.setRuntimeTypeInfo(["document.documentElement.style.setProperty('--grid-height', '" + (H.S(nodeSize * t2) + "vw") + "');"], t3));
      t1.callMethod$2(_s4_0, H.setRuntimeTypeInfo(["document.documentElement.style.setProperty('--node-size', '" + (H.S(nodeSize) + "vw") + "');"], t3));
      t1.callMethod$2(_s4_0, H.setRuntimeTypeInfo(["document.documentElement.style.setProperty('--node-part-size', 'calc(var(--node-size) / 3)');"], t3));
      t1.callMethod$2(_s4_0, H.setRuntimeTypeInfo(["document.documentElement.style.setProperty('--node-part-size-inner-padding', '" + (H.S(nodeSize * 0.02) + "vw") + "');"], t3));
      t1.callMethod$2(_s4_0, H.setRuntimeTypeInfo(["document.documentElement.style.setProperty('--node-part-size-inner', 'calc(var(--node-size) / 3 - 2 * var(--node-part-size-inner-padding))');"], t3));
    },
    _renderRow$1: function(y) {
      var t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t1.set$className(0, "row");
      t1.set$key(0, y);
      return t1.call$1(P.List_List$generate(F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(this.get$props(this))._StoreTransferAble$_store.$index(0, "size"), "$isMap")).width, new D.ReactGridComponent__renderRow_closure(this, y), K.ReactElement));
    },
    updateMouseModeFromNode$1: function(position) {
      var t1, t2, _this = this;
      if (C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "gridMode"))) === C.GridMode_0) {
        t1 = _this._mouseMode;
        t1 = !t1.get$iterator(t1).moveNext$0();
      } else
        t1 = false;
      if (t1) {
        t1 = E.Position$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "startPosition"), "$isMap")).$eq(0, position) || E.Position$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "targetPosition"), "$isMap")).$eq(0, position);
        t2 = N.MouseMode;
        if (t1) {
          t1 = new B.EditNodeTypeMouseMode(_this);
          t1._structureTypeChanging = t1.getStructureNodeType$1(position);
          _this.set$_mouseMode(X.Optional$of(t1, t2));
        } else
          _this.set$_mouseMode(X.Optional$of(new N.EditBarrierMouseMode(C.Optional_null0, _this), t2));
      }
      t1 = _this._mouseMode;
      t1.toString;
      t2 = H.functionTypeCheck(new D.ReactGridComponent_updateMouseModeFromNode_closure(position), {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(t1, 0)]});
      t1 = t1._core0$_value;
      if (t1 != null)
        t2.call$1(t1);
    },
    updateMouseModeFromNodePart$2$direction: function(position, direction) {
      var t1, t2, _this = this;
      if (C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "gridMode"))) !== C.GridMode_0) {
        t1 = _this._mouseMode;
        t1 = !t1.get$iterator(t1).moveNext$0();
      } else
        t1 = false;
      if (t1)
        if ((E.Position$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "startPosition"), "$isMap")).$eq(0, position) || E.Position$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "targetPosition"), "$isMap")).$eq(0, position)) && direction == null) {
          t1 = new B.EditNodeTypeMouseMode(_this);
          t1._structureTypeChanging = t1.getStructureNodeType$1(position);
          _this.set$_mouseMode(X.Optional$of(t1, N.MouseMode));
        } else if (direction != null)
          _this.set$_mouseMode(X.Optional$of(new N.EditBarrierMouseMode(C.Optional_null0, _this), N.MouseMode));
      t1 = _this._mouseMode;
      t1.toString;
      t2 = H.functionTypeCheck(new D.ReactGridComponent_updateMouseModeFromNodePart_closure(position, direction), {func: 1, ret: -1, args: [H.getTypeArgumentByIndex(t1, 0)]});
      t1 = t1._core0$_value;
      if (t1 != null)
        t2.call$1(t1);
    },
    componentWillUnmount$0: function() {
      var _this = this;
      _this.super$UiComponent$componentWillUnmount();
      _this._onDocumentMouseUpListener.cancel$0(0);
      J.get$store$z(_this.get$props(_this)).removeEqualListener$1(_this.listener);
    },
    set$listener: function(_, listener) {
      this.listener = H.functionTypeCheck(listener, {func: 1, ret: -1});
    },
    set$_mouseMode: function(_mouseMode) {
      this._mouseMode = H.assertSubtype(_mouseMode, "$isOptional", [N.MouseMode], "$asOptional");
    },
    $asUiComponent: function() {
      return [D.ReactGridProps];
    }
  };
  D.ReactGridComponent_componentWillMount_closure.prototype = {
    call$1: function($event) {
      H.interceptedTypeCheck($event, "$isMouseEvent");
      this.$this.set$_mouseMode(C.Optional_null1);
      return C.Optional_null1;
    },
    $signature: 122
  };
  D.ReactGridComponent_componentWillMount_closure0.prototype = {
    call$1: function(e) {
      H.interceptedTypeCheck(e, "$isEvent");
      return this.$this._updateCSSVariables$0();
    },
    $signature: 123
  };
  D.ReactGridComponent_componentWillMount_closure1.prototype = {
    call$0: function() {
      this.$this.setState$2(0, P.LinkedHashMap__makeEmpty(), null);
      return;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  D.ReactGridComponent__renderRow_closure.prototype = {
    call$1: function(x) {
      var t1 = this.$this,
        t2 = new E.Position(x, this.y),
        t3 = V.ReactNode___$ReactNode$closure().call$0();
      J.set$key$x(t3, t2);
      J.$indexSet$ax(t3._ReactNode$_props, "ReactNodeProps.position", t2);
      t2 = J.get$store$z(t1.get$props(t1));
      J.$indexSet$ax(t3._ReactNode$_props, "ReactNodeProps.store", t2);
      J.$indexSet$ax(t3._ReactNode$_props, "ReactNodeProps.grid", t1);
      return t3.call$0();
    },
    $signature: 23
  };
  D.ReactGridComponent_updateMouseModeFromNode_closure.prototype = {
    call$1: function(mouseMode) {
      return H.interceptedTypeCheck(mouseMode, "$isMouseMode").evaluateNode$1(this.position);
    },
    $signature: 47
  };
  D.ReactGridComponent_updateMouseModeFromNodePart_closure.prototype = {
    call$1: function(mouseMode) {
      return H.interceptedTypeCheck(mouseMode, "$isMouseMode").evaluateNodePart$2$direction(this.position, this.direction);
    },
    $signature: 47
  };
  D.closure16.prototype = {
    call$0: function() {
      var t1 = new D._$ReactGridComponent(P.Expando$(null, D.ReactGridProps), P.LinkedHashMap__makeEmpty(), H.setRuntimeTypeInfo([], [{func: 1}]), H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Map,,,], args: [[P.Map,,,], [P.Map,,,]]}]));
      t1.get$$$isClassGenerated();
      return t1;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 125
  };
  D._$ReactGridPropsAccessorsMixin.prototype = {
    get$store: function(_) {
      var t1 = J.$index$asx(this._ReactGrid$_props, "ReactGridProps.store");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isStore");
    }
  };
  D.ReactGridProps.prototype = {};
  D._$$ReactGridProps.prototype = {
    get$props: function(_) {
      return this._ReactGrid$_props;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$componentFactory: function() {
      return $.$get$$ReactGridComponentFactory();
    },
    $isReactGridProps: 1
  };
  D._$ReactGridComponent.prototype = {
    typedPropsFactory$1: function(backingMap) {
      return D._$$ReactGridProps$(backingMap);
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$$$defaultConsumedProps: function() {
      return C.List_2bC;
    }
  };
  D._ReactGridProps__$ReactGridProps__$ReactGridPropsAccessorsMixin.prototype = {};
  D.__$$ReactGridProps__$ReactGridProps__$ReactGridPropsAccessorsMixin.prototype = {};
  O._$ReactGridSettingsProps.prototype = {};
  O.ReactGridSettingsComponent.prototype = {
    componentWillMount$0: function() {
      var _this = this;
      _this.super$UiComponent$componentWillMount();
      _this.set$listener(0, new O.ReactGridSettingsComponent_componentWillMount_closure(_this));
      J.get$store$z(_this.get$props(_this)).addEqualListener$2(H.setRuntimeTypeInfo(["gridMode", "directionMode", "cornerMode", "directionalMode"], [P.String]), _this.listener);
    },
    render$0: function(_) {
      var t2, t3, t4, t5, t6, t7, t8, t9, t10, t11, t12, t13, t14, t15, _this = this, _null = null, _s5_ = "title", _s6_ = "config",
        _s8_ = "gridMode",
        _s13_ = "directionMode",
        _s12_ = "config small",
        t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t1.set$className(0, "menu");
      t2 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t2.set$className(0, _s5_);
      t2 = t2.call$1("Grid");
      t3 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t3.set$className(0, "configs");
      t4 = F.ReactPopover___$ReactPopover$closure().call$0();
      t5 = J.getInterceptor$z(t4);
      t5.set$className(t4, _s6_);
      t4.set$popover("            <div class=\"title\">Select the mode of the grid</div>\n            <div class=\"options\">\n              <div class='title'>Basic</div>\n              <div class='content'>\n                Nodes can either be marked as walkable or as not walkable.\n              </div>\n              <div class='title'>Advanced</div>\n              <div class='content'>\n                For each direction a node can be marked as enterable or as not enterable.\n              </div>\n            </div>\n            ");
      t5.set$html(t4, true);
      t5 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t5.set$className(0, _s5_);
      t5 = t5.call$1("Mode:");
      t6 = U.ReactDropDown___$ReactDropDown$closure().call$0();
      t7 = J.getInterceptor$x(t6);
      t7.set$value(t6, C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s8_))));
      t7.set$values(t6, C.List_GridMode_0_GridMode_1);
      t6.set$getTitle(new O.ReactGridSettingsComponent_render_closure());
      t6.set$selectListener(new O.ReactGridSettingsComponent_render_closure0(_this));
      t6 = t4.call$2(t5, t6.call$0());
      t5 = F.ReactPopover___$ReactPopover$closure().call$0();
      t4 = J.getInterceptor$z(t5);
      t4.set$className(t5, _s6_);
      t5.set$popover("            <div class=\"title\">Select which directions are allowed</div>\n            <div class=\"options\">\n              <div class='title'>All</div>\n              <div class='content'>\n                All 8 directions.\n              </div>\n              <div class='title'>Only cardinal</div>\n              <div class='content'>\n                Nort, east, south and west.\n              </div>\n              <div class='title'>Only diagonal</div>\n              <div class='content'>\n                Northeast, southeast, southwest and northwest.\n              </div>\n            </div>\n            ");
      t4.set$html(t5, true);
      t4 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t4.set$className(0, _s5_);
      t4 = t4.call$1("Directions:");
      t7 = U.ReactDropDown___$ReactDropDown$closure().call$0();
      t8 = J.getInterceptor$x(t7);
      t8.set$value(t7, C.JSArray_methods.$index(C.List_Ql0, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s13_))));
      t8.set$values(t7, C.List_Ql0);
      t7.set$getTitle(new O.ReactGridSettingsComponent_render_closure1());
      t7.set$selectListener(new O.ReactGridSettingsComponent_render_closure2(_this));
      t7 = t5.call$2(t4, t7.call$0());
      if (C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s8_))) !== C.GridMode_0) {
        t4 = F.ReactPopover___$ReactPopover$closure().call$0();
        t5 = J.getInterceptor$z(t4);
        t5.set$className(t4, _s6_);
        t4.set$popover("            <div class=\"title\">Select the directional mode</div>\n            <div class=\"options\">\n              <div class='title'>Mono</div>\n              <div class='content'>\n                You can have one-way connections between nodes.\n              </div>\n              <div class='title'>Bi</div>\n              <div class='content'>\n                You can <strong>not</strong> have one-way connections between nodes.\n              </div>\n            </div>\n            ");
        t5.set$html(t4, true);
        t5 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
        t5.set$className(0, _s5_);
        t5 = t5.call$1("Directional:");
        t8 = U.ReactDropDown___$ReactDropDown$closure().call$0();
        t9 = J.getInterceptor$x(t8);
        t9.set$value(t8, C.JSArray_methods.$index(C.List_WPn, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "directionalMode"))));
        t9.set$values(t8, C.List_WPn);
        t8.set$getTitle(new O.ReactGridSettingsComponent_render_closure3());
        t8.set$selectListener(new O.ReactGridSettingsComponent_render_closure4(_this));
        t8 = t4.call$2(t5, t8.call$0());
        t4 = t8;
      } else
        t4 = _null;
      if (C.JSArray_methods.$index(C.List_Ql0, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s13_))) !== C.DirectionMode_1) {
        t5 = F.ReactPopover___$ReactPopover$closure().call$0();
        t8 = J.getInterceptor$z(t5);
        t8.set$className(t5, _s6_);
        t5.set$popover("            <div class=\"title\">Select how corners are handled</div>\n            <div class=\"options\">\n              <div class='title'>Cross</div>\n              <div class='content'>\n                Edges are allowed to cross blocked corners.\n              </div>\n              <div class='title'>Bypass</div>\n              <div class='content'>\n                Eges are not allowed to cross blocked corners.\n              </div>\n            </div>\n            ");
        t8.set$html(t5, true);
        t8 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
        t8.set$className(0, _s5_);
        t8 = t8.call$1("Cross Corners:");
        t9 = U.ReactDropDown___$ReactDropDown$closure().call$0();
        t10 = J.getInterceptor$x(t9);
        t10.set$value(t9, C.JSArray_methods.$index(C.List_CornerMode_0_CornerMode_1, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "cornerMode"))));
        t10.set$values(t9, C.List_CornerMode_0_CornerMode_1);
        t9.set$getTitle(new O.ReactGridSettingsComponent_render_closure5());
        t9.set$selectListener(new O.ReactGridSettingsComponent_render_closure6(_this));
        t9 = t5.call$2(t8, t9.call$0());
        t5 = t9;
      } else
        t5 = _null;
      t8 = F.ReactPopover___$ReactPopover$closure().call$0();
      J.set$className$z(t8, _s12_);
      t8.set$popover("Shrink grid");
      t9 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t9.set$className(0, "button icon minus");
      t9.set$onClick(0, new O.ReactGridSettingsComponent_render_closure7(_this));
      t9 = t8.call$1(t9.call$1(" "));
      t8 = F.ReactPopover___$ReactPopover$closure().call$0();
      J.set$className$z(t8, _s12_);
      t8.set$popover("Enlarge grid");
      t10 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t10.set$className(0, "button icon plus");
      t10.set$onClick(0, new O.ReactGridSettingsComponent_render_closure8(_this));
      t10 = t8.call$1(t10.call$1(" "));
      t8 = F.ReactPopover___$ReactPopover$closure().call$0();
      J.set$className$z(t8, _s12_);
      t8.set$popover("Download grid");
      t11 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t11.set$className(0, "button icon save");
      t11.set$onClick(0, new O.ReactGridSettingsComponent_render_closure9(_this));
      t11 = t8.call$1(t11.call$1(" "));
      t8 = F.ReactPopover___$ReactPopover$closure().call$0();
      J.set$className$z(t8, _s12_);
      t8.set$popover("Load grid");
      t12 = A.DomProps$(H.interceptedTypeCheck($.label, "$isReactDomComponentFactoryProxy"), _null);
      t12.set$className(0, "button icon load");
      t12.props.$indexSet(0, "htmlFor", "load");
      t12 = t12.call$1(" ");
      t13 = A.DomProps$(H.interceptedTypeCheck($.input, "$isReactDomComponentFactoryProxy"), _null);
      t13.set$id(0, "load");
      t14 = t13.props;
      t14.$indexSet(0, "type", "file");
      t14.$indexSet(0, "accept", "image/png");
      t15 = P.String;
      t13.set$style(0, P.LinkedHashMap_LinkedHashMap$_literal(["display", "none"], t15, t15));
      t14.$indexSet(0, "onChange", H.functionTypeCheck(new O.ReactGridSettingsComponent_render_closure10(_this), {func: 1, args: [V.SyntheticFormEvent0]}));
      t13 = t8.call$2(t12, t13.call$0());
      t12 = F.ReactPopover___$ReactPopover$closure().call$0();
      J.set$className$z(t12, _s12_);
      t12.set$popover("Clear grid");
      t8 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t8.set$className(0, "button icon clear");
      t8.set$onClick(0, new O.ReactGridSettingsComponent_render_closure11(_this));
      return t1.call$2(t2, t3.call$9(t6, t7, t4, t5, t9, t10, t11, t13, t12.call$1(t8.call$1(" "))));
    },
    componentWillUnmount$0: function() {
      var _this = this;
      _this.super$UiComponent$componentWillUnmount();
      J.get$store$z(_this.get$props(_this)).removeEqualListener$1(_this.listener);
    },
    set$listener: function(_, listener) {
      this.listener = H.functionTypeCheck(listener, {func: 1, ret: -1});
    },
    $asUiComponent: function() {
      return [O.ReactGridSettingsProps];
    }
  };
  O.ReactGridSettingsComponent_componentWillMount_closure.prototype = {
    call$0: function() {
      this.$this.setState$2(0, P.LinkedHashMap__makeEmpty(), null);
      return;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  O.ReactGridSettingsComponent_render_closure.prototype = {
    call$1: function(e) {
      return G.GridModes_getTitle(H.interceptedTypeCast(e, "$isGridMode"));
    },
    $signature: 7
  };
  O.ReactGridSettingsComponent_render_closure0.prototype = {
    call$1: function(newValue) {
      var t1 = this.$this;
      t1 = J.get$store$z(t1.get$props(t1));
      H.interceptedTypeCast(newValue, "$isGridMode");
      t1.toString;
      t1.$set$2(0, "gridMode", newValue.index);
      return newValue;
    },
    $signature: 126
  };
  O.ReactGridSettingsComponent_render_closure1.prototype = {
    call$1: function(e) {
      return G.DirectionModes_getTitle(H.interceptedTypeCast(e, "$isDirectionMode"));
    },
    $signature: 7
  };
  O.ReactGridSettingsComponent_render_closure2.prototype = {
    call$1: function(newValue) {
      var t1 = this.$this;
      t1 = J.get$store$z(t1.get$props(t1));
      H.interceptedTypeCast(newValue, "$isDirectionMode");
      t1.toString;
      t1.$set$2(0, "directionMode", newValue.index);
      return newValue;
    },
    $signature: 127
  };
  O.ReactGridSettingsComponent_render_closure3.prototype = {
    call$1: function(e) {
      return G.DirectionalModes_getTitle(H.interceptedTypeCast(e, "$isDirectionalMode"));
    },
    $signature: 7
  };
  O.ReactGridSettingsComponent_render_closure4.prototype = {
    call$1: function(newValue) {
      var t1 = this.$this;
      t1 = J.get$store$z(t1.get$props(t1));
      H.interceptedTypeCast(newValue, "$isDirectionalMode");
      t1.toString;
      t1.$set$2(0, "directionalMode", newValue.index);
      return newValue;
    },
    $signature: 128
  };
  O.ReactGridSettingsComponent_render_closure5.prototype = {
    call$1: function(e) {
      return G.CornerModes_getTitle(H.interceptedTypeCast(e, "$isCornerMode"));
    },
    $signature: 7
  };
  O.ReactGridSettingsComponent_render_closure6.prototype = {
    call$1: function(newValue) {
      var t1 = this.$this;
      t1 = J.get$store$z(t1.get$props(t1));
      H.interceptedTypeCast(newValue, "$isCornerMode");
      t1.toString;
      t1.$set$2(0, "cornerMode", newValue.index);
      return newValue;
    },
    $signature: 129
  };
  O.ReactGridSettingsComponent_render_closure7.prototype = {
    call$1: function(_) {
      var t1, t2, t3;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      t2 = J.get$store$z(t1.get$props(t1))._gridManager;
      t3 = F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(t1.get$props(t1))._StoreTransferAble$_store.$index(0, "size"), "$isMap")).width;
      if (typeof t3 !== "number")
        return t3.$sub();
      t1 = F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(t1.get$props(t1))._StoreTransferAble$_store.$index(0, "size"), "$isMap")).height;
      if (typeof t1 !== "number")
        return t1.$sub();
      return t2.setSize$1(0, new F.Size(t3 - 1, t1 - 1));
    },
    $signature: 2
  };
  O.ReactGridSettingsComponent_render_closure8.prototype = {
    call$1: function(_) {
      var t1, t2, t3;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      t2 = J.get$store$z(t1.get$props(t1))._gridManager;
      t3 = F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(t1.get$props(t1))._StoreTransferAble$_store.$index(0, "size"), "$isMap")).width;
      if (typeof t3 !== "number")
        return t3.$add();
      t1 = F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(t1.get$props(t1))._StoreTransferAble$_store.$index(0, "size"), "$isMap")).height;
      if (typeof t1 !== "number")
        return t1.$add();
      return t2.setSize$1(0, new F.Size(t3 + 1, t1 + 1));
    },
    $signature: 2
  };
  O.ReactGridSettingsComponent_render_closure9.prototype = {
    call$1: function(_) {
      var t1;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      return J.download$0$x(t1.get$props(t1));
    },
    $signature: 130
  };
  O.ReactGridSettingsComponent_render_closure10.prototype = {
    call$1: function($event) {
      var t1 = H.interceptedTypeCheck($event, "$isSyntheticFormEvent0").target,
        t2 = J.getInterceptor$x(t1),
        file = H.interceptedTypeCast(J.$index$asx(t2.get$files(t1), 0), "$isFile"),
        reader = new FileReader(),
        t3 = W.ProgressEvent;
      W._EventStreamSubscription$(reader, "loadend", H.functionTypeCheck(new O.ReactGridSettingsComponent_render__closure(this.$this, reader), {func: 1, ret: -1, args: [t3]}), false, t3);
      reader.readAsDataURL(file);
      t2.set$value(t1, null);
    },
    $signature: 131
  };
  O.ReactGridSettingsComponent_render__closure.prototype = {
    call$1: function(fileEvent) {
      var t1;
      H.interceptedTypeCheck(fileEvent, "$isProgressEvent");
      t1 = this.$this;
      J.load$1$z(t1.get$props(t1), C.FileReader_methods.get$result(this.reader));
    },
    $signature: 132
  };
  O.ReactGridSettingsComponent_render_closure11.prototype = {
    call$1: function(_) {
      var t1;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      return J.get$store$z(t1.get$props(t1))._gridManager.clear$0(0);
    },
    $signature: 2
  };
  O.closure13.prototype = {
    call$0: function() {
      var t1 = new O._$ReactGridSettingsComponent(P.Expando$(null, O.ReactGridSettingsProps), P.LinkedHashMap__makeEmpty(), H.setRuntimeTypeInfo([], [{func: 1}]), H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Map,,,], args: [[P.Map,,,], [P.Map,,,]]}]));
      t1.get$$$isClassGenerated();
      return t1;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 133
  };
  O._$ReactGridSettingsPropsAccessorsMixin.prototype = {
    get$store: function(_) {
      var t1 = J.$index$asx(this._ReactGridSettings$_props, "ReactGridSettingsProps.store");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isStore");
    },
    get$download: function(_) {
      var t1 = J.$index$asx(this._ReactGridSettings$_props, "ReactGridSettingsProps.download");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isFunction");
    },
    get$load: function(_) {
      var t1 = J.$index$asx(this._ReactGridSettings$_props, "ReactGridSettingsProps.load");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isFunction");
    },
    download$0: function($receiver) {
      return this.get$download(this).call$0();
    },
    load$1: function($receiver, arg0) {
      return this.get$load(this).call$1(arg0);
    }
  };
  O.ReactGridSettingsProps.prototype = {};
  O._$$ReactGridSettingsProps.prototype = {
    get$props: function(_) {
      return this._ReactGridSettings$_props;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$componentFactory: function() {
      return $.$get$$ReactGridSettingsComponentFactory();
    },
    $isReactGridSettingsProps: 1
  };
  O._$ReactGridSettingsComponent.prototype = {
    typedPropsFactory$1: function(backingMap) {
      return O._$$ReactGridSettingsProps$(backingMap);
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$$$defaultConsumedProps: function() {
      return C.List_LNi;
    }
  };
  O._ReactGridSettingsProps__$ReactGridSettingsProps__$ReactGridSettingsPropsAccessorsMixin.prototype = {};
  O.__$$ReactGridSettingsProps__$ReactGridSettingsProps__$ReactGridSettingsPropsAccessorsMixin.prototype = {};
  K._$ReactHistoryProps.prototype = {};
  K.ReactHistoryComponent.prototype = {
    componentWillMount$0: function() {
      var _this = this;
      _this.super$UiComponent$componentWillMount();
      _this.set$listener(0, new K.ReactHistoryComponent_componentWillMount_closure(_this));
      J.get$store$z(_this.get$props(_this)).addEqualListener$2(H.setRuntimeTypeInfo(["title", "stepCount", "currentStepId", "currentStepTitle", "currentStepDescription"], [P.String]), _this.listener);
    },
    render$0: function(_) {
      var t1, t2, t3, t4, t5, t6, _this = this, _null = null, _s5_ = "title",
        _s9_ = "stepCount",
        _s12_ = "turnOverview";
      if (H.stringTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s5_)) === "") {
        t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
        t1.set$className(0, "history");
        return t1.call$0();
      }
      t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t1.set$className(0, "history");
      t2 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t2.set$className(0, _s5_);
      t2 = t2.call$1(H.stringTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s5_)));
      t3 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t3.set$className(0, "parts " + (H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s9_)) === 0 ? "turnOverviewEmpty" : ""));
      t3 = t3.call$1(P.List_List$generate(H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s9_)), new K.ReactHistoryComponent_render_closure(_this), K.ReactElement));
      t4 = H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "currentStepId"));
      t5 = $.div;
      if (t4 === -1) {
        t4 = A.DomProps$(H.interceptedTypeCheck(t5, "$isReactDomComponentFactoryProxy"), _null);
        t4.set$className(0, _s12_);
        t5 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
        t5.set$className(0, _s5_);
        t5 = t4.call$1(t5.call$1("Select a step to see futher informations about it here"));
        t4 = t5;
      } else {
        t4 = A.DomProps$(H.interceptedTypeCheck(t5, "$isReactDomComponentFactoryProxy"), _null);
        t4.set$className(0, _s12_);
        t5 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
        t5.set$className(0, _s5_);
        t5 = t5.call$1(H.stringTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "currentStepTitle")));
        t6 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
        t6.set$className(0, "description");
        t6 = t4.call$2(t5, t6.call$1(_this._renderExplanations$1(J.get$store$z(_this.get$props(_this)).get$currentStepDescription())));
        t4 = t6;
      }
      return t1.call$3(t2, t3, t4);
    },
    _renderPart$1: function(stepId) {
      var selected = H.intTypeCast(J.get$store$z(this.get$props(this))._StoreTransferAble$_store.$index(0, "currentStepId")) === stepId,
        t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t1.set$key(0, stepId);
      t1.set$className(0, "part " + (selected ? "selected" : ""));
      t1.set$onClick(0, new K.ReactHistoryComponent__renderPart_closure(this, selected, stepId));
      return t1.call$1(stepId);
    },
    _renderExplanations$1: function(explanations) {
      var t1, t2, t3;
      H.assertSubtype(explanations, "$isList", [M.Explanation], "$asList");
      t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t1.set$className(0, "explanations");
      t2 = K.ReactElement;
      t3 = H.getTypeArgumentByIndex(explanations, 0);
      return t1.call$1(new H.MappedListIterable(explanations, H.functionTypeCheck(new K.ReactHistoryComponent__renderExplanations_closure(this), {func: 1, ret: t2, args: [t3]}), [t3, t2]));
    },
    _renderExplanation$1: function(explanation) {
      var t2, t3, t4,
        t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t1.set$className(0, "explanation " + H.S(explanation.style));
      t1.set$key(0, H.Primitives_objectHashCode(explanation));
      t2 = explanation._explanation;
      t3 = K.ReactElement;
      t4 = H.getTypeArgumentByIndex(t2, 0);
      return t1.call$1(new H.MappedListIterable(t2, H.functionTypeCheck(new K.ReactHistoryComponent__renderExplanation_closure(this), {func: 1, ret: t3, args: [t4]}), [t4, t3]).toList$0(0));
    },
    componentWillUnmount$0: function() {
      var _this = this;
      _this.super$UiComponent$componentWillUnmount();
      J.get$store$z(_this.get$props(_this)).removeEqualListener$1(_this.listener);
    },
    set$listener: function(_, listener) {
      this.listener = H.functionTypeCheck(listener, {func: 1, ret: -1});
    },
    $asUiComponent: function() {
      return [K.ReactHistoryProps];
    }
  };
  K.ReactHistoryComponent_componentWillMount_closure.prototype = {
    call$0: function() {
      this.$this.setState$2(0, P.LinkedHashMap__makeEmpty(), null);
      return;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  K.ReactHistoryComponent_render_closure.prototype = {
    call$1: function(i) {
      return this.$this._renderPart$1(i);
    },
    $signature: 23
  };
  K.ReactHistoryComponent__renderPart_closure.prototype = {
    call$1: function(_) {
      var t1, t2;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      t1 = J.get$store$z(t1.get$props(t1));
      t2 = this.selected ? -1 : this.stepId;
      t1.$set$2(0, "currentStepId", t2);
      return t2;
    },
    $signature: 202
  };
  K.ReactHistoryComponent__renderExplanations_closure.prototype = {
    call$1: function(e) {
      return this.$this._renderExplanation$1(H.interceptedTypeCheck(e, "$isExplanation"));
    },
    $signature: 135
  };
  K.ReactHistoryComponent__renderExplanation_closure.prototype = {
    call$1: function(ep) {
      var t1, t2;
      H.interceptedTypeCheck(ep, "$isExplanationPart");
      t1 = Y.ReactExplanationPart___$ReactExplanationPart$closure().call$0();
      J.$indexSet$ax(t1._ReactExplanationPart$_props, "ReactExplanationPartProps.explanationPart", ep);
      J.set$key$x(t1, J.get$hashCode$(ep));
      t2 = this.$this;
      t2 = J.get$store$z(t2.get$props(t2));
      J.$indexSet$ax(t1._ReactExplanationPart$_props, "ReactExplanationPartProps.store", t2);
      return t1.call$0();
    },
    $signature: 136
  };
  K.closure3.prototype = {
    call$0: function() {
      var t1 = new K._$ReactHistoryComponent(P.Expando$(null, K.ReactHistoryProps), P.LinkedHashMap__makeEmpty(), H.setRuntimeTypeInfo([], [{func: 1}]), H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Map,,,], args: [[P.Map,,,], [P.Map,,,]]}]));
      t1.get$$$isClassGenerated();
      return t1;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 137
  };
  K._$ReactHistoryPropsAccessorsMixin.prototype = {
    get$store: function(_) {
      var t1 = J.$index$asx(this._ReactHistory$_props, "ReactHistoryProps.store");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isStore");
    }
  };
  K.ReactHistoryProps.prototype = {};
  K._$$ReactHistoryProps.prototype = {
    get$props: function(_) {
      return this._ReactHistory$_props;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$componentFactory: function() {
      return $.$get$$ReactHistoryComponentFactory();
    },
    $isReactHistoryProps: 1
  };
  K._$ReactHistoryComponent.prototype = {
    typedPropsFactory$1: function(backingMap) {
      return K._$$ReactHistoryProps$(backingMap);
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$$$defaultConsumedProps: function() {
      return C.List_Uvc;
    }
  };
  K._ReactHistoryProps__$ReactHistoryProps__$ReactHistoryPropsAccessorsMixin.prototype = {};
  K.__$$ReactHistoryProps__$ReactHistoryProps__$ReactHistoryPropsAccessorsMixin.prototype = {};
  O.setupAlgorithmRunner_closure.prototype = {
    call$1: function($event) {
      var t1;
      H.interceptedTypeCheck($event, "$isMouseEvent");
      t1 = this.store;
      if (C.JSArray_methods.$index(C.List_ORa, H.intTypeCast(t1._StoreTransferAble$_store.$index(0, "algorithmUpdateMode"))) === C.AlgorithmUpdateMode_1)
        t1.triggerTransferListeners$0();
    },
    $signature: 28
  };
  O.setupAlgorithmRunner_closure0.prototype = {
    call$0: function() {
      var _s19_ = "algorithmUpdateMode",
        t1 = this.store,
        t2 = t1._StoreTransferAble$_store;
      if (C.JSArray_methods.$index(C.List_ORa, H.intTypeCast(t2.$index(0, _s19_))) === C.AlgorithmUpdateMode_1 || C.JSArray_methods.$index(C.List_ORa, H.intTypeCast(t2.$index(0, _s19_))) === C.AlgorithmUpdateMode_2)
        t1.autoTriggerTransferListener = false;
      else
        t1.autoTriggerTransferListener = true;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 0
  };
  O.setupAlgorithmRunner_closure1.prototype = {
    call$0: function() {
      return this.store.triggerTransferListeners$0();
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  O.setupArrowKeys_closure.prototype = {
    call$1: function($event) {
      var t1, t2, t3,
        _s13_ = "currentStepId",
        _s9_ = "stepCount";
      H.interceptedTypeCheck($event, "$isKeyboardEvent");
      if ($event.keyCode === 39) {
        t1 = this.store;
        t2 = t1._StoreTransferAble$_store;
        t3 = H.intTypeCast(t2.$index(0, _s13_));
        if (typeof t3 !== "number")
          return t3.$add();
        ++t3;
        t2 = H.intTypeCast(t2.$index(0, _s9_));
        if (typeof t2 !== "number")
          return t2.$sub();
        --t2;
        if (t3 < 0)
          t2 = 0;
        else
          t2 = t3 > t2 ? t2 : t3;
        t1.$set$2(0, _s13_, t2);
      }
      if ($event.keyCode === 37) {
        t1 = this.store;
        t2 = t1._StoreTransferAble$_store;
        t3 = H.intTypeCast(t2.$index(0, _s13_));
        if (typeof t3 !== "number")
          return t3.$sub();
        --t3;
        t2 = H.intTypeCast(t2.$index(0, _s9_));
        if (typeof t2 !== "number")
          return t2.$sub();
        --t2;
        if (t3 < 0)
          t2 = 0;
        else
          t2 = t3 > t2 ? t2 : t3;
        t1.$set$2(0, _s13_, t2);
      }
    },
    $signature: 138
  };
  O._$ReactMainProps.prototype = {};
  O.ReactMainComponent.prototype = {
    render$0: function(_) {
      var t2, t3, t4, t5, t6, t7, t8, _this = this, _null = null,
        t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t1.set$className(0, "content");
      t2 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t2.set$className(0, "leftContent");
      t3 = D.ReactGrid___$ReactGrid$closure().call$0();
      t4 = J.get$store$z(_this.get$props(_this));
      J.$indexSet$ax(t3._ReactGrid$_props, "ReactGridProps.store", t4);
      t3 = t3.call$0();
      t4 = Q.ReactPaths___$ReactPaths$closure().call$0();
      t5 = J.get$store$z(_this.get$props(_this));
      J.$indexSet$ax(t4._ReactPaths$_props, "ReactPathsProps.store", t5);
      t4 = t2.call$2(t3, t4.call$0());
      t3 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t3.set$className(0, "rightContent");
      t2 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t2.set$className(0, "gridSettingsContainer");
      t5 = O.ReactGridSettings___$ReactGridSettings$closure().call$0();
      t6 = J.get$store$z(_this.get$props(_this));
      J.$indexSet$ax(t5._ReactGridSettings$_props, "ReactGridSettingsProps.store", t6);
      J.$indexSet$ax(t5._ReactGridSettings$_props, "ReactGridSettingsProps.download", _this.get$_download());
      J.$indexSet$ax(t5._ReactGridSettings$_props, "ReactGridSettingsProps.load", _this.get$_load());
      t5 = t2.call$1(t5.call$0());
      t2 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t2.set$className(0, "algorithmSettingsContainer");
      t6 = V.ReactAlgorithmSettings___$ReactAlgorithmSettings$closure().call$0();
      t7 = J.get$store$z(_this.get$props(_this));
      J.$indexSet$ax(t6._ReactAlgorithmSettings$_props, "ReactAlgorithmSettingsProps.store", t7);
      t6 = t2.call$1(t6.call$0());
      t2 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), _null);
      t2.set$className(0, "historyContainer");
      t7 = K.ReactHistory___$ReactHistory$closure().call$0();
      t8 = J.get$store$z(_this.get$props(_this));
      J.$indexSet$ax(t7._ReactHistory$_props, "ReactHistoryProps.store", t8);
      return t1.call$2(t4, t3.call$3(t5, t6, t2.call$1(t7.call$0())));
    },
    _download$0: function() {
      var t2,
        save = G.Save$(J.get$store$z(this.get$props(this))),
        t1 = document,
        e = t1.createElement("a");
      e.href = save._canvas.toDataURL("image/png", 100);
      e.download = "grid.png";
      t2 = e.style;
      t2.display = "false";
      t1.querySelector("body").appendChild(e);
      e.click();
    },
    _load$1: function(imageData) {
      G.Save$loadFromSrc(H.stringTypeCheck(imageData), J.get$store$z(this.get$props(this)));
    },
    $asUiComponent: function() {
      return [O.ReactMainProps];
    }
  };
  O.closure.prototype = {
    call$0: function() {
      var t1 = new O._$ReactMainComponent(P.Expando$(null, O.ReactMainProps), P.LinkedHashMap__makeEmpty(), H.setRuntimeTypeInfo([], [{func: 1}]), H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Map,,,], args: [[P.Map,,,], [P.Map,,,]]}]));
      t1.get$$$isClassGenerated();
      return t1;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 139
  };
  O._$ReactMainPropsAccessorsMixin.prototype = {
    get$store: function(_) {
      var t1 = J.$index$asx(this._props, "ReactMainProps.store");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isStore");
    }
  };
  O.ReactMainProps.prototype = {};
  O._$$ReactMainProps.prototype = {
    get$props: function(_) {
      return this._props;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$componentFactory: function() {
      return $.$get$$ReactMainComponentFactory();
    },
    $isReactMainProps: 1
  };
  O._$ReactMainComponent.prototype = {
    typedPropsFactory$1: function(backingMap) {
      return O._$$ReactMainProps$(backingMap);
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$$$defaultConsumedProps: function() {
      return C.List_hn0;
    }
  };
  O._ReactMainProps__$ReactMainProps__$ReactMainPropsAccessorsMixin.prototype = {};
  O.__$$ReactMainProps__$ReactMainProps__$ReactMainPropsAccessorsMixin.prototype = {};
  V._$ReactNodeProps.prototype = {};
  V._$ReactNodeState.prototype = {};
  V.ReactNodeComponent.prototype = {
    get$highlights: function() {
      var _this = this,
        t1 = J.get$store$z(_this.get$props(_this)).getCurrentStepHighlights$2(J.get$position$z(_this.get$props(_this)), "background");
      C.JSArray_methods.addAll$1(t1, J.get$store$z(_this.get$props(_this)).getCurrentStepHighlights$2(J.get$position$z(_this.get$props(_this)), H.stringTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "currentStepDescriptionHoverId"))));
      return t1;
    },
    get$boxHighlight: function() {
      return new X.Optional(H.interceptedTypeCast(C.JSArray_methods.lastWhere$2$orElse(this.get$highlights(), new V.ReactNodeComponent_boxHighlight_closure(), new V.ReactNodeComponent_boxHighlight_closure0()), "$isBoxHighlight"), [K.BoxHighlight]);
    },
    get$directionTextHighlights: function() {
      var t1 = this.get$highlights(),
        t2 = H.getTypeArgumentByIndex(t1, 0),
        t3 = K.DirectionTextHighlight;
      return new H.MappedIterable(new H.WhereIterable(t1, H.functionTypeCheck(new V.ReactNodeComponent_directionTextHighlights_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]), H.functionTypeCheck(new V.ReactNodeComponent_directionTextHighlights_closure0(), {func: 1, ret: t3, args: [t2]}), [t2, t3]);
    },
    get$pathHighlights: function() {
      var t1 = this.get$highlights(),
        t2 = H.getTypeArgumentByIndex(t1, 0),
        t3 = K.PathHighlight;
      return new H.MappedIterable(new H.WhereIterable(t1, H.functionTypeCheck(new V.ReactNodeComponent_pathHighlights_closure(), {func: 1, ret: P.bool, args: [t2]}), [t2]), H.functionTypeCheck(new V.ReactNodeComponent_pathHighlights_closure0(), {func: 1, ret: t3, args: [t2]}), [t2, t3]);
    },
    get$textHighlight: function() {
      return new X.Optional(H.interceptedTypeCast(C.JSArray_methods.lastWhere$2$orElse(this.get$highlights(), new V.ReactNodeComponent_textHighlight_closure(), new V.ReactNodeComponent_textHighlight_closure0()), "$isTextHighlight"), [K.TextHighlight]);
    },
    get$circleHighlight: function() {
      return new X.Optional(H.interceptedTypeCast(C.JSArray_methods.lastWhere$2$orElse(this.get$highlights(), new V.ReactNodeComponent_circleHighlight_closure(), new V.ReactNodeComponent_circleHighlight_closure0()), "$isCircleHighlight"), [K.CircleHighlight]);
    },
    get$dotHighlight: function() {
      return new X.Optional(H.interceptedTypeCast(C.JSArray_methods.lastWhere$2$orElse(this.get$highlights(), new V.ReactNodeComponent_dotHighlight_closure(), new V.ReactNodeComponent_dotHighlight_closure0()), "$isDotHighlight"), [K.DotHighlight]);
    },
    getInitialState$0: function() {
      var t1 = this.typedStateFactory$1(P.LinkedHashMap__makeEmpty());
      t1.set$mouseIsOver(false);
      t1.set$mouseIsDown(false);
      return t1;
    },
    componentWillMount$0: function() {
      var t1, t2, t3, t4, t5, t6, _this = this;
      _this.super$UiComponent$componentWillMount();
      _this.set$listener(0, new V.ReactNodeComponent_componentWillMount_closure(_this));
      t1 = J.get$position$z(_this.get$props(_this)).neighbours$1(F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "size"), "$isMap")));
      t2 = P.String;
      t3 = H.getTypeArgumentByIndex(t1, 0);
      t4 = H.functionTypeCheck(new V.ReactNodeComponent_componentWillMount_closure0(), {func: 1, ret: t2, args: [t3]});
      t5 = J.get$store$z(_this.get$props(_this));
      t6 = H.setRuntimeTypeInfo(["barrier_" + H.S(J.get$position$z(_this.get$props(_this))), "currentStepHighlights_" + H.S(J.get$position$z(_this.get$props(_this))), "position_" + H.S(J.get$position$z(_this.get$props(_this)))], [t2]);
      C.JSArray_methods.addAll$1(t6, new H.MappedIterable(t1, t4, [t3, t2]));
      t5.addEqualListener$2(t6, _this.listener);
    },
    render$0: function(_) {
      var t2, t3, _this = this,
        _s8_ = "gridMode",
        _s14_ = "totalUnblocked",
        t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      if (C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s8_))) === C.GridMode_0)
        t2 = J.get$store$z(_this.get$props(_this)).getBarrier$1(J.get$position$z(_this.get$props(_this))).isAnyBlocked$0() ? "anyBlocked totalBlocked" : _s14_;
      else
        t2 = "";
      t2 = "node " + t2 + " ";
      if (C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, _s8_))) === C.GridMode_1)
        t3 = J.get$store$z(_this.get$props(_this)).getBarrier$1(J.get$position$z(_this.get$props(_this))).isAnyBlocked$0() ? "anyBlocked" : _s14_;
      else
        t3 = "";
      t3 = t2 + t3 + " ";
      if (E.Position$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "startPosition"), "$isMap")).$eq(0, J.get$position$z(_this.get$props(_this))))
        t2 = "SOURCE_NODE";
      else
        t2 = E.Position$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "targetPosition"), "$isMap")).$eq(0, J.get$position$z(_this.get$props(_this))) ? "TARGET_NODE" : "NORMAL_NODE";
      t2 = t3 + t2 + " ";
      t2 = t2 + (H.boolConversionCheck(_this.get$state(_this).get$mouseIsOver()) ? "hover" : "noHover") + " ";
      t3 = _this.get$state(_this)._ReactNode$_state.$index(0, "ReactNodeState.mouseIsDown");
      t2 = t2 + (H.boolConversionCheck(H.boolTypeCheck(t3 == null ? null : t3)) ? "mouseDown" : "mouseUp") + " ";
      if (H.boolConversionCheck(_this.get$state(_this).get$mouseIsOver()) && J.get$grid$z(_this.get$props(_this))._mouseMode._core0$_value != null) {
        t3 = J.get$grid$z(_this.get$props(_this))._mouseMode;
        t3 = J.get$name$x(t3.get$value(t3));
      } else
        t3 = "";
      t3 = t2 + t3 + " ";
      if (_this.get$boxHighlight()._core0$_value != null) {
        t2 = _this.get$boxHighlight();
        t2 = "boxHighlight highlight_" + H.S(t2.get$value(t2).style);
      } else
        t2 = "";
      t1.set$className(0, t3 + t2);
      t1.set$onMouseDown(0, new V.ReactNodeComponent_render_closure(_this));
      t1.props.$indexSet(0, "onMouseUp", H.functionTypeCheck(new V.ReactNodeComponent_render_closure0(_this), {func: 1, args: [V.SyntheticMouseEvent]}));
      t1.set$onMouseEnter(0, new V.ReactNodeComponent_render_closure1(_this));
      t1.set$onMouseLeave(0, new V.ReactNodeComponent_render_closure2(_this));
      return t1.call$6(_this._renderTextHighlight$0(), _this._renderCircleHighlight$0(), _this._renderDotHighlight$0(), _this._renderInner$0(), _this._renderArrowsToGo$0(), _this._renderPathHighlights$0());
    },
    _renderInner$0: function() {
      var t1, _this = this;
      if (J.get$isEmpty$asx(_this.get$directionTextHighlights().__internal$_iterable) && !E.Position$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "startPosition"), "$isMap")).$eq(0, J.get$position$z(_this.get$props(_this))) && !E.Position$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "targetPosition"), "$isMap")).$eq(0, J.get$position$z(_this.get$props(_this))))
        if (C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "gridMode"))) === C.GridMode_0)
          return;
        else if (J.get$store$z(_this.get$props(_this))._gridBarrierManager.somethingToDisplay$1(J.get$position$z(_this.get$props(_this))) && !H.boolConversionCheck(_this.get$state(_this).get$mouseIsOver()))
          return;
      t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t1.set$className(0, "parts");
      return t1.call$9(_this._ReactNode$_renderPart$1$direction(C.Direction_7), _this._ReactNode$_renderPart$1$direction(C.Direction_0), _this._ReactNode$_renderPart$1$direction(C.Direction_1), _this._ReactNode$_renderPart$1$direction(C.Direction_6), _this._ReactNode$_renderPart$0(), _this._ReactNode$_renderPart$1$direction(C.Direction_2), _this._ReactNode$_renderPart$1$direction(C.Direction_5), _this._ReactNode$_renderPart$1$direction(C.Direction_4), _this._ReactNode$_renderPart$1$direction(C.Direction_3));
    },
    _ReactNode$_renderPart$1$direction: function(direction) {
      var _this = this,
        t1 = G.ReactNodePart___$ReactNodePart$closure().call$0(),
        t2 = J.get$grid$z(_this.get$props(_this));
      J.$indexSet$ax(t1._ReactNodePart$_props, "ReactNodePartProps.grid", t2);
      t2 = J.get$store$z(_this.get$props(_this));
      J.$indexSet$ax(t1._ReactNodePart$_props, "ReactNodePartProps.store", t2);
      J.set$key$x(t1, direction);
      t2 = [O.Direction];
      t2 = H.assertSubtype(new X.Optional(direction, t2), "$isOptional", t2, "$asOptional");
      J.$indexSet$ax(t1._ReactNodePart$_props, "ReactNodePartProps.direction", t2);
      t2 = [K.DirectionTextHighlight];
      t2 = H.assertSubtype(new X.Optional(_this.get$directionTextHighlights().lastWhere$2$orElse(0, new V.ReactNodeComponent__renderPart_closure(direction), new V.ReactNodeComponent__renderPart_closure0()), t2), "$isOptional", t2, "$asOptional");
      J.$indexSet$ax(t1._ReactNodePart$_props, "ReactNodePartProps.directionTextHighlight", t2);
      t2 = J.get$position$z(_this.get$props(_this));
      J.$indexSet$ax(t1._ReactNodePart$_props, "ReactNodePartProps.position", t2);
      return t1.call$0();
    },
    _ReactNode$_renderPart$0: function() {
      return this._ReactNode$_renderPart$1$direction(null);
    },
    _renderArrowsToGo$0: function() {
      var t1, t2, t3;
      if (!H.boolConversionCheck(this.get$state(this).get$mouseIsOver()))
        return;
      t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t1.set$className(0, "arrowsToGo");
      t2 = K.ReactElement;
      t3 = H.getTypeArgumentByIndex(C.List_4j7, 0);
      return t1.call$1(new H.MappedListIterable(C.List_4j7, H.functionTypeCheck(this.get$_renderArrowToGo(), {func: 1, ret: t2, args: [t3]}), [t3, t2]).toList$0(0));
    },
    _renderArrowToGo$1: function(direction) {
      var leaveAble, t1, t2, enterAble, _this = this;
      H.interceptedTypeCheck(direction, "$isDirection");
      leaveAble = J.get$store$z(_this.get$props(_this))._gridBarrierManager.leaveAble$2(J.get$position$z(_this.get$props(_this)), direction);
      t1 = J.get$store$z(_this.get$props(_this))._gridBarrierManager;
      t2 = J.get$position$z(_this.get$props(_this));
      t1.toString;
      enterAble = t1.leaveAble$2(t2.goMulti$2(direction, 1), O.Directions_turn(direction, 180));
      if (!enterAble && !leaveAble)
        return;
      t1 = B.ReactArrow___$ReactArrow$closure().call$0();
      t2 = J.getInterceptor$x(t1);
      t2.set$key(t1, direction);
      t2.set$size(t1, F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "size"), "$isMap")));
      t2.set$path(t1, H.setRuntimeTypeInfo([J.get$position$z(_this.get$props(_this)), J.get$position$z(_this.get$props(_this)).goMulti$2(direction, 1)], [E.Position]));
      if (leaveAble)
        t2 = !(enterAble && true);
      else
        t2 = false;
      t1.set$showEnd(t2);
      if (enterAble)
        t2 = !leaveAble;
      else
        t2 = false;
      t1.set$showStart(t2);
      return t1.call$0();
    },
    _renderPathHighlights$0: function() {
      var t1, t2, t3, t4, _this = this;
      if (!H.boolConversionCheck(_this.get$state(_this).get$mouseIsOver()))
        return;
      t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t1.set$className(0, "pathHighlights");
      t2 = _this.get$pathHighlights();
      t3 = K.ReactElement;
      t4 = H.getRuntimeTypeArgument(t2, "Iterable", 0);
      t3 = H.MappedIterable_MappedIterable(t2, H.functionTypeCheck(new V.ReactNodeComponent__renderPathHighlights_closure(_this), {func: 1, ret: t3, args: [t4]}), t4, t3);
      return t1.call$1(P.List_List$from(t3, true, H.getRuntimeTypeArgument(t3, "Iterable", 0)));
    },
    _renderTextHighlight$0: function() {
      var t2,
        t1 = this.get$textHighlight();
      if (!t1.get$iterator(t1).moveNext$0())
        return;
      t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t2 = this.get$textHighlight();
      t1.set$className(0, "textHighlight highlight_" + H.S(t2.get$value(t2).style));
      t2 = this.get$textHighlight();
      return t1.call$1(t2.get$value(t2).text);
    },
    _renderCircleHighlight$0: function() {
      var t2,
        t1 = this.get$circleHighlight();
      if (!t1.get$iterator(t1).moveNext$0())
        return;
      t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t2 = this.get$circleHighlight();
      t1.set$className(0, "circleHighlight highlight_" + H.S(t2.get$value(t2).style));
      return t1.call$0();
    },
    _renderDotHighlight$0: function() {
      var t2,
        t1 = this.get$dotHighlight();
      if (!t1.get$iterator(t1).moveNext$0())
        return;
      t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t2 = this.get$dotHighlight();
      t1.set$className(0, "dotHighlight highlight_" + H.S(t2.get$value(t2).style));
      return t1.call$0();
    },
    componentWillUnmount$0: function() {
      var _this = this;
      _this.super$UiComponent$componentWillUnmount();
      J.get$store$z(_this.get$props(_this)).removeEqualListener$1(_this.listener);
    },
    set$listener: function(_, listener) {
      this.listener = H.functionTypeCheck(listener, {func: 1, ret: -1});
    },
    $asUiComponent: function() {
      return [V.ReactNodeProps];
    },
    $asUiStatefulComponent: function() {
      return [V.ReactNodeProps, V.ReactNodeState];
    }
  };
  V.ReactNodeComponent_boxHighlight_closure.prototype = {
    call$1: function(h) {
      return H.interceptedTypeCheck(h, "$isHighlight") instanceof K.BoxHighlight;
    },
    $signature: 11
  };
  V.ReactNodeComponent_boxHighlight_closure0.prototype = {
    call$0: function() {
      return;
    },
    $signature: 0
  };
  V.ReactNodeComponent_directionTextHighlights_closure.prototype = {
    call$1: function(h) {
      return H.interceptedTypeCheck(h, "$isHighlight") instanceof K.DirectionTextHighlight;
    },
    $signature: 11
  };
  V.ReactNodeComponent_directionTextHighlights_closure0.prototype = {
    call$1: function(h) {
      return H.interceptedTypeCast(H.interceptedTypeCheck(h, "$isHighlight"), "$isDirectionTextHighlight");
    },
    $signature: 142
  };
  V.ReactNodeComponent_pathHighlights_closure.prototype = {
    call$1: function(h) {
      return H.interceptedTypeCheck(h, "$isHighlight") instanceof K.PathHighlight;
    },
    $signature: 11
  };
  V.ReactNodeComponent_pathHighlights_closure0.prototype = {
    call$1: function(h) {
      return H.interceptedTypeCast(H.interceptedTypeCheck(h, "$isHighlight"), "$isPathHighlight");
    },
    $signature: 49
  };
  V.ReactNodeComponent_textHighlight_closure.prototype = {
    call$1: function(h) {
      return H.interceptedTypeCheck(h, "$isHighlight") instanceof K.TextHighlight;
    },
    $signature: 11
  };
  V.ReactNodeComponent_textHighlight_closure0.prototype = {
    call$0: function() {
      return;
    },
    $signature: 0
  };
  V.ReactNodeComponent_circleHighlight_closure.prototype = {
    call$1: function(h) {
      return H.interceptedTypeCheck(h, "$isHighlight") instanceof K.CircleHighlight;
    },
    $signature: 11
  };
  V.ReactNodeComponent_circleHighlight_closure0.prototype = {
    call$0: function() {
      return;
    },
    $signature: 0
  };
  V.ReactNodeComponent_dotHighlight_closure.prototype = {
    call$1: function(h) {
      return H.interceptedTypeCheck(h, "$isHighlight") instanceof K.DotHighlight;
    },
    $signature: 11
  };
  V.ReactNodeComponent_dotHighlight_closure0.prototype = {
    call$0: function() {
      return;
    },
    $signature: 0
  };
  V.ReactNodeComponent_componentWillMount_closure.prototype = {
    call$0: function() {
      this.$this.setState$2(0, P.LinkedHashMap__makeEmpty(), null);
      return;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  V.ReactNodeComponent_componentWillMount_closure0.prototype = {
    call$1: function(p) {
      return "barrier_" + H.S(H.interceptedTypeCheck(p, "$isPosition"));
    },
    $signature: 44
  };
  V.ReactNodeComponent_render_closure.prototype = {
    call$1: function(_) {
      var t1, t2;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      t2 = t1.typedStateFactory$1(P.LinkedHashMap__makeEmpty());
      t2.set$mouseIsDown(true);
      t1.setState$1(0, t2);
      J.get$grid$z(t1.get$props(t1)).updateMouseModeFromNode$1(J.get$position$z(t1.get$props(t1)));
      return;
    },
    $signature: 2
  };
  V.ReactNodeComponent_render_closure0.prototype = {
    call$1: function(_) {
      var t1, t2;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      t2 = t1.typedStateFactory$1(P.LinkedHashMap__makeEmpty());
      t2.set$mouseIsDown(false);
      t1.setState$1(0, t2);
      return;
    },
    $signature: 2
  };
  V.ReactNodeComponent_render_closure1.prototype = {
    call$1: function(_) {
      var t1, t2;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      if ($.$get$MouseTracker__tracker()._mouseIsDown)
        J.get$grid$z(t1.get$props(t1)).updateMouseModeFromNode$1(J.get$position$z(t1.get$props(t1)));
      t2 = t1.typedStateFactory$1(P.LinkedHashMap__makeEmpty());
      t2.set$mouseIsOver(true);
      t2.set$mouseIsDown($.$get$MouseTracker__tracker()._mouseIsDown);
      t1.setState$1(0, t2);
      return;
    },
    $signature: 2
  };
  V.ReactNodeComponent_render_closure2.prototype = {
    call$1: function(_) {
      var t1, t2;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      t2 = t1.typedStateFactory$1(P.LinkedHashMap__makeEmpty());
      t2.set$mouseIsOver(false);
      t2.set$mouseIsDown(false);
      t1.setState$1(0, t2);
      return;
    },
    $signature: 2
  };
  V.ReactNodeComponent__renderPart_closure.prototype = {
    call$1: function(h) {
      return H.interceptedTypeCheck(h, "$isDirectionTextHighlight").direction == this.direction;
    },
    $signature: 144
  };
  V.ReactNodeComponent__renderPart_closure0.prototype = {
    call$0: function() {
      return;
    },
    $signature: 0
  };
  V.ReactNodeComponent__renderPathHighlights_closure.prototype = {
    call$1: function(highlight) {
      var t1 = this.$this;
      return Q.ReactPathsComponent_renderPathHighlight(H.interceptedTypeCheck(highlight, "$isPathHighlight"), F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(t1.get$props(t1))._StoreTransferAble$_store.$index(0, "size"), "$isMap")), true);
    },
    $signature: 50
  };
  V.closure17.prototype = {
    call$0: function() {
      var t1 = new V._$ReactNodeComponent(P.Expando$(null, V.ReactNodeState), P.Expando$(null, V.ReactNodeProps), P.LinkedHashMap__makeEmpty(), H.setRuntimeTypeInfo([], [{func: 1}]), H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Map,,,], args: [[P.Map,,,], [P.Map,,,]]}]));
      t1.get$$$isClassGenerated();
      return t1;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 146
  };
  V._$ReactNodePropsAccessorsMixin.prototype = {
    get$store: function(_) {
      var t1 = J.$index$asx(this._ReactNode$_props, "ReactNodeProps.store");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isStore");
    },
    get$grid: function(_) {
      var t1 = J.$index$asx(this._ReactNode$_props, "ReactNodeProps.grid");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isReactGridComponent");
    },
    get$position: function(_) {
      var t1 = J.$index$asx(this._ReactNode$_props, "ReactNodeProps.position");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isPosition");
    }
  };
  V.ReactNodeProps.prototype = {};
  V._$$ReactNodeProps.prototype = {
    get$props: function(_) {
      return this._ReactNode$_props;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$componentFactory: function() {
      return $.$get$$ReactNodeComponentFactory();
    },
    $isReactNodeProps: 1
  };
  V._$ReactNodeStateAccessorsMixin.prototype = {
    get$mouseIsOver: function() {
      var t1 = this._ReactNode$_state.$index(0, "ReactNodeState.mouseIsOver");
      return H.boolTypeCheck(t1 == null ? null : t1);
    },
    set$mouseIsOver: function(value) {
      this._ReactNode$_state.$indexSet(0, "ReactNodeState.mouseIsOver", value);
    },
    set$mouseIsDown: function(value) {
      this._ReactNode$_state.$indexSet(0, "ReactNodeState.mouseIsDown", value);
    }
  };
  V.ReactNodeState.prototype = {};
  V._$$ReactNodeState.prototype = {
    get$state: function(_) {
      return this._ReactNode$_state;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    $isReactNodeState: 1
  };
  V._$ReactNodeComponent.prototype = {
    typedPropsFactory$1: function(backingMap) {
      return V._$$ReactNodeProps$(backingMap);
    },
    typedStateFactory$1: function(backingMap) {
      var t1 = new V._$$ReactNodeState(P.LinkedHashMap__makeEmpty());
      t1.get$$$isClassGenerated();
      t1._ReactNode$_state = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$$$defaultConsumedProps: function() {
      return C.List_OvN;
    }
  };
  V._ReactNodeProps__$ReactNodeProps__$ReactNodePropsAccessorsMixin.prototype = {};
  V._ReactNodeState__$ReactNodeState__$ReactNodeStateAccessorsMixin.prototype = {};
  V.__$$ReactNodeProps__$ReactNodeProps__$ReactNodePropsAccessorsMixin.prototype = {};
  V.__$$ReactNodeState__$ReactNodeState__$ReactNodeStateAccessorsMixin.prototype = {};
  G._$ReactNodePartProps.prototype = {};
  G._$ReactNodePartState.prototype = {};
  G.ReactNodePartComponent.prototype = {
    getInitialState$0: function() {
      var t1 = this.typedStateFactory$1(P.LinkedHashMap__makeEmpty());
      t1.set$mouseIsOver(false);
      return t1;
    },
    render$0: function(_) {
      var t3, t4, t5, _this = this,
        t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null),
        t2 = J.get$direction$z(_this.get$props(_this));
      if (!t2.get$iterator(t2).moveNext$0())
        t2 = "part inner";
      else {
        t2 = J.get$direction$z(_this.get$props(_this));
        t2 = "part outer " + G.Enums_toName(t2.get$value(t2)) + " ";
        t3 = J.get$direction$z(_this.get$props(_this));
        t2 = t2 + (C.JSArray_methods.contains$1(C.List_O1c, t3.get$value(t3)) ? "diagonal" : "cardinal") + " ";
        t3 = J.get$position$z(_this.get$props(_this));
        t4 = J.get$direction$z(_this.get$props(_this));
        t4 = t4.get$value(t4);
        t3.toString;
        t2 = t2 + (t3.goMulti$2(H.interceptedTypeCheck(t4, "$isDirection"), 1).legal$1(F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "size"), "$isMap"))) ? "legal" : "illegal") + " ";
        t3 = J.get$store$z(_this.get$props(_this))._gridBarrierManager;
        t4 = J.get$position$z(_this.get$props(_this));
        t5 = J.get$direction$z(_this.get$props(_this));
        t2 = t2 + (t3.leaveAble$2(t4, t5.get$value(t5)) ? "leaveUnblocked" : "leaveBlocked") + " ";
        t3 = J.get$store$z(_this.get$props(_this))._gridBarrierManager;
        t4 = J.get$position$z(_this.get$props(_this));
        t5 = J.get$direction$z(_this.get$props(_this));
        t5 = t5.get$value(t5);
        t3.toString;
        H.interceptedTypeCheck(t5, "$isDirection");
        t2 += t3.leaveAble$2(t4.goMulti$2(t5, 1), O.Directions_turn(t5, 180)) ? "enterUnblocked" : "enterBlocked";
      }
      t1.set$className(0, t2);
      t1.set$onMouseDown(0, new G.ReactNodePartComponent_render_closure(_this));
      t1.set$onMouseEnter(0, new G.ReactNodePartComponent_render_closure0(_this));
      t1.set$onMouseLeave(0, new G.ReactNodePartComponent_render_closure1(_this));
      t2 = J.get$direction$z(_this.get$props(_this));
      if (!t2.get$isEmpty(t2)) {
        t2 = _this.get$props(_this).get$directionTextHighlight();
        t2 = !t2.get$isEmpty(t2);
      } else
        t2 = false;
      if (t2) {
        t2 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
        t3 = _this.get$props(_this).get$directionTextHighlight();
        t2.set$className(0, "directionTextHighlight highlight_" + H.S(t3.get$value(t3).style));
        t3 = _this.get$props(_this).get$directionTextHighlight();
        t3 = t2.call$1(t3.get$value(t3).text);
        t2 = t3;
      } else
        t2 = null;
      return t1.call$1(t2);
    },
    _triggerMouseMode$0: function() {
      var _this = this,
        t1 = J.$index$asx(_this.get$props(_this)._ReactNodePart$_props, "ReactNodePartProps.grid");
      H.interceptedTypeCheck(t1 == null ? null : t1, "$isReactGridComponent").updateMouseModeFromNodePart$2$direction(J.get$position$z(_this.get$props(_this)), J.get$direction$z(_this.get$props(_this))._core0$_value);
    },
    $asUiComponent: function() {
      return [G.ReactNodePartProps];
    },
    $asUiStatefulComponent: function() {
      return [G.ReactNodePartProps, G.ReactNodePartState];
    }
  };
  G.ReactNodePartComponent_render_closure.prototype = {
    call$1: function(_) {
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      this.$this._triggerMouseMode$0();
      return;
    },
    $signature: 2
  };
  G.ReactNodePartComponent_render_closure0.prototype = {
    call$1: function(_) {
      var t1, t2;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      if ($.$get$MouseTracker__tracker()._mouseIsDown)
        t1._triggerMouseMode$0();
      t2 = t1.typedStateFactory$1(P.LinkedHashMap__makeEmpty());
      t2.set$mouseIsOver(true);
      t1.setState$1(0, t2);
      return;
    },
    $signature: 2
  };
  G.ReactNodePartComponent_render_closure1.prototype = {
    call$1: function(_) {
      var t1, t2;
      H.interceptedTypeCheck(_, "$isSyntheticMouseEvent");
      t1 = this.$this;
      t2 = t1.typedStateFactory$1(P.LinkedHashMap__makeEmpty());
      t2.set$mouseIsOver(false);
      t1.setState$1(0, t2);
      return;
    },
    $signature: 2
  };
  G.closure18.prototype = {
    call$0: function() {
      var t1 = new G._$ReactNodePartComponent(P.Expando$(null, G.ReactNodePartState), P.Expando$(null, G.ReactNodePartProps), P.LinkedHashMap__makeEmpty(), H.setRuntimeTypeInfo([], [{func: 1}]), H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Map,,,], args: [[P.Map,,,], [P.Map,,,]]}]));
      t1.get$$$isClassGenerated();
      return t1;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 147
  };
  G._$ReactNodePartPropsAccessorsMixin.prototype = {
    get$store: function(_) {
      var t1 = J.$index$asx(this._ReactNodePart$_props, "ReactNodePartProps.store");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isStore");
    },
    get$direction: function(_) {
      var t1 = J.$index$asx(this._ReactNodePart$_props, "ReactNodePartProps.direction");
      if (t1 == null)
        t1 = null;
      return H.assertSubtype(t1, "$isOptional", [O.Direction], "$asOptional");
    },
    get$directionTextHighlight: function() {
      var t1 = J.$index$asx(this._ReactNodePart$_props, "ReactNodePartProps.directionTextHighlight");
      if (t1 == null)
        t1 = null;
      return H.assertSubtype(t1, "$isOptional", [K.DirectionTextHighlight], "$asOptional");
    },
    get$position: function(_) {
      var t1 = J.$index$asx(this._ReactNodePart$_props, "ReactNodePartProps.position");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isPosition");
    }
  };
  G.ReactNodePartProps.prototype = {};
  G._$$ReactNodePartProps.prototype = {
    get$props: function(_) {
      return this._ReactNodePart$_props;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$componentFactory: function() {
      return $.$get$$ReactNodePartComponentFactory();
    },
    $isReactNodePartProps: 1
  };
  G._$ReactNodePartStateAccessorsMixin.prototype = {
    set$mouseIsOver: function(value) {
      this._ReactNodePart$_state.$indexSet(0, "ReactNodePartState.mouseIsOver", value);
    }
  };
  G.ReactNodePartState.prototype = {};
  G._$$ReactNodePartState.prototype = {
    get$state: function(_) {
      return this._ReactNodePart$_state;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    $isReactNodePartState: 1
  };
  G._$ReactNodePartComponent.prototype = {
    typedPropsFactory$1: function(backingMap) {
      return G._$$ReactNodePartProps$(backingMap);
    },
    typedStateFactory$1: function(backingMap) {
      var t1 = new G._$$ReactNodePartState(P.LinkedHashMap__makeEmpty());
      t1.get$$$isClassGenerated();
      t1._ReactNodePart$_state = backingMap == null ? P.LinkedHashMap__makeEmpty() : backingMap;
      return t1;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$$$defaultConsumedProps: function() {
      return C.List_alK;
    }
  };
  G._ReactNodePartProps__$ReactNodePartProps__$ReactNodePartPropsAccessorsMixin.prototype = {};
  G._ReactNodePartState__$ReactNodePartState__$ReactNodePartStateAccessorsMixin.prototype = {};
  G.__$$ReactNodePartProps__$ReactNodePartProps__$ReactNodePartPropsAccessorsMixin.prototype = {};
  G.__$$ReactNodePartState__$ReactNodePartState__$ReactNodePartStateAccessorsMixin.prototype = {};
  Q._$ReactPathsProps.prototype = {};
  Q.ReactPathsComponent.prototype = {
    get$pathHighlights: function() {
      var t2, t3, _this = this,
        t1 = J.get$store$z(_this.get$props(_this)).getCurrentStepHighlights$2(null, "background");
      C.JSArray_methods.addAll$1(t1, J.get$store$z(_this.get$props(_this)).getCurrentStepHighlights$2(null, H.stringTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "currentStepDescriptionHoverId"))));
      t2 = K.PathHighlight;
      t3 = H.getTypeArgumentByIndex(t1, 0);
      return new H.MappedListIterable(t1, H.functionTypeCheck(new Q.ReactPathsComponent_pathHighlights_closure(), {func: 1, ret: t2, args: [t3]}), [t3, t2]);
    },
    componentWillMount$0: function() {
      var _this = this;
      _this.super$UiComponent$componentWillMount();
      _this.set$listener(0, new Q.ReactPathsComponent_componentWillMount_closure(_this));
      J.get$store$z(_this.get$props(_this)).addEqualListener$2(H.setRuntimeTypeInfo(["size", "currentStepHighlights_null", "currentStepDescriptionHoverId"], [P.String]), _this.listener);
    },
    render$0: function(_) {
      var t2, t3, t4, t5, t6, t7, _this = this,
        t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t1.set$className(0, "paths");
      t2 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t2.set$className(0, "path");
      t3 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t3.set$className(0, "nodeArrow");
      t4 = A.SvgProps$(H.interceptedTypeCheck($.svg, "$isReactDomComponentFactoryProxy"));
      t4.set$className(0, "svg");
      t4.set$viewBox(0, "-0.5 -0.5 " + H.S(F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "size"), "$isMap")).width) + " " + H.S(F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(_this.get$props(_this))._StoreTransferAble$_store.$index(0, "size"), "$isMap")).height));
      t5 = _this.get$pathHighlights();
      t6 = K.ReactElement;
      t7 = H.getRuntimeTypeArgument(t5, "ListIterable", 0);
      return t1.call$1(t2.call$1(t3.call$1(t4.call$1(new H.MappedListIterable(t5, H.functionTypeCheck(new Q.ReactPathsComponent_render_closure(_this), {func: 1, ret: t6, args: [t7]}), [t7, t6]).toList$0(0)))));
    },
    componentWillUnmount$0: function() {
      var _this = this;
      _this.super$UiComponent$componentWillUnmount();
      J.get$store$z(_this.get$props(_this)).removeEqualListener$1(_this.listener);
    },
    set$listener: function(_, listener) {
      this.listener = H.functionTypeCheck(listener, {func: 1, ret: -1});
    },
    $asUiComponent: function() {
      return [Q.ReactPathsProps];
    }
  };
  Q.ReactPathsComponent_pathHighlights_closure.prototype = {
    call$1: function(h) {
      return H.interceptedTypeCast(H.interceptedTypeCheck(h, "$isHighlight"), "$isPathHighlight");
    },
    $signature: 49
  };
  Q.ReactPathsComponent_componentWillMount_closure.prototype = {
    call$0: function() {
      this.$this.setState$2(0, P.LinkedHashMap__makeEmpty(), null);
      return;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 1
  };
  Q.ReactPathsComponent_render_closure.prototype = {
    call$1: function(highlight) {
      var t1 = this.$this;
      return Q.ReactPathsComponent_renderPathHighlight(H.interceptedTypeCheck(highlight, "$isPathHighlight"), F.Size$fromMap(H.interceptedTypeCast(J.get$store$z(t1.get$props(t1))._StoreTransferAble$_store.$index(0, "size"), "$isMap")), false);
    },
    $signature: 50
  };
  Q.closure14.prototype = {
    call$0: function() {
      var t1 = new Q._$ReactPathsComponent(P.Expando$(null, Q.ReactPathsProps), P.LinkedHashMap__makeEmpty(), H.setRuntimeTypeInfo([], [{func: 1}]), H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Map,,,], args: [[P.Map,,,], [P.Map,,,]]}]));
      t1.get$$$isClassGenerated();
      return t1;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 148
  };
  Q._$ReactPathsPropsAccessorsMixin.prototype = {
    get$store: function(_) {
      var t1 = J.$index$asx(this._ReactPaths$_props, "ReactPathsProps.store");
      return H.interceptedTypeCheck(t1 == null ? null : t1, "$isStore");
    }
  };
  Q.ReactPathsProps.prototype = {};
  Q._$$ReactPathsProps.prototype = {
    get$props: function(_) {
      return this._ReactPaths$_props;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$componentFactory: function() {
      return $.$get$$ReactPathsComponentFactory();
    },
    $isReactPathsProps: 1
  };
  Q._$ReactPathsComponent.prototype = {
    typedPropsFactory$1: function(backingMap) {
      return Q._$$ReactPathsProps$(backingMap);
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$$$defaultConsumedProps: function() {
      return C.List_RHh;
    }
  };
  Q._ReactPathsProps__$ReactPathsProps__$ReactPathsPropsAccessorsMixin.prototype = {};
  Q.__$$ReactPathsProps__$ReactPathsProps__$ReactPathsPropsAccessorsMixin.prototype = {};
  F.Tooltip.prototype = {};
  F.TooltipOptions.prototype = {};
  F._$ReactPopoverProps.prototype = {};
  F.ReactPopoverComponent.prototype = {
    render$0: function(_) {
      var _this = this,
        t1 = A.DomProps$(H.interceptedTypeCheck($.div, "$isReactDomComponentFactoryProxy"), null);
      t1.addProps$1(_this.get$props(_this)._ReactPopover$_props);
      J.remove$1$ax(t1.get$_map(), "ReactPopoverProps.popover");
      J.remove$1$ax(t1.get$_map(), "ReactPopoverProps.html");
      t1.set$id(0, _this.id);
      return t1.call$1(J.get$children$z(_this.get$props(_this)));
    },
    componentDidMount$0: function() {
      this.super$Component$componentDidMount();
      this._createTooltip$0();
    },
    componentDidUpdate$2: function(prevProps, prevState) {
      this.super$Component$componentDidUpdate(prevProps, prevState);
      this._createTooltip$0();
    },
    componentWillUpdate$2: function(prevProps, prevState) {
      this.super$Component$componentDidUpdate(prevProps, prevState);
      this._disposeTooltip$0();
    },
    componentWillUnmount$0: function() {
      this.super$UiComponent$componentWillUnmount();
      this._disposeTooltip$0();
    },
    _disposeTooltip$0: function() {
      var t1 = this.tooltip;
      if (t1 != null)
        J.dispose$0$x(t1);
    },
    _createTooltip$0: function() {
      var $content, placement, t2, _this = this,
        t1 = J.$index$asx(_this.get$props(_this)._ReactPopover$_props, "ReactPopoverProps.html");
      if (H.boolTypeCheck(t1 == null ? null : t1) === true) {
        $content = H.S(_this.get$props(_this).get$popover());
        placement = "left";
      } else {
        $content = "<div class='title'>" + H.S(_this.get$props(_this).get$popover()) + "</div>";
        placement = "top";
      }
      t1 = self.document.getElementById(_this.id);
      t2 = {placement: placement, container: self.document.getElementById("body"), html: true, title: $content};
      _this.tooltip = H.interceptedTypeCheck(new self.Tooltip(t1, t2), "$isTooltip");
    },
    $asUiComponent: function() {
      return [F.ReactPopoverProps];
    }
  };
  F.closure12.prototype = {
    call$0: function() {
      var t1 = $.ReactPopoverComponent_ids;
      $.ReactPopoverComponent_ids = t1 + 1;
      t1 = new F._$ReactPopoverComponent("id_" + t1, P.Expando$(null, F.ReactPopoverProps), P.LinkedHashMap__makeEmpty(), H.setRuntimeTypeInfo([], [{func: 1}]), H.setRuntimeTypeInfo([], [{func: 1, ret: [P.Map,,,], args: [[P.Map,,,], [P.Map,,,]]}]));
      t1.get$$$isClassGenerated();
      return t1;
    },
    "call*": "call$0",
    $requiredArgCount: 0,
    $signature: 149
  };
  F._$ReactPopoverPropsAccessorsMixin.prototype = {
    get$popover: function() {
      var t1 = J.$index$asx(this._ReactPopover$_props, "ReactPopoverProps.popover");
      return H.stringTypeCheck(t1 == null ? null : t1);
    },
    set$popover: function(value) {
      J.$indexSet$ax(this._ReactPopover$_props, "ReactPopoverProps.popover", value);
    },
    set$html: function(_, value) {
      J.$indexSet$ax(this._ReactPopover$_props, "ReactPopoverProps.html", true);
    }
  };
  F.ReactPopoverProps.prototype = {};
  F._$$ReactPopoverProps.prototype = {
    get$props: function(_) {
      return this._ReactPopover$_props;
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$componentFactory: function() {
      return $.$get$$ReactPopoverComponentFactory();
    },
    $isReactPopoverProps: 1
  };
  F._$ReactPopoverComponent.prototype = {
    typedPropsFactory$1: function(backingMap) {
      return F._$$ReactPopoverProps$(backingMap);
    },
    get$$$isClassGenerated: function() {
      return true;
    },
    get$$$defaultConsumedProps: function() {
      return C.List_qHn;
    }
  };
  F._ReactPopoverProps__$ReactPopoverProps__$ReactPopoverPropsAccessorsMixin.prototype = {};
  F.__$$ReactPopoverProps__$ReactPopoverProps__$ReactPopoverPropsAccessorsMixin.prototype = {};
  G.Save.prototype = {
    _draw$1: function(store) {
      var t1, t2, t3, t4, barrier, t5, _i, direction, t6, t7, _this = this,
        _s8_ = "gridMode",
        _s13_ = "startPosition",
        _s14_ = "targetPosition";
      for (t1 = _this._gridSize.positions$0(), t1 = new H.ExpandIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, C.C_EmptyIterator, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]), t2 = [O.Direction], t3 = store._StoreTransferAble$_store; t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        barrier = store.getBarrier$1(t4);
        for (t5 = barrier._blocked, _i = 0; _i < 8; ++_i) {
          direction = C.List_4j7[_i];
          t6 = t5.$index(0, direction);
          t7 = H.assertSubtype(new X.Optional(direction, t2), "$isOptional", t2, "$asOptional");
          _this._writeBarrier$3(t4, t7, H.boolConversionCheck(t6) ? $.Save_colorBlocked : $.Save_colorUnblocked);
        }
        t5 = C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(t3.$index(0, _s8_))) === C.GridMode_0 && barrier.isAnyBlocked$0();
        H.assertSubtype(C.Optional_null, "$isOptional", t2, "$asOptional");
        _this._writeBarrier$3(t4, C.Optional_null, t5 ? $.Save_colorBlocked : $.Save_colorUnblocked);
      }
      _this._writeBarrier$4$circleColor(E.Position$fromMap(H.interceptedTypeCast(t3.$index(0, _s13_), "$isMap")), new X.Optional(null, t2), $.Save_colorUnblocked, $.Save_colorSource);
      _this._writeBarrier$4$circleColor(E.Position$fromMap(H.interceptedTypeCast(t3.$index(0, _s14_), "$isMap")), new X.Optional(null, t2), $.Save_colorUnblocked, $.Save_colorTarget);
      _this.writeInt$2(0, E.Position$fromMap(H.interceptedTypeCast(t3.$index(0, _s13_), "$isMap")).x);
      _this.writeInt$2(1, E.Position$fromMap(H.interceptedTypeCast(t3.$index(0, _s13_), "$isMap")).y);
      _this.writeInt$2(2, E.Position$fromMap(H.interceptedTypeCast(t3.$index(0, _s14_), "$isMap")).x);
      _this.writeInt$2(3, E.Position$fromMap(H.interceptedTypeCast(t3.$index(0, _s14_), "$isMap")).y);
      _this.writeInt$2(5, C.JSArray_methods.$index(C.List_GridMode_0_GridMode_1, H.intTypeCast(t3.$index(0, _s8_))).index * 10);
      _this.writeInt$2(6, C.JSArray_methods.$index(C.List_Ql0, H.intTypeCast(t3.$index(0, "directionMode"))).index * 10);
      _this.writeInt$2(7, C.JSArray_methods.$index(C.List_CornerMode_0_CornerMode_1, H.intTypeCast(t3.$index(0, "cornerMode"))).index * 10);
      _this.writeInt$2(8, C.JSArray_methods.$index(C.List_WPn, H.intTypeCast(t3.$index(0, "directionalMode"))).index * 10);
      _this.writeInt$2(10, C.JSArray_methods.$index(C.List_MhI, H.intTypeCast(t3.$index(0, "algorithmType"))).index * 10);
      _this.writeInt$2(11, C.JSArray_methods.$index(C.List_GRf, H.intTypeCast(t3.$index(0, "heuristicType"))).index * 10);
      _this.writeInt$2(12, C.JSArray_methods.$index(C.List_ORa, H.intTypeCast(t3.$index(0, "algorithmUpdateMode"))).index * 10);
    },
    Save$loadFromCookie$1: function(store) {
      var imageSrc, image, t1, exception;
      try {
        imageSrc = window.localStorage.getItem("image");
        if (imageSrc != null && !J.$eq$(imageSrc, "")) {
          image = W.ImageElement_ImageElement(imageSrc);
          t1 = W.Event;
          W._EventStreamSubscription$(H.interceptedTypeCheck(image, "$isElement"), "load", H.functionTypeCheck(new G.Save$loadFromCookie_closure(this, image, store), {func: 1, ret: -1, args: [t1]}), false, t1);
        }
      } catch (exception) {
        H.unwrapException(exception);
      }
    },
    Save$loadFromSrc$2: function(imageSrc, store) {
      var image = W.ImageElement_ImageElement(imageSrc),
        t1 = W.Event;
      W._EventStreamSubscription$(image, "load", H.functionTypeCheck(new G.Save$loadFromSrc_closure(this, image, store), {func: 1, ret: -1, args: [t1]}), false, t1);
    },
    _loadIntoStore$1: function(store) {
      var t1, t2, t3, t4, map, sourceX, sourceY, targetX, targetY, _this = this;
      store.autoTriggerListeners = false;
      store._gridManager.clear$0(0);
      store._gridManager.setSize$1(0, _this._gridSize);
      for (t1 = F.Size$fromMap(H.interceptedTypeCast(store._StoreTransferAble$_store.$index(0, "size"), "$isMap")).positions$0(), t1 = new H.ExpandIterator(J.get$iterator$ax(t1.__internal$_iterable), t1._f, C.C_EmptyIterator, [H.getTypeArgumentByIndex(t1, 0), H.getTypeArgumentByIndex(t1, 1)]), t2 = O.Direction, t3 = P.bool; t1.moveNext$0();) {
        t4 = t1.__internal$_current;
        if (t4.legal$1(_this._gridSize)) {
          map = P.LinkedHashMap_LinkedHashMap(t2, t3);
          P.MapBase__fillMapWithMappedIterable(map, C.List_4j7, new G.Save__loadIntoStore_closure(), new G.Save__loadIntoStore_closure0(_this, t4));
          store.$set$2(0, "barrier_" + t4.toString$0(0), new D.Barrier(map).toMap$0());
        }
      }
      sourceX = _this.readInt$1(0);
      sourceY = _this.readInt$1(1);
      store._gridManager.setStartPosition$1(new E.Position(sourceX, sourceY));
      targetX = _this.readInt$1(2);
      targetY = _this.readInt$1(3);
      store._gridManager.setTargetPosition$1(new E.Position(targetX, targetY));
      store.$set$2(0, "gridMode", H.interceptedTypeCheck(_this.readEnum$1$2(5, C.List_GridMode_0_GridMode_1, G.GridMode), "$isGridMode").index);
      store.$set$2(0, "directionMode", H.interceptedTypeCheck(_this.readEnum$1$2(6, C.List_Ql0, G.DirectionMode), "$isDirectionMode").index);
      store.$set$2(0, "cornerMode", H.interceptedTypeCheck(_this.readEnum$1$2(7, C.List_CornerMode_0_CornerMode_1, G.CornerMode), "$isCornerMode").index);
      store.$set$2(0, "directionalMode", H.interceptedTypeCheck(_this.readEnum$1$2(8, C.List_WPn, G.DirectionalMode), "$isDirectionalMode").index);
      store.$set$2(0, "algorithmType", H.interceptedTypeCheck(_this.readEnum$1$2(10, C.List_MhI, G.AlgorithmType), "$isAlgorithmType").index);
      store.$set$2(0, "heuristicType", H.interceptedTypeCheck(_this.readEnum$1$2(11, C.List_GRf, G.HeuristicType), "$isHeuristicType").index);
      store.$set$2(0, "algorithmUpdateMode", H.interceptedTypeCheck(_this.readEnum$1$2(12, C.List_ORa, G.AlgorithmUpdateMode), "$isAlgorithmUpdateMode").index);
      store.autoTriggerListeners = true;
      store.triggerListeners$0();
    },
    readEnum$1$2: function(pos, enums, $T) {
      var index, t1;
      H.assertSubtype(enums, "$isList", [$T], "$asList");
      index = C.JSInt_methods.toInt$0(C.JSDouble_methods.round$0(this.readInt$1(pos) / 10));
      t1 = enums.length;
      if (index < t1) {
        if (index < 0)
          return H.ioore(enums, index);
        t1 = enums[index];
      } else {
        if (0 >= t1)
          return H.ioore(enums, 0);
        t1 = enums[0];
      }
      return t1;
    },
    writeInt$2: function(x, value) {
      var t1 = this._Save$_context,
        t2 = $.Save_colorGrid,
        t3 = t2[1],
        t4 = t2[2];
      t2 = t2[3];
      t1.toString;
      t1.fillStyle = "rgba(" + H.S(value) + ", " + t3 + ", " + t4 + ", " + t2 + ")";
      this._Save$_context.fillRect(x, 0, 1, 1);
    },
    readInt$1: function(x) {
      var t1 = J.get$data$x(P.convertNativeToDart_ImageData(this._Save$_context.getImageData(x, 0, 1, 1)));
      if (0 >= t1.length)
        return H.ioore(t1, 0);
      return t1[0];
    },
    _writeBarrier$4$circleColor: function(position, direction, color, circleColor) {
      var t1, t2, pos, dir, recPosTopLeft, t3, t4, t5, t6, _this = this;
      H.assertSubtype(direction, "$isOptional", [O.Direction], "$asOptional");
      t1 = [P.int];
      H.assertSubtype(color, "$isList", t1, "$asList");
      H.assertSubtype(circleColor, "$isList", t1, "$asList");
      t1 = position.x;
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = position.y;
      if (typeof t2 !== "number")
        return t2.$add();
      pos = new T.Vector2(new Float32Array(2));
      pos.setValues$2(t1, t2);
      t1 = $.$get$Save_scale();
      if (typeof t1 !== "number")
        return t1.$add();
      pos.scale$1(0, t1);
      if (!direction.get$iterator(direction).moveNext$0()) {
        dir = new T.Vector2(new Float32Array(2));
        dir.setValues$2(1, 1);
      } else
        switch (direction.get$value(direction)) {
          case C.Direction_0:
            dir = new T.Vector2(new Float32Array(2));
            dir.setValues$2(1, 0);
            break;
          case C.Direction_1:
            dir = new T.Vector2(new Float32Array(2));
            dir.setValues$2(2, 0);
            break;
          case C.Direction_2:
            dir = new T.Vector2(new Float32Array(2));
            dir.setValues$2(2, 1);
            break;
          case C.Direction_3:
            dir = new T.Vector2(new Float32Array(2));
            dir.setValues$2(2, 2);
            break;
          case C.Direction_4:
            dir = new T.Vector2(new Float32Array(2));
            dir.setValues$2(1, 2);
            break;
          case C.Direction_5:
            dir = new T.Vector2(new Float32Array(2));
            dir.setValues$2(0, 2);
            break;
          case C.Direction_6:
            dir = new T.Vector2(new Float32Array(2));
            dir.setValues$2(0, 1);
            break;
          case C.Direction_7:
            dir = new T.Vector2(new Float32Array(2));
            dir.setValues$2(0, 0);
            break;
          default:
            dir = null;
        }
      dir.scale$1(0, 9);
      t1 = new Float32Array(2);
      recPosTopLeft = new T.Vector2(t1);
      recPosTopLeft.setFrom$1(pos);
      recPosTopLeft.add$1(0, dir);
      t2 = t1[0];
      t1 = t1[1];
      t3 = new Float32Array(2);
      new T.Vector2(t3).setValues$2(1 + t2, 1 + t1);
      t1 = _this._Save$_context;
      t2 = color.length;
      if (0 >= t2)
        return H.ioore(color, 0);
      t4 = color[0];
      if (1 >= t2)
        return H.ioore(color, 1);
      t5 = color[1];
      if (2 >= t2)
        return H.ioore(color, 2);
      t6 = color[2];
      if (3 >= t2)
        return H.ioore(color, 3);
      t2 = color[3];
      t1.toString;
      H.intTypeCheck(t4);
      H.intTypeCheck(t5);
      H.intTypeCheck(t6);
      H.numTypeCheck(t2);
      t1.fillStyle = "rgba(" + H.S(t4) + ", " + H.S(t5) + ", " + H.S(t6) + ", " + H.S(t2) + ")";
      _this._Save$_context.fillRect(t3[0], t3[1], 9, 9);
      t2 = _this._Save$_context;
      t6 = circleColor[0];
      t5 = circleColor[1];
      t4 = circleColor[2];
      t1 = circleColor[3];
      t2.toString;
      t2.fillStyle = "rgba(" + t6 + ", " + t5 + ", " + t4 + ", " + t1 + ")";
      _this._Save$_context.beginPath();
      _this._Save$_context.arc(t3[0] + 4.5, t3[1] + 4.5, 4.5, 0, 6.283185307179586, false);
      _this._Save$_context.fill();
    },
    _writeBarrier$3: function(position, direction, color) {
      return this._writeBarrier$4$circleColor(position, direction, color, C.List_0_0_0_0);
    },
    readBarrier$2: function(position, direction) {
      if (J.$eq$(this._readBarrier$3(position, direction, H.setRuntimeTypeInfo([$.Save_colorBlocked, $.Save_colorUnblocked], [[P.List, P.int]])), $.Save_colorBlocked))
        return true;
      else
        return false;
    },
    _readBarrier$3: function(position, direction, colorToFind) {
      var t1, t2, pos, middle, dir, recPosMiddlePix, pixel, _i, color;
      H.assertSubtype(colorToFind, "$isList", [[P.List, P.int]], "$asList");
      t1 = position.x;
      if (typeof t1 !== "number")
        return t1.$add();
      t2 = position.y;
      if (typeof t2 !== "number")
        return t2.$add();
      pos = new T.Vector2(new Float32Array(2));
      pos.setValues$2(t1, t2);
      t1 = $.$get$Save_scale();
      if (typeof t1 !== "number")
        return t1.$add();
      pos.scale$1(0, t1);
      middle = new T.Vector2(new Float32Array(2));
      middle.setValues$2(0.5, 0.5);
      middle.scale$1(0, 27);
      t1 = new T.Vector2(new Float32Array(2));
      t1.setValues$2(1, 1);
      middle.add$1(0, t1);
      t1 = O.Directions_getDx(direction);
      t2 = O.Directions_getDy(direction);
      dir = new T.Vector2(new Float32Array(2));
      dir.setValues$2(t1, t2);
      dir.scale$1(0, 9.45);
      t1 = new Float32Array(2);
      recPosMiddlePix = new T.Vector2(t1);
      recPosMiddlePix.setFrom$1(pos);
      recPosMiddlePix.add$1(0, middle);
      recPosMiddlePix.add$1(0, dir);
      pixel = J.get$data$x(P.convertNativeToDart_ImageData(this._Save$_context.getImageData(C.JSNumber_methods.round$0(t1[0]), C.JSNumber_methods.round$0(t1[1]), 1, 1)));
      for (t1 = pixel.length, _i = 0; _i < 2; ++_i) {
        color = colorToFind[_i];
        if (0 >= color.length)
          return H.ioore(color, 0);
        t2 = color[0];
        if (0 >= t1)
          return H.ioore(pixel, 0);
        if (J.$eq$(t2, pixel[0])) {
          if (1 >= color.length)
            return H.ioore(color, 1);
          t2 = color[1];
          if (1 >= t1)
            return H.ioore(pixel, 1);
          if (J.$eq$(t2, pixel[1])) {
            if (2 >= color.length)
              return H.ioore(color, 2);
            t2 = color[2];
            if (2 >= t1)
              return H.ioore(pixel, 2);
            t2 = J.$eq$(t2, pixel[2]);
          } else
            t2 = false;
        } else
          t2 = false;
        if (t2)
          return color;
      }
      return pixel;
    }
  };
  G.Save$loadFromCookie_closure.prototype = {
    call$1: function(e) {
      var t4, t5,
        t1 = this.$this,
        t2 = this.image,
        t3 = t2.width;
      if (typeof t3 !== "number")
        return t3.$sub();
      t4 = $.$get$Save_scale();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t3 = C.JSDouble_methods.round$0((t3 - 1) / t4);
      t5 = t2.height;
      if (typeof t5 !== "number")
        return t5.$sub();
      t5 = C.JSDouble_methods.round$0((t5 - 1) / t4);
      t1._gridSize = new F.Size(t3, t5);
      t4 = W.CanvasElement_CanvasElement(t5 * t4 + 1, t3 * t4 + 1);
      t1._canvas = t4;
      t4 = H.interceptedTypeCast(C.CanvasElement_methods.getContext$1(t4, "2d"), "$isCanvasRenderingContext2D");
      t1._Save$_context = t4;
      t4.drawImage(t2, 0, 0);
      t1._loadIntoStore$1(this.store);
    },
    $signature: 51
  };
  G.Save$loadFromSrc_closure.prototype = {
    call$1: function(e) {
      var t4, t5,
        t1 = this.$this,
        t2 = this.image,
        t3 = t2.width;
      if (typeof t3 !== "number")
        return t3.$sub();
      t4 = $.$get$Save_scale();
      if (typeof t4 !== "number")
        return H.iae(t4);
      t3 = C.JSDouble_methods.round$0((t3 - 1) / t4);
      t5 = t2.height;
      if (typeof t5 !== "number")
        return t5.$sub();
      t5 = C.JSDouble_methods.round$0((t5 - 1) / t4);
      t1._gridSize = new F.Size(t3, t5);
      t4 = W.CanvasElement_CanvasElement(t5 * t4 + 1, t3 * t4 + 1);
      t1._canvas = t4;
      t4 = H.interceptedTypeCast(C.CanvasElement_methods.getContext$1(t4, "2d"), "$isCanvasRenderingContext2D");
      t1._Save$_context = t4;
      t4.drawImage(t2, 0, 0);
      t1._loadIntoStore$1(this.store);
    },
    $signature: 51
  };
  G.Save__loadIntoStore_closure.prototype = {
    call$1: function(d) {
      return H.interceptedTypeCast(d, "$isDirection");
    },
    $signature: 54
  };
  G.Save__loadIntoStore_closure0.prototype = {
    call$1: function(d) {
      return this.$this.readBarrier$2(this.position, H.interceptedTypeCast(d, "$isDirection"));
    },
    $signature: 15
  };
  Y.SearchHistory.prototype = {
    addEMM$4: function(text, style, highlights, positions) {
      var t1;
      H.assertSubtype(highlights, "$isIterable", [K.Highlight], "$asIterable");
      H.assertSubtype(positions, "$isIterable", [E.Position], "$asIterable");
      t1 = [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]];
      this.addEM_$3(text, style, J.get$isNotEmpty$asx(highlights) ? H.setRuntimeTypeInfo([new S.Tuple2(highlights, positions, [[P.Iterable, K.Highlight], [P.Iterable, E.Position]])], t1) : H.setRuntimeTypeInfo([], t1));
    },
    addEM_$3: function(text, style, highlightsMap) {
      var t1, t2;
      H.assertSubtype(highlightsMap, "$isList", [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], "$asList");
      t1 = C.JSArray_methods.get$last(this._stepDescription);
      t2 = highlightsMap.length !== 0 ? "" + this._id++ : "foreground";
      C.JSArray_methods.add$1(t1._explanation, new M.ExplanationPart(t2, text, style));
      this.appendHM$1(highlightsMap);
    },
    appendHM$1: function(highlightsMap) {
      var explanationPart;
      H.assertSubtype(highlightsMap, "$isList", [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], "$asList");
      explanationPart = C.JSArray_methods.get$last(C.JSArray_methods.get$last(this._stepDescription)._explanation);
      C.JSArray_methods.forEach$1(highlightsMap, new Y.SearchHistory_appendHM_closure(explanationPart));
      this.addHM$2(explanationPart.id, highlightsMap);
    },
    addH_$3: function(id, highlights, positions) {
      this.addHM$2(id, H.setRuntimeTypeInfo([new S.Tuple2(H.assertSubtype(highlights, "$isIterable", [K.Highlight], "$asIterable"), H.assertSubtype(positions, "$isIterable", [E.Position], "$asIterable"), [[P.Iterable, K.Highlight], [P.Iterable, E.Position]])], [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]]));
    },
    addHM$2: function(id, highlightsMap) {
      J.forEach$1$ax(H.assertSubtype(highlightsMap, "$isIterable", [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], "$asIterable"), new Y.SearchHistory_addHM_closure(this, id));
    }
  };
  Y.SearchHistory_closure.prototype = {
    call$1: function(p) {
      var t1 = new H.JsLinkedHashMap([P.String, [P.List, K.Highlight]]),
        t2 = [K.Highlight];
      t1.$indexSet(0, "background", H.setRuntimeTypeInfo([], t2));
      t1.$indexSet(0, "foreground", H.setRuntimeTypeInfo([], t2));
      return t1;
    },
    $signature: 151
  };
  Y.SearchHistory_appendHM_closure.prototype = {
    call$1: function(tuple) {
      return J.forEach$1$ax(H.assertSubtype(tuple, "$isTuple2", [[P.Iterable, K.Highlight], [P.Iterable, E.Position]], "$asTuple2").item1, new Y.SearchHistory_appendHM__closure(this.explanationPart));
    },
    $signature: 52
  };
  Y.SearchHistory_appendHM__closure.prototype = {
    call$1: function(h) {
      var t1;
      H.interceptedTypeCheck(h, "$isHighlight");
      t1 = this.explanationPart.style;
      if (h.style === "pleaseSetStyle")
        h.style = t1;
      return;
    },
    $signature: 153
  };
  Y.SearchHistory_addHM_closure.prototype = {
    call$1: function(tuple) {
      H.assertSubtype(tuple, "$isTuple2", [[P.Iterable, K.Highlight], [P.Iterable, E.Position]], "$asTuple2");
      return J.forEach$1$ax(tuple.item2, new Y.SearchHistory_addHM__closure(this.$this, this.id, tuple));
    },
    $signature: 52
  };
  Y.SearchHistory_addHM__closure.prototype = {
    call$1: function(position) {
      return J.addAll$1$ax(J.putIfAbsent$2$x(this.$this._stepHighlights.$index(0, H.interceptedTypeCheck(position, "$isPosition")), this.id, new Y.SearchHistory_addHM___closure()), this.tuple.item1);
    },
    $signature: 14
  };
  Y.SearchHistory_addHM___closure.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [K.Highlight]);
    },
    $signature: 19
  };
  F.Size.prototype = {
    toMap$0: function() {
      var t1 = new H.JsLinkedHashMap([null, null]);
      t1.$indexSet(0, "width", this.width);
      t1.$indexSet(0, "height", this.height);
      return t1;
    },
    positions$0: function() {
      var t1 = P.Iterable_Iterable$generate(this.width, new F.Size_positions_closure(), P.int),
        t2 = E.Position,
        t3 = H.getRuntimeTypeArgument(t1, "Iterable", 0);
      return new H.ExpandIterable(t1, H.functionTypeCheck(new F.Size_positions_closure0(this), {func: 1, ret: [P.Iterable, t2], args: [t3]}), [t3, t2]);
    }
  };
  F.Size_positions_closure.prototype = {
    call$1: function(x) {
      return H.intTypeCheck(x);
    },
    $signature: 154
  };
  F.Size_positions_closure0.prototype = {
    call$1: function(x) {
      return P.Iterable_Iterable$generate(this.$this.height, new F.Size_positions__closure(H.intTypeCheck(x)), E.Position);
    },
    $signature: 155
  };
  F.Size_positions__closure.prototype = {
    call$1: function(y) {
      return new E.Position(this.x, H.intTypeCheck(y));
    },
    $signature: 38
  };
  Q.Store.prototype = {
    Store$0: function() {
      var t1, _this = this;
      _this._gridManager = new N.GridManager(_this);
      _this._gridBarrierManager = new E.BarrierManager(_this);
      _this.$set$2(0, "size", new F.Size(15, 15).toMap$0());
      _this.$set$2(0, "startPosition", new E.Position(2, 7).toMap$0());
      _this.$set$2(0, "targetPosition", new E.Position(12, 7).toMap$0());
      t1 = D.Barrier_totalBlocked();
      _this.$set$2(0, "barrier_" + new E.Position(7, 5).toString$0(0), t1.toMap$0());
      t1 = D.Barrier_totalBlocked();
      _this.$set$2(0, "barrier_" + new E.Position(7, 6).toString$0(0), t1.toMap$0());
      t1 = D.Barrier_totalBlocked();
      _this.$set$2(0, "barrier_" + new E.Position(7, 7).toString$0(0), t1.toMap$0());
      t1 = D.Barrier_totalBlocked();
      _this.$set$2(0, "barrier_" + new E.Position(7, 8).toString$0(0), t1.toMap$0());
      t1 = D.Barrier_totalBlocked();
      _this.$set$2(0, "barrier_" + new E.Position(7, 9).toString$0(0), t1.toMap$0());
      _this.$set$2(0, "algorithmType", 4);
      _this.$set$2(0, "heuristicType", 3);
      _this.$set$2(0, "algorithmUpdateMode", 0);
      _this.$set$2(0, "gridMode", 0);
      _this.$set$2(0, "directionMode", 0);
      _this.$set$2(0, "cornerMode", 0);
      _this.$set$2(0, "directionalMode", 0);
      _this.$set$2(0, "title", "");
      _this.$set$2(0, "stepCount", 0);
      _this.$set$2(0, "currentStepId", -1);
      _this.$set$2(0, "currentStepTitle", "");
      _this.set$currentStepDescription(H.setRuntimeTypeInfo([], [M.Explanation]));
      F.Size$fromMap(H.interceptedTypeCast(_this._StoreTransferAble$_store.$index(0, "size"), "$isMap")).positions$0().forEach$1(0, new Q.Store_closure(_this));
      t1 = [K.Highlight];
      _this.$set$2(0, "currentStepHighlights_null", K.Highlights_toListMap(H.assertSubtype(H.setRuntimeTypeInfo([], t1), "$isList", t1, "$asList")));
      _this.$set$2(0, "currentStepDescriptionHoverId", "foreground");
      _this._gridCache = S.GridCache$(_this);
    },
    getBarrier$1: function(position) {
      return D.Barrier$fromMap(O.Util_notNull(H.interceptedTypeCast(this._StoreTransferAble$_store.$index(0, "barrier_" + H.S(position)), "$isMap"), new Q.Store_getBarrier_closure(), [P.Map,,,]));
    },
    get$currentStepDescription: function() {
      var t1 = this.getAListMap$1("currentStepDescription"),
        t2 = M.Explanation,
        t3 = H.getTypeArgumentByIndex(t1, 0);
      return new H.MappedListIterable(t1, H.functionTypeCheck(new Q.Store_currentStepDescription_closure(), {func: 1, ret: t2, args: [t3]}), [t3, t2]).toList$0(0);
    },
    set$currentStepDescription: function(newExplanations) {
      var t1, t2;
      H.assertSubtype(newExplanations, "$isList", [M.Explanation], "$asList");
      t1 = [P.Map,,,];
      t2 = H.getTypeArgumentByIndex(newExplanations, 0);
      this.$set$2(0, "currentStepDescription", new H.MappedListIterable(newExplanations, H.functionTypeCheck(new Q.Store_currentStepDescription_closure0(), {func: 1, ret: t1, args: [t2]}), [t2, t1]).toList$0(0));
    },
    getCurrentStepHighlights$2: function(position, key) {
      return K.Highlights_fromListMap(O.Util_notNull(this.getAListMap$1("currentStepHighlights_" + H.S(position)), new Q.Store_getCurrentStepHighlights_closure(), [P.List, [P.Map,,,]]));
    }
  };
  Q.Store_closure.prototype = {
    call$1: function(p) {
      var t1;
      H.interceptedTypeCheck(p, "$isPosition");
      t1 = [K.Highlight];
      t1 = H.assertSubtype(H.setRuntimeTypeInfo([], t1), "$isList", t1, "$asList");
      return this.$this.$set$2(0, "currentStepHighlights_" + H.S(p), K.Highlights_toListMap(t1));
    },
    $signature: 14
  };
  Q.Store_getBarrier_closure.prototype = {
    call$0: function() {
      return D.Barrier_totalUnblocked().toMap$0();
    },
    $signature: 156
  };
  Q.Store_currentStepDescription_closure.prototype = {
    call$1: function(map) {
      return M.Explanation$fromMap(H.interceptedTypeCheck(map, "$isMap"));
    },
    $signature: 157
  };
  Q.Store_currentStepDescription_closure0.prototype = {
    call$1: function(p) {
      return H.interceptedTypeCheck(p, "$isExplanation").toMap$0();
    },
    $signature: 158
  };
  Q.Store_getCurrentStepHighlights_closure.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [[P.Map,,,]]);
    },
    $signature: 159
  };
  T.StoreTransferAble.prototype = {
    getAListMap$1: function(id) {
      return J.map$1$1$ax(H.listSuperNativeTypeCast(this._StoreTransferAble$_store.$index(0, id), "$isIterable"), new T.StoreTransferAble_getAListMap_closure(), [P.Map,,,]).toList$0(0);
    },
    $set$3$toTransfer: function(_, id, newValue, toTransfer) {
      var t1, oldValue;
      if (newValue == null)
        return;
      t1 = this._StoreTransferAble$_store;
      oldValue = t1.$index(0, id);
      if (toTransfer ? !O.Util_equal(newValue, oldValue) : !J.$eq$(newValue, oldValue)) {
        t1.$indexSet(0, id, newValue);
        this.addChange$2(id, toTransfer);
      }
    },
    $set$2: function($receiver, id, newValue) {
      return this.$set$3$toTransfer($receiver, id, newValue, true);
    },
    addChange$2: function(id, toTransfer) {
      var _this = this;
      _this.changes.add$1(0, id);
      if (toTransfer)
        _this.changesToTransfer.add$1(0, id);
      if (_this.autoTriggerListeners)
        _this.triggerListeners$0();
    },
    triggerListeners$0: function() {
      var t1, t2, t3, t4, _this = this,
        equalListenerCalled = P.LinkedHashSet_LinkedHashSet({func: 1, ret: -1});
      for (t1 = _this.changes, t2 = P._LinkedHashSetIterator$(t1, t1._collection$_modifications, H.getTypeArgumentByIndex(t1, 0)), t3 = _this._equalListeners; t2.moveNext$0();) {
        t4 = t2._collection$_current;
        Date.now();
        t4 = t3.$index(0, t4);
        t4 = t4 == null ? null : J.where$1$ax(t4, new T.StoreTransferAble_triggerListeners_closure(equalListenerCalled));
        if (t4 != null)
          t4.forEach$1(0, new T.StoreTransferAble_triggerListeners_closure0(equalListenerCalled));
        Date.now();
      }
      _this._startsWithListener.forEach$1(0, new T.StoreTransferAble_triggerListeners_closure1(_this));
      t1.clear$0(0);
      if (_this.autoTriggerTransferListener)
        _this.triggerTransferListeners$0();
    },
    triggerTransferListeners$0: function() {
      var t1 = this.changesToTransfer;
      if (t1._collection$_length !== 0)
        this.transferListener.call$1(t1);
      t1.clear$0(0);
    },
    addEqualListener$2: function(ids, equalListener) {
      var t1, t2, _i;
      H.assertSubtype(ids, "$isList", [P.String], "$asList");
      H.functionTypeCheck(equalListener, {func: 1, ret: -1});
      for (t1 = ids.length, t2 = this._equalListeners, _i = 0; _i < ids.length; ids.length === t1 || (0, H.throwConcurrentModificationError)(ids), ++_i)
        J.add$1$ax(t2.putIfAbsent$2(0, ids[_i], new T.StoreTransferAble_addEqualListener_closure()), equalListener);
    },
    removeEqualListener$1: function(equalListener) {
      this._equalListeners.forEach$1(0, new T.StoreTransferAble_removeEqualListener_closure(H.functionTypeCheck(equalListener, {func: 1, ret: -1})));
    },
    set$transferListener: function(transferListener) {
      this.transferListener = H.functionTypeCheck(transferListener, {func: 1, ret: -1, args: [[P.Iterable, P.String]]});
    }
  };
  T.StoreTransferAble_closure.prototype = {
    call$1: function(ids) {
      H.assertSubtype(ids, "$isIterable", [P.String], "$asIterable");
      return;
    },
    $signature: 24
  };
  T.StoreTransferAble_getAListMap_closure.prototype = {
    call$1: function(map) {
      return H.interceptedTypeCast(map, "$isMap");
    },
    $signature: 53
  };
  T.StoreTransferAble_triggerListeners_closure.prototype = {
    call$1: function(el) {
      return !this.equalListenerCalled.contains$1(0, H.functionTypeCheck(el, {func: 1, ret: -1}));
    },
    $signature: 161
  };
  T.StoreTransferAble_triggerListeners_closure0.prototype = {
    call$1: function(equalListener) {
      H.functionTypeCheck(equalListener, {func: 1, ret: -1});
      equalListener.call$0();
      this.equalListenerCalled.add$1(0, equalListener);
    },
    $signature: 37
  };
  T.StoreTransferAble_triggerListeners_closure1.prototype = {
    call$2: function(startsWithListener, startsOfIds) {
      var t1, t2, matchingIds;
      H.functionTypeCheck(startsWithListener, {func: 1, ret: -1, args: [[P.Iterable, P.String]]});
      t1 = this.$this.changes;
      t2 = H.getTypeArgumentByIndex(t1, 0);
      matchingIds = P.List_List$from(new H.WhereIterable(t1, H.functionTypeCheck(new T.StoreTransferAble_triggerListeners__closure(H.assertSubtype(startsOfIds, "$isList", [P.String], "$asList")), {func: 1, ret: P.bool, args: [t2]}), [t2]), true, t2);
      if (matchingIds.length !== 0)
        startsWithListener.call$1(matchingIds);
    },
    $signature: 162
  };
  T.StoreTransferAble_triggerListeners__closure.prototype = {
    call$1: function(changedId) {
      return J.any$1$ax(this.startsOfIds, new T.StoreTransferAble_triggerListeners___closure(H.stringTypeCheck(changedId)));
    },
    $signature: 16
  };
  T.StoreTransferAble_triggerListeners___closure.prototype = {
    call$1: function(startOfId) {
      return J.startsWith$1$s(this.changedId, H.stringTypeCheck(startOfId));
    },
    $signature: 16
  };
  T.StoreTransferAble_addEqualListener_closure.prototype = {
    call$0: function() {
      return H.setRuntimeTypeInfo([], [{func: 1, ret: -1}]);
    },
    $signature: 163
  };
  T.StoreTransferAble_removeEqualListener_closure.prototype = {
    call$2: function(id, list) {
      H.stringTypeCheck(id);
      return J.remove$1$ax(H.assertSubtype(list, "$isList", [{func: 1, ret: -1}], "$asList"), this.equalListener);
    },
    $signature: 164
  };
  K.Transfer.prototype = {
    receive$1: function(jsonDatas) {
      var t3, _i, data, t4,
        t1 = Date.now(),
        datas = J.map$1$1$ax(H.listSuperNativeTypeCast(C.C_JsonCodec.decode$2$reviver(0, jsonDatas, null), "$isIterable"), new K.Transfer_receive_closure(), [P.Map,,,]).toList$0(0),
        t2 = this.store;
      t2.autoTriggerListeners = false;
      for (t3 = datas.length, _i = 0; _i < datas.length; datas.length === t3 || (0, H.throwConcurrentModificationError)(datas), ++_i) {
        data = datas[_i];
        t4 = J.getInterceptor$asx(data);
        t2.$set$3$toTransfer(0, H.stringTypeCast(t4.$index(data, "id")), t4.$index(data, "data"), false);
      }
      t2.autoTriggerListeners = true;
      t2.triggerListeners$0();
      t2 = P.String;
      t3 = H.getTypeArgumentByIndex(datas, 0);
      t2 = this.name + ": got   in " + C.JSInt_methods._tdivFast$1(P.Duration$(0, Date.now() - new P.DateTime(t1, false)._value)._duration, 1000) + "ms: " + new H.MappedListIterable(datas, H.functionTypeCheck(new K.Transfer_receive_closure0(), {func: 1, ret: t2, args: [t3]}), [t3, t2]).toString$0(0);
      P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": " + t2);
    },
    send$2: function(_, ids, $postMessage) {
      var t1, t2, t3;
      H.assertSubtype(ids, "$isIterable", [P.String], "$asIterable");
      H.functionTypeCheck($postMessage, {func: 1, ret: -1, args: [P.String]});
      t1 = Date.now();
      t2 = [P.Map, P.String,,];
      t3 = H.getTypeArgumentByIndex(ids, 0);
      $postMessage.call$1(C.C_JsonCodec.encode$2$toEncodable(P.List_List$from(new H.EfficientLengthMappedIterable(ids, H.functionTypeCheck(new K.Transfer_send_closure(this), {func: 1, ret: t2, args: [t3]}), [t3, t2]), true, t2), null));
      t1 = this.name + ": send out " + C.JSInt_methods._tdivFast$1(P.Duration$(0, Date.now() - t1)._duration, 1000) + "ms: " + ids.toString$0(0);
      P.print(new P.DateTime(Date.now(), false).toIso8601String$0() + ": " + t1);
    }
  };
  K.Transfer_receive_closure.prototype = {
    call$1: function(map) {
      return H.interceptedTypeCast(map, "$isMap");
    },
    $signature: 53
  };
  K.Transfer_receive_closure0.prototype = {
    call$1: function(data) {
      return H.stringTypeCast(J.$index$asx(H.interceptedTypeCheck(data, "$isMap"), "id"));
    },
    $signature: 165
  };
  K.Transfer_send_closure.prototype = {
    call$1: function(id) {
      var t1;
      H.stringTypeCheck(id);
      t1 = new H.JsLinkedHashMap([P.String, null]);
      t1.$indexSet(0, "id", id);
      t1.$indexSet(0, "data", H.subtypeOfRuntimeTypeCast(this.$this.store._StoreTransferAble$_store.$index(0, id), null));
      return t1;
    },
    $signature: 166
  };
  B.TransferMaster.prototype = {
    TransferMaster$2: function(_webworker, store) {
      var t2,
        worker = new Worker("dart/" + this._webworker + ".js"),
        msgChn = new MessageChannel(),
        t1 = msgChn.port1;
      C.Worker_methods.postMessage$2(worker, t1, H.setRuntimeTypeInfo([t1], [P.Object]));
      t1 = msgChn.port2;
      t1.toString;
      t2 = W.MessageEvent;
      W._EventStreamSubscription$(t1, "message", H.functionTypeCheck(new B.TransferMaster_closure(this), {func: 1, ret: -1, args: [t2]}), false, t2);
      store.set$transferListener(new B.TransferMaster_closure0(this, worker));
    }
  };
  B.TransferMaster_closure.prototype = {
    call$1: function(message) {
      return this.$this.receive$1(H.stringTypeCast(new P._AcceptStructuredCloneDart2Js([], []).convertNativeToDart_AcceptStructuredClone$2$mustCopy(H.interceptedTypeCheck(message, "$isMessageEvent").data, true)));
    },
    $signature: 167
  };
  B.TransferMaster_closure0.prototype = {
    call$1: function(ids) {
      return this.$this.send$2(0, H.assertSubtype(ids, "$isIterable", [P.String], "$asIterable"), new B.TransferMaster__closure(this.worker));
    },
    $signature: 168
  };
  B.TransferMaster__closure.prototype = {
    call$1: function(message) {
      return C.Worker_methods.postMessage$1(this.worker, message);
    },
    $signature: 22
  };
  F.main_closure.prototype = {
    call$1: function(t) {
      var t1, t2, save;
      H.interceptedTypeCheck(t, "$isTimer");
      t1 = $.$get$MouseTracker__tracker();
      t2 = this._box_0;
      if (t1.lastMouseEvent._value > t2.lastSave._value)
        if (!t1._mouseIsDown) {
          save = G.Save$(this.store);
          window.localStorage.setItem("image", save._canvas.toDataURL("image/png", 100));
          t2.lastSave = new P.DateTime(Date.now(), false);
        }
    },
    $signature: 169
  };
  (function aliases() {
    var _ = J.Interceptor.prototype;
    _.super$Interceptor$toString = _.toString$0;
    _.super$Interceptor$noSuchMethod = _.noSuchMethod$1;
    _ = J.JavaScriptObject.prototype;
    _.super$JavaScriptObject$toString = _.toString$0;
    _ = P.MapView.prototype;
    _.super$MapView$$indexSet = _.$indexSet;
    _ = P.Iterable.prototype;
    _.super$Iterable$where = _.where$1;
    _ = P.Object.prototype;
    _.super$Object$toString = _.toString$0;
    _ = W.EventTarget.prototype;
    _.super$EventTarget$addEventListener = _.addEventListener$3;
    _ = P.JsObject.prototype;
    _.super$JsObject$$index = _.$index;
    _.super$JsObject$$indexSet = _.$indexSet;
    _ = S.UiComponent.prototype;
    _.super$UiComponent$componentWillMount = _.componentWillMount$0;
    _.super$UiComponent$componentWillUnmount = _.componentWillUnmount$0;
    _ = V.Component.prototype;
    _.super$Component$props = _.set$props;
    _.super$Component$state = _.set$state;
    _.super$Component$componentDidMount = _.componentDidMount$0;
    _.super$Component$componentDidUpdate = _.componentDidUpdate$2;
    _ = D.BasicSearchAlgorithm.prototype;
    _.super$BasicSearchAlgorithm$runInner = _.runInner$0;
    _ = K.Highlight.prototype;
    _.super$Highlight$toMap = _.toMap$0;
  })();
  (function installTearOffs() {
    var _instance_1_i = hunkHelpers._instance_1i,
      _static_1 = hunkHelpers._static_1,
      _static_0 = hunkHelpers._static_0,
      _static_2 = hunkHelpers._static_2,
      _static = hunkHelpers.installStaticTearOff,
      _instance_1_u = hunkHelpers._instance_1u,
      _instance_0_i = hunkHelpers._instance_0i,
      _instance_0_u = hunkHelpers._instance_0u;
    _instance_1_i(J.JSArray.prototype, "get$add", "add$1", 68);
    _static_1(P, "async__AsyncRun__scheduleImmediateJsOverride$closure", "_AsyncRun__scheduleImmediateJsOverride", 30);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithSetImmediate$closure", "_AsyncRun__scheduleImmediateWithSetImmediate", 30);
    _static_1(P, "async__AsyncRun__scheduleImmediateWithTimer$closure", "_AsyncRun__scheduleImmediateWithTimer", 30);
    _static_0(P, "async___startMicrotaskLoop$closure", "_startMicrotaskLoop", 1);
    _static_1(P, "collection_MapBase__id$closure", "MapBase__id", 3);
    _static_2(P, "collection___dynamicCompare$closure", "_dynamicCompare", 171);
    _static_1(P, "convert___defaultToEncodable$closure", "_defaultToEncodable", 3);
    _static_2(P, "core_Comparable_compare$closure", "Comparable_compare", 172);
    _instance_1_i(W.Window.prototype, "get$cancelAnimationFrame", "cancelAnimationFrame$1", 79);
    _static_1(P, "js___convertToJS$closure", "_convertToJS", 3);
    _static_1(P, "js___convertToDart$closure", "_convertToDart", 173);
    _static(S, "resize_sensor___$ResizeSensor$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_$ResizeSensor", function() {
      return S._$ResizeSensor(null);
    }], 174, 0);
    _instance_1_u(S.ResizeSensorComponent.prototype, "get$_handleSensorScroll", "_handleSensorScroll$1", 63);
    _static_1(M, "pretty_print___prettyObj$closure", "_prettyObj", 175);
    _static_1(L, "browser__Chrome__isChrome$closure", "_Chrome__isChrome", 18);
    _static_1(L, "browser__Chrome__getVersion$closure", "_Chrome__getVersion", 17);
    _static_1(L, "browser__Firefox__isFirefox$closure", "_Firefox__isFirefox", 18);
    _static_1(L, "browser__Firefox__getVersion$closure", "_Firefox__getVersion", 17);
    _static_1(L, "browser__Safari__isSafari$closure", "_Safari__isSafari", 18);
    _static_1(L, "browser__Safari__getVersion$closure", "_Safari__getVersion", 17);
    _static_1(L, "browser__WKWebView__isWKWebView$closure", "_WKWebView__isWKWebView", 18);
    _static_1(L, "browser__WKWebView__getVersion$closure", "_WKWebView__getVersion", 17);
    _static_1(L, "browser__InternetExplorer__isInternetExplorer$closure", "_InternetExplorer__isInternetExplorer", 18);
    _static_1(L, "browser__InternetExplorer__getVersion$closure", "_InternetExplorer__getVersion", 17);
    _static(A, "react_client___registerComponent$closure", 1, null, ["call$2", "call$1"], ["_registerComponent", function(componentFactory) {
      return A._registerComponent(componentFactory, C.List_empty0);
    }], 178, 0);
    _static_1(A, "react_client__syntheticClipboardEventFactory$closure", "syntheticClipboardEventFactory", 179);
    _static_1(A, "react_client__syntheticKeyboardEventFactory$closure", "syntheticKeyboardEventFactory", 180);
    _static_1(A, "react_client__syntheticFocusEventFactory$closure", "syntheticFocusEventFactory", 181);
    _static_1(A, "react_client__syntheticFormEventFactory$closure", "syntheticFormEventFactory", 182);
    _static_1(A, "react_client__syntheticMouseEventFactory$closure", "syntheticMouseEventFactory", 183);
    _static_1(A, "react_client__syntheticTouchEventFactory$closure", "syntheticTouchEventFactory", 184);
    _static_1(A, "react_client__syntheticTransitionEventFactory$closure", "syntheticTransitionEventFactory", 185);
    _static_1(A, "react_client__syntheticAnimationEventFactory$closure", "syntheticAnimationEventFactory", 186);
    _static_1(A, "react_client__syntheticUIEventFactory$closure", "syntheticUIEventFactory", 187);
    _static_1(A, "react_client__syntheticWheelEventFactory$closure", "syntheticWheelEventFactory", 188);
    _static_1(A, "react_client___findDomNode$closure", "_findDomNode", 3);
    _static_2(R, "js_interop_helpers___getProperty$closure", "_getProperty", 42);
    _static(R, "js_interop_helpers___setProperty$closure", 3, null, ["call$3"], ["_setProperty"], 189, 0);
    _static_2(K, "react_interop_ReactDom_render$closure", "ReactDom_render", 190);
    _instance_1_u(N.DirectedJumpPointSearchLookUp.prototype, "get$visualiseDirectionAdviser", "visualiseDirectionAdviser$1", 36);
    _instance_0_i(X.Distance.prototype, "get$length", "length$0", 92);
    var _;
    _instance_0_u(_ = S.GridCache.prototype, "get$rebuild", "rebuild$0", 1);
    _instance_1_u(_, "get$_updateOne", "_updateOne$1", 14);
    _instance_0_u(S.PathfinderWorker.prototype, "get$_run", "_run$0", 1);
    _static(V, "ReactAlgorithmSettings___$ReactAlgorithmSettings$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_$ReactAlgorithmSettings", function() {
      return V._$ReactAlgorithmSettings(null);
    }], 191, 0);
    _static(B, "ReactArrow___$ReactArrow$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_$ReactArrow", function() {
      return B._$ReactArrow(null);
    }], 192, 0);
    _static(U, "ReactDropDown___$ReactDropDown$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_$ReactDropDown", function() {
      return U._$ReactDropDown(null);
    }], 193, 0);
    _instance_1_u(U.ReactDropDownComponent.prototype, "get$_resized", "_resized$1", 116);
    _static(Y, "ReactExplanationPart___$ReactExplanationPart$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_$ReactExplanationPart", function() {
      return Y._$ReactExplanationPart(null);
    }], 194, 0);
    _static(D, "ReactGrid___$ReactGrid$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_$ReactGrid", function() {
      return D._$ReactGrid(null);
    }], 195, 0);
    _instance_1_u(D.ReactGridComponent.prototype, "get$_renderRow", "_renderRow$1", 23);
    _static(O, "ReactGridSettings___$ReactGridSettings$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_$ReactGridSettings", function() {
      return O._$ReactGridSettings(null);
    }], 196, 0);
    _static(K, "ReactHistory___$ReactHistory$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_$ReactHistory", function() {
      return K._$ReactHistory(null);
    }], 197, 0);
    _static(O, "ReactMain___$ReactMain$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_$ReactMain", function() {
      return O._$ReactMain(null);
    }], 198, 0);
    _instance_0_u(_ = O.ReactMainComponent.prototype, "get$_download", "_download$0", 1);
    _instance_1_u(_, "get$_load", "_load$1", 22);
    _static(V, "ReactNode___$ReactNode$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_$ReactNode", function() {
      return V._$ReactNode(null);
    }], 199, 0);
    _instance_1_u(V.ReactNodeComponent.prototype, "get$_renderArrowToGo", "_renderArrowToGo$1", 140);
    _static(G, "ReactNodePart___$ReactNodePart$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_$ReactNodePart", function() {
      return G._$ReactNodePart(null);
    }], 200, 0);
    _static(Q, "ReactPaths___$ReactPaths$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_$ReactPaths", function() {
      return Q._$ReactPaths(null);
    }], 201, 0);
    _static(F, "ReactPopover___$ReactPopover$closure", 0, function() {
      return [null];
    }, ["call$1", "call$0"], ["_$ReactPopover", function() {
      return F._$ReactPopover(null);
    }], 134, 0);
  })();
  (function inheritance() {
    var _mixin = hunkHelpers.mixin,
      _inherit = hunkHelpers.inherit,
      _inheritMany = hunkHelpers.inheritMany;
    _inherit(P.Object, null);
    _inheritMany(P.Object, [H.JS_CONST, J.Interceptor, J.ArrayIterator, P.Iterable, H.ListIterator, P.Iterator, H.ExpandIterator, H.EmptyIterator, H.FixedLengthListMixin, H.Symbol, P.MapView, H.ConstantMap, H.Closure, H.JSInvocationMirror, H.TypeErrorDecoder, P.Error, H._StackTrace, H.TypeImpl, P.MapMixin, H.LinkedHashMapCell, H.LinkedHashMapKeyIterator, H.JSSyntaxRegExp, H._MatchImplementation, H._AllMatchesIterator, H.StringMatch, P._TimerImpl, P._Completer, P._FutureListener, P._Future, P._AsyncCallbackEntry, P.Stream, P.StreamSubscription, P.StreamTransformerBase, P.Timer, P.AsyncError, P._Zone, P._SetBase, P._LinkedHashSetCell, P._LinkedHashSetIterator, P.IterableMixin, P.ListMixin, P._MapBaseValueIterator, P._UnmodifiableMapMixin, P.SetMixin, P._SplayTreeNode, P._SplayTree, P._SplayTreeIterator, P.Codec, P._JsonStringifier, P.bool, P.Comparable, P.DateTime, P.num, P.Duration, P.StackOverflowError, P._Exception, P.FormatException, P.Expando, P.Function, P.List, P.Map, P.Null, P.RegExpMatch, P.StackTrace, P.String, P.StringBuffer, P.Symbol0, W.CssStyleDeclarationBase, W.ImmutableListMixin, W.FixedSizeListIterator, W._DOMWindowCrossFrame, P._StructuredClone, P._AcceptStructuredClone, P._TypedImageData, P.JsObject, P._RectangleBase, U.DefaultEquality, U.IterableEquality, Q.ReactPropsMixin, Q.DomPropsMixin, Q.SvgPropsMixin, Q.UbiquitousDomPropsMixin, V.Component, S.ResizeSensorEvent, S._SafeAnimationFrameMixin, S._$ResizeSensorPropsAccessorsMixin, S.ResizeSensorPropsMixin, B.GeneratedClass, S._UiState_Object_MapViewMixin, S.PropsMapViewMixin, S.StateMapViewMixin, S.MapViewMixin, S.PropDescriptor, S.ConsumedProps, S.PropsMeta, B.ComponentTypeMeta, M.NotSpecified, S.ClassNameBuilder, S.CssClassPropsMixin, L.Browser, G._HtmlNavigator, G.NavigatorProvider, T.Version, X.VersionRange, V.ReactComponentFactoryProxy, V.NotSpecified0, V.SyntheticEvent, V.SyntheticDataTransfer, K.ReactDartComponentInternal, K.ReactDartContextInternal, K.ComponentStatics, Z._NsmEmulatedFunctionWithNameProperty, S.Tuple2, T.Vector2, S.Algorithm, F.Size, D.Barrier, E.BarrierManager, R.Heuristic, E.DirectedJumpPointSearchDataPoint, E.DirectedJumpPointSearchDataSignpost, E.DirectedJumpPointSearchDataDirectionAdviser, E.DirectedJumpPointSearchDataPointDirectionType, E.CountDirection, O.Direction, X.Distance, N.MouseMode, G.AlgorithmType, G.HeuristicType, G.AlgorithmUpdateMode, G.GridMode, G.DirectionMode, G.DirectionalMode, G.CornerMode, M.Explanation, M.ExplanationPart, S.GridCache, N.GridManager, K.Highlight, N.StructureNodeType, D.MouseTracker, S.PathfinderWorker, E.Position, V._$ReactAlgorithmSettingsPropsAccessorsMixin, B._$ReactArrowPropsAccessorsMixin, U._$ReactDropDownPropsAccessorsMixin, U._$ReactDropDownStateAccessorsMixin, Y._$ReactExplanationPartPropsAccessorsMixin, D._$ReactGridPropsAccessorsMixin, O._$ReactGridSettingsPropsAccessorsMixin, K._$ReactHistoryPropsAccessorsMixin, O._$ReactMainPropsAccessorsMixin, V._$ReactNodePropsAccessorsMixin, V._$ReactNodeStateAccessorsMixin, G._$ReactNodePartPropsAccessorsMixin, G._$ReactNodePartStateAccessorsMixin, Q._$ReactPathsPropsAccessorsMixin, F._$ReactPopoverPropsAccessorsMixin, G.Save, Y.SearchHistory, T.StoreTransferAble, K.Transfer]);
    _inheritMany(J.Interceptor, [J.JSBool, J.JSNull, J.JavaScriptObject, J.JSArray, J.JSNumber, J.JSString, H.NativeByteBuffer, H.NativeTypedData, W.EventTarget, W.AccessibleNodeList, W.Blob, W.BluetoothRemoteGattDescriptor, W.CanvasRenderingContext2D, W.Client, W.Credential, W.CryptoKey, W.CssStyleValue, W.CssTransformComponent, W.CssRule, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.DataTransfer, W.DataTransferItem, W.DataTransferItemList, W.DomException, W._DomRectList_Interceptor_ListMixin, W.DomRectReadOnly, W._DomStringList_Interceptor_ListMixin, W.DomTokenList, W.Event, W._FileList_Interceptor_ListMixin, W.Gamepad, W.GamepadButton, W.History, W._HtmlCollection_Interceptor_ListMixin, W.ImageData, W.IntersectionObserverEntry, W.Location, W.MediaList, W._MidiInputMap_Interceptor_MapMixin, W._MidiOutputMap_Interceptor_MapMixin, W.MimeType, W._MimeTypeArray_Interceptor_ListMixin, W.MutationRecord, W._NodeList_Interceptor_ListMixin, W.PerformanceEntry, W.PerformanceNavigation, W.Plugin, W._PluginArray_Interceptor_ListMixin, W.ResizeObserverEntry, W.RtcLegacyStatsReport, W.RtcSessionDescription, W._RtcStatsReport_Interceptor_MapMixin, W.Selection, W.SpeechGrammar, W._SpeechGrammarList_Interceptor_ListMixin, W.SpeechRecognitionResult, W._Storage_Interceptor_MapMixin, W.StyleMedia, W.StyleSheet, W._TextTrackCueList_Interceptor_ListMixin, W.TimeRanges, W.Touch, W._TouchList_Interceptor_ListMixin, W.TrackDefault, W.TrackDefaultList, W.Url, W.__CssRuleList_Interceptor_ListMixin, W.__GamepadList_Interceptor_ListMixin, W.__NamedNodeMap_Interceptor_ListMixin, W._Report, W.__SpeechRecognitionResultList_Interceptor_ListMixin, W.__StyleSheetList_Interceptor_ListMixin, P.Cursor, P.KeyRange, P.Observation, P.Angle, P.AnimatedEnumeration, P.AnimatedString, P.Length, P._LengthList_Interceptor_ListMixin, P.Number, P._NumberList_Interceptor_ListMixin, P.PointList, P._StringList_Interceptor_ListMixin, P.Transform, P._TransformList_Interceptor_ListMixin, P.AudioBuffer, P.AudioParam, P._AudioParamMap_Interceptor_MapMixin, P.ActiveInfo, P._SqlResultSetRowList_Interceptor_ListMixin]);
    _inheritMany(J.JavaScriptObject, [J.PlainJavaScriptObject, J.UnknownJavaScriptObject, J.JavaScriptFunction, R.EmptyObject, K.React, K.ReactDomServer, K.ReactClass, K.ReactClassConfig, K.ReactElementStore, K.ReactElement, K.ReactComponent, K.InteropContextValue, K.InteropProps, K.ReactDartInteropStatics, K.JsComponentConfig, Z._PropertyDescriptor, K.ReactDOM, Q.SyntheticEvent0, Q.NonNativeDataTransfer, F.Tooltip, F.TooltipOptions]);
    _inherit(J.JSUnmodifiableArray, J.JSArray);
    _inheritMany(J.JSNumber, [J.JSInt, J.JSDouble]);
    _inheritMany(P.Iterable, [H.EfficientLengthIterable, H.MappedIterable, H.WhereIterable, H.ExpandIterable, H.TakeWhileIterable, H._ConstantMapKeyIterable, P.IterableBase]);
    _inheritMany(H.EfficientLengthIterable, [H.ListIterable, H.EmptyIterable, H.LinkedHashMapKeyIterable, P._MapBaseValueIterable]);
    _inherit(H.EfficientLengthMappedIterable, H.MappedIterable);
    _inheritMany(P.Iterator, [H.MappedIterator, H.WhereIterator, H.TakeWhileIterator]);
    _inheritMany(H.ListIterable, [H.MappedListIterable, H.ReversedListIterable, P._JsonMapKeyIterable, P._GeneratorIterable]);
    _inheritMany(P.MapView, [P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, S._ResizeSensorPropsMixinMapView_MapView_ResizeSensorPropsMixin, S._WarnOnModify, S._CssClassPropsMapView_MapView_CssClassPropsMixin]);
    _inherit(P.UnmodifiableMapView, P._UnmodifiableMapView_MapView__UnmodifiableMapMixin);
    _inherit(H.ConstantMapView, P.UnmodifiableMapView);
    _inherit(H.ConstantStringMap, H.ConstantMap);
    _inheritMany(H.Closure, [H.ConstantStringMap_values_closure, H.Primitives_functionNoSuchMethod_closure, H.unwrapException_saveStackTrace, H.TearOffClosure, H.JsLinkedHashMap_values_closure, H.JsLinkedHashMap_addAll_closure, H.initHooks_closure, H.initHooks_closure0, H.initHooks_closure1, P._AsyncRun__initializeScheduleImmediate_internalCallback, P._AsyncRun__initializeScheduleImmediate_closure, P._AsyncRun__scheduleImmediateJsOverride_internalCallback, P._AsyncRun__scheduleImmediateWithSetImmediate_internalCallback, P._TimerImpl_internalCallback, P._TimerImpl$periodic_closure, P._Future__addListener_closure, P._Future__prependListeners_closure, P._Future__chainForeignFuture_closure, P._Future__chainForeignFuture_closure0, P._Future__chainForeignFuture_closure1, P._Future__asyncComplete_closure, P._Future__chainFuture_closure, P._Future__asyncCompleteError_closure, P._Future__propagateToListeners_handleWhenCompleteCallback, P._Future__propagateToListeners_handleWhenCompleteCallback_closure, P._Future__propagateToListeners_handleValueCallback, P._Future__propagateToListeners_handleError, P.Stream_length_closure, P.Stream_length_closure0, P._rootHandleUncaughtError_closure, P._RootZone_bindCallback_closure, P._RootZone_bindCallbackGuarded_closure, P._RootZone_bindUnaryCallbackGuarded_closure, P.LinkedHashMap_LinkedHashMap$from_closure, P.MapBase_mapToString_closure, P.SplayTreeSet_closure, P._JsonMap_values_closure, P._JsonMap_addAll_closure, P._JsonStringifier_writeMap_closure, P.NoSuchMethodError_toString_closure, P.Duration_toString_sixDigits, P.Duration_toString_twoDigits, W.MidiInputMap_keys_closure, W.MidiInputMap_values_closure, W.MidiOutputMap_keys_closure, W.MidiOutputMap_values_closure, W.RtcStatsReport_keys_closure, W.RtcStatsReport_values_closure, W.Storage_addAll_closure, W.Storage_keys_closure, W.Storage_values_closure, W._AttributeMap_addAll_closure, W._EventStreamSubscription_closure, P._StructuredClone_walk_closure, P._StructuredClone_walk_closure0, P._AcceptStructuredClone_walk_closure, P._convertToJS_closure, P._convertToJS_closure0, P._wrapToDart_closure, P._wrapToDart_closure0, P._wrapToDart_closure1, P.promiseToFuture_closure, P.promiseToFuture_closure0, P.AudioParamMap_keys_closure, P.AudioParamMap_values_closure, S.ResizeSensorComponent_componentDidMount_closure, S.ResizeSensorComponent_render_closure, S.ResizeSensorComponent_render_closure0, S.closure8, S._SafeAnimationFrameMixin_requestAnimationFrame_closure, S.closure7, S.UiComponent_copyUnconsumedDomProps_closure, S.UiComponent_validateRequiredProps_closure, S.UiComponent_validateRequiredProps__closure, S.UiProps_call_closure, S.ClassNameBuilder_toClassName_closure, R.getPropsToForward_closure, R.getPropsToForward__closure, R.getPropsToForward_closure0, M._indentString_closure, M._prettyObj_closure, M._prettyObj_closure0, M._prettyObj_closure1, M._prettyObj_closure_renderSubKey, M._prettyObj__closure, M._prettyObj_closure2, M._prettyObj_closure3, F.closure11, L.Browser_getCurrentBrowser_closure, L.Browser_getCurrentBrowser_closure0, T.Version__splitParts_closure, V.closure0, A.ReactDartComponentFactoryProxy_generateExtendedJsProps_closure, A._jsifyContext_closure, A._unjsifyContext_closure, A.closure2, A.closure_initComponent, A._initComponent_closure, A._initComponent_closure_jsRedraw, A._initComponent__closure, A.closure_handleGetChildContext, A._handleGetChildContext_closure, A.closure_handleComponentWillMount, A._handleComponentWillMount_closure, A.closure_handleComponentDidMount, A._handleComponentDidMount_closure, A.closure__getNextProps, A.closure__afterPropsChange, A.closure__clearPrevState, A.closure__callSetStateCallbacks, A.__callSetStateCallbacks_closure, A.closure__callSetStateTransactionalCallbacks, A.__callSetStateTransactionalCallbacks_closure, A.closure_handleComponentWillReceiveProps, A._handleComponentWillReceiveProps_closure, A.closure_handleShouldComponentUpdate, A._handleShouldComponentUpdate_closure, A.closure_handleComponentWillUpdate, A._handleComponentWillUpdate_closure, A.closure_handleComponentDidUpdate, A._handleComponentDidUpdate_closure, A.closure_handleComponentWillUnmount, A._handleComponentWillUnmount_closure, A.closure_handleRender, A._handleRender_closure, A._convertBoundValues_closure, A.unconvertJsProps_closure, A._convertEventHandlers_closure, A._convertEventHandlers__closure, A._dartifyJsMap_closure, R.closure10, R.closure19, R.jsify_closure, K.markChildrenValidated_closure, R.closure1, Z.closure20, T.closure9, A.hashObjects_closure, M.AStar_closure, M.AStar_findNextActiveNode_closure, M.AStar_findNextActiveNode_closure0, M.AStar_findNextActiveNode_closure1, M.AStar_findNextActiveNode_closure2, M.AStar_findNextActiveNode_closure3, M.AStar_findNextActiveNode_closure4, K.Array2D_closure, K.Array2D__closure, D.Barrier$fromMap_closure, D.Barrier$fromMap_closure0, D.Barrier_isAnyBlocked_closure, D.Barrier_toMap_closure, E.BarrierManager_somethingToDisplay_closure, D.BasicSearchAlgorithm_runInner_closure, D.BasicSearchAlgorithm_runInner_closure0, D.BasicSearchAlgorithm_runInner_closure1, D.BasicSearchAlgorithm_runInner_closure2, D.BasicSearchAlgorithm_runInner_closure3, D.BasicSearchAlgorithm_runInner_closure4, D.BasicSearchAlgorithm_runInner_closure5, D.BasicSearchAlgorithm_runInner_closure6, D.BasicSearchAlgorithm_runInner_closure7, D.BasicSearchAlgorithm_runInner_closure8, D.BasicSearchAlgorithm_runInner_closure9, D.BasicSearchAlgorithm_runInner_closure10, D.BasicSearchAlgorithm_runInner_closure11, D.BasicSearchAlgorithm_runInner_closure12, Z.Dijkstra_closure, Z.Dijkstra_findNextActiveNode_closure, Z.Dijkstra_findNextActiveNode_closure0, Z.Dijkstra_findNextActiveNode_closure1, E.DirectedJumpPointSearch_closure, E.DirectedJumpPointSearch_findNeighbourNodes_closure, E.DirectedJumpPointSearch_findNeighbourNodes_closure0, E.DirectedJumpPointSearch_getNextJumpPoint_closure, N.DirectedJumpPointSearchLookUp_closure, N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure, N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure0, N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure1, N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure2, N.DirectedJumpPointSearchLookUp_findNeighbourNodes_closure3, N.DirectedJumpPointSearchLookUp_visualiseDirectionAdviserDirect_closure, E.DirectedJumpPointSearchPreCalculator_closure, E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator, E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightGenerator_closure, E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator, E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure, E.DirectedJumpPointSearchPreCalculator_runInner_pathHighlightsGenerator_closure0, E.DirectedJumpPointSearchPreCalculator_runInner_closure, E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights, E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights_closure, E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure, E.DirectedJumpPointSearchPreCalculator_runInner_getNumberHighlights__closure0, E.DirectedJumpPointSearchPreCalculator_runInner_closure0, E.DirectedJumpPointSearchPreCalculator_runInner_closure1, E.DirectedJumpPointSearchPreCalculator_runInner_closure2, E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights, E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights_closure, E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights__closure, E.DirectedJumpPointSearchPreCalculator_runInner_getForcedDirectionsHighlights___closure, E.DirectedJumpPointSearchPreCalculator_recomputeBox_closure, E.DirectedJumpPointSearchData_closure, E.DirectedJumpPointSearchDataPoint_closure, E.DirectedJumpPointSearchDataPoint_closure0, N.EditBarrierMouseMode__getAndUpdateEasyFillMode_closure, M.Explanation$fromMap_closure, M.Explanation_toMap_closure, S.GridCache_closure, S.GridCache_rebuild_closure, S.GridCache_rebuild__closure, S.GridCache_accessibleNeighbours_closure, S.GridCache_accessibleNeighbours_closure0, S.GridCache_accessibleNeighbours_closure1, N.GridManager_clear_closure, N.GridManager_clear_closure0, K.Highlights_toListMap_closure, K.Highlights_fromListMap_closure, K.PathHighlight$fromMap_closure, K.PathHighlight_toMap_closure, E.DirectedJumpPointSearchHighlights_forcedDirections_closure, D.MouseTracker_closure, D.MouseTracker_closure0, O.NoAlgorithm_closure, S.PathfinderWorker_closure, S.PathfinderWorker$noIsolate_closure, S.PathfinderWorker$noIsolate__closure0, S.PathfinderWorker$noIsolate_closure0, S.PathfinderWorker$noIsolate__closure, S.PathfinderWorker__setup_closure, S.PathfinderWorker__runInner_closure, S.PathfinderWorker__runInner_closure0, S.PathfinderWorker__runInner_closure1, S.PathfinderWorker__runInner_closure2, E.Position__directionTo_closure, E.Position_neighbours_closure, E.Position_neighbours_closure0, V.ReactAlgorithmSettingsComponent_componentWillMount_closure, V.ReactAlgorithmSettingsComponent_render_closure, V.ReactAlgorithmSettingsComponent_render_closure0, V.ReactAlgorithmSettingsComponent_render_closure1, V.ReactAlgorithmSettingsComponent_render_closure2, V.ReactAlgorithmSettingsComponent_render_closure3, V.ReactAlgorithmSettingsComponent_render_closure4, V.ReactAlgorithmSettingsComponent_render_closure5, V.closure5, B.ReactArrowComponent_render_closure, B.closure15, U.ReactDropDownComponent_render_closure, U.ReactDropDownComponent_render_closure0, U.ReactDropDownComponent_render_closure1, U.ReactDropDownComponent_render__closure, U.closure6, Y.ReactExplanationPartComponent_render_closure, Y.ReactExplanationPartComponent_render_closure0, Y.closure4, D.ReactGridComponent_componentWillMount_closure, D.ReactGridComponent_componentWillMount_closure0, D.ReactGridComponent_componentWillMount_closure1, D.ReactGridComponent__renderRow_closure, D.ReactGridComponent_updateMouseModeFromNode_closure, D.ReactGridComponent_updateMouseModeFromNodePart_closure, D.closure16, O.ReactGridSettingsComponent_componentWillMount_closure, O.ReactGridSettingsComponent_render_closure, O.ReactGridSettingsComponent_render_closure0, O.ReactGridSettingsComponent_render_closure1, O.ReactGridSettingsComponent_render_closure2, O.ReactGridSettingsComponent_render_closure3, O.ReactGridSettingsComponent_render_closure4, O.ReactGridSettingsComponent_render_closure5, O.ReactGridSettingsComponent_render_closure6, O.ReactGridSettingsComponent_render_closure7, O.ReactGridSettingsComponent_render_closure8, O.ReactGridSettingsComponent_render_closure9, O.ReactGridSettingsComponent_render_closure10, O.ReactGridSettingsComponent_render__closure, O.ReactGridSettingsComponent_render_closure11, O.closure13, K.ReactHistoryComponent_componentWillMount_closure, K.ReactHistoryComponent_render_closure, K.ReactHistoryComponent__renderPart_closure, K.ReactHistoryComponent__renderExplanations_closure, K.ReactHistoryComponent__renderExplanation_closure, K.closure3, O.setupAlgorithmRunner_closure, O.setupAlgorithmRunner_closure0, O.setupAlgorithmRunner_closure1, O.setupArrowKeys_closure, O.closure, V.ReactNodeComponent_boxHighlight_closure, V.ReactNodeComponent_boxHighlight_closure0, V.ReactNodeComponent_directionTextHighlights_closure, V.ReactNodeComponent_directionTextHighlights_closure0, V.ReactNodeComponent_pathHighlights_closure, V.ReactNodeComponent_pathHighlights_closure0, V.ReactNodeComponent_textHighlight_closure, V.ReactNodeComponent_textHighlight_closure0, V.ReactNodeComponent_circleHighlight_closure, V.ReactNodeComponent_circleHighlight_closure0, V.ReactNodeComponent_dotHighlight_closure, V.ReactNodeComponent_dotHighlight_closure0, V.ReactNodeComponent_componentWillMount_closure, V.ReactNodeComponent_componentWillMount_closure0, V.ReactNodeComponent_render_closure, V.ReactNodeComponent_render_closure0, V.ReactNodeComponent_render_closure1, V.ReactNodeComponent_render_closure2, V.ReactNodeComponent__renderPart_closure, V.ReactNodeComponent__renderPart_closure0, V.ReactNodeComponent__renderPathHighlights_closure, V.closure17, G.ReactNodePartComponent_render_closure, G.ReactNodePartComponent_render_closure0, G.ReactNodePartComponent_render_closure1, G.closure18, Q.ReactPathsComponent_pathHighlights_closure, Q.ReactPathsComponent_componentWillMount_closure, Q.ReactPathsComponent_render_closure, Q.closure14, F.closure12, G.Save$loadFromCookie_closure, G.Save$loadFromSrc_closure, G.Save__loadIntoStore_closure, G.Save__loadIntoStore_closure0, Y.SearchHistory_closure, Y.SearchHistory_appendHM_closure, Y.SearchHistory_appendHM__closure, Y.SearchHistory_addHM_closure, Y.SearchHistory_addHM__closure, Y.SearchHistory_addHM___closure, F.Size_positions_closure, F.Size_positions_closure0, F.Size_positions__closure, Q.Store_closure, Q.Store_getBarrier_closure, Q.Store_currentStepDescription_closure, Q.Store_currentStepDescription_closure0, Q.Store_getCurrentStepHighlights_closure, T.StoreTransferAble_closure, T.StoreTransferAble_getAListMap_closure, T.StoreTransferAble_triggerListeners_closure, T.StoreTransferAble_triggerListeners_closure0, T.StoreTransferAble_triggerListeners_closure1, T.StoreTransferAble_triggerListeners__closure, T.StoreTransferAble_triggerListeners___closure, T.StoreTransferAble_addEqualListener_closure, T.StoreTransferAble_removeEqualListener_closure, K.Transfer_receive_closure, K.Transfer_receive_closure0, K.Transfer_send_closure, B.TransferMaster_closure, B.TransferMaster_closure0, B.TransferMaster__closure, F.main_closure]);
    _inherit(H.ConstantProtoMap, H.ConstantStringMap);
    _inheritMany(P.Error, [H.NullError, H.JsNoSuchMethodError, H.UnknownJsTypeError, H.TypeErrorImplementation, H.CastErrorImplementation, H.RuntimeError, P.AssertionError, P.JsonUnsupportedObjectError, P.NullThrownError, P.ArgumentError, P.NoSuchMethodError, P.UnsupportedError, P.UnimplementedError, P.StateError, P.ConcurrentModificationError, P.CyclicInitializationError, B.UngeneratedError, R._MissingJsMemberError]);
    _inheritMany(H.TearOffClosure, [H.StaticClosure, H.BoundClosure]);
    _inherit(H._AssertionError, P.AssertionError);
    _inherit(P.MapBase, P.MapMixin);
    _inheritMany(P.MapBase, [H.JsLinkedHashMap, P._JsonMap, W._AttributeMap, S._UiProps_MapBase_MapViewMixin]);
    _inheritMany(H.NativeTypedData, [H.NativeByteData, H.NativeTypedArray]);
    _inheritMany(H.NativeTypedArray, [H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin]);
    _inherit(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfDouble, H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inherit(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin);
    _inherit(H.NativeTypedArrayOfInt, H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin);
    _inheritMany(H.NativeTypedArrayOfDouble, [H.NativeFloat32List, H.NativeFloat64List]);
    _inheritMany(H.NativeTypedArrayOfInt, [H.NativeInt16List, H.NativeInt32List, H.NativeInt8List, H.NativeUint16List, H.NativeUint32List, H.NativeUint8ClampedList, H.NativeUint8List]);
    _inherit(P._AsyncCompleter, P._Completer);
    _inherit(P._RootZone, P._Zone);
    _inherit(P._LinkedHashSet, P._SetBase);
    _inherit(P._SplayTreeKeyIterator, P._SplayTreeIterator);
    _inherit(P._SplayTreeSet__SplayTree_IterableMixin, P._SplayTree);
    _inherit(P._SplayTreeSet__SplayTree_IterableMixin_SetMixin, P._SplayTreeSet__SplayTree_IterableMixin);
    _inherit(P.SplayTreeSet, P._SplayTreeSet__SplayTree_IterableMixin_SetMixin);
    _inherit(P.Converter, P.StreamTransformerBase);
    _inherit(P.JsonCyclicError, P.JsonUnsupportedObjectError);
    _inherit(P.JsonCodec, P.Codec);
    _inheritMany(P.Converter, [P.JsonEncoder, P.JsonDecoder]);
    _inherit(P._JsonStringStringifier, P._JsonStringifier);
    _inheritMany(P.num, [P.double, P.int]);
    _inheritMany(P.ArgumentError, [P.RangeError, P.IndexError]);
    _inheritMany(W.EventTarget, [W.Node, W.AccessibleNode, W.FileReader, W.FileWriter, W.MessagePort, W.MidiPort, W.NetworkInformation, W.PresentationAvailability, W.ScreenOrientation, W.SourceBuffer, W._SourceBufferList_EventTarget_ListMixin, W.TextTrack, W.TextTrackCue, W._TextTrackList_EventTarget_ListMixin, W.VideoTrackList, W.Window, W.Worker, W.WorkerGlobalScope, P.Request, P.AudioNode, P.AudioTrackList, P.BaseAudioContext]);
    _inheritMany(W.Node, [W.Element, W.CharacterData, W._Attr]);
    _inheritMany(W.Element, [W.HtmlElement, P.SvgElement]);
    _inheritMany(W.HtmlElement, [W.AnchorElement, W.AreaElement, W.BaseElement, W.ButtonElement, W.CanvasElement, W.DataElement, W.EmbedElement, W.FieldSetElement, W.FormElement, W.InputElement, W.LIElement, W.LinkElement, W.MeterElement, W.OListElement, W.ObjectElement, W.OptionElement, W.OutputElement, W.ParamElement, W.ProgressElement, W.ScriptElement, W.SelectElement, W.SourceElement, W.StyleElement, W.TextAreaElement]);
    _inheritMany(W.CssStyleValue, [W.CssKeywordValue, W.CssNumericValue, W.CssTransformValue, W.CssUnparsedValue]);
    _inherit(W.CssPerspective, W.CssTransformComponent);
    _inherit(W.CssStyleDeclaration, W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase);
    _inherit(W.CssUnitValue, W.CssNumericValue);
    _inherit(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W._DomRectList_Interceptor_ListMixin);
    _inherit(W.DomRectList, W._DomRectList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W._DomStringList_Interceptor_ListMixin);
    _inherit(W.DomStringList, W._DomStringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.File, W.Blob);
    _inherit(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W._FileList_Interceptor_ListMixin);
    _inherit(W.FileList, W._FileList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W._HtmlCollection_Interceptor_ListMixin);
    _inherit(W.HtmlCollection, W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin);
    _inheritMany(W.Event, [W.UIEvent, W.MessageEvent, W.ProgressEvent, P.VersionChangeEvent]);
    _inheritMany(W.UIEvent, [W.KeyboardEvent, W.MouseEvent]);
    _inherit(W.MidiInputMap, W._MidiInputMap_Interceptor_MapMixin);
    _inherit(W.MidiOutputMap, W._MidiOutputMap_Interceptor_MapMixin);
    _inherit(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W._MimeTypeArray_Interceptor_ListMixin);
    _inherit(W.MimeTypeArray, W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W._NodeList_Interceptor_ListMixin);
    _inherit(W.NodeList, W._NodeList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.PerformanceResourceTiming, W.PerformanceEntry);
    _inherit(W.PerformanceNavigationTiming, W.PerformanceResourceTiming);
    _inherit(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W._PluginArray_Interceptor_ListMixin);
    _inherit(W.PluginArray, W._PluginArray_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.ProcessingInstruction, W.CharacterData);
    _inherit(W.RtcStatsReport, W._RtcStatsReport_Interceptor_MapMixin);
    _inherit(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W._SourceBufferList_EventTarget_ListMixin);
    _inherit(W.SourceBufferList, W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W._SpeechGrammarList_Interceptor_ListMixin);
    _inherit(W.SpeechGrammarList, W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.Storage, W._Storage_Interceptor_MapMixin);
    _inherit(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W._TextTrackCueList_Interceptor_ListMixin);
    _inherit(W.TextTrackCueList, W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W._TextTrackList_EventTarget_ListMixin);
    _inherit(W.TextTrackList, W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin);
    _inherit(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W._TouchList_Interceptor_ListMixin);
    _inherit(W.TouchList, W._TouchList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.__CssRuleList_Interceptor_ListMixin);
    _inherit(W._CssRuleList, W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._DomRect, W.DomRectReadOnly);
    _inherit(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.__GamepadList_Interceptor_ListMixin);
    _inherit(W._GamepadList, W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.__NamedNodeMap_Interceptor_ListMixin);
    _inherit(W._NamedNodeMap, W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.__SpeechRecognitionResultList_Interceptor_ListMixin);
    _inherit(W._SpeechRecognitionResultList, W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.__StyleSheetList_Interceptor_ListMixin);
    _inherit(W._StyleSheetList, W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(W._ElementAttributeMap, W._AttributeMap);
    _inherit(W._EventStream, P.Stream);
    _inherit(W._ElementEventStreamImpl, W._EventStream);
    _inherit(W._EventStreamSubscription, P.StreamSubscription);
    _inherit(P._StructuredCloneDart2Js, P._StructuredClone);
    _inherit(P._AcceptStructuredCloneDart2Js, P._AcceptStructuredClone);
    _inherit(P.CursorWithValue, P.Cursor);
    _inherit(P.OpenDBRequest, P.Request);
    _inheritMany(P.JsObject, [P.JsFunction, P._JsArray_JsObject_ListMixin]);
    _inherit(P.JsArray, P._JsArray_JsObject_ListMixin);
    _inherit(P.Rectangle, P._RectangleBase);
    _inheritMany(P.SvgElement, [P.GraphicsElement, P.FEColorMatrixElement, P.FETurbulenceElement, P.ScriptElement0, P.StyleElement0]);
    _inherit(P.AElement, P.GraphicsElement);
    _inherit(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, P._LengthList_Interceptor_ListMixin);
    _inherit(P.LengthList, P._LengthList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, P._NumberList_Interceptor_ListMixin);
    _inherit(P.NumberList, P._NumberList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._StringList_Interceptor_ListMixin_ImmutableListMixin, P._StringList_Interceptor_ListMixin);
    _inherit(P.StringList, P._StringList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, P._TransformList_Interceptor_ListMixin);
    _inherit(P.TransformList, P._TransformList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(P.AudioParamMap, P._AudioParamMap_Interceptor_MapMixin);
    _inheritMany(P.AudioNode, [P.AudioScheduledSourceNode, P.BiquadFilterNode]);
    _inherit(P.OfflineAudioContext, P.BaseAudioContext);
    _inherit(P.OscillatorNode, P.AudioScheduledSourceNode);
    _inherit(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, P._SqlResultSetRowList_Interceptor_ListMixin);
    _inherit(P.SqlResultSetRowList, P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin);
    _inherit(S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin, S._UiProps_MapBase_MapViewMixin);
    _inherit(S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin, S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin);
    _inherit(S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin_UbiquitousDomPropsMixin, S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin);
    _inherit(S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin_UbiquitousDomPropsMixin_CssClassPropsMixin, S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin_UbiquitousDomPropsMixin);
    _inherit(S.UiProps0, S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin_UbiquitousDomPropsMixin_CssClassPropsMixin);
    _inheritMany(S.UiProps0, [A._DomProps_UiProps_DomPropsMixin, A._SvgProps_UiProps_DomPropsMixin, B._UiProps_UiProps_GeneratedClass]);
    _inherit(A._DomProps_UiProps_DomPropsMixin_GeneratedClass, A._DomProps_UiProps_DomPropsMixin);
    _inherit(A.DomProps, A._DomProps_UiProps_DomPropsMixin_GeneratedClass);
    _inherit(A._SvgProps_UiProps_DomPropsMixin_SvgPropsMixin, A._SvgProps_UiProps_DomPropsMixin);
    _inherit(A._SvgProps_UiProps_DomPropsMixin_SvgPropsMixin_GeneratedClass, A._SvgProps_UiProps_DomPropsMixin_SvgPropsMixin);
    _inherit(A.SvgProps, A._SvgProps_UiProps_DomPropsMixin_SvgPropsMixin_GeneratedClass);
    _inherit(B.UiProps, B._UiProps_UiProps_GeneratedClass);
    _inheritMany(B.UiProps, [S.__$ResizeSensorProps_UiProps_ResizeSensorPropsMixin, V._$ReactAlgorithmSettingsProps, B._$ReactArrowProps, U._$ReactDropDownProps, Y._$ReactExplanationPartProps, D._$ReactGridProps, O._$ReactGridSettingsProps, K._$ReactHistoryProps, O._$ReactMainProps, V._$ReactNodeProps, G._$ReactNodePartProps, Q._$ReactPathsProps, F._$ReactPopoverProps]);
    _inherit(S._$ResizeSensorProps, S.__$ResizeSensorProps_UiProps_ResizeSensorPropsMixin);
    _inherit(S.UiComponent, V.Component);
    _inheritMany(S.UiComponent, [B._UiComponent_UiComponent_GeneratedClass, S.UiStatefulComponent]);
    _inherit(B.UiComponent0, B._UiComponent_UiComponent_GeneratedClass);
    _inheritMany(B.UiComponent0, [S._ResizeSensorComponent_UiComponent__SafeAnimationFrameMixin, V.ReactAlgorithmSettingsComponent, B.ReactArrowComponent, Y.ReactExplanationPartComponent, D.ReactGridComponent, O.ReactGridSettingsComponent, K.ReactHistoryComponent, O.ReactMainComponent, Q.ReactPathsComponent, F.ReactPopoverComponent]);
    _inherit(S.ResizeSensorComponent, S._ResizeSensorComponent_UiComponent__SafeAnimationFrameMixin);
    _inherit(S.ResizeSensorPropsMixinMapView, S._ResizeSensorPropsMixinMapView_MapView_ResizeSensorPropsMixin);
    _inheritMany(S._$ResizeSensorProps, [S._ResizeSensorProps__$ResizeSensorProps__$ResizeSensorPropsAccessorsMixin, S.__$$ResizeSensorProps__$ResizeSensorProps__$ResizeSensorPropsAccessorsMixin]);
    _inherit(S.ResizeSensorProps, S._ResizeSensorProps__$ResizeSensorProps__$ResizeSensorPropsAccessorsMixin);
    _inherit(S._$$ResizeSensorProps, S.__$$ResizeSensorProps__$ResizeSensorProps__$ResizeSensorPropsAccessorsMixin);
    _inherit(S._$ResizeSensorComponent, S.ResizeSensorComponent);
    _inherit(B._UiStatefulComponent_UiStatefulComponent_GeneratedClass, S.UiStatefulComponent);
    _inherit(B.UiStatefulComponent0, B._UiStatefulComponent_UiStatefulComponent_GeneratedClass);
    _inherit(S._UiState_Object_MapViewMixin_StateMapViewMixin, S._UiState_Object_MapViewMixin);
    _inherit(S.UiState0, S._UiState_Object_MapViewMixin_StateMapViewMixin);
    _inherit(B._UiState_UiState_GeneratedClass, S.UiState0);
    _inherit(B.UiState, B._UiState_UiState_GeneratedClass);
    _inherit(S.CssClassPropsMapView, S._CssClassPropsMapView_MapView_CssClassPropsMixin);
    _inheritMany(L.Browser, [L._Chrome, L._Firefox, L._Safari, L._WKWebView, L._InternetExplorer]);
    _inherit(X.Optional, P.IterableBase);
    _inheritMany(V.SyntheticEvent, [V.SyntheticClipboardEvent0, V.SyntheticKeyboardEvent0, V.SyntheticFocusEvent0, V.SyntheticFormEvent0, V.SyntheticMouseEvent, V.SyntheticTouchEvent0, V.SyntheticTransitionEvent0, V.SyntheticAnimationEvent0, V.SyntheticUIEvent, V.SyntheticWheelEvent0]);
    _inheritMany(V.ReactComponentFactoryProxy, [A.ReactDartComponentFactoryProxy, A.ReactDomComponentFactoryProxy]);
    _inheritMany(Q.SyntheticEvent0, [Q.SyntheticClipboardEvent, Q.SyntheticKeyboardEvent, Q.SyntheticFocusEvent, Q.SyntheticFormEvent, Q.SyntheticMouseEvent0, Q.SyntheticTouchEvent, Q.SyntheticTransitionEvent, Q.SyntheticAnimationEvent, Q.SyntheticUIEvent0, Q.SyntheticWheelEvent]);
    _inheritMany(S.Algorithm, [D.BasicSearchAlgorithm, E.DirectedJumpPointSearchPreCalculator, O.NoAlgorithm]);
    _inherit(Z.Dijkstra, D.BasicSearchAlgorithm);
    _inherit(M.AStar, Z.Dijkstra);
    _inherit(K.Array2D, F.Size);
    _inheritMany(R.Heuristic, [F.Chebyshev, Z.Euclidean, M.Manhattan, O.ConstantZeroHeuristic, T.Octile]);
    _inheritMany(M.AStar, [E.DirectedJumpPointSearch, N.DirectedJumpPointSearchLookUp]);
    _inherit(E.DirectedJumpPointSearchData, K.Array2D);
    _inheritMany(N.MouseMode, [N.EditBarrierMouseMode, B.EditNodeTypeMouseMode]);
    _inheritMany(K.Highlight, [K.BoxHighlight, K.CircleHighlight, K.DotHighlight, K.PathHighlight, K.TextHighlight, K.DirectionTextHighlight]);
    _inheritMany(V._$ReactAlgorithmSettingsProps, [V._ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsPropsAccessorsMixin, V.__$$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsPropsAccessorsMixin]);
    _inherit(V.ReactAlgorithmSettingsProps, V._ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsPropsAccessorsMixin);
    _inherit(V._$$ReactAlgorithmSettingsProps, V.__$$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsPropsAccessorsMixin);
    _inherit(V._$ReactAlgorithmSettingsComponent, V.ReactAlgorithmSettingsComponent);
    _inheritMany(B._$ReactArrowProps, [B._ReactArrowProps__$ReactArrowProps__$ReactArrowPropsAccessorsMixin, B.__$$ReactArrowProps__$ReactArrowProps__$ReactArrowPropsAccessorsMixin]);
    _inherit(B.ReactArrowProps, B._ReactArrowProps__$ReactArrowProps__$ReactArrowPropsAccessorsMixin);
    _inherit(B._$$ReactArrowProps, B.__$$ReactArrowProps__$ReactArrowProps__$ReactArrowPropsAccessorsMixin);
    _inherit(B._$ReactArrowComponent, B.ReactArrowComponent);
    _inheritMany(B.UiState, [U._$ReactDropDownState, V._$ReactNodeState, G._$ReactNodePartState]);
    _inheritMany(B.UiStatefulComponent0, [U.ReactDropDownComponent, V.ReactNodeComponent, G.ReactNodePartComponent]);
    _inheritMany(U._$ReactDropDownProps, [U._ReactDropDownProps__$ReactDropDownProps__$ReactDropDownPropsAccessorsMixin, U.__$$ReactDropDownProps__$ReactDropDownProps__$ReactDropDownPropsAccessorsMixin]);
    _inherit(U.ReactDropDownProps, U._ReactDropDownProps__$ReactDropDownProps__$ReactDropDownPropsAccessorsMixin);
    _inherit(U._$$ReactDropDownProps, U.__$$ReactDropDownProps__$ReactDropDownProps__$ReactDropDownPropsAccessorsMixin);
    _inheritMany(U._$ReactDropDownState, [U._ReactDropDownState__$ReactDropDownState__$ReactDropDownStateAccessorsMixin, U.__$$ReactDropDownState__$ReactDropDownState__$ReactDropDownStateAccessorsMixin]);
    _inherit(U.ReactDropDownState, U._ReactDropDownState__$ReactDropDownState__$ReactDropDownStateAccessorsMixin);
    _inherit(U._$$ReactDropDownState, U.__$$ReactDropDownState__$ReactDropDownState__$ReactDropDownStateAccessorsMixin);
    _inherit(U._$ReactDropDownComponent, U.ReactDropDownComponent);
    _inheritMany(Y._$ReactExplanationPartProps, [Y._ReactExplanationPartProps__$ReactExplanationPartProps__$ReactExplanationPartPropsAccessorsMixin, Y.__$$ReactExplanationPartProps__$ReactExplanationPartProps__$ReactExplanationPartPropsAccessorsMixin]);
    _inherit(Y.ReactExplanationPartProps, Y._ReactExplanationPartProps__$ReactExplanationPartProps__$ReactExplanationPartPropsAccessorsMixin);
    _inherit(Y._$$ReactExplanationPartProps, Y.__$$ReactExplanationPartProps__$ReactExplanationPartProps__$ReactExplanationPartPropsAccessorsMixin);
    _inherit(Y._$ReactExplanationPartComponent, Y.ReactExplanationPartComponent);
    _inheritMany(D._$ReactGridProps, [D._ReactGridProps__$ReactGridProps__$ReactGridPropsAccessorsMixin, D.__$$ReactGridProps__$ReactGridProps__$ReactGridPropsAccessorsMixin]);
    _inherit(D.ReactGridProps, D._ReactGridProps__$ReactGridProps__$ReactGridPropsAccessorsMixin);
    _inherit(D._$$ReactGridProps, D.__$$ReactGridProps__$ReactGridProps__$ReactGridPropsAccessorsMixin);
    _inherit(D._$ReactGridComponent, D.ReactGridComponent);
    _inheritMany(O._$ReactGridSettingsProps, [O._ReactGridSettingsProps__$ReactGridSettingsProps__$ReactGridSettingsPropsAccessorsMixin, O.__$$ReactGridSettingsProps__$ReactGridSettingsProps__$ReactGridSettingsPropsAccessorsMixin]);
    _inherit(O.ReactGridSettingsProps, O._ReactGridSettingsProps__$ReactGridSettingsProps__$ReactGridSettingsPropsAccessorsMixin);
    _inherit(O._$$ReactGridSettingsProps, O.__$$ReactGridSettingsProps__$ReactGridSettingsProps__$ReactGridSettingsPropsAccessorsMixin);
    _inherit(O._$ReactGridSettingsComponent, O.ReactGridSettingsComponent);
    _inheritMany(K._$ReactHistoryProps, [K._ReactHistoryProps__$ReactHistoryProps__$ReactHistoryPropsAccessorsMixin, K.__$$ReactHistoryProps__$ReactHistoryProps__$ReactHistoryPropsAccessorsMixin]);
    _inherit(K.ReactHistoryProps, K._ReactHistoryProps__$ReactHistoryProps__$ReactHistoryPropsAccessorsMixin);
    _inherit(K._$$ReactHistoryProps, K.__$$ReactHistoryProps__$ReactHistoryProps__$ReactHistoryPropsAccessorsMixin);
    _inherit(K._$ReactHistoryComponent, K.ReactHistoryComponent);
    _inheritMany(O._$ReactMainProps, [O._ReactMainProps__$ReactMainProps__$ReactMainPropsAccessorsMixin, O.__$$ReactMainProps__$ReactMainProps__$ReactMainPropsAccessorsMixin]);
    _inherit(O.ReactMainProps, O._ReactMainProps__$ReactMainProps__$ReactMainPropsAccessorsMixin);
    _inherit(O._$$ReactMainProps, O.__$$ReactMainProps__$ReactMainProps__$ReactMainPropsAccessorsMixin);
    _inherit(O._$ReactMainComponent, O.ReactMainComponent);
    _inheritMany(V._$ReactNodeProps, [V._ReactNodeProps__$ReactNodeProps__$ReactNodePropsAccessorsMixin, V.__$$ReactNodeProps__$ReactNodeProps__$ReactNodePropsAccessorsMixin]);
    _inherit(V.ReactNodeProps, V._ReactNodeProps__$ReactNodeProps__$ReactNodePropsAccessorsMixin);
    _inherit(V._$$ReactNodeProps, V.__$$ReactNodeProps__$ReactNodeProps__$ReactNodePropsAccessorsMixin);
    _inheritMany(V._$ReactNodeState, [V._ReactNodeState__$ReactNodeState__$ReactNodeStateAccessorsMixin, V.__$$ReactNodeState__$ReactNodeState__$ReactNodeStateAccessorsMixin]);
    _inherit(V.ReactNodeState, V._ReactNodeState__$ReactNodeState__$ReactNodeStateAccessorsMixin);
    _inherit(V._$$ReactNodeState, V.__$$ReactNodeState__$ReactNodeState__$ReactNodeStateAccessorsMixin);
    _inherit(V._$ReactNodeComponent, V.ReactNodeComponent);
    _inheritMany(G._$ReactNodePartProps, [G._ReactNodePartProps__$ReactNodePartProps__$ReactNodePartPropsAccessorsMixin, G.__$$ReactNodePartProps__$ReactNodePartProps__$ReactNodePartPropsAccessorsMixin]);
    _inherit(G.ReactNodePartProps, G._ReactNodePartProps__$ReactNodePartProps__$ReactNodePartPropsAccessorsMixin);
    _inherit(G._$$ReactNodePartProps, G.__$$ReactNodePartProps__$ReactNodePartProps__$ReactNodePartPropsAccessorsMixin);
    _inheritMany(G._$ReactNodePartState, [G._ReactNodePartState__$ReactNodePartState__$ReactNodePartStateAccessorsMixin, G.__$$ReactNodePartState__$ReactNodePartState__$ReactNodePartStateAccessorsMixin]);
    _inherit(G.ReactNodePartState, G._ReactNodePartState__$ReactNodePartState__$ReactNodePartStateAccessorsMixin);
    _inherit(G._$$ReactNodePartState, G.__$$ReactNodePartState__$ReactNodePartState__$ReactNodePartStateAccessorsMixin);
    _inherit(G._$ReactNodePartComponent, G.ReactNodePartComponent);
    _inheritMany(Q._$ReactPathsProps, [Q._ReactPathsProps__$ReactPathsProps__$ReactPathsPropsAccessorsMixin, Q.__$$ReactPathsProps__$ReactPathsProps__$ReactPathsPropsAccessorsMixin]);
    _inherit(Q.ReactPathsProps, Q._ReactPathsProps__$ReactPathsProps__$ReactPathsPropsAccessorsMixin);
    _inherit(Q._$$ReactPathsProps, Q.__$$ReactPathsProps__$ReactPathsProps__$ReactPathsPropsAccessorsMixin);
    _inherit(Q._$ReactPathsComponent, Q.ReactPathsComponent);
    _inheritMany(F._$ReactPopoverProps, [F._ReactPopoverProps__$ReactPopoverProps__$ReactPopoverPropsAccessorsMixin, F.__$$ReactPopoverProps__$ReactPopoverProps__$ReactPopoverPropsAccessorsMixin]);
    _inherit(F.ReactPopoverProps, F._ReactPopoverProps__$ReactPopoverProps__$ReactPopoverPropsAccessorsMixin);
    _inherit(F._$$ReactPopoverProps, F.__$$ReactPopoverProps__$ReactPopoverProps__$ReactPopoverPropsAccessorsMixin);
    _inherit(F._$ReactPopoverComponent, F.ReactPopoverComponent);
    _inherit(Q.Store, T.StoreTransferAble);
    _inherit(B.TransferMaster, K.Transfer);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin, P.ListMixin);
    _mixin(H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin, H.FixedLengthListMixin);
    _mixin(P._SplayTreeSet__SplayTree_IterableMixin, P.IterableMixin);
    _mixin(P._SplayTreeSet__SplayTree_IterableMixin_SetMixin, P.SetMixin);
    _mixin(P._UnmodifiableMapView_MapView__UnmodifiableMapMixin, P._UnmodifiableMapMixin);
    _mixin(W._CssStyleDeclaration_Interceptor_CssStyleDeclarationBase, W.CssStyleDeclarationBase);
    _mixin(W._DomRectList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._DomRectList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._DomStringList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._DomStringList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._FileList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._FileList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._HtmlCollection_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._MidiInputMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._MidiOutputMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._MimeTypeArray_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._MimeTypeArray_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._NodeList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._PluginArray_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._PluginArray_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._RtcStatsReport_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._SourceBufferList_EventTarget_ListMixin, P.ListMixin);
    _mixin(W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._SpeechGrammarList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._SpeechGrammarList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._Storage_Interceptor_MapMixin, P.MapMixin);
    _mixin(W._TextTrackCueList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._TextTrackCueList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._TextTrackList_EventTarget_ListMixin, P.ListMixin);
    _mixin(W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W._TouchList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W._TouchList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__CssRuleList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__CssRuleList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__GamepadList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__GamepadList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__NamedNodeMap_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__SpeechRecognitionResultList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__SpeechRecognitionResultList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(W.__StyleSheetList_Interceptor_ListMixin, P.ListMixin);
    _mixin(W.__StyleSheetList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._JsArray_JsObject_ListMixin, P.ListMixin);
    _mixin(P._LengthList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._LengthList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._NumberList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._NumberList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._StringList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._StringList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._TransformList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._TransformList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(P._AudioParamMap_Interceptor_MapMixin, P.MapMixin);
    _mixin(P._SqlResultSetRowList_Interceptor_ListMixin, P.ListMixin);
    _mixin(P._SqlResultSetRowList_Interceptor_ListMixin_ImmutableListMixin, W.ImmutableListMixin);
    _mixin(A._DomProps_UiProps_DomPropsMixin, Q.DomPropsMixin);
    _mixin(A._DomProps_UiProps_DomPropsMixin_GeneratedClass, B.GeneratedClass);
    _mixin(A._SvgProps_UiProps_DomPropsMixin, Q.DomPropsMixin);
    _mixin(A._SvgProps_UiProps_DomPropsMixin_SvgPropsMixin, Q.SvgPropsMixin);
    _mixin(A._SvgProps_UiProps_DomPropsMixin_SvgPropsMixin_GeneratedClass, B.GeneratedClass);
    _mixin(S._ResizeSensorComponent_UiComponent__SafeAnimationFrameMixin, S._SafeAnimationFrameMixin);
    _mixin(S._ResizeSensorPropsMixinMapView_MapView_ResizeSensorPropsMixin, S.ResizeSensorPropsMixin);
    _mixin(S.__$$ResizeSensorProps__$ResizeSensorProps__$ResizeSensorPropsAccessorsMixin, S._$ResizeSensorPropsAccessorsMixin);
    _mixin(S.__$ResizeSensorProps_UiProps_ResizeSensorPropsMixin, S.ResizeSensorPropsMixin);
    _mixin(B._UiComponent_UiComponent_GeneratedClass, B.GeneratedClass);
    _mixin(B._UiProps_UiProps_GeneratedClass, B.GeneratedClass);
    _mixin(B._UiState_UiState_GeneratedClass, B.GeneratedClass);
    _mixin(B._UiStatefulComponent_UiStatefulComponent_GeneratedClass, B.GeneratedClass);
    _mixin(S._UiProps_MapBase_MapViewMixin, S.MapViewMixin);
    _mixin(S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin, S.PropsMapViewMixin);
    _mixin(S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin, Q.ReactPropsMixin);
    _mixin(S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin_UbiquitousDomPropsMixin, Q.UbiquitousDomPropsMixin);
    _mixin(S._UiProps_MapBase_MapViewMixin_PropsMapViewMixin_ReactPropsMixin_UbiquitousDomPropsMixin_CssClassPropsMixin, S.CssClassPropsMixin);
    _mixin(S._UiState_Object_MapViewMixin, S.MapViewMixin);
    _mixin(S._UiState_Object_MapViewMixin_StateMapViewMixin, S.StateMapViewMixin);
    _mixin(S._CssClassPropsMapView_MapView_CssClassPropsMixin, S.CssClassPropsMixin);
    _mixin(V.__$$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsProps__$ReactAlgorithmSettingsPropsAccessorsMixin, V._$ReactAlgorithmSettingsPropsAccessorsMixin);
    _mixin(B.__$$ReactArrowProps__$ReactArrowProps__$ReactArrowPropsAccessorsMixin, B._$ReactArrowPropsAccessorsMixin);
    _mixin(U.__$$ReactDropDownProps__$ReactDropDownProps__$ReactDropDownPropsAccessorsMixin, U._$ReactDropDownPropsAccessorsMixin);
    _mixin(U.__$$ReactDropDownState__$ReactDropDownState__$ReactDropDownStateAccessorsMixin, U._$ReactDropDownStateAccessorsMixin);
    _mixin(Y.__$$ReactExplanationPartProps__$ReactExplanationPartProps__$ReactExplanationPartPropsAccessorsMixin, Y._$ReactExplanationPartPropsAccessorsMixin);
    _mixin(D.__$$ReactGridProps__$ReactGridProps__$ReactGridPropsAccessorsMixin, D._$ReactGridPropsAccessorsMixin);
    _mixin(O.__$$ReactGridSettingsProps__$ReactGridSettingsProps__$ReactGridSettingsPropsAccessorsMixin, O._$ReactGridSettingsPropsAccessorsMixin);
    _mixin(K.__$$ReactHistoryProps__$ReactHistoryProps__$ReactHistoryPropsAccessorsMixin, K._$ReactHistoryPropsAccessorsMixin);
    _mixin(O.__$$ReactMainProps__$ReactMainProps__$ReactMainPropsAccessorsMixin, O._$ReactMainPropsAccessorsMixin);
    _mixin(V.__$$ReactNodeProps__$ReactNodeProps__$ReactNodePropsAccessorsMixin, V._$ReactNodePropsAccessorsMixin);
    _mixin(V.__$$ReactNodeState__$ReactNodeState__$ReactNodeStateAccessorsMixin, V._$ReactNodeStateAccessorsMixin);
    _mixin(G.__$$ReactNodePartProps__$ReactNodePartProps__$ReactNodePartPropsAccessorsMixin, G._$ReactNodePartPropsAccessorsMixin);
    _mixin(G.__$$ReactNodePartState__$ReactNodePartState__$ReactNodePartStateAccessorsMixin, G._$ReactNodePartStateAccessorsMixin);
    _mixin(Q.__$$ReactPathsProps__$ReactPathsProps__$ReactPathsPropsAccessorsMixin, Q._$ReactPathsPropsAccessorsMixin);
    _mixin(F.__$$ReactPopoverProps__$ReactPopoverProps__$ReactPopoverPropsAccessorsMixin, F._$ReactPopoverPropsAccessorsMixin);
  })();
  var init = {mangledGlobalNames: {int: "int", double: "double", num: "num", String: "String", bool: "bool", Null: "Null", List: "List"}, mangledNames: {}, getTypeFromName: getGlobalFromName, metadata: [], types: [{func: 1, ret: P.Null}, {func: 1, ret: -1}, {func: 1, ret: -1, args: [V.SyntheticMouseEvent]}, {func: 1, args: [,]}, {func: 1, ret: P.Null, args: [,]}, {func: 1, ret: P.Null, args: [,,]}, {func: 1, ret: -1, args: [P.String,,]}, {func: 1, ret: P.String, args: [,]}, {func: 1, ret: K.PathHighlight, args: [E.Position]}, {func: 1, ret: [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]], args: [E.Position]}, {func: 1, ret: P.bool, args: [E.Position]}, {func: 1, ret: P.bool, args: [K.Highlight]}, {func: 1, ret: P.bool, args: [O.Direction]}, {func: 1, ret: -1, args: [V.Component]}, {func: 1, ret: -1, args: [E.Position]}, {func: 1, ret: P.bool, args: [,]}, {func: 1, ret: P.bool, args: [P.String]}, {func: 1, ret: T.Version, args: [G.NavigatorProvider]}, {func: 1, ret: P.bool, args: [G.NavigatorProvider]}, {func: 1, ret: [P.List, K.Highlight]}, {func: 1, ret: P.String, args: [P.String]}, {func: 1, ret: K.PathHighlight, args: [O.Direction]}, {func: 1, ret: -1, args: [P.String]}, {func: 1, ret: K.ReactElement, args: [P.int]}, {func: 1, ret: P.Null, args: [[P.Iterable, P.String]]}, {func: 1, ret: P.bool, args: [E.Position, O.Direction]}, {func: 1, ret: P.Null, args: [P.String,,]}, {func: 1, ret: P.bool, args: [E.DirectedJumpPointSearchDataSignpost]}, {func: 1, ret: P.Null, args: [W.MouseEvent]}, {func: 1, ret: P.bool}, {func: 1, ret: -1, args: [{func: 1, ret: -1}]}, {func: 1, ret: E.Position, args: [E.Position, E.Position]}, {func: 1, ret: -1, args: [P.String, P.String]}, {func: 1, ret: -1, args: [,]}, {func: 1, args: [P.String]}, {func: 1, ret: P.Null, args: [E.Position]}, {func: 1, ret: [P.Iterable, K.PathHighlight], args: [E.Position]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1}]}, {func: 1, ret: E.Position, args: [P.int]}, {func: 1, ret: P.String, args: [P.int]}, {func: 1, ret: E.Position, args: [O.Direction]}, {func: 1, ret: -1, args: [[P.Iterable, P.String]]}, {func: 1, args: [, P.String]}, {func: 1, ret: P.Null, args: [P.String, P.String]}, {func: 1, ret: P.String, args: [E.Position]}, {func: 1, ret: P.Null, args: [V.SyntheticMouseEvent]}, {func: 1, ret: P.Null, args: [P.String]}, {func: 1, ret: -1, args: [N.MouseMode]}, {func: 1, ret: -1, args: [V.Component, K.InteropContextValue]}, {func: 1, ret: K.PathHighlight, args: [K.Highlight]}, {func: 1, ret: K.ReactElement, args: [K.PathHighlight]}, {func: 1, ret: P.Null, args: [W.Event]}, {func: 1, ret: -1, args: [[S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]]}, {func: 1, ret: [P.Map,,,], args: [,]}, {func: 1, ret: O.Direction, args: [,]}, {func: 1, ret: P.Null, args: [[P.Iterable,,]]}, {func: 1, ret: P.Null, args: [Q.SyntheticEvent0], opt: [,,]}, {func: 1, ret: {func: 1, args: [, P.String]}}, {func: 1, ret: {func: 1, args: [, P.String,,]}}, {func: 1, ret: [P.Map, P.String, P.Function]}, {func: 1, ret: P.int, args: [P.int, P.Object]}, {func: 1, ret: M.AStar, args: [S.GridCache, E.Position, E.Position, R.Heuristic, P.int]}, {func: 1, ret: [P._Future,,], args: [,]}, {func: 1, ret: -1, args: [V.SyntheticEvent]}, {func: 1, ret: P.String}, {func: 1, ret: P.Null, args: [P.num]}, {func: 1, ret: P.bool, args: [P.bool]}, {func: 1, ret: P.String, args: [O.Direction]}, {func: 1, ret: -1, args: [P.Object]}, {func: 1, ret: S._$ResizeSensorComponent}, {func: 1, ret: [P.List, P.String], args: [S.ConsumedProps]}, {func: 1, ret: Z.Dijkstra, args: [S.GridCache, E.Position, E.Position, R.Heuristic, P.int]}, {func: 1, ret: E.DirectedJumpPointSearch, args: [S.GridCache, E.Position, E.Position, R.Heuristic, P.int]}, {func: 1, ret: P.Null, args: [S.ConsumedProps]}, {func: 1, ret: P.Null, args: [S.PropDescriptor]}, {func: 1, ret: P.Null, args: [P.Symbol0,,]}, {func: 1, ret: N.DirectedJumpPointSearchLookUp, args: [S.GridCache, E.Position, E.Position, R.Heuristic, P.int]}, {func: 1, ret: P.Null, args: [,], opt: [P.StackTrace]}, {func: 1, ret: E.DirectedJumpPointSearchPreCalculator, args: [S.GridCache, E.Position, E.Position, R.Heuristic, P.int]}, {func: 1, ret: -1, args: [P.int]}, {func: 1, ret: [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]], args: [O.Direction]}, {func: 1, ret: [P.List, [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], args: [O.Direction]}, {func: 1, ret: [P.List, [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], args: [E.Position]}, {func: 1, ret: [P.List, [S.Tuple2, [P.Iterable, K.Highlight], [P.Iterable, E.Position]]], args: [{func: 1, ret: P.bool, args: [E.DirectedJumpPointSearchDataSignpost]}]}, {func: 1, ret: [P.Iterable, [S.Tuple2, [P.List, K.DirectionTextHighlight], [P.List, E.Position]]], args: [E.Position]}, {func: 1, ret: [S.Tuple2, [P.List, K.DirectionTextHighlight], [P.List, E.Position]], args: [O.Direction]}, {func: 1, args: [W.Event]}, {func: 1, ret: [P.Iterable, K.Highlight], args: [[P.List, O.Direction]]}, {func: 1, ret: [P.List, K.PathHighlight], args: [O.Direction]}, {func: 1, ret: E.DirectedJumpPointSearchDataPoint, args: [E.Position]}, {func: 1, ret: E.DirectedJumpPointSearchDataSignpost, args: [O.Direction]}, {func: 1, ret: E.DirectedJumpPointSearchDataDirectionAdviser, args: [O.Direction]}, {func: 1, ret: P.double}, {func: 1, ret: [X.Optional, P.bool]}, {func: 1, ret: M.ExplanationPart, args: [,]}, {func: 1, ret: [P.Map,,,], args: [M.ExplanationPart]}, {func: 1, args: [,,]}, {func: 1, ret: [P.Map, O.Direction, P.bool], args: [E.Position]}, {func: 1, ret: P.JsFunction, args: [,]}, {func: 1, ret: [P.Map,,,], args: [K.Highlight]}, {func: 1, ret: K.Highlight, args: [[P.Map,,,]]}, {func: 1, ret: E.Position, args: [,]}, {func: 1, ret: [P.Map,,,], args: [E.Position]}, {func: 1, ret: [P.Iterable, K.Highlight], args: [O.Direction]}, {func: 1, ret: P.bool, args: [L.Browser]}, {func: 1, ret: O.NoAlgorithm, args: [S.GridCache, E.Position, E.Position, R.Heuristic, P.int]}, {func: 1, ret: L.Browser}, {func: 1, ret: P.Object, args: [P.String]}, {func: 1, ret: P.Null, args: [,], opt: [,]}, {func: 1, ret: G.AlgorithmType, args: [,]}, {func: 1, ret: G.HeuristicType, args: [,]}, {func: 1, ret: G.AlgorithmUpdateMode, args: [,]}, {func: 1, args: [K.ReactComponent]}, {func: 1, ret: V._$ReactAlgorithmSettingsComponent}, {func: 1, ret: K.ReactDartInteropStatics}, {func: 1, ret: B._$ReactArrowComponent}, {func: 1, ret: -1, args: [S.ResizeSensorEvent]}, {func: 1, ret: K.ReactElement, args: [,]}, {func: 1, ret: U._$ReactDropDownComponent}, {func: 1, ret: V.Component, args: [K.ReactComponent, K.ReactDartComponentInternal, K.InteropContextValue, K.ComponentStatics]}, {func: 1, ret: Y._$ReactExplanationPartComponent}, {func: 1, ret: V.Component}, {func: 1, ret: [X.Optional, N.MouseMode], args: [W.MouseEvent]}, {func: 1, ret: -1, args: [W.Event]}, {func: 1, ret: K.InteropContextValue, args: [V.Component]}, {func: 1, ret: D._$ReactGridComponent}, {func: 1, ret: G.GridMode, args: [,]}, {func: 1, ret: G.DirectionMode, args: [,]}, {func: 1, ret: G.DirectionalMode, args: [,]}, {func: 1, ret: G.CornerMode, args: [,]}, {func: 1, args: [V.SyntheticMouseEvent]}, {func: 1, ret: P.Null, args: [V.SyntheticFormEvent0]}, {func: 1, ret: P.Null, args: [W.ProgressEvent]}, {func: 1, ret: O._$ReactGridSettingsComponent}, {func: 1, ret: F._$$ReactPopoverProps, opt: [[P.Map,,,]]}, {func: 1, ret: K.ReactElement, args: [M.Explanation]}, {func: 1, ret: K.ReactElement, args: [M.ExplanationPart]}, {func: 1, ret: K._$ReactHistoryComponent}, {func: 1, ret: P.Null, args: [W.KeyboardEvent]}, {func: 1, ret: O._$ReactMainComponent}, {func: 1, ret: K.ReactElement, args: [O.Direction]}, {func: 1, ret: K.InteropContextValue}, {func: 1, ret: K.DirectionTextHighlight, args: [K.Highlight]}, {func: 1, ret: [P.JsArray,,], args: [,]}, {func: 1, ret: P.bool, args: [K.DirectionTextHighlight]}, {func: 1, ret: [P.Map,,,], args: [V.Component, K.ReactDartComponentInternal]}, {func: 1, ret: V._$ReactNodeComponent}, {func: 1, ret: G._$ReactNodePartComponent}, {func: 1, ret: Q._$ReactPathsComponent}, {func: 1, ret: F._$ReactPopoverComponent}, {func: 1, ret: P.JsObject, args: [,]}, {func: 1, ret: [P.Map, P.String, [P.List, K.Highlight]], args: [,]}, {func: 1, ret: -1, args: [V.Component, K.ReactDartComponentInternal, K.InteropContextValue]}, {func: 1, ret: -1, args: [K.Highlight]}, {func: 1, ret: P.int, args: [P.int]}, {func: 1, ret: [P.Iterable, E.Position], args: [P.int]}, {func: 1, ret: [P.Map,,,]}, {func: 1, ret: M.Explanation, args: [[P.Map,,,]]}, {func: 1, ret: [P.Map,,,], args: [M.Explanation]}, {func: 1, ret: [P.List, [P.Map,,,]]}, {func: 1, ret: P.bool, args: [V.Component, K.InteropContextValue]}, {func: 1, ret: P.bool, args: [{func: 1, ret: -1}]}, {func: 1, ret: P.Null, args: [{func: 1, ret: -1, args: [[P.Iterable, P.String]]}, [P.List, P.String]]}, {func: 1, ret: [P.List, {func: 1, ret: -1}]}, {func: 1, ret: P.bool, args: [P.String, [P.List, {func: 1, ret: -1}]]}, {func: 1, ret: P.String, args: [[P.Map,,,]]}, {func: 1, ret: [P.Map, P.String,,], args: [P.String]}, {func: 1, ret: -1, args: [W.MessageEvent]}, {func: 1, ret: P.String, args: [[P.Iterable, P.String]]}, {func: 1, ret: P.Null, args: [P.Timer]}, {func: 1, ret: -1, args: [V.Component, K.ReactDartComponentInternal]}, {func: 1, ret: P.int, args: [,,]}, {func: 1, ret: P.int, args: [[P.Comparable,,], [P.Comparable,,]]}, {func: 1, ret: P.Object, args: [,]}, {func: 1, ret: S._$$ResizeSensorProps, opt: [[P.Map,,,]]}, {func: 1, ret: P.String, args: [P.Object]}, {func: 1, args: [V.Component]}, {func: 1}, {func: 1, ret: [A.ReactDartComponentFactoryProxy, V.Component], args: [{func: 1, ret: V.Component}], opt: [[P.Iterable, P.String]]}, {func: 1, ret: V.SyntheticClipboardEvent0, args: [Q.SyntheticClipboardEvent]}, {func: 1, ret: V.SyntheticKeyboardEvent0, args: [Q.SyntheticKeyboardEvent]}, {func: 1, ret: V.SyntheticFocusEvent0, args: [Q.SyntheticFocusEvent]}, {func: 1, ret: V.SyntheticFormEvent0, args: [Q.SyntheticFormEvent]}, {func: 1, ret: V.SyntheticMouseEvent, args: [Q.SyntheticMouseEvent0]}, {func: 1, ret: V.SyntheticTouchEvent0, args: [Q.SyntheticTouchEvent]}, {func: 1, ret: V.SyntheticTransitionEvent0, args: [Q.SyntheticTransitionEvent]}, {func: 1, ret: V.SyntheticAnimationEvent0, args: [Q.SyntheticAnimationEvent]}, {func: 1, ret: V.SyntheticUIEvent, args: [Q.SyntheticUIEvent0]}, {func: 1, ret: V.SyntheticWheelEvent0, args: [Q.SyntheticWheelEvent]}, {func: 1, args: [, P.String,,]}, {func: 1, ret: K.ReactComponent, args: [K.ReactElement, W.Element]}, {func: 1, ret: V._$$ReactAlgorithmSettingsProps, opt: [[P.Map,,,]]}, {func: 1, ret: B._$$ReactArrowProps, opt: [[P.Map,,,]]}, {func: 1, ret: U._$$ReactDropDownProps, opt: [[P.Map,,,]]}, {func: 1, ret: Y._$$ReactExplanationPartProps, opt: [[P.Map,,,]]}, {func: 1, ret: D._$$ReactGridProps, opt: [[P.Map,,,]]}, {func: 1, ret: O._$$ReactGridSettingsProps, opt: [[P.Map,,,]]}, {func: 1, ret: K._$$ReactHistoryProps, opt: [[P.Map,,,]]}, {func: 1, ret: O._$$ReactMainProps, opt: [[P.Map,,,]]}, {func: 1, ret: V._$$ReactNodeProps, opt: [[P.Map,,,]]}, {func: 1, ret: G._$$ReactNodePartProps, opt: [[P.Map,,,]]}, {func: 1, ret: Q._$$ReactPathsProps, opt: [[P.Map,,,]]}, {func: 1, ret: P.int, args: [V.SyntheticMouseEvent]}], interceptorsByTag: null, leafTags: null};
  (function constants() {
    var makeConstList = hunkHelpers.makeConstList;
    C.CanvasElement_methods = W.CanvasElement.prototype;
    C.FileReader_methods = W.FileReader.prototype;
    C.Interceptor_methods = J.Interceptor.prototype;
    C.JSArray_methods = J.JSArray.prototype;
    C.JSDouble_methods = J.JSDouble.prototype;
    C.JSInt_methods = J.JSInt.prototype;
    C.JSNumber_methods = J.JSNumber.prototype;
    C.JSString_methods = J.JSString.prototype;
    C.JavaScriptFunction_methods = J.JavaScriptFunction.prototype;
    C.NativeFloat32List_methods = H.NativeFloat32List.prototype;
    C.PlainJavaScriptObject_methods = J.PlainJavaScriptObject.prototype;
    C.UnknownJavaScriptObject_methods = J.UnknownJavaScriptObject.prototype;
    C.Window_methods = W.Window.prototype;
    C.Worker_methods = W.Worker.prototype;
    C.AlgorithmType_0 = new G.AlgorithmType(0, "AlgorithmType.NO_ALGORITHM");
    C.AlgorithmType_1 = new G.AlgorithmType(1, "AlgorithmType.DIJKSTRA");
    C.AlgorithmType_2 = new G.AlgorithmType(2, "AlgorithmType.A_STAR");
    C.AlgorithmType_3 = new G.AlgorithmType(3, "AlgorithmType.DJPS");
    C.AlgorithmType_4 = new G.AlgorithmType(4, "AlgorithmType.DJPS_LU");
    C.AlgorithmType_5 = new G.AlgorithmType(5, "AlgorithmType.DJPS_PC");
    C.AlgorithmUpdateMode_0 = new G.AlgorithmUpdateMode(0, "AlgorithmUpdateMode.DURING_EDITING");
    C.AlgorithmUpdateMode_1 = new G.AlgorithmUpdateMode(1, "AlgorithmUpdateMode.AFTER_EDITING");
    C.AlgorithmUpdateMode_2 = new G.AlgorithmUpdateMode(2, "AlgorithmUpdateMode.MANUALLY");
    C.C_DefaultEquality = new U.DefaultEquality([P.Null]);
    C.C_EmptyIterator = new H.EmptyIterator([P.Null]);
    C.C_IterableEquality = new U.IterableEquality([null]);
    C.C_JS_CONST = function getTagFallback(o) {
  var s = Object.prototype.toString.call(o);
  return s.substring(8, s.length - 1);
};
    C.C_JS_CONST0 = function() {
  var toStringFunction = Object.prototype.toString;
  function getTag(o) {
    var s = toStringFunction.call(o);
    return s.substring(8, s.length - 1);
  }
  function getUnknownTag(object, tag) {
    if (/^HTML[A-Z].*Element$/.test(tag)) {
      var name = toStringFunction.call(object);
      if (name == "[object Object]") return null;
      return "HTMLElement";
    }
  }
  function getUnknownTagGenericBrowser(object, tag) {
    if (self.HTMLElement && object instanceof HTMLElement) return "HTMLElement";
    return getUnknownTag(object, tag);
  }
  function prototypeForTag(tag) {
    if (typeof window == "undefined") return null;
    if (typeof window[tag] == "undefined") return null;
    var constructor = window[tag];
    if (typeof constructor != "function") return null;
    return constructor.prototype;
  }
  function discriminator(tag) { return null; }
  var isBrowser = typeof navigator == "object";
  return {
    getTag: getTag,
    getUnknownTag: isBrowser ? getUnknownTagGenericBrowser : getUnknownTag,
    prototypeForTag: prototypeForTag,
    discriminator: discriminator };
};
    C.C_JS_CONST6 = function(getTagFallback) {
  return function(hooks) {
    if (typeof navigator != "object") return hooks;
    var ua = navigator.userAgent;
    if (ua.indexOf("DumpRenderTree") >= 0) return hooks;
    if (ua.indexOf("Chrome") >= 0) {
      function confirm(p) {
        return typeof window == "object" && window[p] && window[p].name == p;
      }
      if (confirm("Window") && confirm("HTMLElement")) return hooks;
    }
    hooks.getTag = getTagFallback;
  };
};
    C.C_JS_CONST1 = function(hooks) {
  if (typeof dartExperimentalFixupGetTag != "function") return hooks;
  hooks.getTag = dartExperimentalFixupGetTag(hooks.getTag);
};
    C.C_JS_CONST2 = function(hooks) {
  var getTag = hooks.getTag;
  var prototypeForTag = hooks.prototypeForTag;
  function getTagFixed(o) {
    var tag = getTag(o);
    if (tag == "Document") {
      if (!!o.xmlVersion) return "!Document";
      return "!HTMLDocument";
    }
    return tag;
  }
  function prototypeForTagFixed(tag) {
    if (tag == "Document") return null;
    return prototypeForTag(tag);
  }
  hooks.getTag = getTagFixed;
  hooks.prototypeForTag = prototypeForTagFixed;
};
    C.C_JS_CONST5 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Firefox") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "GeoGeolocation": "Geolocation",
    "Location": "!Location",
    "WorkerMessageEvent": "MessageEvent",
    "XMLDocument": "!Document"};
  function getTagFirefox(o) {
    var tag = getTag(o);
    return quickMap[tag] || tag;
  }
  hooks.getTag = getTagFirefox;
};
    C.C_JS_CONST4 = function(hooks) {
  var userAgent = typeof navigator == "object" ? navigator.userAgent : "";
  if (userAgent.indexOf("Trident/") == -1) return hooks;
  var getTag = hooks.getTag;
  var quickMap = {
    "BeforeUnloadEvent": "Event",
    "DataTransfer": "Clipboard",
    "HTMLDDElement": "HTMLElement",
    "HTMLDTElement": "HTMLElement",
    "HTMLPhraseElement": "HTMLElement",
    "Position": "Geoposition"
  };
  function getTagIE(o) {
    var tag = getTag(o);
    var newTag = quickMap[tag];
    if (newTag) return newTag;
    if (tag == "Object") {
      if (window.DataView && (o instanceof window.DataView)) return "DataView";
    }
    return tag;
  }
  function prototypeForTagIE(tag) {
    var constructor = window[tag];
    if (constructor == null) return null;
    return constructor.prototype;
  }
  hooks.getTag = getTagIE;
  hooks.prototypeForTag = prototypeForTagIE;
};
    C.C_JS_CONST3 = function(hooks) { return hooks; }
;
    C.C_JsonCodec = new P.JsonCodec();
    C.C_NotSpecified = new M.NotSpecified();
    C.C_NotSpecified0 = new V.NotSpecified0();
    C.C__RootZone = new P._RootZone();
    C.ComponentTypeMeta_false = new B.ComponentTypeMeta(false);
    C.CornerMode_0 = new G.CornerMode(0, "CornerMode.CROSS");
    C.CornerMode_1 = new G.CornerMode(1, "CornerMode.BYPASS");
    C.CountDirection_0 = new E.CountDirection("CountDirection.COUNT_UP");
    C.CountDirection_1 = new E.CountDirection("CountDirection.COUNT_DOWN");
    C.CountDirection_2 = new E.CountDirection("CountDirection.COUNT_ANY");
    C.DirectedJumpPointSearchDataPointDirectionType_0 = new E.DirectedJumpPointSearchDataPointDirectionType("DirectedJumpPointSearchDataPointDirectionType.WALL");
    C.DirectedJumpPointSearchDataPointDirectionType_1 = new E.DirectedJumpPointSearchDataPointDirectionType("DirectedJumpPointSearchDataPointDirectionType.JUMP_POINT");
    C.DirectedJumpPointSearchDataPointDirectionType_2 = new E.DirectedJumpPointSearchDataPointDirectionType("DirectedJumpPointSearchDataPointDirectionType.INTERMEDIATE_JUMP_POINT");
    C.DirectionMode_0 = new G.DirectionMode(0, "DirectionMode.ALL");
    C.DirectionMode_1 = new G.DirectionMode(1, "DirectionMode.ONLY_CARDINAL");
    C.DirectionMode_2 = new G.DirectionMode(2, "DirectionMode.ONLY_DIAGONAL");
    C.Direction_0 = new O.Direction(0, "Direction.NORTH");
    C.Direction_1 = new O.Direction(1, "Direction.NORTH_EAST");
    C.Direction_2 = new O.Direction(2, "Direction.EAST");
    C.Direction_3 = new O.Direction(3, "Direction.SOUTH_EAST");
    C.Direction_4 = new O.Direction(4, "Direction.SOUTH");
    C.Direction_5 = new O.Direction(5, "Direction.SOUTH_WEST");
    C.Direction_6 = new O.Direction(6, "Direction.WEST");
    C.Direction_7 = new O.Direction(7, "Direction.NORTH_WEST");
    C.DirectionalMode_0 = new G.DirectionalMode(0, "DirectionalMode.MONO");
    C.DirectionalMode_1 = new G.DirectionalMode(1, "DirectionalMode.BI");
    C.Duration_0 = new P.Duration(0);
    C.GridMode_0 = new G.GridMode(0, "GridMode.BASIC");
    C.GridMode_1 = new G.GridMode(1, "GridMode.ADVANCED");
    C.HeuristicType_0 = new G.HeuristicType(0, "HeuristicType.ZERO");
    C.HeuristicType_1 = new G.HeuristicType(1, "HeuristicType.CHEBYSHEV");
    C.HeuristicType_2 = new G.HeuristicType(2, "HeuristicType.EUCLIDEAN");
    C.HeuristicType_3 = new G.HeuristicType(3, "HeuristicType.OCTILE");
    C.HeuristicType_4 = new G.HeuristicType(4, "HeuristicType.MANHATTAN");
    C.JsonDecoder_null = new P.JsonDecoder(null);
    C.JsonEncoder_null = new P.JsonEncoder(null);
    C.List_0_0_0_0 = H.setRuntimeTypeInfo(makeConstList([0, 0, 0, 0]), [P.int]);
    C.PropDescriptor_u2C = new S.PropDescriptor("ReactGridProps.store");
    C.List_dkD = H.setRuntimeTypeInfo(makeConstList([C.PropDescriptor_u2C]), [S.PropDescriptor]);
    C.List_myB = H.setRuntimeTypeInfo(makeConstList(["ReactGridProps.store"]), [P.String]);
    C.PropsMeta_bV4 = new S.PropsMeta(C.List_dkD, C.List_myB);
    C.List_2bC = H.setRuntimeTypeInfo(makeConstList([C.PropsMeta_bV4]), [S.ConsumedProps]);
    C.PropDescriptor_ZUk = new S.PropDescriptor("ReactArrowProps.size");
    C.PropDescriptor_AKW = new S.PropDescriptor("ReactArrowProps.path");
    C.PropDescriptor_P2z = new S.PropDescriptor("ReactArrowProps.showStart");
    C.PropDescriptor_ASA = new S.PropDescriptor("ReactArrowProps.showEnd");
    C.PropDescriptor_jSf = new S.PropDescriptor("ReactArrowProps.startIntermediate");
    C.PropDescriptor_O5M = new S.PropDescriptor("ReactArrowProps.endIntermediate");
    C.PropDescriptor_OPy = new S.PropDescriptor("ReactArrowProps.wrap");
    C.List_Hx4 = H.setRuntimeTypeInfo(makeConstList([C.PropDescriptor_ZUk, C.PropDescriptor_AKW, C.PropDescriptor_P2z, C.PropDescriptor_ASA, C.PropDescriptor_jSf, C.PropDescriptor_O5M, C.PropDescriptor_OPy]), [S.PropDescriptor]);
    C.List_gsm = H.setRuntimeTypeInfo(makeConstList(["ReactArrowProps.size", "ReactArrowProps.path", "ReactArrowProps.showStart", "ReactArrowProps.showEnd", "ReactArrowProps.startIntermediate", "ReactArrowProps.endIntermediate", "ReactArrowProps.wrap"]), [P.String]);
    C.PropsMeta_f51 = new S.PropsMeta(C.List_Hx4, C.List_gsm);
    C.List_3CF = H.setRuntimeTypeInfo(makeConstList([C.PropsMeta_f51]), [S.ConsumedProps]);
    C.List_4j7 = H.setRuntimeTypeInfo(makeConstList([C.Direction_0, C.Direction_1, C.Direction_2, C.Direction_3, C.Direction_4, C.Direction_5, C.Direction_6, C.Direction_7]), [O.Direction]);
    C.List_9Ef = H.setRuntimeTypeInfo(makeConstList([C.Direction_0, C.Direction_2, C.Direction_4, C.Direction_6]), [O.Direction]);
    C.List_CornerMode_0_CornerMode_1 = H.setRuntimeTypeInfo(makeConstList([C.CornerMode_0, C.CornerMode_1]), [G.CornerMode]);
    C.List_GNx = H.setRuntimeTypeInfo(makeConstList(["cols", "rows", "size", "span", "start", "allowFullScreen", "async", "autoPlay", "checked", "controls", "defer", "disabled", "formNoValidate", "hidden", "loop", "multiple", "muted", "noValidate", "readOnly", "required", "seamless", "selected", "style", "className", "title", "id", "accept", "acceptCharset", "accessKey", "action", "allowTransparency", "alt", "autoComplete", "cellPadding", "cellSpacing", "charSet", "classID", "colSpan", "content", "contentEditable", "contextMenu", "coords", "crossOrigin", "data", "dateTime", "dir", "download", "draggable", "encType", "form", "frameBorder", "height", "href", "hrefLang", "htmlFor", "httpEquiv", "icon", "label", "lang", "list", "manifest", "max", "maxLength", "media", "mediaGroup", "method", "min", "name", "open", "pattern", "placeholder", "poster", "preload", "radioGroup", "rel", "role", "rowSpan", "sandbox", "scope", "scrolling", "shape", "sizes", "spellCheck", "src", "srcDoc", "srcSet", "step", "tabIndex", "target", "type", "useMap", "value", "width", "wmode", "onAnimationEnd", "onAnimationIteration", "onAnimationStart", "onCopy", "onCut", "onPaste", "onKeyDown", "onKeyPress", "onKeyUp", "onFocus", "onBlur", "onChange", "onInput", "onSubmit", "onReset", "onClick", "onContextMenu", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp", "onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart", "onTransitionEnd", "onScroll", "onWheel", "onCopyCapture", "onCutCapture", "onPasteCapture", "onKeyDownCapture", "onKeyPressCapture", "onKeyUpCapture", "onFocusCapture", "onBlurCapture", "onChangeCapture", "onInputCapture", "onSubmitCapture", "onResetCapture", "onClickCapture", "onContextMenuCapture", "onDoubleClickCapture", "onDragCapture", "onDragEndCapture", "onDragEnterCapture", "onDragExitCapture", "onDragLeaveCapture", "onDragOverCapture", "onDragStartCapture", "onDropCapture", "onMouseDownCapture", "onMouseEnterCapture", "onMouseLeaveCapture", "onMouseMoveCapture", "onMouseOutCapture", "onMouseOverCapture", "onMouseUpCapture", "onTouchCancelCapture", "onTouchEndCapture", "onTouchMoveCapture", "onTouchStartCapture", "onScrollCapture", "onWheelCapture", "defaultChecked", "defaultValue", "autoFocus"]), [P.String]);
    C.List_GRf = H.setRuntimeTypeInfo(makeConstList([C.HeuristicType_0, C.HeuristicType_1, C.HeuristicType_2, C.HeuristicType_3, C.HeuristicType_4]), [G.HeuristicType]);
    C.List_GridMode_0_GridMode_1 = H.setRuntimeTypeInfo(makeConstList([C.GridMode_0, C.GridMode_1]), [G.GridMode]);
    C.PropDescriptor_TDs = new S.PropDescriptor("ReactGridSettingsProps.store");
    C.PropDescriptor_gg9 = new S.PropDescriptor("ReactGridSettingsProps.download");
    C.PropDescriptor_eDa = new S.PropDescriptor("ReactGridSettingsProps.load");
    C.List_gkc = H.setRuntimeTypeInfo(makeConstList([C.PropDescriptor_TDs, C.PropDescriptor_gg9, C.PropDescriptor_eDa]), [S.PropDescriptor]);
    C.List_A6W = H.setRuntimeTypeInfo(makeConstList(["ReactGridSettingsProps.store", "ReactGridSettingsProps.download", "ReactGridSettingsProps.load"]), [P.String]);
    C.PropsMeta_Kl9 = new S.PropsMeta(C.List_gkc, C.List_A6W);
    C.List_LNi = H.setRuntimeTypeInfo(makeConstList([C.PropsMeta_Kl9]), [S.ConsumedProps]);
    C.List_MhI = H.setRuntimeTypeInfo(makeConstList([C.AlgorithmType_0, C.AlgorithmType_1, C.AlgorithmType_2, C.AlgorithmType_3, C.AlgorithmType_4, C.AlgorithmType_5]), [G.AlgorithmType]);
    C.List_O1c = H.setRuntimeTypeInfo(makeConstList([C.Direction_1, C.Direction_3, C.Direction_5, C.Direction_7]), [O.Direction]);
    C.List_ORa = H.setRuntimeTypeInfo(makeConstList([C.AlgorithmUpdateMode_0, C.AlgorithmUpdateMode_1, C.AlgorithmUpdateMode_2]), [G.AlgorithmUpdateMode]);
    C.PropDescriptor_A4L = new S.PropDescriptor("ReactNodeProps.store");
    C.PropDescriptor_iyx = new S.PropDescriptor("ReactNodeProps.grid");
    C.PropDescriptor_92N = new S.PropDescriptor("ReactNodeProps.position");
    C.List_qd9 = H.setRuntimeTypeInfo(makeConstList([C.PropDescriptor_A4L, C.PropDescriptor_iyx, C.PropDescriptor_92N]), [S.PropDescriptor]);
    C.List_ndA = H.setRuntimeTypeInfo(makeConstList(["ReactNodeProps.store", "ReactNodeProps.grid", "ReactNodeProps.position"]), [P.String]);
    C.PropsMeta_uQ3 = new S.PropsMeta(C.List_qd9, C.List_ndA);
    C.List_OvN = H.setRuntimeTypeInfo(makeConstList([C.PropsMeta_uQ3]), [S.ConsumedProps]);
    C.List_Ql0 = H.setRuntimeTypeInfo(makeConstList([C.DirectionMode_0, C.DirectionMode_1, C.DirectionMode_2]), [G.DirectionMode]);
    C.PropDescriptor_Gw8 = new S.PropDescriptor("ReactPathsProps.store");
    C.List_6xV = H.setRuntimeTypeInfo(makeConstList([C.PropDescriptor_Gw8]), [S.PropDescriptor]);
    C.List_33r = H.setRuntimeTypeInfo(makeConstList(["ReactPathsProps.store"]), [P.String]);
    C.PropsMeta_chs = new S.PropsMeta(C.List_6xV, C.List_33r);
    C.List_RHh = H.setRuntimeTypeInfo(makeConstList([C.PropsMeta_chs]), [S.ConsumedProps]);
    C.PropDescriptor_NMh = new S.PropDescriptor("ReactHistoryProps.store");
    C.List_sMI = H.setRuntimeTypeInfo(makeConstList([C.PropDescriptor_NMh]), [S.PropDescriptor]);
    C.List_qB2 = H.setRuntimeTypeInfo(makeConstList(["ReactHistoryProps.store"]), [P.String]);
    C.PropsMeta_j7r = new S.PropsMeta(C.List_sMI, C.List_qB2);
    C.List_Uvc = H.setRuntimeTypeInfo(makeConstList([C.PropsMeta_j7r]), [S.ConsumedProps]);
    C.List_WPn = H.setRuntimeTypeInfo(makeConstList([C.DirectionalMode_0, C.DirectionalMode_1]), [G.DirectionalMode]);
    C.PropDescriptor_Q1S = new S.PropDescriptor("ReactNodePartProps.store");
    C.PropDescriptor_4eY = new S.PropDescriptor("ReactNodePartProps.grid");
    C.PropDescriptor_MhD = new S.PropDescriptor("ReactNodePartProps.direction");
    C.PropDescriptor_ckG = new S.PropDescriptor("ReactNodePartProps.directionTextHighlight");
    C.PropDescriptor_kEm = new S.PropDescriptor("ReactNodePartProps.position");
    C.List_QNy = H.setRuntimeTypeInfo(makeConstList([C.PropDescriptor_Q1S, C.PropDescriptor_4eY, C.PropDescriptor_MhD, C.PropDescriptor_ckG, C.PropDescriptor_kEm]), [S.PropDescriptor]);
    C.List_qYw = H.setRuntimeTypeInfo(makeConstList(["ReactNodePartProps.store", "ReactNodePartProps.grid", "ReactNodePartProps.direction", "ReactNodePartProps.directionTextHighlight", "ReactNodePartProps.position"]), [P.String]);
    C.PropsMeta_izR = new S.PropsMeta(C.List_QNy, C.List_qYw);
    C.List_alK = H.setRuntimeTypeInfo(makeConstList([C.PropsMeta_izR]), [S.ConsumedProps]);
    C.PropDescriptor_fVU = new S.PropDescriptor("ReactExplanationPartProps.explanationPart");
    C.PropDescriptor_c2q = new S.PropDescriptor("ReactExplanationPartProps.store");
    C.List_anX = H.setRuntimeTypeInfo(makeConstList([C.PropDescriptor_fVU, C.PropDescriptor_c2q]), [S.PropDescriptor]);
    C.List_46y = H.setRuntimeTypeInfo(makeConstList(["ReactExplanationPartProps.explanationPart", "ReactExplanationPartProps.store"]), [P.String]);
    C.PropsMeta_7xV = new S.PropsMeta(C.List_anX, C.List_46y);
    C.List_ato = H.setRuntimeTypeInfo(makeConstList([C.PropsMeta_7xV]), [S.ConsumedProps]);
    C.List_empty1 = H.setRuntimeTypeInfo(makeConstList([]), [[P.List, P.String]]);
    C.List_empty2 = H.setRuntimeTypeInfo(makeConstList([]), [K.PathHighlight]);
    C.List_empty0 = H.setRuntimeTypeInfo(makeConstList([]), [P.String]);
    C.List_empty = makeConstList([]);
    C.PropDescriptor_2jN = new S.PropDescriptor("ReactMainProps.store");
    C.List_Vyt = H.setRuntimeTypeInfo(makeConstList([C.PropDescriptor_2jN]), [S.PropDescriptor]);
    C.List_8Gl = H.setRuntimeTypeInfo(makeConstList(["ReactMainProps.store"]), [P.String]);
    C.PropsMeta_c0B = new S.PropsMeta(C.List_Vyt, C.List_8Gl);
    C.List_hn0 = H.setRuntimeTypeInfo(makeConstList([C.PropsMeta_c0B]), [S.ConsumedProps]);
    C.PropDescriptor_KDB = new S.PropDescriptor("ReactPopoverProps.popover");
    C.PropDescriptor_Mup = new S.PropDescriptor("ReactPopoverProps.html");
    C.List_JfL = H.setRuntimeTypeInfo(makeConstList([C.PropDescriptor_KDB, C.PropDescriptor_Mup]), [S.PropDescriptor]);
    C.List_CZB = H.setRuntimeTypeInfo(makeConstList(["ReactPopoverProps.popover", "ReactPopoverProps.html"]), [P.String]);
    C.PropsMeta_NMc = new S.PropsMeta(C.List_JfL, C.List_CZB);
    C.List_qHn = H.setRuntimeTypeInfo(makeConstList([C.PropsMeta_NMc]), [S.ConsumedProps]);
    C.List_empty3 = H.setRuntimeTypeInfo(makeConstList([]), [S.PropDescriptor]);
    C.PropsMeta_List_empty_List_empty = new S.PropsMeta(C.List_empty3, C.List_empty0);
    C.List_qx4 = H.setRuntimeTypeInfo(makeConstList([C.PropsMeta_List_empty_List_empty]), [S.ConsumedProps]);
    C.PropDescriptor_KdZ = new S.PropDescriptor("ReactAlgorithmSettingsProps.store");
    C.List_vxt = H.setRuntimeTypeInfo(makeConstList([C.PropDescriptor_KdZ]), [S.PropDescriptor]);
    C.List_8kG = H.setRuntimeTypeInfo(makeConstList(["ReactAlgorithmSettingsProps.store"]), [P.String]);
    C.PropsMeta_FZG = new S.PropsMeta(C.List_vxt, C.List_8kG);
    C.List_uMI = H.setRuntimeTypeInfo(makeConstList([C.PropsMeta_FZG]), [S.ConsumedProps]);
    C.List_uRr = H.setRuntimeTypeInfo(makeConstList(["clipPath", "cx", "cy", "d", "dx", "dy", "fill", "fillOpacity", "fontFamily", "fontSize", "fx", "fy", "gradientTransform", "gradientUnits", "markerEnd", "markerMid", "markerStart", "offset", "opacity", "patternContentUnits", "patternUnits", "points", "preserveAspectRatio", "r", "rx", "ry", "spreadMethod", "stopColor", "stopOpacity", "stroke", "strokeDasharray", "strokeLinecap", "strokeOpacity", "strokeWidth", "textAnchor", "transform", "version", "viewBox", "x1", "x2", "x", "xlinkActuate", "xlinkArcrole", "xlinkHref", "xlinkRole", "xlinkShow", "xlinkTitle", "xlinkType", "xmlBase", "xmlLang", "xmlSpace", "y1", "y2", "y"]), [P.String]);
    C.PropDescriptor_y94 = new S.PropDescriptor("ReactDropDownProps.value");
    C.PropDescriptor_0 = new S.PropDescriptor("ReactDropDownProps.values");
    C.PropDescriptor_Eht = new S.PropDescriptor("ReactDropDownProps.selectListener");
    C.PropDescriptor_AoG = new S.PropDescriptor("ReactDropDownProps.getTitle");
    C.List_C9E = H.setRuntimeTypeInfo(makeConstList([C.PropDescriptor_y94, C.PropDescriptor_0, C.PropDescriptor_Eht, C.PropDescriptor_AoG]), [S.PropDescriptor]);
    C.List_pkC = H.setRuntimeTypeInfo(makeConstList(["ReactDropDownProps.value", "ReactDropDownProps.values", "ReactDropDownProps.selectListener", "ReactDropDownProps.getTitle"]), [P.String]);
    C.PropsMeta_4ys = new S.PropsMeta(C.List_C9E, C.List_pkC);
    C.List_xw8 = H.setRuntimeTypeInfo(makeConstList([C.PropsMeta_4ys]), [S.ConsumedProps]);
    C.List_GRg = H.setRuntimeTypeInfo(makeConstList(["position", "top", "right", "bottom", "left", "overflow", "zIndex", "visibility", "opacity"]), [P.String]);
    C.Map_GRi8C = new H.ConstantStringMap(9, {position: "absolute", top: "0", right: "0", bottom: "0", left: "0", overflow: "scroll", zIndex: "-1", visibility: "hidden", opacity: "0"}, C.List_GRg, [P.String, null]);
    C.Map_GRpSQ = new H.ConstantStringMap(9, {position: "absolute", top: "-100px", right: "-100px", bottom: "-100px", left: "-100px", overflow: "scroll", zIndex: "-1", visibility: "hidden", opacity: "0"}, C.List_GRg, [P.String, null]);
    C.List_Ovx = H.setRuntimeTypeInfo(makeConstList(["position", "top", "left", "width", "height", "visibility", "opacity"]), [P.String]);
    C.Map_OvssO = new H.ConstantStringMap(7, {position: "absolute", top: "0", left: "0", width: "200%", height: "200%", visibility: "hidden", opacity: "0"}, C.List_Ovx, [P.String, null]);
    C.Map_empty0 = new H.ConstantStringMap(0, {}, C.List_empty0, [P.String, null]);
    C.List_empty4 = H.setRuntimeTypeInfo(makeConstList([]), [P.Symbol0]);
    C.Map_empty = new H.ConstantStringMap(0, {}, C.List_empty4, [P.Symbol0, null]);
    C.List_ivT = H.setRuntimeTypeInfo(makeConstList(["position", "flex", "msFlex", "display", "minHeight"]), [P.String]);
    C.Map_ivZZu = new H.ConstantStringMap(5, {position: "relative", flex: "1 1 0%", msFlex: "1 1 0%", display: "block", minHeight: "0"}, C.List_ivT, [P.String, null]);
    C.List_position_height_width = H.setRuntimeTypeInfo(makeConstList(["position", "height", "width"]), [P.String]);
    C.Map_sBqpm = new H.ConstantStringMap(3, {position: "relative", height: "100%", width: "100%"}, C.List_position_height_width, [P.String, null]);
    C.List_vdZ = H.setRuntimeTypeInfo(makeConstList(["position", "top", "left", "visibility", "width", "height", "opacity"]), [P.String]);
    C.Map_vdwMy = new H.ConstantStringMap(7, {position: "absolute", top: "0", left: "0", visibility: "hidden", width: 100000, height: 100000, opacity: "0"}, C.List_vdZ, [P.String, null]);
    C.Optional_null = new X.Optional(null, [O.Direction]);
    C.Optional_null1 = new X.Optional(null, [N.MouseMode]);
    C.Optional_null3 = new X.Optional(null, [E.Position]);
    C.Optional_null2 = new X.Optional(null, [[S.Tuple2, E.Position, O.Direction]]);
    C.Optional_null0 = new X.Optional(null, [P.bool]);
    C.StructureNodeType_0 = new N.StructureNodeType("StructureNodeType.START_NODE");
    C.StructureNodeType_1 = new N.StructureNodeType("StructureNodeType.TARGET_NODE");
    C.StructureNodeType_2 = new N.StructureNodeType("StructureNodeType.NORMAL_NODE");
    C.Symbol_$defaultConsumedProps = new H.Symbol("$defaultConsumedProps");
    C.Symbol_call = new H.Symbol("call");
    C.Symbol_componentFactory = new H.Symbol("componentFactory");
    C.Symbol_props = new H.Symbol("props");
    C.Symbol_state = new H.Symbol("state");
    C.Symbol_typedPropsFactory = new H.Symbol("typedPropsFactory");
    C.Symbol_typedStateFactory = new H.Symbol("typedStateFactory");
    C.Type_23h = H.createRuntimeType(V.ReactAlgorithmSettingsComponent);
    C.Type_ReactArrowComponent_iq5 = H.createRuntimeType(B.ReactArrowComponent);
    C.Type_ReactDropDownComponent_88V = H.createRuntimeType(U.ReactDropDownComponent);
    C.Type_ReactGridComponent_HwE = H.createRuntimeType(D.ReactGridComponent);
    C.Type_ReactGridSettingsComponent_cQL = H.createRuntimeType(O.ReactGridSettingsComponent);
    C.Type_ReactHistoryComponent_DV7 = H.createRuntimeType(K.ReactHistoryComponent);
    C.Type_ReactMainComponent_IkU = H.createRuntimeType(O.ReactMainComponent);
    C.Type_ReactNodeComponent_3fz = H.createRuntimeType(V.ReactNodeComponent);
    C.Type_ReactNodePartComponent_M55 = H.createRuntimeType(G.ReactNodePartComponent);
    C.Type_ReactPathsComponent_8Gl = H.createRuntimeType(Q.ReactPathsComponent);
    C.Type_ReactPopoverComponent_yST = H.createRuntimeType(F.ReactPopoverComponent);
    C.Type_ResizeSensorComponent_Gnl = H.createRuntimeType(S.ResizeSensorComponent);
    C.Type_ZC3 = H.createRuntimeType(Y.ReactExplanationPartComponent);
  })();
  (function staticFields() {
    $.Closure_functionCounter = 0;
    $.BoundClosure_selfFieldNameCache = null;
    $.BoundClosure_receiverFieldNameCache = null;
    $._inTypeAssertion = false;
    $.getTagFunction = null;
    $.alternateTagFunction = null;
    $.prototypeForTagFunction = null;
    $.dispatchRecordsForInstanceTags = null;
    $.interceptorsForUncacheableTags = null;
    $.initNativeDispatchFlag = null;
    $._nextCallback = null;
    $._lastCallback = null;
    $._lastPriorityCallback = null;
    $._isInCallbackLoop = false;
    $.Zone__current = C.C__RootZone;
    $._toStringVisiting = [];
    $.Expando__keyCount = 0;
    $.ValidationUtil_WARNING_COUNT = 0;
    $.Browser_navigator = null;
    $._browser = null;
    $.div = null;
    $.input = null;
    $.label = null;
    $.g = null;
    $.polygon = null;
    $.polyline = null;
    $.svg = null;
    $.findDOMNode = null;
    $.ReactPopoverComponent_ids = 0;
    $.Save_colorBlocked = H.setRuntimeTypeInfo([0, 149, 255, 1], [P.int]);
    $.Save_colorUnblocked = H.setRuntimeTypeInfo([255, 255, 255, 1], [P.int]);
    $.Save_colorGrid = H.setRuntimeTypeInfo([200, 200, 200, 1], [P.int]);
    $.Save_colorSource = H.setRuntimeTypeInfo([47, 193, 60, 1], [P.int]);
    $.Save_colorTarget = H.setRuntimeTypeInfo([202, 4, 4, 1], [P.int]);
  })();
  (function lazyInitializers() {
    var _lazy = hunkHelpers.lazy;
    _lazy($, "DART_CLOSURE_PROPERTY_NAME", "$get$DART_CLOSURE_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartClosure");
    });
    _lazy($, "JS_INTEROP_INTERCEPTOR_TAG", "$get$JS_INTEROP_INTERCEPTOR_TAG", function() {
      return H.getIsolateAffinityTag("_$dart_js");
    });
    _lazy($, "TypeErrorDecoder_noSuchMethodPattern", "$get$TypeErrorDecoder_noSuchMethodPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_notClosurePattern", "$get$TypeErrorDecoder_notClosurePattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn({$method$: null,
        toString: function() {
          return "$receiver$";
        }
      }));
    });
    _lazy($, "TypeErrorDecoder_nullCallPattern", "$get$TypeErrorDecoder_nullCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralCallPattern", "$get$TypeErrorDecoder_nullLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          null.$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedCallPattern", "$get$TypeErrorDecoder_undefinedCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokeCallErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralCallPattern", "$get$TypeErrorDecoder_undefinedLiteralCallPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        var $argumentsExpr$ = '$arguments$';
        try {
          (void 0).$method$($argumentsExpr$);
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_nullPropertyPattern", "$get$TypeErrorDecoder_nullPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(null));
    });
    _lazy($, "TypeErrorDecoder_nullLiteralPropertyPattern", "$get$TypeErrorDecoder_nullLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          null.$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "TypeErrorDecoder_undefinedPropertyPattern", "$get$TypeErrorDecoder_undefinedPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(H.TypeErrorDecoder_provokePropertyErrorOn(void 0));
    });
    _lazy($, "TypeErrorDecoder_undefinedLiteralPropertyPattern", "$get$TypeErrorDecoder_undefinedLiteralPropertyPattern", function() {
      return H.TypeErrorDecoder_extractPattern(function() {
        try {
          (void 0).$method$;
        } catch (e) {
          return e.message;
        }
      }());
    });
    _lazy($, "_AsyncRun__scheduleImmediateClosure", "$get$_AsyncRun__scheduleImmediateClosure", function() {
      return P._AsyncRun__initializeScheduleImmediate();
    });
    _lazy($, "context", "$get$context", function() {
      return H.interceptedTypeCheck(P._wrapToDart(self), "$isJsObject");
    });
    _lazy($, "_DART_OBJECT_PROPERTY_NAME", "$get$_DART_OBJECT_PROPERTY_NAME", function() {
      return H.getIsolateAffinityTag("_$dart_dartObject");
    });
    _lazy($, "_dartProxyCtor", "$get$_dartProxyCtor", function() {
      return function DartObject(o) {
        this.o = o;
      };
    });
    _lazy($, "_wrapperStylesFlexContainer", "$get$_wrapperStylesFlexContainer", function() {
      return P.LinkedHashMap_LinkedHashMap$_literal(["position", "relative", "flex", "1 1 0%", "msFlex", "1 1 0%", "display", $.$get$_displayFlex(), "minHeight", "0"], P.String, null);
    });
    _lazy($, "_displayFlex", "$get$_displayFlex", function() {
      return new S.closure8().call$0();
    });
    _lazy($, "$ResizeSensorComponentFactory", "$get$$ResizeSensorComponentFactory", function() {
      return S.registerComponent(new S.closure7(), S.resize_sensor___$ResizeSensor$closure(), C.Type_ResizeSensorComponent_Gnl, "ResizeSensor", false, null);
    });
    _lazy($, "ResizeSensorPropsMixin_defaultProps", "$get$ResizeSensorPropsMixin_defaultProps", function() {
      var t1 = new S.ResizeSensorPropsMixinMapView(P.LinkedHashMap__makeEmpty());
      t1.set$isFlexChild(false);
      t1.get$props(t1).$indexSet(0, "ResizeSensorPropsMixin.isFlexContainer", false);
      t1.get$props(t1).$indexSet(0, "ResizeSensorPropsMixin.shrink", false);
      t1.get$props(t1).$indexSet(0, "ResizeSensorPropsMixin.quickMount", false);
      return t1;
    });
    _lazy($, "_typeAliasToFactory", "$get$_typeAliasToFactory", function() {
      return P.Expando$(null, [A.ReactDartComponentFactoryProxy, V.Component]);
    });
    _lazy($, "_validDomProps", "$get$_validDomProps", function() {
      var t1 = P.SplayTreeSet$(null);
      t1.addAll$1(0, C.List_GNx);
      t1.addAll$1(0, C.List_uRr);
      return t1;
    });
    _lazy($, "_canUseExpandoOnReactElement", "$get$_canUseExpandoOnReactElement", function() {
      return new F.closure11().call$0();
    });
    _lazy($, "_elementPropsCache", "$get$_elementPropsCache", function() {
      return H.boolConversionCheck($.$get$_canUseExpandoOnReactElement()) ? P.Expando$("_elementPropsCache", [P.UnmodifiableMapView,,,]) : null;
    });
    _lazy($, "Browser_UnknownBrowser", "$get$Browser_UnknownBrowser", function() {
      return L.Browser$("Unknown", null, null, null);
    });
    _lazy($, "Browser__knownBrowsers", "$get$Browser__knownBrowsers", function() {
      return H.setRuntimeTypeInfo([$.$get$chrome(), $.$get$firefox(), $.$get$safari(), $.$get$internetExplorer(), $.$get$wkWebView()], [L.Browser]);
    });
    _lazy($, "chrome", "$get$chrome", function() {
      return new L._Chrome(L.browser__Chrome__isChrome$closure(), L.browser__Chrome__getVersion$closure());
    });
    _lazy($, "firefox", "$get$firefox", function() {
      return new L._Firefox(L.browser__Firefox__isFirefox$closure(), L.browser__Firefox__getVersion$closure());
    });
    _lazy($, "safari", "$get$safari", function() {
      return new L._Safari(L.browser__Safari__isSafari$closure(), L.browser__Safari__getVersion$closure());
    });
    _lazy($, "internetExplorer", "$get$internetExplorer", function() {
      return new L._InternetExplorer(L.browser__InternetExplorer__isInternetExplorer$closure(), L.browser__InternetExplorer__getVersion$closure());
    });
    _lazy($, "wkWebView", "$get$wkWebView", function() {
      return new L._WKWebView(L.browser__WKWebView__isWKWebView$closure(), L.browser__WKWebView__getVersion$closure());
    });
    _lazy($, "registerComponent0", "$get$registerComponent", function() {
      return new V.closure0();
    });
    _lazy($, "emptyJsMap", "$get$emptyJsMap", function() {
      return {};
    });
    _lazy($, "_dartInteropStatics", "$get$_dartInteropStatics", function() {
      return new A.closure2().call$0();
    });
    _lazy($, "_originalEventHandlers", "$get$_originalEventHandlers", function() {
      return P.Expando$(null, P.Function);
    });
    _lazy($, "getProperty", "$get$getProperty", function() {
      return new R.closure10().call$0();
    });
    _lazy($, "setProperty", "$get$setProperty", function() {
      return new R.closure19().call$0();
    });
    _lazy($, "render", "$get$render", function() {
      return new R.closure1();
    });
    _lazy($, "isBugPresent", "$get$isBugPresent", function() {
      return new Z.closure20().call$0();
    });
    _lazy($, "eventPropKeyToEventFactory", "$get$eventPropKeyToEventFactory", function() {
      return new T.closure9().call$0();
    });
    _lazy($, "AStar_factory", "$get$AStar_factory", function() {
      return new M.AStar_closure();
    });
    _lazy($, "Dijkstra_factory", "$get$Dijkstra_factory", function() {
      return new Z.Dijkstra_closure();
    });
    _lazy($, "DirectedJumpPointSearch_factory", "$get$DirectedJumpPointSearch_factory", function() {
      return new E.DirectedJumpPointSearch_closure();
    });
    _lazy($, "DirectedJumpPointSearchLookUp_factory", "$get$DirectedJumpPointSearchLookUp_factory", function() {
      return new N.DirectedJumpPointSearchLookUp_closure();
    });
    _lazy($, "DirectedJumpPointSearchPreCalculator_factory", "$get$DirectedJumpPointSearchPreCalculator_factory", function() {
      return new E.DirectedJumpPointSearchPreCalculator_closure();
    });
    _lazy($, "Distance_INFINITY", "$get$Distance_INFINITY", function() {
      return X.Distance$(H.intTypeCast(P.pow(2, 53)), H.intTypeCast(P.pow(2, 53)));
    });
    _lazy($, "MouseTracker__tracker", "$get$MouseTracker__tracker", function() {
      return D.MouseTracker$();
    });
    _lazy($, "NoAlgorithm_factory", "$get$NoAlgorithm_factory", function() {
      return new O.NoAlgorithm_closure();
    });
    _lazy($, "$ReactAlgorithmSettingsComponentFactory", "$get$$ReactAlgorithmSettingsComponentFactory", function() {
      return S.registerComponent(new V.closure5(), V.ReactAlgorithmSettings___$ReactAlgorithmSettings$closure(), C.Type_23h, "ReactAlgorithmSettings", false, null);
    });
    _lazy($, "$ReactArrowComponentFactory", "$get$$ReactArrowComponentFactory", function() {
      return S.registerComponent(new B.closure15(), B.ReactArrow___$ReactArrow$closure(), C.Type_ReactArrowComponent_iq5, "ReactArrow", false, null);
    });
    _lazy($, "$ReactDropDownComponentFactory", "$get$$ReactDropDownComponentFactory", function() {
      return S.registerComponent(new U.closure6(), U.ReactDropDown___$ReactDropDown$closure(), C.Type_ReactDropDownComponent_88V, "ReactDropDown", false, null);
    });
    _lazy($, "$ReactExplanationPartComponentFactory", "$get$$ReactExplanationPartComponentFactory", function() {
      return S.registerComponent(new Y.closure4(), Y.ReactExplanationPart___$ReactExplanationPart$closure(), C.Type_ZC3, "ReactExplanationPart", false, null);
    });
    _lazy($, "$ReactGridComponentFactory", "$get$$ReactGridComponentFactory", function() {
      return S.registerComponent(new D.closure16(), D.ReactGrid___$ReactGrid$closure(), C.Type_ReactGridComponent_HwE, "ReactGrid", false, null);
    });
    _lazy($, "$ReactGridSettingsComponentFactory", "$get$$ReactGridSettingsComponentFactory", function() {
      return S.registerComponent(new O.closure13(), O.ReactGridSettings___$ReactGridSettings$closure(), C.Type_ReactGridSettingsComponent_cQL, "ReactGridSettings", false, null);
    });
    _lazy($, "$ReactHistoryComponentFactory", "$get$$ReactHistoryComponentFactory", function() {
      return S.registerComponent(new K.closure3(), K.ReactHistory___$ReactHistory$closure(), C.Type_ReactHistoryComponent_DV7, "ReactHistory", false, null);
    });
    _lazy($, "$ReactMainComponentFactory", "$get$$ReactMainComponentFactory", function() {
      return S.registerComponent(new O.closure(), O.ReactMain___$ReactMain$closure(), C.Type_ReactMainComponent_IkU, "ReactMain", false, null);
    });
    _lazy($, "$ReactNodeComponentFactory", "$get$$ReactNodeComponentFactory", function() {
      return S.registerComponent(new V.closure17(), V.ReactNode___$ReactNode$closure(), C.Type_ReactNodeComponent_3fz, "ReactNode", false, null);
    });
    _lazy($, "$ReactNodePartComponentFactory", "$get$$ReactNodePartComponentFactory", function() {
      return S.registerComponent(new G.closure18(), G.ReactNodePart___$ReactNodePart$closure(), C.Type_ReactNodePartComponent_M55, "ReactNodePart", false, null);
    });
    _lazy($, "$ReactPathsComponentFactory", "$get$$ReactPathsComponentFactory", function() {
      return S.registerComponent(new Q.closure14(), Q.ReactPaths___$ReactPaths$closure(), C.Type_ReactPathsComponent_8Gl, "ReactPaths", false, null);
    });
    _lazy($, "$ReactPopoverComponentFactory", "$get$$ReactPopoverComponentFactory", function() {
      return S.registerComponent(new F.closure12(), F.ReactPopover___$ReactPopover$closure(), C.Type_ReactPopoverComponent_yST, "ReactPopover", false, null);
    });
    _lazy($, "Save_scale", "$get$Save_scale", function() {
      return 28;
    });
    _lazy($, "Settings_maxSize", "$get$Settings_maxSize", function() {
      return F.Size$(50, 50);
    });
    _lazy($, "Settings_minSize", "$get$Settings_minSize", function() {
      return F.Size$(2, 2);
    });
  })();
  (function nativeSupport() {
    !function() {
      var intern = function(s) {
        var o = {};
        o[s] = 1;
        return Object.keys(hunkHelpers.convertToFastObject(o))[0];
      };
      init.getIsolateTag = function(name) {
        return intern("___dart_" + name + init.isolateTag);
      };
      var tableProperty = "___dart_isolate_tags_";
      var usedProperties = Object[tableProperty] || (Object[tableProperty] = Object.create(null));
      var rootProperty = "_ZxYxX";
      for (var i = 0;; i++) {
        var property = intern(rootProperty + "_" + i + "_");
        if (!(property in usedProperties)) {
          usedProperties[property] = 1;
          init.isolateTag = property;
          break;
        }
      }
      init.dispatchPropertyName = init.getIsolateTag("dispatch_record");
    }();
    hunkHelpers.setOrUpdateInterceptorsByTag({AnimationEffectReadOnly: J.Interceptor, AnimationEffectTiming: J.Interceptor, AnimationEffectTimingReadOnly: J.Interceptor, AnimationTimeline: J.Interceptor, AnimationWorkletGlobalScope: J.Interceptor, AuthenticatorAssertionResponse: J.Interceptor, AuthenticatorAttestationResponse: J.Interceptor, AuthenticatorResponse: J.Interceptor, BackgroundFetchFetch: J.Interceptor, BackgroundFetchManager: J.Interceptor, BackgroundFetchSettledFetch: J.Interceptor, BarProp: J.Interceptor, BarcodeDetector: J.Interceptor, Body: J.Interceptor, BudgetState: J.Interceptor, CacheStorage: J.Interceptor, CanvasGradient: J.Interceptor, CanvasPattern: J.Interceptor, Clients: J.Interceptor, CookieStore: J.Interceptor, Coordinates: J.Interceptor, CredentialUserData: J.Interceptor, CredentialsContainer: J.Interceptor, Crypto: J.Interceptor, CSS: J.Interceptor, CSSVariableReferenceValue: J.Interceptor, CustomElementRegistry: J.Interceptor, DeprecatedStorageInfo: J.Interceptor, DeprecatedStorageQuota: J.Interceptor, DeprecationReport: J.Interceptor, DetectedBarcode: J.Interceptor, DetectedFace: J.Interceptor, DetectedText: J.Interceptor, DeviceAcceleration: J.Interceptor, DeviceRotationRate: J.Interceptor, DirectoryEntry: J.Interceptor, DirectoryReader: J.Interceptor, DocumentOrShadowRoot: J.Interceptor, DocumentTimeline: J.Interceptor, DOMError: J.Interceptor, DOMImplementation: J.Interceptor, Iterator: J.Interceptor, DOMMatrix: J.Interceptor, DOMMatrixReadOnly: J.Interceptor, DOMParser: J.Interceptor, DOMPoint: J.Interceptor, DOMPointReadOnly: J.Interceptor, DOMQuad: J.Interceptor, DOMStringMap: J.Interceptor, Entry: J.Interceptor, External: J.Interceptor, FaceDetector: J.Interceptor, FileEntry: J.Interceptor, DOMFileSystem: J.Interceptor, FontFace: J.Interceptor, FontFaceSource: J.Interceptor, FormData: J.Interceptor, GamepadPose: J.Interceptor, Geolocation: J.Interceptor, Position: J.Interceptor, Headers: J.Interceptor, HTMLHyperlinkElementUtils: J.Interceptor, IdleDeadline: J.Interceptor, ImageBitmap: J.Interceptor, ImageBitmapRenderingContext: J.Interceptor, ImageCapture: J.Interceptor, InputDeviceCapabilities: J.Interceptor, IntersectionObserver: J.Interceptor, InterventionReport: J.Interceptor, KeyframeEffect: J.Interceptor, KeyframeEffectReadOnly: J.Interceptor, MediaCapabilities: J.Interceptor, MediaCapabilitiesInfo: J.Interceptor, MediaDeviceInfo: J.Interceptor, MediaError: J.Interceptor, MediaKeyStatusMap: J.Interceptor, MediaKeySystemAccess: J.Interceptor, MediaKeys: J.Interceptor, MediaKeysPolicy: J.Interceptor, MediaMetadata: J.Interceptor, MediaSession: J.Interceptor, MediaSettingsRange: J.Interceptor, MemoryInfo: J.Interceptor, MessageChannel: J.Interceptor, Metadata: J.Interceptor, MutationObserver: J.Interceptor, WebKitMutationObserver: J.Interceptor, NavigationPreloadManager: J.Interceptor, Navigator: J.Interceptor, NavigatorAutomationInformation: J.Interceptor, NavigatorConcurrentHardware: J.Interceptor, NavigatorCookies: J.Interceptor, NavigatorUserMediaError: J.Interceptor, NodeFilter: J.Interceptor, NodeIterator: J.Interceptor, NonDocumentTypeChildNode: J.Interceptor, NonElementParentNode: J.Interceptor, NoncedElement: J.Interceptor, OffscreenCanvasRenderingContext2D: J.Interceptor, OverconstrainedError: J.Interceptor, PaintRenderingContext2D: J.Interceptor, PaintSize: J.Interceptor, PaintWorkletGlobalScope: J.Interceptor, Path2D: J.Interceptor, PaymentAddress: J.Interceptor, PaymentInstruments: J.Interceptor, PaymentManager: J.Interceptor, PaymentResponse: J.Interceptor, PerformanceObserver: J.Interceptor, PerformanceObserverEntryList: J.Interceptor, PerformanceServerTiming: J.Interceptor, PerformanceTiming: J.Interceptor, Permissions: J.Interceptor, PhotoCapabilities: J.Interceptor, PositionError: J.Interceptor, Presentation: J.Interceptor, PresentationReceiver: J.Interceptor, PushManager: J.Interceptor, PushMessageData: J.Interceptor, PushSubscription: J.Interceptor, PushSubscriptionOptions: J.Interceptor, Range: J.Interceptor, RelatedApplication: J.Interceptor, ReportBody: J.Interceptor, ReportingObserver: J.Interceptor, ResizeObserver: J.Interceptor, RTCCertificate: J.Interceptor, RTCIceCandidate: J.Interceptor, mozRTCIceCandidate: J.Interceptor, RTCRtpContributingSource: J.Interceptor, RTCRtpReceiver: J.Interceptor, RTCRtpSender: J.Interceptor, RTCStatsResponse: J.Interceptor, Screen: J.Interceptor, ScrollState: J.Interceptor, ScrollTimeline: J.Interceptor, SharedArrayBuffer: J.Interceptor, SpeechRecognitionAlternative: J.Interceptor, SpeechSynthesisVoice: J.Interceptor, StaticRange: J.Interceptor, StorageManager: J.Interceptor, StylePropertyMap: J.Interceptor, StylePropertyMapReadonly: J.Interceptor, SyncManager: J.Interceptor, TextDetector: J.Interceptor, TextMetrics: J.Interceptor, TreeWalker: J.Interceptor, TrustedHTML: J.Interceptor, TrustedScriptURL: J.Interceptor, TrustedURL: J.Interceptor, UnderlyingSourceBase: J.Interceptor, URLSearchParams: J.Interceptor, VRCoordinateSystem: J.Interceptor, VRDisplayCapabilities: J.Interceptor, VREyeParameters: J.Interceptor, VRFrameData: J.Interceptor, VRFrameOfReference: J.Interceptor, VRPose: J.Interceptor, VRStageBounds: J.Interceptor, VRStageBoundsPoint: J.Interceptor, VRStageParameters: J.Interceptor, ValidityState: J.Interceptor, VideoPlaybackQuality: J.Interceptor, VideoTrack: J.Interceptor, VTTRegion: J.Interceptor, WorkletAnimation: J.Interceptor, WorkletGlobalScope: J.Interceptor, XPathEvaluator: J.Interceptor, XPathExpression: J.Interceptor, XPathNSResolver: J.Interceptor, XPathResult: J.Interceptor, XMLSerializer: J.Interceptor, XSLTProcessor: J.Interceptor, Bluetooth: J.Interceptor, BluetoothCharacteristicProperties: J.Interceptor, BluetoothRemoteGATTServer: J.Interceptor, BluetoothRemoteGATTService: J.Interceptor, BluetoothUUID: J.Interceptor, BudgetService: J.Interceptor, Cache: J.Interceptor, DOMFileSystemSync: J.Interceptor, DirectoryEntrySync: J.Interceptor, DirectoryReaderSync: J.Interceptor, EntrySync: J.Interceptor, FileEntrySync: J.Interceptor, FileReaderSync: J.Interceptor, FileWriterSync: J.Interceptor, HTMLAllCollection: J.Interceptor, Mojo: J.Interceptor, MojoHandle: J.Interceptor, MojoWatcher: J.Interceptor, NFC: J.Interceptor, PagePopupController: J.Interceptor, Request: J.Interceptor, Response: J.Interceptor, SubtleCrypto: J.Interceptor, USBAlternateInterface: J.Interceptor, USBConfiguration: J.Interceptor, USBDevice: J.Interceptor, USBEndpoint: J.Interceptor, USBInTransferResult: J.Interceptor, USBInterface: J.Interceptor, USBIsochronousInTransferPacket: J.Interceptor, USBIsochronousInTransferResult: J.Interceptor, USBIsochronousOutTransferPacket: J.Interceptor, USBIsochronousOutTransferResult: J.Interceptor, USBOutTransferResult: J.Interceptor, WorkerLocation: J.Interceptor, WorkerNavigator: J.Interceptor, Worklet: J.Interceptor, IDBFactory: J.Interceptor, IDBIndex: J.Interceptor, IDBObjectStore: J.Interceptor, IDBObserver: J.Interceptor, IDBObserverChanges: J.Interceptor, SVGAnimatedAngle: J.Interceptor, SVGAnimatedBoolean: J.Interceptor, SVGAnimatedInteger: J.Interceptor, SVGAnimatedLength: J.Interceptor, SVGAnimatedLengthList: J.Interceptor, SVGAnimatedNumber: J.Interceptor, SVGAnimatedNumberList: J.Interceptor, SVGAnimatedPreserveAspectRatio: J.Interceptor, SVGAnimatedRect: J.Interceptor, SVGAnimatedTransformList: J.Interceptor, SVGMatrix: J.Interceptor, SVGPoint: J.Interceptor, SVGPreserveAspectRatio: J.Interceptor, SVGRect: J.Interceptor, SVGUnitTypes: J.Interceptor, AudioListener: J.Interceptor, AudioTrack: J.Interceptor, AudioWorkletGlobalScope: J.Interceptor, AudioWorkletProcessor: J.Interceptor, PeriodicWave: J.Interceptor, ANGLEInstancedArrays: J.Interceptor, ANGLE_instanced_arrays: J.Interceptor, WebGLBuffer: J.Interceptor, WebGLCanvas: J.Interceptor, WebGLColorBufferFloat: J.Interceptor, WebGLCompressedTextureASTC: J.Interceptor, WebGLCompressedTextureATC: J.Interceptor, WEBGL_compressed_texture_atc: J.Interceptor, WebGLCompressedTextureETC1: J.Interceptor, WEBGL_compressed_texture_etc1: J.Interceptor, WebGLCompressedTextureETC: J.Interceptor, WebGLCompressedTexturePVRTC: J.Interceptor, WEBGL_compressed_texture_pvrtc: J.Interceptor, WebGLCompressedTextureS3TC: J.Interceptor, WEBGL_compressed_texture_s3tc: J.Interceptor, WebGLCompressedTextureS3TCsRGB: J.Interceptor, WebGLDebugRendererInfo: J.Interceptor, WEBGL_debug_renderer_info: J.Interceptor, WebGLDebugShaders: J.Interceptor, WEBGL_debug_shaders: J.Interceptor, WebGLDepthTexture: J.Interceptor, WEBGL_depth_texture: J.Interceptor, WebGLDrawBuffers: J.Interceptor, WEBGL_draw_buffers: J.Interceptor, EXTsRGB: J.Interceptor, EXT_sRGB: J.Interceptor, EXTBlendMinMax: J.Interceptor, EXT_blend_minmax: J.Interceptor, EXTColorBufferFloat: J.Interceptor, EXTColorBufferHalfFloat: J.Interceptor, EXTDisjointTimerQuery: J.Interceptor, EXTDisjointTimerQueryWebGL2: J.Interceptor, EXTFragDepth: J.Interceptor, EXT_frag_depth: J.Interceptor, EXTShaderTextureLOD: J.Interceptor, EXT_shader_texture_lod: J.Interceptor, EXTTextureFilterAnisotropic: J.Interceptor, EXT_texture_filter_anisotropic: J.Interceptor, WebGLFramebuffer: J.Interceptor, WebGLGetBufferSubDataAsync: J.Interceptor, WebGLLoseContext: J.Interceptor, WebGLExtensionLoseContext: J.Interceptor, WEBGL_lose_context: J.Interceptor, OESElementIndexUint: J.Interceptor, OES_element_index_uint: J.Interceptor, OESStandardDerivatives: J.Interceptor, OES_standard_derivatives: J.Interceptor, OESTextureFloat: J.Interceptor, OES_texture_float: J.Interceptor, OESTextureFloatLinear: J.Interceptor, OES_texture_float_linear: J.Interceptor, OESTextureHalfFloat: J.Interceptor, OES_texture_half_float: J.Interceptor, OESTextureHalfFloatLinear: J.Interceptor, OES_texture_half_float_linear: J.Interceptor, OESVertexArrayObject: J.Interceptor, OES_vertex_array_object: J.Interceptor, WebGLProgram: J.Interceptor, WebGLQuery: J.Interceptor, WebGLRenderbuffer: J.Interceptor, WebGLRenderingContext: J.Interceptor, WebGL2RenderingContext: J.Interceptor, WebGLSampler: J.Interceptor, WebGLShader: J.Interceptor, WebGLShaderPrecisionFormat: J.Interceptor, WebGLSync: J.Interceptor, WebGLTexture: J.Interceptor, WebGLTimerQueryEXT: J.Interceptor, WebGLTransformFeedback: J.Interceptor, WebGLUniformLocation: J.Interceptor, WebGLVertexArrayObject: J.Interceptor, WebGLVertexArrayObjectOES: J.Interceptor, WebGL: J.Interceptor, WebGL2RenderingContextBase: J.Interceptor, Database: J.Interceptor, SQLError: J.Interceptor, SQLResultSet: J.Interceptor, SQLTransaction: J.Interceptor, ArrayBuffer: H.NativeByteBuffer, ArrayBufferView: H.NativeTypedData, DataView: H.NativeByteData, Float32Array: H.NativeFloat32List, Float64Array: H.NativeFloat64List, Int16Array: H.NativeInt16List, Int32Array: H.NativeInt32List, Int8Array: H.NativeInt8List, Uint16Array: H.NativeUint16List, Uint32Array: H.NativeUint32List, Uint8ClampedArray: H.NativeUint8ClampedList, CanvasPixelArray: H.NativeUint8ClampedList, Uint8Array: H.NativeUint8List, HTMLAudioElement: W.HtmlElement, HTMLBRElement: W.HtmlElement, HTMLBodyElement: W.HtmlElement, HTMLContentElement: W.HtmlElement, HTMLDListElement: W.HtmlElement, HTMLDataListElement: W.HtmlElement, HTMLDetailsElement: W.HtmlElement, HTMLDialogElement: W.HtmlElement, HTMLDivElement: W.HtmlElement, HTMLHRElement: W.HtmlElement, HTMLHeadElement: W.HtmlElement, HTMLHeadingElement: W.HtmlElement, HTMLHtmlElement: W.HtmlElement, HTMLIFrameElement: W.HtmlElement, HTMLImageElement: W.HtmlElement, HTMLLabelElement: W.HtmlElement, HTMLLegendElement: W.HtmlElement, HTMLMapElement: W.HtmlElement, HTMLMediaElement: W.HtmlElement, HTMLMenuElement: W.HtmlElement, HTMLMetaElement: W.HtmlElement, HTMLModElement: W.HtmlElement, HTMLOptGroupElement: W.HtmlElement, HTMLParagraphElement: W.HtmlElement, HTMLPictureElement: W.HtmlElement, HTMLPreElement: W.HtmlElement, HTMLQuoteElement: W.HtmlElement, HTMLShadowElement: W.HtmlElement, HTMLSlotElement: W.HtmlElement, HTMLSpanElement: W.HtmlElement, HTMLTableCaptionElement: W.HtmlElement, HTMLTableCellElement: W.HtmlElement, HTMLTableDataCellElement: W.HtmlElement, HTMLTableHeaderCellElement: W.HtmlElement, HTMLTableColElement: W.HtmlElement, HTMLTableElement: W.HtmlElement, HTMLTableRowElement: W.HtmlElement, HTMLTableSectionElement: W.HtmlElement, HTMLTemplateElement: W.HtmlElement, HTMLTimeElement: W.HtmlElement, HTMLTitleElement: W.HtmlElement, HTMLTrackElement: W.HtmlElement, HTMLUListElement: W.HtmlElement, HTMLUnknownElement: W.HtmlElement, HTMLVideoElement: W.HtmlElement, HTMLDirectoryElement: W.HtmlElement, HTMLFontElement: W.HtmlElement, HTMLFrameElement: W.HtmlElement, HTMLFrameSetElement: W.HtmlElement, HTMLMarqueeElement: W.HtmlElement, HTMLElement: W.HtmlElement, AccessibleNode: W.AccessibleNode, AccessibleNodeList: W.AccessibleNodeList, HTMLAnchorElement: W.AnchorElement, HTMLAreaElement: W.AreaElement, HTMLBaseElement: W.BaseElement, Blob: W.Blob, BluetoothRemoteGATTDescriptor: W.BluetoothRemoteGattDescriptor, HTMLButtonElement: W.ButtonElement, HTMLCanvasElement: W.CanvasElement, CanvasRenderingContext2D: W.CanvasRenderingContext2D, CDATASection: W.CharacterData, Comment: W.CharacterData, Text: W.CharacterData, CharacterData: W.CharacterData, Client: W.Client, WindowClient: W.Client, Credential: W.Credential, FederatedCredential: W.Credential, PasswordCredential: W.Credential, PublicKeyCredential: W.Credential, CryptoKey: W.CryptoKey, CSSKeywordValue: W.CssKeywordValue, CSSNumericValue: W.CssNumericValue, CSSPerspective: W.CssPerspective, CSSCharsetRule: W.CssRule, CSSConditionRule: W.CssRule, CSSFontFaceRule: W.CssRule, CSSGroupingRule: W.CssRule, CSSImportRule: W.CssRule, CSSKeyframeRule: W.CssRule, MozCSSKeyframeRule: W.CssRule, WebKitCSSKeyframeRule: W.CssRule, CSSKeyframesRule: W.CssRule, MozCSSKeyframesRule: W.CssRule, WebKitCSSKeyframesRule: W.CssRule, CSSMediaRule: W.CssRule, CSSNamespaceRule: W.CssRule, CSSPageRule: W.CssRule, CSSRule: W.CssRule, CSSStyleRule: W.CssRule, CSSSupportsRule: W.CssRule, CSSViewportRule: W.CssRule, CSSStyleDeclaration: W.CssStyleDeclaration, MSStyleCSSProperties: W.CssStyleDeclaration, CSS2Properties: W.CssStyleDeclaration, CSSImageValue: W.CssStyleValue, CSSPositionValue: W.CssStyleValue, CSSResourceValue: W.CssStyleValue, CSSURLImageValue: W.CssStyleValue, CSSStyleValue: W.CssStyleValue, CSSMatrixComponent: W.CssTransformComponent, CSSRotation: W.CssTransformComponent, CSSScale: W.CssTransformComponent, CSSSkew: W.CssTransformComponent, CSSTranslation: W.CssTransformComponent, CSSTransformComponent: W.CssTransformComponent, CSSTransformValue: W.CssTransformValue, CSSUnitValue: W.CssUnitValue, CSSUnparsedValue: W.CssUnparsedValue, HTMLDataElement: W.DataElement, DataTransfer: W.DataTransfer, DataTransferItem: W.DataTransferItem, DataTransferItemList: W.DataTransferItemList, DOMException: W.DomException, ClientRectList: W.DomRectList, DOMRectList: W.DomRectList, DOMRectReadOnly: W.DomRectReadOnly, DOMStringList: W.DomStringList, DOMTokenList: W.DomTokenList, Element: W.Element, HTMLEmbedElement: W.EmbedElement, AbortPaymentEvent: W.Event, AnimationEvent: W.Event, AnimationPlaybackEvent: W.Event, ApplicationCacheErrorEvent: W.Event, BackgroundFetchClickEvent: W.Event, BackgroundFetchEvent: W.Event, BackgroundFetchFailEvent: W.Event, BackgroundFetchedEvent: W.Event, BeforeInstallPromptEvent: W.Event, BeforeUnloadEvent: W.Event, BlobEvent: W.Event, CanMakePaymentEvent: W.Event, ClipboardEvent: W.Event, CloseEvent: W.Event, CustomEvent: W.Event, DeviceMotionEvent: W.Event, DeviceOrientationEvent: W.Event, ErrorEvent: W.Event, ExtendableEvent: W.Event, ExtendableMessageEvent: W.Event, FetchEvent: W.Event, FontFaceSetLoadEvent: W.Event, ForeignFetchEvent: W.Event, GamepadEvent: W.Event, HashChangeEvent: W.Event, InstallEvent: W.Event, MediaEncryptedEvent: W.Event, MediaKeyMessageEvent: W.Event, MediaQueryListEvent: W.Event, MediaStreamEvent: W.Event, MediaStreamTrackEvent: W.Event, MIDIConnectionEvent: W.Event, MIDIMessageEvent: W.Event, MutationEvent: W.Event, NotificationEvent: W.Event, PageTransitionEvent: W.Event, PaymentRequestEvent: W.Event, PaymentRequestUpdateEvent: W.Event, PopStateEvent: W.Event, PresentationConnectionAvailableEvent: W.Event, PresentationConnectionCloseEvent: W.Event, PromiseRejectionEvent: W.Event, PushEvent: W.Event, RTCDataChannelEvent: W.Event, RTCDTMFToneChangeEvent: W.Event, RTCPeerConnectionIceEvent: W.Event, RTCTrackEvent: W.Event, SecurityPolicyViolationEvent: W.Event, SensorErrorEvent: W.Event, SpeechRecognitionError: W.Event, SpeechRecognitionEvent: W.Event, SpeechSynthesisEvent: W.Event, StorageEvent: W.Event, SyncEvent: W.Event, TrackEvent: W.Event, TransitionEvent: W.Event, WebKitTransitionEvent: W.Event, VRDeviceEvent: W.Event, VRDisplayEvent: W.Event, VRSessionEvent: W.Event, MojoInterfaceRequestEvent: W.Event, USBConnectionEvent: W.Event, AudioProcessingEvent: W.Event, OfflineAudioCompletionEvent: W.Event, WebGLContextEvent: W.Event, Event: W.Event, InputEvent: W.Event, AbsoluteOrientationSensor: W.EventTarget, Accelerometer: W.EventTarget, AmbientLightSensor: W.EventTarget, Animation: W.EventTarget, ApplicationCache: W.EventTarget, DOMApplicationCache: W.EventTarget, OfflineResourceList: W.EventTarget, BackgroundFetchRegistration: W.EventTarget, BatteryManager: W.EventTarget, BroadcastChannel: W.EventTarget, CanvasCaptureMediaStreamTrack: W.EventTarget, EventSource: W.EventTarget, FontFaceSet: W.EventTarget, Gyroscope: W.EventTarget, XMLHttpRequest: W.EventTarget, XMLHttpRequestEventTarget: W.EventTarget, XMLHttpRequestUpload: W.EventTarget, LinearAccelerationSensor: W.EventTarget, Magnetometer: W.EventTarget, MediaDevices: W.EventTarget, MediaKeySession: W.EventTarget, MediaQueryList: W.EventTarget, MediaRecorder: W.EventTarget, MediaSource: W.EventTarget, MediaStream: W.EventTarget, MediaStreamTrack: W.EventTarget, MIDIAccess: W.EventTarget, Notification: W.EventTarget, OffscreenCanvas: W.EventTarget, OrientationSensor: W.EventTarget, PaymentRequest: W.EventTarget, Performance: W.EventTarget, PermissionStatus: W.EventTarget, PresentationConnection: W.EventTarget, PresentationConnectionList: W.EventTarget, PresentationRequest: W.EventTarget, RelativeOrientationSensor: W.EventTarget, RemotePlayback: W.EventTarget, RTCDataChannel: W.EventTarget, DataChannel: W.EventTarget, RTCDTMFSender: W.EventTarget, RTCPeerConnection: W.EventTarget, webkitRTCPeerConnection: W.EventTarget, mozRTCPeerConnection: W.EventTarget, Sensor: W.EventTarget, ServiceWorker: W.EventTarget, ServiceWorkerContainer: W.EventTarget, ServiceWorkerRegistration: W.EventTarget, SharedWorker: W.EventTarget, SpeechRecognition: W.EventTarget, SpeechSynthesis: W.EventTarget, SpeechSynthesisUtterance: W.EventTarget, VR: W.EventTarget, VRDevice: W.EventTarget, VRDisplay: W.EventTarget, VRSession: W.EventTarget, VisualViewport: W.EventTarget, WebSocket: W.EventTarget, WorkerPerformance: W.EventTarget, BluetoothDevice: W.EventTarget, BluetoothRemoteGATTCharacteristic: W.EventTarget, Clipboard: W.EventTarget, MojoInterfaceInterceptor: W.EventTarget, USB: W.EventTarget, IDBDatabase: W.EventTarget, IDBTransaction: W.EventTarget, EventTarget: W.EventTarget, HTMLFieldSetElement: W.FieldSetElement, File: W.File, FileList: W.FileList, FileReader: W.FileReader, FileWriter: W.FileWriter, HTMLFormElement: W.FormElement, Gamepad: W.Gamepad, GamepadButton: W.GamepadButton, History: W.History, HTMLCollection: W.HtmlCollection, HTMLFormControlsCollection: W.HtmlCollection, HTMLOptionsCollection: W.HtmlCollection, ImageData: W.ImageData, HTMLInputElement: W.InputElement, IntersectionObserverEntry: W.IntersectionObserverEntry, KeyboardEvent: W.KeyboardEvent, HTMLLIElement: W.LIElement, HTMLLinkElement: W.LinkElement, Location: W.Location, MediaList: W.MediaList, MessageEvent: W.MessageEvent, MessagePort: W.MessagePort, HTMLMeterElement: W.MeterElement, MIDIInputMap: W.MidiInputMap, MIDIOutputMap: W.MidiOutputMap, MIDIInput: W.MidiPort, MIDIOutput: W.MidiPort, MIDIPort: W.MidiPort, MimeType: W.MimeType, MimeTypeArray: W.MimeTypeArray, MouseEvent: W.MouseEvent, DragEvent: W.MouseEvent, PointerEvent: W.MouseEvent, WheelEvent: W.MouseEvent, MutationRecord: W.MutationRecord, NetworkInformation: W.NetworkInformation, Document: W.Node, DocumentFragment: W.Node, HTMLDocument: W.Node, ShadowRoot: W.Node, XMLDocument: W.Node, DocumentType: W.Node, Node: W.Node, NodeList: W.NodeList, RadioNodeList: W.NodeList, HTMLOListElement: W.OListElement, HTMLObjectElement: W.ObjectElement, HTMLOptionElement: W.OptionElement, HTMLOutputElement: W.OutputElement, HTMLParamElement: W.ParamElement, PerformanceLongTaskTiming: W.PerformanceEntry, PerformanceMark: W.PerformanceEntry, PerformanceMeasure: W.PerformanceEntry, PerformancePaintTiming: W.PerformanceEntry, TaskAttributionTiming: W.PerformanceEntry, PerformanceEntry: W.PerformanceEntry, PerformanceNavigation: W.PerformanceNavigation, PerformanceNavigationTiming: W.PerformanceNavigationTiming, PerformanceResourceTiming: W.PerformanceResourceTiming, Plugin: W.Plugin, PluginArray: W.PluginArray, PresentationAvailability: W.PresentationAvailability, ProcessingInstruction: W.ProcessingInstruction, HTMLProgressElement: W.ProgressElement, ProgressEvent: W.ProgressEvent, ResourceProgressEvent: W.ProgressEvent, ResizeObserverEntry: W.ResizeObserverEntry, RTCLegacyStatsReport: W.RtcLegacyStatsReport, RTCSessionDescription: W.RtcSessionDescription, mozRTCSessionDescription: W.RtcSessionDescription, RTCStatsReport: W.RtcStatsReport, ScreenOrientation: W.ScreenOrientation, HTMLScriptElement: W.ScriptElement, HTMLSelectElement: W.SelectElement, Selection: W.Selection, SourceBuffer: W.SourceBuffer, SourceBufferList: W.SourceBufferList, HTMLSourceElement: W.SourceElement, SpeechGrammar: W.SpeechGrammar, SpeechGrammarList: W.SpeechGrammarList, SpeechRecognitionResult: W.SpeechRecognitionResult, Storage: W.Storage, HTMLStyleElement: W.StyleElement, StyleMedia: W.StyleMedia, CSSStyleSheet: W.StyleSheet, StyleSheet: W.StyleSheet, HTMLTextAreaElement: W.TextAreaElement, TextTrack: W.TextTrack, TextTrackCue: W.TextTrackCue, VTTCue: W.TextTrackCue, TextTrackCueList: W.TextTrackCueList, TextTrackList: W.TextTrackList, TimeRanges: W.TimeRanges, Touch: W.Touch, TouchList: W.TouchList, TrackDefault: W.TrackDefault, TrackDefaultList: W.TrackDefaultList, CompositionEvent: W.UIEvent, FocusEvent: W.UIEvent, TextEvent: W.UIEvent, TouchEvent: W.UIEvent, UIEvent: W.UIEvent, URL: W.Url, VideoTrackList: W.VideoTrackList, Window: W.Window, DOMWindow: W.Window, Worker: W.Worker, DedicatedWorkerGlobalScope: W.WorkerGlobalScope, ServiceWorkerGlobalScope: W.WorkerGlobalScope, SharedWorkerGlobalScope: W.WorkerGlobalScope, WorkerGlobalScope: W.WorkerGlobalScope, Attr: W._Attr, CSSRuleList: W._CssRuleList, ClientRect: W._DomRect, DOMRect: W._DomRect, GamepadList: W._GamepadList, NamedNodeMap: W._NamedNodeMap, MozNamedAttrMap: W._NamedNodeMap, Report: W._Report, SpeechRecognitionResultList: W._SpeechRecognitionResultList, StyleSheetList: W._StyleSheetList, IDBCursor: P.Cursor, IDBCursorWithValue: P.CursorWithValue, IDBKeyRange: P.KeyRange, IDBObservation: P.Observation, IDBOpenDBRequest: P.OpenDBRequest, IDBVersionChangeRequest: P.OpenDBRequest, IDBRequest: P.Request, IDBVersionChangeEvent: P.VersionChangeEvent, SVGAElement: P.AElement, SVGAngle: P.Angle, SVGAnimatedEnumeration: P.AnimatedEnumeration, SVGAnimatedString: P.AnimatedString, SVGFEColorMatrixElement: P.FEColorMatrixElement, SVGFETurbulenceElement: P.FETurbulenceElement, SVGCircleElement: P.GraphicsElement, SVGClipPathElement: P.GraphicsElement, SVGDefsElement: P.GraphicsElement, SVGEllipseElement: P.GraphicsElement, SVGForeignObjectElement: P.GraphicsElement, SVGGElement: P.GraphicsElement, SVGGeometryElement: P.GraphicsElement, SVGImageElement: P.GraphicsElement, SVGLineElement: P.GraphicsElement, SVGPathElement: P.GraphicsElement, SVGPolygonElement: P.GraphicsElement, SVGPolylineElement: P.GraphicsElement, SVGRectElement: P.GraphicsElement, SVGSVGElement: P.GraphicsElement, SVGSwitchElement: P.GraphicsElement, SVGTSpanElement: P.GraphicsElement, SVGTextContentElement: P.GraphicsElement, SVGTextElement: P.GraphicsElement, SVGTextPathElement: P.GraphicsElement, SVGTextPositioningElement: P.GraphicsElement, SVGUseElement: P.GraphicsElement, SVGGraphicsElement: P.GraphicsElement, SVGLength: P.Length, SVGLengthList: P.LengthList, SVGNumber: P.Number, SVGNumberList: P.NumberList, SVGPointList: P.PointList, SVGScriptElement: P.ScriptElement0, SVGStringList: P.StringList, SVGStyleElement: P.StyleElement0, SVGAnimateElement: P.SvgElement, SVGAnimateMotionElement: P.SvgElement, SVGAnimateTransformElement: P.SvgElement, SVGAnimationElement: P.SvgElement, SVGDescElement: P.SvgElement, SVGDiscardElement: P.SvgElement, SVGFEBlendElement: P.SvgElement, SVGFEComponentTransferElement: P.SvgElement, SVGFECompositeElement: P.SvgElement, SVGFEConvolveMatrixElement: P.SvgElement, SVGFEDiffuseLightingElement: P.SvgElement, SVGFEDisplacementMapElement: P.SvgElement, SVGFEDistantLightElement: P.SvgElement, SVGFEFloodElement: P.SvgElement, SVGFEFuncAElement: P.SvgElement, SVGFEFuncBElement: P.SvgElement, SVGFEFuncGElement: P.SvgElement, SVGFEFuncRElement: P.SvgElement, SVGFEGaussianBlurElement: P.SvgElement, SVGFEImageElement: P.SvgElement, SVGFEMergeElement: P.SvgElement, SVGFEMergeNodeElement: P.SvgElement, SVGFEMorphologyElement: P.SvgElement, SVGFEOffsetElement: P.SvgElement, SVGFEPointLightElement: P.SvgElement, SVGFESpecularLightingElement: P.SvgElement, SVGFESpotLightElement: P.SvgElement, SVGFETileElement: P.SvgElement, SVGFilterElement: P.SvgElement, SVGLinearGradientElement: P.SvgElement, SVGMarkerElement: P.SvgElement, SVGMaskElement: P.SvgElement, SVGMetadataElement: P.SvgElement, SVGPatternElement: P.SvgElement, SVGRadialGradientElement: P.SvgElement, SVGSetElement: P.SvgElement, SVGStopElement: P.SvgElement, SVGSymbolElement: P.SvgElement, SVGTitleElement: P.SvgElement, SVGViewElement: P.SvgElement, SVGGradientElement: P.SvgElement, SVGComponentTransferFunctionElement: P.SvgElement, SVGFEDropShadowElement: P.SvgElement, SVGMPathElement: P.SvgElement, SVGElement: P.SvgElement, SVGTransform: P.Transform, SVGTransformList: P.TransformList, AudioBuffer: P.AudioBuffer, AnalyserNode: P.AudioNode, RealtimeAnalyserNode: P.AudioNode, AudioDestinationNode: P.AudioNode, AudioWorkletNode: P.AudioNode, ChannelMergerNode: P.AudioNode, AudioChannelMerger: P.AudioNode, ChannelSplitterNode: P.AudioNode, AudioChannelSplitter: P.AudioNode, ConvolverNode: P.AudioNode, DelayNode: P.AudioNode, DynamicsCompressorNode: P.AudioNode, GainNode: P.AudioNode, AudioGainNode: P.AudioNode, IIRFilterNode: P.AudioNode, MediaElementAudioSourceNode: P.AudioNode, MediaStreamAudioDestinationNode: P.AudioNode, MediaStreamAudioSourceNode: P.AudioNode, PannerNode: P.AudioNode, AudioPannerNode: P.AudioNode, webkitAudioPannerNode: P.AudioNode, ScriptProcessorNode: P.AudioNode, JavaScriptAudioNode: P.AudioNode, StereoPannerNode: P.AudioNode, WaveShaperNode: P.AudioNode, AudioNode: P.AudioNode, AudioParam: P.AudioParam, AudioParamMap: P.AudioParamMap, AudioBufferSourceNode: P.AudioScheduledSourceNode, ConstantSourceNode: P.AudioScheduledSourceNode, AudioScheduledSourceNode: P.AudioScheduledSourceNode, AudioTrackList: P.AudioTrackList, AudioContext: P.BaseAudioContext, webkitAudioContext: P.BaseAudioContext, BaseAudioContext: P.BaseAudioContext, BiquadFilterNode: P.BiquadFilterNode, OfflineAudioContext: P.OfflineAudioContext, OscillatorNode: P.OscillatorNode, Oscillator: P.OscillatorNode, WebGLActiveInfo: P.ActiveInfo, SQLResultSetRowList: P.SqlResultSetRowList});
    hunkHelpers.setOrUpdateLeafTags({AnimationEffectReadOnly: true, AnimationEffectTiming: true, AnimationEffectTimingReadOnly: true, AnimationTimeline: true, AnimationWorkletGlobalScope: true, AuthenticatorAssertionResponse: true, AuthenticatorAttestationResponse: true, AuthenticatorResponse: true, BackgroundFetchFetch: true, BackgroundFetchManager: true, BackgroundFetchSettledFetch: true, BarProp: true, BarcodeDetector: true, Body: true, BudgetState: true, CacheStorage: true, CanvasGradient: true, CanvasPattern: true, Clients: true, CookieStore: true, Coordinates: true, CredentialUserData: true, CredentialsContainer: true, Crypto: true, CSS: true, CSSVariableReferenceValue: true, CustomElementRegistry: true, DeprecatedStorageInfo: true, DeprecatedStorageQuota: true, DeprecationReport: true, DetectedBarcode: true, DetectedFace: true, DetectedText: true, DeviceAcceleration: true, DeviceRotationRate: true, DirectoryEntry: true, DirectoryReader: true, DocumentOrShadowRoot: true, DocumentTimeline: true, DOMError: true, DOMImplementation: true, Iterator: true, DOMMatrix: true, DOMMatrixReadOnly: true, DOMParser: true, DOMPoint: true, DOMPointReadOnly: true, DOMQuad: true, DOMStringMap: true, Entry: true, External: true, FaceDetector: true, FileEntry: true, DOMFileSystem: true, FontFace: true, FontFaceSource: true, FormData: true, GamepadPose: true, Geolocation: true, Position: true, Headers: true, HTMLHyperlinkElementUtils: true, IdleDeadline: true, ImageBitmap: true, ImageBitmapRenderingContext: true, ImageCapture: true, InputDeviceCapabilities: true, IntersectionObserver: true, InterventionReport: true, KeyframeEffect: true, KeyframeEffectReadOnly: true, MediaCapabilities: true, MediaCapabilitiesInfo: true, MediaDeviceInfo: true, MediaError: true, MediaKeyStatusMap: true, MediaKeySystemAccess: true, MediaKeys: true, MediaKeysPolicy: true, MediaMetadata: true, MediaSession: true, MediaSettingsRange: true, MemoryInfo: true, MessageChannel: true, Metadata: true, MutationObserver: true, WebKitMutationObserver: true, NavigationPreloadManager: true, Navigator: true, NavigatorAutomationInformation: true, NavigatorConcurrentHardware: true, NavigatorCookies: true, NavigatorUserMediaError: true, NodeFilter: true, NodeIterator: true, NonDocumentTypeChildNode: true, NonElementParentNode: true, NoncedElement: true, OffscreenCanvasRenderingContext2D: true, OverconstrainedError: true, PaintRenderingContext2D: true, PaintSize: true, PaintWorkletGlobalScope: true, Path2D: true, PaymentAddress: true, PaymentInstruments: true, PaymentManager: true, PaymentResponse: true, PerformanceObserver: true, PerformanceObserverEntryList: true, PerformanceServerTiming: true, PerformanceTiming: true, Permissions: true, PhotoCapabilities: true, PositionError: true, Presentation: true, PresentationReceiver: true, PushManager: true, PushMessageData: true, PushSubscription: true, PushSubscriptionOptions: true, Range: true, RelatedApplication: true, ReportBody: true, ReportingObserver: true, ResizeObserver: true, RTCCertificate: true, RTCIceCandidate: true, mozRTCIceCandidate: true, RTCRtpContributingSource: true, RTCRtpReceiver: true, RTCRtpSender: true, RTCStatsResponse: true, Screen: true, ScrollState: true, ScrollTimeline: true, SharedArrayBuffer: true, SpeechRecognitionAlternative: true, SpeechSynthesisVoice: true, StaticRange: true, StorageManager: true, StylePropertyMap: true, StylePropertyMapReadonly: true, SyncManager: true, TextDetector: true, TextMetrics: true, TreeWalker: true, TrustedHTML: true, TrustedScriptURL: true, TrustedURL: true, UnderlyingSourceBase: true, URLSearchParams: true, VRCoordinateSystem: true, VRDisplayCapabilities: true, VREyeParameters: true, VRFrameData: true, VRFrameOfReference: true, VRPose: true, VRStageBounds: true, VRStageBoundsPoint: true, VRStageParameters: true, ValidityState: true, VideoPlaybackQuality: true, VideoTrack: true, VTTRegion: true, WorkletAnimation: true, WorkletGlobalScope: true, XPathEvaluator: true, XPathExpression: true, XPathNSResolver: true, XPathResult: true, XMLSerializer: true, XSLTProcessor: true, Bluetooth: true, BluetoothCharacteristicProperties: true, BluetoothRemoteGATTServer: true, BluetoothRemoteGATTService: true, BluetoothUUID: true, BudgetService: true, Cache: true, DOMFileSystemSync: true, DirectoryEntrySync: true, DirectoryReaderSync: true, EntrySync: true, FileEntrySync: true, FileReaderSync: true, FileWriterSync: true, HTMLAllCollection: true, Mojo: true, MojoHandle: true, MojoWatcher: true, NFC: true, PagePopupController: true, Request: true, Response: true, SubtleCrypto: true, USBAlternateInterface: true, USBConfiguration: true, USBDevice: true, USBEndpoint: true, USBInTransferResult: true, USBInterface: true, USBIsochronousInTransferPacket: true, USBIsochronousInTransferResult: true, USBIsochronousOutTransferPacket: true, USBIsochronousOutTransferResult: true, USBOutTransferResult: true, WorkerLocation: true, WorkerNavigator: true, Worklet: true, IDBFactory: true, IDBIndex: true, IDBObjectStore: true, IDBObserver: true, IDBObserverChanges: true, SVGAnimatedAngle: true, SVGAnimatedBoolean: true, SVGAnimatedInteger: true, SVGAnimatedLength: true, SVGAnimatedLengthList: true, SVGAnimatedNumber: true, SVGAnimatedNumberList: true, SVGAnimatedPreserveAspectRatio: true, SVGAnimatedRect: true, SVGAnimatedTransformList: true, SVGMatrix: true, SVGPoint: true, SVGPreserveAspectRatio: true, SVGRect: true, SVGUnitTypes: true, AudioListener: true, AudioTrack: true, AudioWorkletGlobalScope: true, AudioWorkletProcessor: true, PeriodicWave: true, ANGLEInstancedArrays: true, ANGLE_instanced_arrays: true, WebGLBuffer: true, WebGLCanvas: true, WebGLColorBufferFloat: true, WebGLCompressedTextureASTC: true, WebGLCompressedTextureATC: true, WEBGL_compressed_texture_atc: true, WebGLCompressedTextureETC1: true, WEBGL_compressed_texture_etc1: true, WebGLCompressedTextureETC: true, WebGLCompressedTexturePVRTC: true, WEBGL_compressed_texture_pvrtc: true, WebGLCompressedTextureS3TC: true, WEBGL_compressed_texture_s3tc: true, WebGLCompressedTextureS3TCsRGB: true, WebGLDebugRendererInfo: true, WEBGL_debug_renderer_info: true, WebGLDebugShaders: true, WEBGL_debug_shaders: true, WebGLDepthTexture: true, WEBGL_depth_texture: true, WebGLDrawBuffers: true, WEBGL_draw_buffers: true, EXTsRGB: true, EXT_sRGB: true, EXTBlendMinMax: true, EXT_blend_minmax: true, EXTColorBufferFloat: true, EXTColorBufferHalfFloat: true, EXTDisjointTimerQuery: true, EXTDisjointTimerQueryWebGL2: true, EXTFragDepth: true, EXT_frag_depth: true, EXTShaderTextureLOD: true, EXT_shader_texture_lod: true, EXTTextureFilterAnisotropic: true, EXT_texture_filter_anisotropic: true, WebGLFramebuffer: true, WebGLGetBufferSubDataAsync: true, WebGLLoseContext: true, WebGLExtensionLoseContext: true, WEBGL_lose_context: true, OESElementIndexUint: true, OES_element_index_uint: true, OESStandardDerivatives: true, OES_standard_derivatives: true, OESTextureFloat: true, OES_texture_float: true, OESTextureFloatLinear: true, OES_texture_float_linear: true, OESTextureHalfFloat: true, OES_texture_half_float: true, OESTextureHalfFloatLinear: true, OES_texture_half_float_linear: true, OESVertexArrayObject: true, OES_vertex_array_object: true, WebGLProgram: true, WebGLQuery: true, WebGLRenderbuffer: true, WebGLRenderingContext: true, WebGL2RenderingContext: true, WebGLSampler: true, WebGLShader: true, WebGLShaderPrecisionFormat: true, WebGLSync: true, WebGLTexture: true, WebGLTimerQueryEXT: true, WebGLTransformFeedback: true, WebGLUniformLocation: true, WebGLVertexArrayObject: true, WebGLVertexArrayObjectOES: true, WebGL: true, WebGL2RenderingContextBase: true, Database: true, SQLError: true, SQLResultSet: true, SQLTransaction: true, ArrayBuffer: true, ArrayBufferView: false, DataView: true, Float32Array: true, Float64Array: true, Int16Array: true, Int32Array: true, Int8Array: true, Uint16Array: true, Uint32Array: true, Uint8ClampedArray: true, CanvasPixelArray: true, Uint8Array: false, HTMLAudioElement: true, HTMLBRElement: true, HTMLBodyElement: true, HTMLContentElement: true, HTMLDListElement: true, HTMLDataListElement: true, HTMLDetailsElement: true, HTMLDialogElement: true, HTMLDivElement: true, HTMLHRElement: true, HTMLHeadElement: true, HTMLHeadingElement: true, HTMLHtmlElement: true, HTMLIFrameElement: true, HTMLImageElement: true, HTMLLabelElement: true, HTMLLegendElement: true, HTMLMapElement: true, HTMLMediaElement: true, HTMLMenuElement: true, HTMLMetaElement: true, HTMLModElement: true, HTMLOptGroupElement: true, HTMLParagraphElement: true, HTMLPictureElement: true, HTMLPreElement: true, HTMLQuoteElement: true, HTMLShadowElement: true, HTMLSlotElement: true, HTMLSpanElement: true, HTMLTableCaptionElement: true, HTMLTableCellElement: true, HTMLTableDataCellElement: true, HTMLTableHeaderCellElement: true, HTMLTableColElement: true, HTMLTableElement: true, HTMLTableRowElement: true, HTMLTableSectionElement: true, HTMLTemplateElement: true, HTMLTimeElement: true, HTMLTitleElement: true, HTMLTrackElement: true, HTMLUListElement: true, HTMLUnknownElement: true, HTMLVideoElement: true, HTMLDirectoryElement: true, HTMLFontElement: true, HTMLFrameElement: true, HTMLFrameSetElement: true, HTMLMarqueeElement: true, HTMLElement: false, AccessibleNode: true, AccessibleNodeList: true, HTMLAnchorElement: true, HTMLAreaElement: true, HTMLBaseElement: true, Blob: false, BluetoothRemoteGATTDescriptor: true, HTMLButtonElement: true, HTMLCanvasElement: true, CanvasRenderingContext2D: true, CDATASection: true, Comment: true, Text: true, CharacterData: false, Client: true, WindowClient: true, Credential: true, FederatedCredential: true, PasswordCredential: true, PublicKeyCredential: true, CryptoKey: true, CSSKeywordValue: true, CSSNumericValue: false, CSSPerspective: true, CSSCharsetRule: true, CSSConditionRule: true, CSSFontFaceRule: true, CSSGroupingRule: true, CSSImportRule: true, CSSKeyframeRule: true, MozCSSKeyframeRule: true, WebKitCSSKeyframeRule: true, CSSKeyframesRule: true, MozCSSKeyframesRule: true, WebKitCSSKeyframesRule: true, CSSMediaRule: true, CSSNamespaceRule: true, CSSPageRule: true, CSSRule: true, CSSStyleRule: true, CSSSupportsRule: true, CSSViewportRule: true, CSSStyleDeclaration: true, MSStyleCSSProperties: true, CSS2Properties: true, CSSImageValue: true, CSSPositionValue: true, CSSResourceValue: true, CSSURLImageValue: true, CSSStyleValue: false, CSSMatrixComponent: true, CSSRotation: true, CSSScale: true, CSSSkew: true, CSSTranslation: true, CSSTransformComponent: false, CSSTransformValue: true, CSSUnitValue: true, CSSUnparsedValue: true, HTMLDataElement: true, DataTransfer: true, DataTransferItem: true, DataTransferItemList: true, DOMException: true, ClientRectList: true, DOMRectList: true, DOMRectReadOnly: false, DOMStringList: true, DOMTokenList: true, Element: false, HTMLEmbedElement: true, AbortPaymentEvent: true, AnimationEvent: true, AnimationPlaybackEvent: true, ApplicationCacheErrorEvent: true, BackgroundFetchClickEvent: true, BackgroundFetchEvent: true, BackgroundFetchFailEvent: true, BackgroundFetchedEvent: true, BeforeInstallPromptEvent: true, BeforeUnloadEvent: true, BlobEvent: true, CanMakePaymentEvent: true, ClipboardEvent: true, CloseEvent: true, CustomEvent: true, DeviceMotionEvent: true, DeviceOrientationEvent: true, ErrorEvent: true, ExtendableEvent: true, ExtendableMessageEvent: true, FetchEvent: true, FontFaceSetLoadEvent: true, ForeignFetchEvent: true, GamepadEvent: true, HashChangeEvent: true, InstallEvent: true, MediaEncryptedEvent: true, MediaKeyMessageEvent: true, MediaQueryListEvent: true, MediaStreamEvent: true, MediaStreamTrackEvent: true, MIDIConnectionEvent: true, MIDIMessageEvent: true, MutationEvent: true, NotificationEvent: true, PageTransitionEvent: true, PaymentRequestEvent: true, PaymentRequestUpdateEvent: true, PopStateEvent: true, PresentationConnectionAvailableEvent: true, PresentationConnectionCloseEvent: true, PromiseRejectionEvent: true, PushEvent: true, RTCDataChannelEvent: true, RTCDTMFToneChangeEvent: true, RTCPeerConnectionIceEvent: true, RTCTrackEvent: true, SecurityPolicyViolationEvent: true, SensorErrorEvent: true, SpeechRecognitionError: true, SpeechRecognitionEvent: true, SpeechSynthesisEvent: true, StorageEvent: true, SyncEvent: true, TrackEvent: true, TransitionEvent: true, WebKitTransitionEvent: true, VRDeviceEvent: true, VRDisplayEvent: true, VRSessionEvent: true, MojoInterfaceRequestEvent: true, USBConnectionEvent: true, AudioProcessingEvent: true, OfflineAudioCompletionEvent: true, WebGLContextEvent: true, Event: false, InputEvent: false, AbsoluteOrientationSensor: true, Accelerometer: true, AmbientLightSensor: true, Animation: true, ApplicationCache: true, DOMApplicationCache: true, OfflineResourceList: true, BackgroundFetchRegistration: true, BatteryManager: true, BroadcastChannel: true, CanvasCaptureMediaStreamTrack: true, EventSource: true, FontFaceSet: true, Gyroscope: true, XMLHttpRequest: true, XMLHttpRequestEventTarget: true, XMLHttpRequestUpload: true, LinearAccelerationSensor: true, Magnetometer: true, MediaDevices: true, MediaKeySession: true, MediaQueryList: true, MediaRecorder: true, MediaSource: true, MediaStream: true, MediaStreamTrack: true, MIDIAccess: true, Notification: true, OffscreenCanvas: true, OrientationSensor: true, PaymentRequest: true, Performance: true, PermissionStatus: true, PresentationConnection: true, PresentationConnectionList: true, PresentationRequest: true, RelativeOrientationSensor: true, RemotePlayback: true, RTCDataChannel: true, DataChannel: true, RTCDTMFSender: true, RTCPeerConnection: true, webkitRTCPeerConnection: true, mozRTCPeerConnection: true, Sensor: true, ServiceWorker: true, ServiceWorkerContainer: true, ServiceWorkerRegistration: true, SharedWorker: true, SpeechRecognition: true, SpeechSynthesis: true, SpeechSynthesisUtterance: true, VR: true, VRDevice: true, VRDisplay: true, VRSession: true, VisualViewport: true, WebSocket: true, WorkerPerformance: true, BluetoothDevice: true, BluetoothRemoteGATTCharacteristic: true, Clipboard: true, MojoInterfaceInterceptor: true, USB: true, IDBDatabase: true, IDBTransaction: true, EventTarget: false, HTMLFieldSetElement: true, File: true, FileList: true, FileReader: true, FileWriter: true, HTMLFormElement: true, Gamepad: true, GamepadButton: true, History: true, HTMLCollection: true, HTMLFormControlsCollection: true, HTMLOptionsCollection: true, ImageData: true, HTMLInputElement: true, IntersectionObserverEntry: true, KeyboardEvent: true, HTMLLIElement: true, HTMLLinkElement: true, Location: true, MediaList: true, MessageEvent: true, MessagePort: true, HTMLMeterElement: true, MIDIInputMap: true, MIDIOutputMap: true, MIDIInput: true, MIDIOutput: true, MIDIPort: true, MimeType: true, MimeTypeArray: true, MouseEvent: true, DragEvent: true, PointerEvent: true, WheelEvent: true, MutationRecord: true, NetworkInformation: true, Document: true, DocumentFragment: true, HTMLDocument: true, ShadowRoot: true, XMLDocument: true, DocumentType: true, Node: false, NodeList: true, RadioNodeList: true, HTMLOListElement: true, HTMLObjectElement: true, HTMLOptionElement: true, HTMLOutputElement: true, HTMLParamElement: true, PerformanceLongTaskTiming: true, PerformanceMark: true, PerformanceMeasure: true, PerformancePaintTiming: true, TaskAttributionTiming: true, PerformanceEntry: false, PerformanceNavigation: true, PerformanceNavigationTiming: true, PerformanceResourceTiming: false, Plugin: true, PluginArray: true, PresentationAvailability: true, ProcessingInstruction: true, HTMLProgressElement: true, ProgressEvent: true, ResourceProgressEvent: true, ResizeObserverEntry: true, RTCLegacyStatsReport: true, RTCSessionDescription: true, mozRTCSessionDescription: true, RTCStatsReport: true, ScreenOrientation: true, HTMLScriptElement: true, HTMLSelectElement: true, Selection: true, SourceBuffer: true, SourceBufferList: true, HTMLSourceElement: true, SpeechGrammar: true, SpeechGrammarList: true, SpeechRecognitionResult: true, Storage: true, HTMLStyleElement: true, StyleMedia: true, CSSStyleSheet: true, StyleSheet: true, HTMLTextAreaElement: true, TextTrack: true, TextTrackCue: true, VTTCue: true, TextTrackCueList: true, TextTrackList: true, TimeRanges: true, Touch: true, TouchList: true, TrackDefault: true, TrackDefaultList: true, CompositionEvent: true, FocusEvent: true, TextEvent: true, TouchEvent: true, UIEvent: false, URL: true, VideoTrackList: true, Window: true, DOMWindow: true, Worker: true, DedicatedWorkerGlobalScope: true, ServiceWorkerGlobalScope: true, SharedWorkerGlobalScope: true, WorkerGlobalScope: true, Attr: true, CSSRuleList: true, ClientRect: true, DOMRect: true, GamepadList: true, NamedNodeMap: true, MozNamedAttrMap: true, Report: true, SpeechRecognitionResultList: true, StyleSheetList: true, IDBCursor: false, IDBCursorWithValue: true, IDBKeyRange: true, IDBObservation: true, IDBOpenDBRequest: true, IDBVersionChangeRequest: true, IDBRequest: false, IDBVersionChangeEvent: true, SVGAElement: true, SVGAngle: true, SVGAnimatedEnumeration: true, SVGAnimatedString: true, SVGFEColorMatrixElement: true, SVGFETurbulenceElement: true, SVGCircleElement: true, SVGClipPathElement: true, SVGDefsElement: true, SVGEllipseElement: true, SVGForeignObjectElement: true, SVGGElement: true, SVGGeometryElement: true, SVGImageElement: true, SVGLineElement: true, SVGPathElement: true, SVGPolygonElement: true, SVGPolylineElement: true, SVGRectElement: true, SVGSVGElement: true, SVGSwitchElement: true, SVGTSpanElement: true, SVGTextContentElement: true, SVGTextElement: true, SVGTextPathElement: true, SVGTextPositioningElement: true, SVGUseElement: true, SVGGraphicsElement: false, SVGLength: true, SVGLengthList: true, SVGNumber: true, SVGNumberList: true, SVGPointList: true, SVGScriptElement: true, SVGStringList: true, SVGStyleElement: true, SVGAnimateElement: true, SVGAnimateMotionElement: true, SVGAnimateTransformElement: true, SVGAnimationElement: true, SVGDescElement: true, SVGDiscardElement: true, SVGFEBlendElement: true, SVGFEComponentTransferElement: true, SVGFECompositeElement: true, SVGFEConvolveMatrixElement: true, SVGFEDiffuseLightingElement: true, SVGFEDisplacementMapElement: true, SVGFEDistantLightElement: true, SVGFEFloodElement: true, SVGFEFuncAElement: true, SVGFEFuncBElement: true, SVGFEFuncGElement: true, SVGFEFuncRElement: true, SVGFEGaussianBlurElement: true, SVGFEImageElement: true, SVGFEMergeElement: true, SVGFEMergeNodeElement: true, SVGFEMorphologyElement: true, SVGFEOffsetElement: true, SVGFEPointLightElement: true, SVGFESpecularLightingElement: true, SVGFESpotLightElement: true, SVGFETileElement: true, SVGFilterElement: true, SVGLinearGradientElement: true, SVGMarkerElement: true, SVGMaskElement: true, SVGMetadataElement: true, SVGPatternElement: true, SVGRadialGradientElement: true, SVGSetElement: true, SVGStopElement: true, SVGSymbolElement: true, SVGTitleElement: true, SVGViewElement: true, SVGGradientElement: true, SVGComponentTransferFunctionElement: true, SVGFEDropShadowElement: true, SVGMPathElement: true, SVGElement: false, SVGTransform: true, SVGTransformList: true, AudioBuffer: true, AnalyserNode: true, RealtimeAnalyserNode: true, AudioDestinationNode: true, AudioWorkletNode: true, ChannelMergerNode: true, AudioChannelMerger: true, ChannelSplitterNode: true, AudioChannelSplitter: true, ConvolverNode: true, DelayNode: true, DynamicsCompressorNode: true, GainNode: true, AudioGainNode: true, IIRFilterNode: true, MediaElementAudioSourceNode: true, MediaStreamAudioDestinationNode: true, MediaStreamAudioSourceNode: true, PannerNode: true, AudioPannerNode: true, webkitAudioPannerNode: true, ScriptProcessorNode: true, JavaScriptAudioNode: true, StereoPannerNode: true, WaveShaperNode: true, AudioNode: false, AudioParam: true, AudioParamMap: true, AudioBufferSourceNode: true, ConstantSourceNode: true, AudioScheduledSourceNode: false, AudioTrackList: true, AudioContext: true, webkitAudioContext: true, BaseAudioContext: false, BiquadFilterNode: true, OfflineAudioContext: true, OscillatorNode: true, Oscillator: true, WebGLActiveInfo: true, SQLResultSetRowList: true});
    H.NativeTypedArray.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfDouble_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfDouble.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H._NativeTypedArrayOfInt_NativeTypedArray_ListMixin_FixedLengthListMixin.$nativeSuperclassTag = "ArrayBufferView";
    H.NativeTypedArrayOfInt.$nativeSuperclassTag = "ArrayBufferView";
    W._SourceBufferList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    W._SourceBufferList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
    W._TextTrackList_EventTarget_ListMixin.$nativeSuperclassTag = "EventTarget";
    W._TextTrackList_EventTarget_ListMixin_ImmutableListMixin.$nativeSuperclassTag = "EventTarget";
  })();
  Function.prototype.call$0 = function() {
    return this();
  };
  Function.prototype.call$2 = function(a, b) {
    return this(a, b);
  };
  Function.prototype.call$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$3 = function(a, b, c) {
    return this(a, b, c);
  };
  Function.prototype.call$1$1 = function(a) {
    return this(a);
  };
  Function.prototype.call$4 = function(a, b, c, d) {
    return this(a, b, c, d);
  };
  Function.prototype.call$9 = function(a, b, c, d, e, f, g, h, i) {
    return this(a, b, c, d, e, f, g, h, i);
  };
  Function.prototype.call$6 = function(a, b, c, d, e, f) {
    return this(a, b, c, d, e, f);
  };
  Function.prototype.call$5 = function(a, b, c, d, e) {
    return this(a, b, c, d, e);
  };
  convertAllToFastObject(holders);
  convertToFastObject($);
  (function(callback) {
    if (typeof document === "undefined") {
      callback(null);
      return;
    }
    if (typeof document.currentScript != 'undefined') {
      callback(document.currentScript);
      return;
    }
    var scripts = document.scripts;
    function onLoad(event) {
      for (var i = 0; i < scripts.length; ++i)
        scripts[i].removeEventListener("load", onLoad, false);
      callback(event.target);
    }
    for (var i = 0; i < scripts.length; ++i)
      scripts[i].addEventListener("load", onLoad, false);
  })(function(currentScript) {
    init.currentScript = currentScript;
    if (typeof dartMainRunner === "function")
      dartMainRunner(F.main, []);
    else
      F.main([]);
  });
})();

//# sourceMappingURL=main.dart.js.map
